import { Base, IList, Type } from "./type";
import { ISupportsDataChangeNotifications } from "./ISupportsDataChangeNotifications";
import { List$1 } from "./List$1";
import { DataSourcePropertiesComparer } from "./DataSourcePropertiesComparer";
import { IComparer$1 } from "./IComparer$1";
import { IDataSource } from "./IDataSource";
import { SortDescriptionCollection } from "./SortDescriptionCollection";
import { SectionData } from "./SectionData";
import { IDataSourceSupportsIndexedAccess } from "./IDataSourceSupportsIndexedAccess";
/**
 * @hidden
 */
export declare class RearrangedListView extends Base implements ISupportsDataChangeNotifications {
    static $t: Type;
    private e;
    private ae;
    private l;
    readonly ag: IList;
    constructor(a: IDataSourceSupportsIndexedAccess);
    k(a: number): SectionData;
    private f;
    g: DataSourcePropertiesComparer;
    private aa;
    ac: IComparer$1<any>;
    private z;
    ab: IComparer$1<any>;
    private h;
    i: (item: any) => boolean;
    private m;
    n: ISupportsDataChangeNotifications;
    d: IDataSource;
    o: SortDescriptionCollection;
    p: SortDescriptionCollection;
    t: boolean;
    ay(): void;
    private ai;
    private aj;
    private ak;
    private al;
    private am;
    readonly af: List$1<SectionData>;
    w: boolean;
    v: boolean;
    x: boolean;
    private q;
    private at;
    private a;
    private b;
    private ap;
    a1(a: List$1<any[]>): void;
    private a2;
    private aq;
    private ar;
    private au;
    notifySetItem(a: number, b: any, c: any): void;
    private ao;
    private av;
    private as;
    private a4;
    private r;
    private c;
    private u;
    private ah;
    private a0;
    private aw;
    private a5;
    private s;
    private an;
    private ad;
    ax(a: any[]): void;
    a3(a: any[]): void;
    private j;
    private az;
    private y;
    notifyClearItems(): void;
    notifyInsertItem(a: number, b: any): void;
    notifyRemoveItem(a: number, b: any): void;
}
