/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { DefinitionBaseDescription } from "./DefinitionBaseDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export class ColumnDescription extends DefinitionBaseDescription {
    constructor() {
        super();
        this.br = 0;
        this.bt = 0;
        this.bs = 0;
        this.bq = 0;
        this.b1 = null;
        this.b2 = null;
        this.b0 = null;
        this.by = null;
        this.b3 = null;
        this.bz = null;
        this.bc = null;
        this.bo = 0;
        this.bg = false;
        this.be = false;
        this.ba = null;
        this.bf = false;
        this.bh = false;
        this.bi = false;
        this.b4 = null;
    }
    get_type() {
        return "Column";
    }
    get paddingLeft() {
        return this.br;
    }
    set paddingLeft(a) {
        this.br = a;
        this.e("PaddingLeft");
    }
    get paddingTop() {
        return this.bt;
    }
    set paddingTop(a) {
        this.bt = a;
        this.e("PaddingTop");
    }
    get paddingRight() {
        return this.bs;
    }
    set paddingRight(a) {
        this.bs = a;
        this.e("PaddingRight");
    }
    get paddingBottom() {
        return this.bq;
    }
    set paddingBottom(a) {
        this.bq = a;
        this.e("PaddingBottom");
    }
    get name() {
        return this.b1;
    }
    set name(a) {
        this.b1 = a;
        this.e("Name");
    }
    get propertyPath() {
        return this.b2;
    }
    set propertyPath(a) {
        this.b2 = a;
        this.e("PropertyPath");
    }
    get headerText() {
        return this.b0;
    }
    set headerText(a) {
        this.b0 = a;
        this.e("HeaderText");
    }
    get actualHeaderText() {
        return this.by;
    }
    set actualHeaderText(a) {
        this.by = a;
        this.e("ActualHeaderText");
    }
    get selectedBackground() {
        return this.b3;
    }
    set selectedBackground(a) {
        this.b3 = a;
        this.e("SelectedBackground");
    }
    get actualSelectedBackground() {
        return this.bz;
    }
    set actualSelectedBackground(a) {
        this.bz = a;
        this.e("ActualSelectedBackground");
    }
    get animationSettings() {
        return this.bc;
    }
    set animationSettings(a) {
        this.bc = a;
        this.e("AnimationSettings");
    }
    get minWidth() {
        return this.bo;
    }
    set minWidth(a) {
        this.bo = a;
        this.e("MinWidth");
    }
    get isFromMarkup() {
        return this.bg;
    }
    set isFromMarkup(a) {
        this.bg = a;
        this.e("IsFromMarkup");
    }
    get isAutoGenerated() {
        return this.be;
    }
    set isAutoGenerated(a) {
        this.be = a;
        this.e("IsAutoGenerated");
    }
    get filter() {
        return this.ba;
    }
    set filter(a) {
        this.ba = a;
        this.e("Filter");
    }
    get isFilteringEnabled() {
        return this.bf;
    }
    set isFilteringEnabled(a) {
        this.bf = a;
        this.e("IsFilteringEnabled");
    }
    get isHidden() {
        return this.bh;
    }
    set isHidden(a) {
        this.bh = a;
        this.e("IsHidden");
    }
    get shouldRemoveWhenHidden() {
        return this.bi;
    }
    set shouldRemoveWhenHidden(a) {
        this.bi = a;
        this.e("ShouldRemoveWhenHidden");
    }
    get sortDirection() {
        return this.b4;
    }
    set sortDirection(a) {
        this.b4 = a;
        this.e("SortDirection");
    }
}
ColumnDescription.$t = markType(ColumnDescription, 'ColumnDescription', DefinitionBaseDescription.$);
//# sourceMappingURL=ColumnDescription.js.map