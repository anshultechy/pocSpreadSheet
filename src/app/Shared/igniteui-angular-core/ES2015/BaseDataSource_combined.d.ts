import { Base, PropertyChangedEventArgs, Type } from "./type";
import { IDataSource } from "./IDataSource";
import { IExternalDataSource } from "./IExternalDataSource";
import { IDataSourceDataProvider } from "./IDataSourceDataProvider";
import { IDataSourceSchema } from "./IDataSourceSchema";
import { IDataSourceUpdateNotifier } from "./IDataSourceUpdateNotifier";
import { IDataSourceDataProviderUpdateNotifier } from "./IDataSourceDataProviderUpdateNotifier";
import { IDataSourceExecutionContext } from "./IDataSourceExecutionContext";
import { SortDescriptionCollection } from "./SortDescriptionCollection";
import { FilterExpressionCollection } from "./FilterExpressionCollection";
import { NotifyCollectionChangedEventArgs } from "./NotifyCollectionChangedEventArgs";
import { DataSourceSpecialRow } from "./DataSourceSpecialRow";
import { DataSourceSchemaChangedEventArgs } from "./DataSourceSchemaChangedEventArgs";
import { DataSourceRowType } from "./DataSourceRowType";
import { DataSourceSchemaPropertyType } from "./DataSourceSchemaPropertyType";
/**
 * @hidden
 */
export declare abstract class BaseDataSource extends Base implements IDataSource {
    static $t: Type;
    constructor();
    private bt;
    private a3;
    private a1;
    protected onSortDescriptionsChanged(a: NotifyCollectionChangedEventArgs): void;
    protected onGroupDescriptionsChanged(a: NotifyCollectionChangedEventArgs): void;
    protected aa: boolean;
    protected onFilterExpressionsChanged(a: NotifyCollectionChangedEventArgs): void;
    isPlaceholderItem(a: number): boolean;
    ah: any;
    m: IExternalDataSource;
    private o;
    private n;
    private e;
    private f;
    protected abstract readonly actualBaseDataProvider: IDataSourceDataProvider;
    private k;
    actualSchema: IDataSourceSchema;
    private ad;
    actualCount: number;
    private ae;
    firstVisibleIndexRequested: number;
    private af;
    lastVisibleIndexRequested: number;
    private l;
    updateNotifier: IDataSourceUpdateNotifier;
    getItemAtIndex(a: number): any;
    getItemProperty(a: any, b: string): any;
    getSpecialRowItemValue(a: DataSourceSpecialRow, b: string): any;
    getItemPropertyAtIndex(a: number, b: string): any;
    protected get_fullSectionInformationWillForceLoad(): boolean;
    readonly fullSectionInformationWillForceLoad: boolean;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    protected onPropertyUpdated(a: string, b: any, c: any): void;
    protected propertyUpdatedOverride(a: string, b: any, c: any): void;
    protected onActualPrimaryKeyChanged(a: string[], b: string[]): void;
    protected onActualPrimaryKeyChangedOverrride(a: string[], b: string[]): void;
    protected get_isVirtual(): boolean;
    readonly isVirtual: boolean;
    private h;
    protected readonly dataProviderUpdateNotifier: IDataSourceDataProviderUpdateNotifier;
    protected onActualDataProviderChanged(a: any, b: any): void;
    protected onRequestedVisibleRangeChanged(): void;
    private j;
    executionContext: IDataSourceExecutionContext;
    schemaChanged: (sender: any, args: DataSourceSchemaChangedEventArgs) => void;
    protected canInitialize(): boolean;
    private s;
    protected readonly isInitializing: boolean;
    protected get_isSortingSupported(): boolean;
    readonly isSortingSupported: boolean;
    protected get_isFilteringSupported(): boolean;
    readonly isFilteringSupported: boolean;
    readonly sortDescriptions: SortDescriptionCollection;
    readonly groupDescriptions: SortDescriptionCollection;
    readonly filterExpressions: FilterExpressionCollection;
    private r;
    deferAutoRefresh: boolean;
    private b;
    primaryKey: string[];
    private a;
    actualPrimaryKey: string[];
    private c;
    propertiesRequested: string[];
    private t;
    notifyUsingSourceIndexes: boolean;
    protected get_isItemIndexLookupSupported(): boolean;
    readonly isItemIndexLookupSupported: boolean;
    protected get_isKeyIndexLookupSupported(): boolean;
    readonly isKeyIndexLookupSupported: boolean;
    protected initializeOverride(): void;
    private u;
    protected resolveFullCount(a: number): number;
    private ay;
    private a5;
    onSetItem(a: number, b: any, c: any): void;
    onBroadcastSetItem(a: number, b: any, c: any): void;
    onSetItemOverride(a: number, b: any, c: any): void;
    onClearItems(): void;
    onBroadcastClearItems(): void;
    onClearItemsOverride(): void;
    onInsertItem(a: number, b: any): void;
    onBroadcastInsertItem(a: number, b: any): void;
    onInsertItemOverride(a: number, b: any): void;
    onRemoveItem(a: number, b: any): void;
    onBroadcastRemoveItem(a: number, b: any): void;
    onRemoveItemOverride(a: number, b: any): void;
    notifySetItem(a: number, b: any, c: any): void;
    notifyClearItems(): void;
    notifyInsertItem(a: number, b: any): void;
    notifyRemoveItem(a: number, b: any): void;
    p: boolean;
    queueAutoRefresh(): void;
    az(): void;
    br(): void;
    protected refreshInternalOverride(): void;
    flushAutoRefresh(): void;
    refresh(): void;
    indexOfItem(a: any): number;
    indexOfKey(a: any[]): number;
    protected getPrimaryKeyValue(a: any, b: any[]): void;
    getRowType(a: number): DataSourceRowType;
    getMainValuePath(a: DataSourceRowType): string;
    getStickyRows(): number[];
    isRowSpanning(a: DataSourceRowType): boolean;
    getStickyRowPriority(a: number): number;
    isExclusivelySticky(a: number): boolean;
    pinRow(a: any[]): void;
    unpinRow(a: any[]): void;
    clearPinnedRows(): void;
    isRowPinned(a: number): boolean;
    protected get_isGroupingSupported(): boolean;
    readonly isGroupingSupported: boolean;
    private w;
    shouldEmitSectionHeaders: boolean;
    private v;
    shouldEmitSectionFooters: boolean;
    private x;
    shouldEmitShiftedRows: boolean;
    private q;
    protected d: boolean[];
    protected ensureComparables(a: IDataSourceSchema): void;
    resolveSchemaPropertyType(a: string): DataSourceSchemaPropertyType;
}
/**
 * @hidden
 */
export declare class DefaultDataSourceDataProviderUpdateNotifier extends Base implements IDataSourceDataProviderUpdateNotifier {
    static $t: Type;
    private a;
    constructor(a: BaseDataSource);
    notifySetItem(a: number, b: any, c: any): void;
    notifyClearItems(): void;
    notifyInsertItem(a: number, b: any): void;
    notifyRemoveItem(a: number, b: any): void;
}
