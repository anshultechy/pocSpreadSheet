import { XYChartDescription } from "./XYChartDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare class FinancialChartDescription extends XYChartDescription {
    static $t: Type;
    protected get_type(): string;
    constructor();
    private id;
    leftMargin: number;
    private ht;
    isHorizontalZoomEnabled: boolean;
    private ih;
    toolbarHeight: number;
    private hz;
    yAxisIsLogarithmic: boolean;
    private i6;
    yAxisLogarithmBase: number;
    private ij;
    yAxisInterval: number;
    private il;
    yAxisMinimumValue: number;
    private ik;
    yAxisMaximumValue: number;
    private im;
    yAxisMinorInterval: number;
    private jf;
    volumeType: string;
    private jg;
    xAxisMode: string;
    private jj;
    yAxisMode: string;
    private hv;
    isToolbarVisible: boolean;
    private je;
    chartType: string;
    private jh;
    yAxisLabelHorizontalAlignment: string;
    private hx;
    isWindowSyncedToVisibleRange: boolean;
    private g7;
    indicatorTypes: string[];
    private hc;
    overlayTypes: string[];
    private hy;
    yAxisAbbreviateLargeNumbers: boolean;
    private ig;
    resolution: number;
    private ji;
    yAxisLabelLocation: string;
    private jk;
    zoomSliderType: string;
    private g8;
    negativeBrushes: string[];
    private g9;
    negativeOutlines: string[];
    private ha;
    overlayBrushes: string[];
    private hb;
    overlayOutlines: string[];
    private hf;
    volumeOutlines: string[];
    private he;
    volumeBrushes: string[];
    private g6;
    indicatorNegativeBrushes: string[];
    private g4;
    indicatorBrushes: string[];
    private ii;
    volumeThickness: number;
    private ie;
    overlayThickness: number;
    private ic;
    indicatorThickness: number;
    private g5;
    indicatorDisplayTypes: string[];
    private i2;
    indicatorPeriod: number;
    private ib;
    indicatorMultiplier: number;
    private i5;
    indicatorSmoothingPeriod: number;
    private i3;
    indicatorShortPeriod: number;
    private i1;
    indicatorLongPeriod: number;
    private i4;
    indicatorSignalPeriod: number;
    private hd;
    rangeSelectorOptions: string[];
    private g3;
    customIndicatorNames: string[];
    private hw;
    isVerticalZoomEnabled: boolean;
    private jl;
    zoomSliderXAxisMajorStroke: string;
    private io;
    zoomSliderXAxisMajorStrokeThickness: number;
    private hu;
    isLegendVisible: boolean;
    private h8;
    xAxisMinimumValue: Date;
    private h7;
    xAxisMaximumValue: Date;
    private jd;
    ApplyCustomIndicatorsRef: string;
}
