{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://igniteui-angular/lib/animations/easings.ts","ng://igniteui-angular/lib/animations/fade/index.ts","ng://igniteui-angular/lib/animations/flip/index.ts","ng://igniteui-angular/lib/animations/rotate/index.ts","ng://igniteui-angular/lib/animations/misc/shake.ts","ng://igniteui-angular/lib/animations/misc/pulsate.ts","ng://igniteui-angular/lib/animations/scale/index.ts","ng://igniteui-angular/lib/animations/slide/index.ts","ng://igniteui-angular/lib/animations/swing/index.ts","ng://igniteui-angular/lib/animations/grow/index.ts","ng://igniteui-angular/lib/core/navigation/nav.service.ts","ng://igniteui-angular/lib/core/navigation/directives.ts","ng://igniteui-angular/lib/core/utils.ts","ng://igniteui-angular/lib/data-operations/sorting-expression.interface.ts","ng://igniteui-angular/lib/data-operations/sorting-strategy.ts","ng://igniteui-angular/lib/data-operations/grouping-strategy.ts","ng://igniteui-angular/lib/data-operations/paging-state.interface.ts","ng://igniteui-angular/lib/data-operations/filtering-expressions-tree.ts","ng://igniteui-angular/lib/services/transaction/transaction.ts","ng://igniteui-angular/lib/grids/api.service.ts","ng://igniteui-angular/lib/data-operations/filtering-expression.interface.ts","ng://igniteui-angular/lib/data-operations/filtering-strategy.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.filtering.pipe.ts","ng://igniteui-angular/lib/data-operations/data-util.ts","ng://igniteui-angular/lib/services/exporter-common/export-utilities.ts","ng://igniteui-angular/lib/services/exporter-common/base-export-service.ts","ng://igniteui-angular/lib/services/csv/char-separated-value-data.ts","ng://igniteui-angular/lib/services/exporter-common/exporter-options-base.ts","ng://igniteui-angular/lib/services/csv/csv-exporter-options.ts","ng://igniteui-angular/lib/services/csv/csv-exporter.ts","ng://igniteui-angular/lib/services/excel/excel-enums.ts","ng://igniteui-angular/lib/services/excel/excel-strings.ts","ng://igniteui-angular/lib/services/excel/excel-files.ts","ng://igniteui-angular/lib/services/excel/excel-folders.ts","ng://igniteui-angular/lib/services/excel/excel-elements-factory.ts","ng://igniteui-angular/lib/services/excel/worksheet-data-dictionary.ts","ng://igniteui-angular/lib/services/excel/worksheet-data.ts","ng://igniteui-angular/lib/services/excel/excel-exporter.ts","ng://igniteui-angular/lib/services/excel/excel-exporter-options.ts","ng://igniteui-angular/lib/services/overlay/utilities.ts","ng://igniteui-angular/lib/services/overlay/position/global-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/NoOpScrollStrategy.ts","ng://igniteui-angular/lib/core/deprecateDecorators.ts","ng://igniteui-angular/lib/services/overlay/overlay.ts","ng://igniteui-angular/lib/services/overlay/position/connected-positioning-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/base-fit-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/auto-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/position/elastic-position-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/absolute-scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/block-scroll-strategy.ts","ng://igniteui-angular/lib/services/overlay/scroll/close-scroll-strategy.ts","ng://igniteui-angular/lib/services/transaction/base-transaction.ts","ng://igniteui-angular/lib/services/transaction/igx-transaction.ts","ng://igniteui-angular/lib/services/transaction/igx-hierarchical-transaction.ts","ng://igniteui-angular/lib/directives/toggle/toggle.directive.ts","ng://igniteui-angular/lib/drop-down/drop-down.common.ts","ng://igniteui-angular/lib/core/selection.ts","ng://igniteui-angular/lib/drop-down/drop-down-group.component.ts","ng://igniteui-angular/lib/drop-down/drop-down-item.base.ts","ng://igniteui-angular/lib/drop-down/drop-down-item.component.ts","ng://igniteui-angular/lib/core/displayDensity.ts","ng://igniteui-angular/lib/drop-down/drop-down.base.ts","ng://igniteui-angular/lib/directives/for-of/display.container.ts","ng://igniteui-angular/lib/directives/for-of/horizontal.virtual.helper.component.ts","ng://igniteui-angular/lib/directives/for-of/virtual.helper.component.ts","ng://igniteui-angular/lib/directives/scroll-inertia/scroll_inertia.directive.ts","ng://igniteui-angular/lib/directives/for-of/for_of.sync.service.ts","ng://igniteui-angular/lib/directives/for-of/for_of.directive.ts","ng://igniteui-angular/lib/drop-down/drop-down.component.ts","ng://igniteui-angular/lib/drop-down/drop-down-navigation.directive.ts","ng://igniteui-angular/lib/drop-down/index.ts","ng://igniteui-angular/lib/directives/hint/hint.directive.ts","ng://igniteui-angular/lib/input-group/input-group.common.ts","ng://igniteui-angular/lib/directives/input/input.directive.ts","ng://igniteui-angular/lib/directives/label/label.directive.ts","ng://igniteui-angular/lib/directives/prefix/prefix.directive.ts","ng://igniteui-angular/lib/directives/suffix/suffix.directive.ts","ng://igniteui-angular/lib/input-group/input-group.component.ts","ng://igniteui-angular/lib/directives/autocomplete/autocomplete.directive.ts","ng://igniteui-angular/lib/directives/button/button.directive.ts","ng://igniteui-angular/lib/directives/divider/divider.directive.ts","ng://igniteui-angular/lib/directives/dragdrop/dragdrop.directive.ts","ng://igniteui-angular/lib/directives/filter/filter.directive.ts","ng://igniteui-angular/lib/directives/focus/focus.directive.ts","ng://igniteui-angular/lib/directives/layout/layout.directive.ts","ng://igniteui-angular/lib/directives/mask/mask-helper.ts","ng://igniteui-angular/lib/directives/mask/mask.directive.ts","ng://igniteui-angular/lib/radio/radio.component.ts","ng://igniteui-angular/lib/directives/ripple/ripple.directive.ts","ng://igniteui-angular/lib/directives/radio/radio-group.directive.ts","ng://igniteui-angular/lib/directives/text-highlight/text-highlight.directive.ts","ng://igniteui-angular/lib/directives/text-selection/text-selection.directive.ts","ng://igniteui-angular/lib/directives/tooltip/tooltip.directive.ts","ng://igniteui-angular/lib/data-operations/filtering-condition.ts","ng://igniteui-angular/lib/data-operations/filtering-state.interface.ts","ng://igniteui-angular/lib/data-operations/groupby-record.interface.ts","ng://igniteui-angular/lib/icon/icon.service.ts","ng://igniteui-angular/lib/icon/icon.component.ts","ng://igniteui-angular/lib/icon/index.ts","ng://igniteui-angular/lib/avatar/avatar.component.ts","ng://igniteui-angular/lib/badge/badge.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel-body.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.common.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.directives.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel-header.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.component.ts","ng://igniteui-angular/lib/expansion-panel/expansion-panel.module.ts","ng://igniteui-angular/lib/banner/banner.directives.ts","ng://igniteui-angular/lib/banner/banner.component.ts","ng://igniteui-angular/lib/buttonGroup/buttonGroup.component.ts","ng://igniteui-angular/lib/core/dates/dateRange.ts","ng://igniteui-angular/lib/calendar/calendar.ts","ng://igniteui-angular/lib/calendar/calendar.directives.ts","ng://igniteui-angular/lib/calendar/calendar-base.ts","ng://igniteui-angular/lib/calendar/month-picker-base.ts","ng://igniteui-angular/lib/calendar/months-view/months-view.component.ts","ng://igniteui-angular/lib/calendar/years-view/years-view.component.ts","ng://igniteui-angular/lib/calendar/days-view/day-item.component.ts","ng://igniteui-angular/lib/calendar/days-view/days-view.component.ts","ng://igniteui-angular/lib/calendar/calendar.component.ts","ng://igniteui-angular/lib/calendar/month-picker/month-picker.component.ts","ng://igniteui-angular/lib/calendar/calendar.module.ts","ng://igniteui-angular/lib/card/card.component.ts","ng://igniteui-angular/lib/carousel/carousel.component.ts","ng://igniteui-angular/lib/checkbox/checkbox.component.ts","ng://igniteui-angular/lib/chips/chip.component.ts","ng://igniteui-angular/lib/chips/chips-area.component.ts","ng://igniteui-angular/lib/chips/chips.module.ts","ng://igniteui-angular/lib/combo/combo.directives.ts","ng://igniteui-angular/lib/combo/combo.api.ts","ng://igniteui-angular/lib/combo/combo-item.component.ts","ng://igniteui-angular/lib/combo/combo-add-item.component.ts","ng://igniteui-angular/lib/combo/combo-dropdown.component.ts","ng://igniteui-angular/lib/combo/combo.common.ts","ng://igniteui-angular/lib/combo/combo.pipes.ts","ng://igniteui-angular/lib/combo/combo.component.ts","ng://igniteui-angular/lib/date-picker/date-picker.utils.ts","ng://igniteui-angular/lib/date-picker/date-picker.pipes.ts","ng://igniteui-angular/lib/date-picker/date-picker.common.ts","ng://igniteui-angular/lib/date-picker/date-picker.directives.ts","ng://igniteui-angular/lib/core/enums.ts","ng://igniteui-angular/lib/date-picker/calendar-container.component.ts","ng://igniteui-angular/lib/date-picker/date-picker.component.ts","ng://igniteui-angular/lib/dialog/dialog.directives.ts","ng://igniteui-angular/lib/dialog/dialog.component.ts","ng://igniteui-angular/lib/grids/summaries/grid-summary.ts","ng://igniteui-angular/lib/core/grid-selection.ts","ng://igniteui-angular/lib/grids/row.component.ts","ng://igniteui-angular/lib/grids/grid-column-resizing.service.ts","ng://igniteui-angular/lib/grids/grid.common.ts","ng://igniteui-angular/lib/grids/column.component.ts","ng://igniteui-angular/lib/grids/cell.component.ts","ng://igniteui-angular/lib/grids/column-chooser-item-base.ts","ng://igniteui-angular/lib/grids/column-hiding-item.directive.ts","ng://igniteui-angular/lib/grids/column-chooser-base.ts","ng://igniteui-angular/lib/grids/column-hiding.component.ts","ng://igniteui-angular/lib/grids/column-pinning.component.ts","ng://igniteui-angular/lib/grids/grid-toolbar.component.ts","ng://igniteui-angular/lib/grids/grid.rowEdit.directive.ts","ng://igniteui-angular/lib/grids/grid/groupby-row.component.ts","ng://igniteui-angular/lib/grids/grid-navigation.service.ts","ng://igniteui-angular/lib/grids/filtering/svgIcons.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering.service.ts","ng://igniteui-angular/lib/grids/watch-changes.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-search.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-default-expression.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-date-expression.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-custom-dialog.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-sorting.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/grid.excel-style-filtering.component.ts","ng://igniteui-angular/lib/grids/grid-header.component.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering-cell.component.ts","ng://igniteui-angular/lib/grids/grid-header-group.component.ts","ng://igniteui-angular/lib/core/i18n/resources.ts","ng://igniteui-angular/lib/core/i18n/grid-resources.ts","ng://igniteui-angular/lib/core/i18n/time-picker-resources.ts","ng://igniteui-angular/lib/grids/summaries/grid-summary.service.ts","ng://igniteui-angular/lib/grids/summaries/summary-cell.component.ts","ng://igniteui-angular/lib/grids/summaries/summary-row.component.ts","ng://igniteui-angular/lib/grids/drag-select.directive.ts","ng://igniteui-angular/lib/directives/template-outlet/template_outlet.directive.ts","ng://igniteui-angular/lib/grids/grid-column-resizer.component.ts","ng://igniteui-angular/lib/grids/filtering/grid-filtering-row.component.ts","ng://igniteui-angular/lib/grids/grid-base.component.ts","ng://igniteui-angular/lib/grids/grid-footer/grid-footer.component.ts","ng://igniteui-angular/lib/grids/summaries/grid-root-summary.pipe.ts","ng://igniteui-angular/lib/progressbar/progressbar.common.ts","ng://igniteui-angular/lib/progressbar/progressbar.component.ts","ng://igniteui-angular/lib/select/select-group.component.ts","ng://igniteui-angular/lib/select/select-item.component.ts","ng://igniteui-angular/lib/select/select-positioning-strategy.ts","ng://igniteui-angular/lib/select/select.component.ts","ng://igniteui-angular/lib/select/select-navigation.directive.ts","ng://igniteui-angular/lib/select/select.module.ts","ng://igniteui-angular/lib/paginator/paginator.component.ts","ng://igniteui-angular/lib/grids/grid-common.pipes.ts","ng://igniteui-angular/lib/grids/grid-pipes.module.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-column-moving.component.ts","ng://igniteui-angular/lib/list/list.common.ts","ng://igniteui-angular/lib/core/touch.ts","ng://igniteui-angular/lib/list/list-item.component.ts","ng://igniteui-angular/lib/list/list.component.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/excel-style-search.pipe.ts","ng://igniteui-angular/lib/grids/filtering/excel-style/grid.excel-style-filtering.module.ts","ng://igniteui-angular/lib/grids/row-drag.directive.ts","ng://igniteui-angular/lib/grids/grid-common.module.ts","ng://igniteui-angular/lib/grids/grid/grid-api.service.ts","ng://igniteui-angular/lib/grids/grid/grid.directives.ts","ng://igniteui-angular/lib/grids/grid-mrl-navigation.service.ts","ng://igniteui-angular/lib/grids/grid/grid.component.ts","ng://igniteui-angular/lib/grids/grid/grid.pipes.ts","ng://igniteui-angular/lib/grids/grid/grid-row.component.ts","ng://igniteui-angular/lib/grids/grid/grid.summary.pipe.ts","ng://igniteui-angular/lib/grids/grid/grid.module.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-api.service.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-navigation.service.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.directives.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid-row.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.pipes.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-cell.component.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.summary.pipe.ts","ng://igniteui-angular/lib/grids/tree-grid/tree-grid.module.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/selection.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-navigation.service.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-base.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid-api.service.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/row-island-api.service.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/row-island.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/child-grid-row.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-cell.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-row.component.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.pipes.ts","ng://igniteui-angular/lib/grids/hierarchical-grid/hierarchical-grid.module.ts","ng://igniteui-angular/lib/navbar/navbar.component.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.directives.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.component.ts","ng://igniteui-angular/lib/navigation-drawer/navigation-drawer.module.ts","ng://igniteui-angular/lib/slider/slider.common.ts","ng://igniteui-angular/lib/slider/thumb/thumb-slider.component.ts","ng://igniteui-angular/lib/slider/slider.component.ts","ng://igniteui-angular/lib/snackbar/snackbar.component.ts","ng://igniteui-angular/lib/switch/switch.component.ts","ng://igniteui-angular/lib/tabbar/tabbar.component.ts","ng://igniteui-angular/lib/tabs/tabs.common.ts","ng://igniteui-angular/lib/tabs/tabs.directives.ts","ng://igniteui-angular/lib/tabs/tabs-group.component.ts","ng://igniteui-angular/lib/tabs/tab-item.component.ts","ng://igniteui-angular/lib/tabs/tabs.component.ts","ng://igniteui-angular/lib/time-picker/time-picker.directives.ts","ng://igniteui-angular/lib/time-picker/time-picker.common.ts","ng://igniteui-angular/lib/time-picker/time-picker.pipes.ts","ng://igniteui-angular/lib/time-picker/time-picker.component.ts","ng://igniteui-angular/lib/toast/toast.component.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","quad","cubic","quart","quint","sine","expo","circ","back","base","style","opacity","animate","baseParams","delay","duration","easing","EaseOut","endOpacity","startOpacity","fadeIn","animation","params","fadeOut","baseRecipe","backfaceVisibility","transformStyle","keyframes","offset","transform","endAngle","endDistance","rotateX","rotateY","rotateZ","startAngle","startDistance","flipTop","flipBottom","flipLeft","flipRight","flipHorFwd","flipHorBck","flipVerFwd","flipVerBck","transformOrigin","baseInParams","xPos","yPos","baseOutParams","EaseIn","rotateInCenter","rotateOutCenter","rotateInTop","rotateOutTop","rotateInRight","rotateOutRight","rotateInBottom","rotateOutBottom","rotateInLeft","rotateOutLeft","rotateInTr","rotateOutTr","rotateInBr","rotateOutBr","rotateInBl","rotateOutBl","rotateInTl","rotateOutTl","rotateInDiagonal1","rotateOutDiagonal1","rotateInDiagonal2","rotateOutDiagonal2","rotateInHor","rotateOutHor","rotateInVer","rotateOutVer","direction","shakeHor","shakeVer","shakeTop","shakeBottom","shakeRight","shakeLeft","shakeCenter","shakeTr","shakeBr","shakeBl","shakeTl","heartbeatBase","animationTimingFunction","pulsateBase","pulsateParams","fromScale","toScale","blinkBase","pulsateFwd","pulsateBck","heartbeat","blink","midScale","scaleInCenter","scaleInBl","scaleInVerCenter","scaleInTop","scaleInLeft","scaleInVerTop","scaleInTr","scaleInTl","scaleInVerBottom","scaleInRight","scaleInHorCenter","scaleInBr","scaleInHorLeft","scaleInBottom","scaleInHorRight","scaleOutCenter","scaleOutBl","scaleOutBr","scaleOutVerCenter","scaleOutVerTop","scaleOutVerBottom","scaleOutTop","scaleOutLeft","scaleOutTr","scaleOutTl","scaleOutRight","scaleOutBottom","scaleOutHorCenter","scaleOutHorLeft","scaleOutHorRight","fromPosition","toPosition","slideInTop","slideInLeft","slideInRight","slideInBottom","slideInTr","slideInTl","slideInBr","slideInBl","slideOutTop","slideOutRight","slideOutBottom","slideOutLeft","slideOutTr","slideOutBr","slideOutBl","slideOutTl","swingBase","swingParams","swingOutParams","swingInTopFwd","swingInRightFwd","swingInBottomFwd","swingInLeftFwd","swingInTopBck","swingInRightBck","swingInBottomBck","swingInLeftBck","swingOutTopFwd","swingOutRightFwd","swingOutBottomFwd","swingOutLefttFwd","swingOutTopBck","swingOutRightBck","swingOutBottomBck","swingOutLeftBck","height","startHeight","endHeight","growVerIn","growVerOut","IgxNavigationService","navs","add","id","navItem","remove","get","toggle","args","_i","_a","open","close","IgxNavigationToggleDirective","nav","state","toggleNavigationDrawer","Directive","selector","Input","HostListener","IgxNavigationCloseDirective","closeNavigationDrawer","IgxNavigationModule","NgModule","declarations","exports","providers","cloneArray","array","deep","arr","cloneValue","mergeObjects","obj1","obj2","isObject","Error","_b","tslib_1.__values","keys","_c","isDate","Date","getTime","isArray","Map","Set","result","toString","getNodeSizeViaRange","range","node","overflow","isIE","isEdge","selectNodeContents","width","getBoundingClientRect","navigator","appVersion","indexOf","test","userAgent","isLeftClick","event","button","flatten","forEach","el","children","toArray","NAVIGATION_KEYS","ROW_EXPAND_KEYS","split","ROW_COLLAPSE_KEYS","SUPPORTED_KEYS","from","None","Asc","Desc","DefaultSortingStrategy","instance","_instance","sort","data","fieldName","dir","ignoreCase","valueResolver","_this","reverse","SortingDirection","arraySort","compareObjects","compareValues","a","an","undefined","bn","toLowerCase","compareFn","IgxSorting","expressions","sortDataRecursive","groupedRecordsByExpression","index","expression","groupval","res","len","getFieldValue","comparer","groupingComparer","expressionIndex","j","expr","gbData","gbDataLen","exprsLen","dataLen","strategy","groupDataRecursive","level","parent","grid","groupsRecords","fullResult","expansion","group","this_1","groupRow","records","groupParent","groups","renderedRowHeight","hierarchy","DataUtil","getHierarchy","expandState","find","isHierarchyMatch","expanded","defaultExpanded","recursiveResult","group_1","group_1_1","groupItem","slice","obj","IgxDataRecordSorting","tslib_1.__extends","IgxGrouping","groupBy","IncorrectPageIndex","IncorrectRecordsPerPage","FilteringExpressionsTree","operator","filteringOperands","findIndex","isFilteringExpressionsTreeForColumn","expressionsTree","ADD","DELETE","UPDATE","GridBaseAPIService","editCellState","editRowState","destroyMap","get_column_by_name","name","columnList","col","field","get_summary_data","filteredData","transactions","enabled","mergeTransactions","getAggregatedChanges","primaryKey","getTransactionLog","filter","type","TransactionType","map","rowID","rec","splice","getRowData","get_all_data","get_row_index_in_data","escape_editMode","crudService","end","get_cell_inEditMode","cell","record","get_row_by_key","rowSelector","dataRowList","row","rowData","get_row_by_index","rowIndex","rowList","get_cell_by_key","cells","column","get_cell_by_index","columnIndex","get_cell_by_visible_index","visibleColumnIndex","submit_value","update_cell","editValue","cancel","createEditEventArgs","onCellEdit","emit","newValue","castToNumber","oldValue","summaryService","clearSummaryCache","updateData","selection","is_item_selected","deselect_item","select_item","hasSummarizedColumns","removeSummaries","rowEditable","_pipeTrigger","rowValueInDataSource","rowCurrentValue","rowNewValue","transaction","_update_row","rowInEditMode","newData","getAggregatedValue","transactionState","lastCommitedValue","getState","update_row","selected","hasSummarized","onRowEdit","hasChanges","endPending","newId","update_row_in_array","remove_grouping_expression","sortingState","sortingExpressions","prepare_sorting_expression","sort_multiple","expressions_1","expressions_1_1","each","term","conditionOrExpressionsTree","filteringTree","filteringExpressionsTree","endEdit","paging","page","fieldFilterIndex","prepare_filtering_expression","filter_global","condition","columns","filteringIgnoreCase","clear_filter","filteringState","clear_sort","searchVal","insertAtIndex","newExpressionsTree","oldExpressionsTreeIndex","newExpression","stateCollections","maxCollection","maxExpr","collection","myExpr","should_apply_number_style","dataType","DataType","Number","get_data","includeTransactions","dataWithAddedInTransactionRows","get_filtered_data","getSortStrategyPerColumn","sortStrategy","addRowToData","deleteRowFromData","recordRef","deleteRowById","rowId","hasRowInNonDeletedState","onRowDeleted","rowSelectable","deselectRows","checkHeaderCheckboxStatus","cdr","markForCheck","dataAfterDelete","refreshSearch","perPage","get_row_id","row_deleted_transaction","atInexistingPage","totalPages","Injectable","And","Or","BaseFilteringStrategy","findMatchByExpression","cond","val","logic","matchRecord","matchOperand","operand","FilteringLogic","FilteringStrategy","TreeGridFilteringStrategy","filterImpl","cloneTreeGridRecord","filteredChildren","isFilteredOutParent","IgxTreeGridFilteringPipe","gridAPI","hierarchyData","pipeTrigger","resetFilteredOutProperty","expandAllRecursive","expansionStates","expandedStates","updateNonProcessedRecord","set","Pipe","pure","String","Boolean","sorting","treeGridSort","hierarchicalData","hr","hierarchicalRecord","grouping","recordsPerPage","countPages","countRecords","PagingError","isNaN","Math","ceil","treeGridFilter","correctPagingState","maxPage","gRow","unshift","h1","h2","every","deleteRows","item","mergeHierarchicalTransactions","childDataKey","path","parent_1","findParentFromPath","updateIndex","x","deleteIndex","transactions_1","transactions_1_1","path_1","path_1_1","ExportUtilities","getKeysFromData","dataEntry","dataEntryMiddle","floor","dataEntryLast","keys1","keys2","keys3","isSpecialData","saveBlobToFile","blob","fileName","document","createElement","window","msSaveOrOpenBlob","url","URL","createObjectURL","download","href","body","appendChild","click","removeChild","revokeObjectURL","stringToArrayBuffer","buf","ArrayBuffer","view","Uint8Array","charCodeAt","hasValue","isNullOrWhitespaces","trim","IgxBaseExporter","flatRecords","_isTreeGrid","_indexOfLastPinnedColumn","_sort","onRowExport","EventEmitter","onColumnExport","export","options","_columnList","hiddenColumns","lastVisbleColumnIndex","columnHeader","header","exportColumn","hidden","ignoreColumnsVisibility","ignoreColumnsOrder","visibleIndex","columnInfo","skip","formatter","skipFormatter","max","pinned","hiddenColumn","prepareData","exportData","k","skippedPinnedColumnsCount","columnsWithoutHeaderCount","columnExportArgs","dataToExport","exportRow","exportDataImplementation","resetDefaults","rowArgs","reduce","rawValue","originalRowData","rootRecords","prepareHierarchicalData","ignoreFiltering","filteringLogic","ignoreSorting","Output","CharSeparatedValueData","_data","valueDelimiter","_headerRecord","_dataRecords","_eor","_escapeCharacters","_delimiterLength","_isSpecialData","setDelimiter","_delimiter","processHeaderRecord","processDataRecords","processField","escapeChars","safeValue","some","v","includes","recordData","keys_1","keys_1_1","keyName","processRecord","keys_2","keys_2_1","currentData","dataRecords","currentData_1","currentData_1_1","IgxExporterOptionsBase","_fileExtension","setFileName","_fileName","endsWith","IgxCsvExporterOptions","fileType","_super","getExtensionFromFileType","setFileType","fType","extension","CsvFileTypes","CSV","TSV","TAB","_valueDelimiter","_fileType","oldExt","pop","newName","replace","IgxCsvExporterService","onExportEnded","csvData","_stringData","saveFile","exportFile","Blob","RootExcelFolder","RootRelsExcelFolder","DocPropsExcelFolder","XLExcelFolder","XLRelsExcelFolder","ThemeExcelFolder","WorksheetsExcelFolder","WorksheetsRelsExcelFolder","TablesExcelFolder","RootRelsFile","AppFile","CoreFile","WorkbookRelsFile","ThemeFile","WorksheetFile","StyleFile","WorkbookFile","ContentTypesFile","SharedStringsFile","WorksheetRelsFile","TablesFile","ExcelStrings","getRels","XML_STRING","getApp","getCore","getTheme","getStyles","hasNonStringValues","cellXFCount","getWorkbook","getWorksheetRels","getWorkbookRels","hasSharedStrings","retVal","SHARED_STRING_RELATIONSHIP","getSheetXML","dimension","freezePane","cols","sheetData","hasTable","hasGroupedRows","outlineLevel","tableParts","sheetOutlineProp","sOutlineLevel","getSharedStringXML","count","uniqueCount","table","getContentTypesXML","contentTypes","getTablesXML","tableColumns","getExcelColumn","returnString","char","fromCharCode","writeElement","folder","worksheetData","file","isEmpty","dictionary","dataDictionary","maxOutlineLevel","rowHeight","columnCount","saveValue","rowCount","isTreeGridData","sCollapsed","sHidden","hasCollapsedParent","rowOutlineLevel","cellData","getCellData","columnWidths","widthInTwips","columnWidth","MIN_WIDTH","indexOfLastPinnedColumn","ignorePinning","frozenColumnCount","exportAsTable","join","columnName","cellValue","savedValue","isSavedAsString","dict","sortedValues","getKeys","sharedStrings","sortedValues_1","sortedValues_1_1","getSanitizedValue","stringsCount","lastColumn","values","sortString","sortingExpression","sc","childFiles","ExcelFileTypes","childFolders","ExcelFolderTypes","ExcelElementsFactory","getExcelFolder","getExcelFile","WorksheetDataDictionary","_dictionary","_widthsDictionary","_counter","dirtyKeyCollections","_calculateColumnWidth","_columnWidths","_columnTypeInfo","fill","isHeader","sanitizedValue","sanitizeValue","getTextWidth","maxWidth","getValue","_keysAreValid","_keys","metrics","getContext","measureText","TEXT_PADDING","_context","canvas","font","DEFAULT_FONT","WorksheetData","initializeData","_columnCount","_rowCount","_dataDictionary","actualData","IgxExcelExporterService","populateFolder","zip","_d","childFolder","folderIntance","zipFolder","folderName","_e","_f","childFile","maxLevel_1","_xlsx","JSZip","rootFolder","generateAsync","ZIP_OPTIONS","then","xlsx","atob","compression","IgxExcelExporterOptions","_columnWidth","_rowHeight","Left","Center","Right","Top","Middle","Bottom","Point","y","Util","getTargetRect","settings","targetRect","bottom","left","right","top","HTMLElement","targetPoint","getViewportRect","documentElement","clientWidth","clientHeight","scrollPosition","getViewportScrollPosition","documentRect","horizontalScrollPosition","scrollLeft","scrollX","verticalScrollPosition","scrollTop","scrollY","cloneInstance","object","clonedObj","getPrototypeOf","GlobalPositionStrategy","_defaultSettings","horizontalDirection","HorizontalAlignment","verticalDirection","VerticalAlignment","horizontalStartPoint","verticalStartPoint","openAnimation","closeAnimation","minSize","position","contentElement","size","initialCall","classList","parentElement","justifyContent","alignItems","clone","scrollContainer","NoOpScrollStrategy","initialize","overlayService","attach","detach","ScrollStrategy","DeprecateMethod","message","isMessageShown","descriptor","originalMethod_1","targetName","showMessage","DeprecateProperty","getter_1","setter_1","messageToDisplay","originalDescriptor","newKey","generateUniqueKey","configurable","enumerable","isDevMode","console","warn","warningShown","IgxOverlayService","_factoryResolver","_appRef","_injector","builder","_zone","_componentId","_overlayInfos","destroy$","Subject","positionStrategy","scrollStrategy","modal","closeOnOutsideClick","onOpening","onOpened","onClosing","onClosed","onAnimation","documentClicked","ev","info","elementRef","nativeElement","contains","positionTarget","clickOnPositionTarget","positionTargetRect","clientX","clientY","excludePositionTarget","closeAnimationPlayer","hasStarted","_hide","repositionAll","reposition","_document","component","moduleRef","getOverlayInfo","show","compOrId","getOverlayById","_show","hide","hideAll","overlayInfo","contentElementRect","eventArgs","componentRef","detachView","hostView","destroy","elementRect","initialSize","hook","placeElementHook","moveElementToOverlay","changeDetectorRef","detectChanges","updateSize","addOutsideClickListener","addResizeHandler","setupModalWrapper","playOpenAnimation","visibility","removeOutsideClickListener","removeResizeHandler","child","parentNode","applyAnimationParams","playCloseAnimation","onCloseDone","ngZone","ElementRef","dynamicFactory","factoryResolver","componentFactoryResolver","resolveComponentFactory","injector","dynamicComponent","attachView","element","location","insertBefore","wrapperElement","getWrapperElement","getContentElement","getOverlayElement","elementScrollTop","wrapper","content","addEventListener","stopPropagation","outlet","_overlayElement","fromEvent","pipe","takeUntil","subscribe","cleanUp","openAnimationPlayer","animationBuilder","build","innerRenderer","_renderer","openAnimationInnerPlayer","engine","players","onDone","reset","closeAnimationInnerPlayer","getPosition","init","setPosition","animationPlayer","animationType","play","animationOptions","transitionDuration","transitionTimingFunction","shouldRemoveClickEventListener_1","removeEventListener","closingOverlaysCount","defaultView","ngOnDestroy","complete","providedIn","ComponentFactoryResolver","ApplicationRef","Injector","AnimationBuilder","Inject","DOCUMENT","NgZone","ConnectedPositioningStrategy","setStyle","startPoint","wrapperRect","round","BaseFitPositionStrategy","connectedFit","_initialSettings","viewPortRect","updateViewPortFit","fitHorizontal","fitVertical","fitInViewport","calculateLeft","calculateTop","AutoPositionStrategy","transformString","canFlipHorizontal","flipHorizontal","horizontalPush","canFlipVertical","flipVertical","verticalPush","flippedStartPoint","flippedDirection","leftBorder","rightBorder","topBorder","bottomBorder","leftExtend","rightExtend","abs","min","topExtend","bottomExtend","ElasticPositionStrategy","maxReduction","reduction","translation","AbsoluteScrollStrategy","_initialized","onScroll","_overlayService","_scrollContainer","_id","runOutsideAngular","addScrollEventListener","BlockScrollStrategy","preventDefault","_sourceElement","_initialScrollTop","_initialScrollLeft","onWheel","stopImmediatePropagation","CloseScrollStrategy","cumulativeScrollTop","cumulativeScrollLeft","initialScrollTop","_threshold","initialScrollLeft","scrollHeight","IgxBaseTransactionService","_isPending","_pendingTransactions","_pendingStates","onStateUpdate","updateState","undo","redo","mergeChanges","updateValue","commit","clear","startPending","states","mergeValues","first","second","IgxTransactionService","_transactions","_redoStack","_undoStack","_states","verifyAddedTransaction","addTransaction","pending","pendingState","pendingChange","change","aggregatedValue","originalValue","actions","updateRecord","delete","lastActions","currentActions","currentActions_1","currentActions_1_1","actions_1","actions_1_1","action","cleanState","JSON","stringify","IgxHierarchicalTransactionService","clearArraysFromObject","currentState","prop","IgxToggleDirective","navigationService","_overlaySubFilter","_overlayId","_collapsed","overlayClosed","unsubscribe","collapsed","overlaySettings","hasOpenAnimation","hasCloseAnimation","openEventArgs","_overlayOpenedSub","_overlayClosingSub","clearSubscription","_overlayClosedSub","isClosing","ngOnInit","subscription","closed","exportAs","ChangeDetectorRef","Optional","HostBinding","IgxToggleActionDirective","_target","_overlayDefaults","onClick","clonedSettings","updateOverlaySettings","positionStrategyClone","IgxOverlayOutletDirective","IgxToggleModule","Up","Down","IgxSelectionAPIService","componentID","newSelection","get_empty","sel","add_item","itemID","add_items","itemIDs","clearSelection","select_items","delete_item","delete_items","deselectedItem","deselect_items","has","first_item","are_all_selected","dataCount","are_none_selected","get_all_ids","NEXT_ID","IgxDropDownGroupComponent","role","groupClass","disabled","labelId","Component","template","IgxDropDownItemBase","dropDown","_focused","_selected","_index","_disabled","itemIndex","displayDensity","focused","items","clicked","ngDoCheck","dropDownSelectedItem","selectedItem","hasIndex","selectItem","tslib_1.__decorate","IgxDropDownItemComponent","focusedState","focusedItem","focusedIndex","allowItemsFocus","focus","preventScroll","mousedownHandler","comfortable","cosy","compact","DisplayDensityToken","InjectionToken","DisplayDensityBase","displayDensityOptions","onDensityChanged","oldDisplayDensityOptions","DisplayDensity","_displayDensity","currentDisplayDensity","densityChangedArgs","oldDensity","newDensity","initialDensity","getComponentDensityClass","baseStyleClass","IgxDropDownBase","_displayDensityOptions","_focusedItem","onSelection","maxHeight","cssClass","headers","onItemActionKey","DropDownActionKey","oldSelection","navigate","currentIndex","newIndex","getNearestSiblingFocusableItemIndex","navigateItem","startIndex","oldItem","newItem","scrollToHiddenItem","navigateFirst","Navigate","navigateLast","navigateNext","navigatePrev","parentRect","DisplayContainerComponent","_viewContainer","notVirtual","ViewContainerRef","ViewChild","read","static","HVirtualHelperComponent","cssClasses","VirtualHelperComponent","_height","destroyed","IgxScrollInertiaDirective","wheelStep","inertiaStep","swipeToleranceX","inertiaDeltaY","inertiaDeltaX","inertiaDuration","_savedSpeedsX","setPointerCaptureFName","Element","releasePointerCaptureFName","targetElem","evt","onTouchStart","onTouchMove","onTouchEnd","onPointerDown","onPointerUp","onMSGestureStart","onMSGestureChange","IgxScrollInertiaScrollContainer","scrollDeltaX","scrollDeltaY","scrollStep","minWheelStep","_startX","_startY","wheelDeltaX","sign","deltaX","calcAxisCoords","wheelDeltaY","deltaY","IgxScrollInertiaDirection","_scrollToX","curScrollLeft","maxScrollLeft","parseInt","_scrollToY","preventParentScroll","curScrollTop","maxScrollTop","offsetHeight","MSGesture","cancelAnimationFrame","_touchInertiaAnimID","touch","touches","_touchStartX","pageX","_touchStartY","pageY","_lastTouchEnd","_lastTouchX","_lastTouchY","_savedSpeedsY","_totalMovedX","_offsetRecorded","_offsetDirection","_touchPrevented","scrolledXY","destX","destY","timeFromLastTouch","speedX","speedY","shift","_lastMovedX","_lastMovedY","_scrollTo","_inertiaInit","pointerType","_pointer","pointerId","_gestureObject","addPointer","screenX","screenY","touchPos","dest","stepModifer","_nextX","_nextY","requestAnimationFrame","IgxScrollInertiaModule","imports","CommonModule","IgxForOfSyncService","_master","isMaster","directive","igxForScrollOrientation","setMaster","forced","orientation","resetMaster","sizesCache","chunkSize","IgxForOfContext","$implicit","even","IgxForOfDirective","_template","_differs","resolver","totalItemCount","onChunkLoad","onDataChanged","onBeforeViewDestroyed","onChunkPreload","_sizesCache","_differ","heightCache","MAX_PERF_SCROLL_DIFF","_virtHeight","_virtHeightRatio","_virtScrollTop","_bScrollInternal","_scrollPosition","_embeddedViews","getVerticalScroll","igxForContainerSize","igxForOf","hScroll","vh","removeScrollEventListeners","getHorizontalScroll","func","vertical_1","verticalScrollHandler","isScrollable","totalSize","vc","igxForScrollContainer","igxForSizePropName","dcFactory","dc","createComponent","scrollDirection","touchAction","initSizesCache","getElement","_calculateChunkSize","getIndexAt","input","embeddedView","_vcr","createEmbeddedView","getContextIndex","factory","_maxHeight","_calcMaxBrowserHeight","_calcHeight","bind","onHScroll","hvFactory","hvh","_updateHScrollOffset","ngOnChanges","changes","currentValue","igxForTrackBy","getTypeNameForDebugging","firstChange","_applyChanges","_recalcOnContainerChange","diff","_updateSizeCache","run","_updateScrollOffset","addScrollTop","addTop","originalVirtScrollTop","containerSize","maxVirtScrollTop","scrollOffset","fixedUpdateAllElements","maxRealScrollTop","scrollTo","isRemote","isPrevItem","nextScroll","_adjustToIndex","scrollNext","scr","endIndex","scrollPrev","scrollNextPage","scrollPrevPage","getColumnScrollLeft","colIndex","getItemCountInView","getSizeAt","getScrollForIndex","realPercentScrolled","prevStartIndex","recalcUpdateSizes","diffs","totalDiff","rNode","rootNodes","nodeType","Node","ELEMENT_NODE","h","igxForItemSize","oldVal","newVal","currDiff","totalWidth","reducer","acc","scrToBottom","_isScrolledToBottom","hSum","_isAtBottomIndex","updatesToIndex","sumDiffs","currOffset","inScrollTop","newStart","prevStart","moveApplyScrollNext","moveApplyScrollPrev","fixedApplyScroll","prevIndex","start","embView","cntx","context","insert","_trackByFn","fn","prevChunkSize","applyChunkSizeChange","_recalcScrollBarSize","embeddedViewCopy","div","_calcMaxChunkSize","viewref","nodeName","elem","getElementsByTagName","_getItemSize","maxLength","sum","availableSize","accumulator","currentItem","curItem","prevItem","prevSize","midIdx","cmp","removeLastElem","oldElem","addLastElem","elemIndex","_updateVScrollOffset","vScroll","dim","TemplateRef","IterableDiffers","IgxGridForOfDirective","syncService","onDataChanging","getItemSize","summaries","masterSizesCache","itemsDimension","oldHeight","handleCacheChanges","identityChanges","newHeightCache","newSizesCache","newHeight","numRemovedItems","forEachRemovedItem","forEachIdentityChange","previousIndex","forEachItem","assumeMaster","scrollAmount","_updateViews","IgxForOfModule","entryComponents","IgxDropDownComponent","virtDir","toggleDirective","updateScrollPosition","setSelectedItem","collectionLength","direction_1","subRequired","isIndexOutOfBounds","take","skipHeader","virtState","currentPosition","itemPosition","indexOutOfChunk","scrollNeeded","targetScroll","onToggleOpening","scrollToItem","onToggleOpened","onToggleClosing","onToggleClosed","calculateScrollPosition","setTimeout","scrollDelta","elementHeight","ngAfterViewInit","provide","useExisting","ContentChild","ContentChildren","forwardRef","descendants","IgxDropDownItemNavigationDirective","dropdown","handleKeyDown","onArrowUpKeyDown","onArrowDownKeyDown","onHomeKeyDown","onEndKeyDown","Self","IgxDropDownModule","START","END","IgxHintDirective","_element","_position","IgxHintPosition","isPositionStart","isPositionEnd","toUpperCase","_applyPosition","nativeValidationAttributes","INITIAL","VALID","INVALID","IgxInputDirective","inputGroup","ngModel","formControl","_valid","IgxInputState","isInput","isTextArea","checkValidity","hasAttribute","required","isRequired","onFocus","isFocused","onBlur","ngControl","valid","_hasValidators","onInput","hasPlaceholder","control","validator","validation","tagName","_statusChanges$","statusChanges","onStatusChanged","asyncValidator","touched","dirty","invalid","placeholder","nativeValidationAttributes_1","nativeValidationAttributes_1_1","nativeValidationAttribute","IgxInputGroupBase","NgModel","FormControlName","IgxLabelDirective","defaultClass","IgxPrefixDirective","IgxPrefixModule","IgxSuffixDirective","IgxSuffixModule","LINE","BOX","BORDER","SEARCH","IgxInputGroupComponent","_type","IgxInputGroupType","_filled","_supressInputAutofocus","isBox","isBorder","isSearch","hasWarning","hints","IgxInputGroupModule","IgxAutocompleteDirective","defaultSettings","dropDownOpened$","onItemSelected","autofill","select","model","setValue","highlightFirstItem","autocompleteSettings","listId","onArrowDown","onTab","IgxAutocompleteModule","IgxButtonDirective","_cssClass","buttonClick","addClass","_color","color","_backgroundColor","_label","setAttribute","removeClass","Renderer2","IgxButtonModule","DEFAULT","DASHED","IgxDividerDirective","_inset","IgxDividerType","middle","vertical","baseMargin","IgxDividerModule","VERTICALLY","HORIZONTALLY","NONE","IgxDragDirective","zone","renderer","dragTolerance","ghostImageClass","hideBaseOnDrag","animateOnRelease","dragGhostHost","dragStart","dragEnd","returnMoveEnd","dragClicked","transitionProperty","_visibility","defaultReturnDuration","_dragStarted","_pointerDownId","_clicked","_lastDropArea","_destroy","_removeOnDestroy","bVisible","dragGhost","PointerEvent","pointerEventsEnabled","throttle","interval","animationFrameScheduler","onPointerMove","touchEventsEnabled","marginTop","getComputedStyle","marginLeft","_dragOffsetX","getWindowScrollLeft","_dragOffsetY","getWindowScrollTop","_dragStartX","_dragStartY","setPointerCapture","dragStartArgs_1","originalEvent","owner","totalMovedX","totalMovedY","createDragGhost","dispatchDragEvents","onTransitionEnd","dispatchDropEvent","cloneNode","hostLeft","hostTop","visible","topDropArea","startX","startY","elementsFromPoint","getElementsAtPoint","getAttribute","dispatchEvent","updateDragRelativePos","totalDraggedX","totalDraggedY","newPosX","newPosY","diffStartX","diffStartY","dropFinished","viewPortX","pageXOffset","viewPortY","pageYOffset","eventName","dragLeaveEvent","createEvent","initCustomEvent","IgxDropDirective","onEnter","onLeave","onDrop","droppable","dragover","onDragEnter","onDragLeave","onDragOver","elementPosX","elementPosY","offsetX","detail","offsetY","drag","dragData","onDragDrop","IgxDragDropModule","IgxFilterOptions","inputValue","get_value","textContent","valueToTest","matchFn","metConditionFn","overdueConditionFn","IgxFilterDirective","filtering","filtered","filterOptions","previousValue","IgxFilterPipe","filteredItems","match","IgxFilterModule","IgxFocusDirective","comp","focusState","trigger","getEditElement","NG_VALUE_ACCESSOR","IgxFocusModule","IgxLayoutDirective","wrap","justify","itemAlign","display","IgxFlexDirective","grow","shrink","flex","order","basis","IgxLayoutModule","MASK_FLAGS","KEYS","MaskHelper","_cursor","parseValueByMask","maskOptions","cursor","mask","format","literals","getMaskLiterals","literalKeys","nonLiteralIndeces","getNonLiteralIndeces","parseValueByMaskOnInit","insertCharAt","promptChar","isCharValid","validateCharOnPostion","replaceCharAt","parseMask","outputVal","mask_1","mask_1_1","inputVal","literalValues","mask_2","mask_2_1","nonLiteralValues","getNonLiteralValues","pos","nonLiteralValues_1","nonLiteralValues_1_1","restoreValueFromMask","value_1","value_1_1","parseValueByMaskUponSelection","isMarked","parseValueByMaskUponCopyPaste","clipboardData","selectionEnd","clipboardData_1","clipboardData_1_1","inputChar","isValid","charAt","RegExp","strValue","substring","nonLiteralsIndeces","value_2","value_2_1","noop","IgxMaskDirective","onValueChange","_maskOptions","_onTouchedCallback","_onChangeCallback","maskHelper","_placeholder","selectionStart","onKeydown","keyCode","charCode","_stopPropagation","_ctrlDown","_key","_selection","onKeyup","onPaste","_paste","_valOnPaste","_cursorOnPaste","getCursorPosition","onInputChanged","setCursorPosition","currentCursorPos","rawVal","dataValue","includeLiterals","formattedValue","focusedValuePipe","displayValuePipe","setSelectionRange","writeValue","registerOnChange","registerOnTouched","multi","IgxMaskModule","BEFORE","AFTER","nextId","IgxRadioComponent","labelPosition","tabindex","disableRipple","ariaLabelledBy","ariaLabel","checked","inputId","_value","_onRadioChange","_onRadioClick","nativeRadio","blur","_onLabelClick","radio","RadioLabelPosition","IgxRippleDirective","rippleTarget","rippleDuration","rippleDisabled","rippleElementClass","rippleHostClass","_centered","animationQueue","centered","onMouseDown","_ripple","setStyles","rippleElement","styleParams","radius","rippleColor","querySelector","rectBounds","dimensions","IgxRippleModule","IgxRadioGroupDirective","_name","_isInitialized","_labelPosition","_required","_selectRadioButton","_setRadioButtonNames","_setRadioButtonsRequired","_disableRadioButtons","_setRadioButtonLabelPosition","ngAfterContentInit","_initRadioButtons","radioButtons","_selectedRadioButtonChanged","IgxRadioModule","IgxTextHighlightDirective","_div","_observer","_nodeWasRemoved","_forceEvaluation","_activeElementIndex","groupName","onActiveElementChanged","deactivate","activateIfNecessary","_lastSearchInfo","setActiveHighlight","highlight","highlightGroupsMap","clearActiveHighlight","clearHighlight","disconnect","_valueChanged","searchedText","matchCount","caseSensitive","exactMatch","_container","firstElementChild","ngAfterViewChecked","text","caseSensitiveResolved","exactMatchResolved","searchNeedsEvaluation","clearChildElements","getHighlightedText","activate","observe","MutationObserver","mutationList","mutation","removedNodes","addedNodes","childList","spans","querySelectorAll","elementToActivate","activeCssClass","elementToDeactivate","originalContentHidden","setProperty","searchText","appendDiv","stringValue","contentStringResolved","searchTextResolved","appendSpan","appendText","foundIndex","previousMatchEnd","textElement","createText","outerHTML","span","containerClass","IgxTextHighlightModule","IgxTextSelectionDirective","selectionState","IgxTextSelectionModule","IgxTooltipTargetDirective","_navigationService","showDelay","hideDelay","tooltipDisabled","onTooltipShow","onTooltipHide","positionSettings","useAnimation","checkOutletAndOutsideClick","preMouseEnterCheck","toBeShown","clearTimeout","timeoutId","toBeHidden","hidingArgs","tooltip","forceClose","mergedOverlaySettings","preMouseLeaveCheck","onKeydownEscape","onMouseEnter","showingArgs","onMouseLeave","showTooltip","onDocumentTouchStart","hideTooltip","IgxTooltipDirective","forceOpen","finish","IgxTooltipModule","IgxFilteringOperand","operations","isUnary","iconName","findValueInSet","conditionList","f","append","operation","IgxBooleanFilteringOperand","IgxDateFilteringOperand","validateInputData","targetp","getDateParts","searchp","year","month","day","now","td","setDate","getDate","yesterday","date","dateFormat","hours","milliseconds","minutes","seconds","getFullYear","getMonth","getHours","getMinutes","getSeconds","getMilliseconds","toISOString","IgxNumberFilteringOperand","IgxStringFilteringOperand","search","applyIgnoreCase","startsWith","filteringStateDefaults","GroupedRecords","IgxIconService","_sanitizer","_fontSet","_fontSetAliases","_cachedSvgIcons","className","registerFontSetAlias","alias","fontSetClassName","addSvgIcon","fontSet","safeUrl","bypassSecurityTrustResourceUrl","sanitize","SecurityContext","RESOURCE_URL","fetchSvg","addSvgIconFromText","iconText","cacheSvgIcon","isSvgIconCached","iconKey","getSvgIconKey","httpRequest","XMLHttpRequest","responseType","onload","request","status","statusText","responseText","onerror","send","ensureSvgContainerCreated","innerHTML","svg","oldChild","_svgContainer","DomSanitizer","IgxIconComponent","_el","iconService","ariaHidden","active","defaultFontSet","updateIconClass","iconColor","svgImage","noLigature","explicitLigature","IgxIconModule","forRoot","ngModule","INITIALS","IMAGE","ICON","IgxAvatarComponent","_size","roundShape","src","AvatarType","icon","initials","imageTemplate","initialsTemplate","iconTemplate","defaultTemplate","roleDescription","getRole","getSrcUrl","IgxAvatarModule","INFO","SUCCESS","WARNING","ERROR","IgxBadgeComponent","label","setClasses","classes","Type","IgxBadgeModule","IgxExpansionPanelBodyComponent","panel","_labelledBy","IgxExpansionPanelTitleDirective","IgxExpansionPanelDescriptionDirective","IgxExpansionPanelIconDirective","LEFT","RIGHT","IgxExpansionPanelHeaderComponent","_iconTemplate","lv","iconPosition","ICON_POSITION","onInteraction","onAction","openPanel","altKey","expand","closePanel","collapse","Host","IgxExpansionPanelComponent","animationSettings","onCollapsed","onExpanded","Promise","resolve","labelledBy","headerId","cb","IgxExpansionPanelModule","IgxBannerActionsDirective","IgxBannerComponent","_bannerActionTemplate","_animationSettings","_expansionPanel","_bannerEvent","banner","openingArgs","closingArgs","onExpansionPanelOpen","onExpansionPanelClose","IgxBannerModule","horizontal","IgxButtonGroupComponent","_cdr","buttonClickNotifier$","queryListNotifier$","multiSelection","selectedIndexes","onSelect","onUnselect","viewButtons","templateButtons","_itemContentCssClass","buttons","_isVertical","ButtonGroupAlignment","selectButton","buttonElement","indexInViewButtons","deselectButton","initButtons","_clickHandler","ViewChildren","IgxButtonGroupModule","After","Before","Between","Specific","Weekdays","Weekends","MDAYS","FEBRUARY","stop","step","cur","isLeap","weekDay","getDay","monthRange","nDays","isDateInRanges","ranges","dateInMs","ranges_1","ranges_1_1","dRanges","dateRange","DateRangeType","dRange","datesInMs","datesInMs_1","datesInMs_1_1","SUNDAY","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","Calendar","firstWeekDay","WEEKDAYS","_firstWeekDay","weekdays","monthdates","extraWeek","days","timedelta","generateICalendarDate","monthdatescalendar","dates","units","ret","checkRollover","setFullYear","setMonth","setTime","formatToParts","locale","parts","Intl","DateTimeFormat","full","formattedParts_1","toType","partType","literal","combined","parts_1","parts_1_1","parts_2","parts_2_1","isCurrentMonth","isNextMonth","isPrevMonth","isPreviousMonth","IgxCalendarYearDirective","onYearSelection","isCurrentYear","IgxCalendarMonthDirective","onMonthSelection","IgxCalendarHeaderTemplateDirective","IgxCalendarSubheaderTemplateDirective","IgxCalendarScrollMonthDirective","debounce","stopScroll","tap","startScroll","onMouseUp","SINGLE","MULTI","RANGE","PREV","NEXT","IgxCalendarBase","CalendarSelection","rangeStarted","_locale","_disabledDates","_specialDates","_formatOptions","weekday","_formatViews","monthScrollDirection","ScrollMonth","scrollMonth$","stopMonthScroll$","startMonthScroll$","calendarModel","viewDate","weekStart","initFormatters","formatOptions","formatViews","selectedDates","selectDate","_viewDate","getDateOnly","getDateOnlyInMs","generateDateRange","selectSingle","selectMultiple","valueDateOnly_1","selectRange","excludeDisabledDates","valueOf","isDateDisabled","deselectSingle","deselectMultiple","selectedDatesCount","datesInMsToDeselect","deselectRange","valueStart","valueEnd","selectedDatesStart","selectedDatesEnd","formatterDay","formatterWeekday","formatterMonth","formatterYear","formatterMonthday","disabledDates","deselectDate","selectDateFromClient","YEAR","DECADE","IgxMonthPickerBase","_activeView","CalendarView","changeYear","yearsBtn","activeViewDecade","activeViewDecadeKB","formattedYear","IgxMonthsViewComponent","formatView","styleClass","_monthFormat","initMonthFormatter","_calendarModel","formattedMonth","_formatterMonth","selectMonth","monthTracker","monthFormat","onKeydownArrowUp","months","nodeRect","nextNodeRect","onKeydownArrowDown","onKeydownArrowRight","onKeydownArrowLeft","onKeydownHome","onKeydownEnd","onKeydownEnter","CalendarHammerConfig","overrides","pan","Hammer","DIRECTION_VERTICAL","threshold","HammerGestureConfig","IgxYearsViewComponent","_yearFormat","initYearFormatter","_formatterYear","selectYear","scroll","delta","generateYearRange","yearTracker","yearFormat","currentYear","HAMMER_GESTURE_CONFIG","useClass","IgxDayItemComponent","onDateSelection","today","outOfRangeDates","specialDates","isWeekend","isInactive","isToday","isDisabled","isOutOfRange","isSpecial","IgxDaysViewComponent","animationAction","changeDaysView","onViewChanged","isKeydownTrigger","disableOutOfRangeDates","formattedDate","generateWeekHeader","dayNames","rv","rv_1","rv_1_1","rowTracker","dateTracker","focusActiveDate","selectDay","animationDone","isLast","date_1","callback","toState","nextDate","focusPreviousUpDate","prevView","dayItem","focusNextDownDate","nextView","focusPreviousDate","focusNextDate","animations","transition","IgxCalendarComponent","hasHeader","_monthAction","startPrevMonthScroll","daysView","previousMonth","startNextMonthScroll","nextMonth","stopMonthScroll","prevMonthBtn","nextMonthBtn","activeView","headerTemplateDirective","subheaderTemplateDirective","headerDate","generateContext","switchMap","skipLast","dacadeView","getFormattedDate","monthday","childClicked","viewChanged","changeMonth","monthsBtn","activeViewYear","monthsView","activeViewYearKB","onKeydownPageUp","activeDate","activeElement","onKeydownPageDown","onKeydownShiftPageUp","onKeydownShiftPageDown","monthView","yearView","IgxMonthPickerComponent","yearAction","nextYear","previousYear","nextYearKB","previousYearKB","IgxCalendarModule","FormsModule","IgxCardMediaDirective","IgxCardHeaderComponent","IgxCardThumbnailDirective","IgxCardHeaderTitleDirective","IgxCardHeaderSubtitleDirective","IgxCardContentDirective","IgxCardFooterDirective","OUTLINED","IgxCardComponent","IgxCardType","JUSTIFY","IgxCardActionsComponent","card","isVerticalSet","layout","IgxCardActionsLayout","IgxCardModule","IgxCarouselComponent","loop","pause","navigation","onSlideChanged","onSlideAdded","onSlideRemoved","onCarouselPaused","onCarouselPlaying","slides","_total","_interval","_restartInterval","_destroyed","_lastInterval","clearInterval","setAriaLabel","slide","total","_currentSlide","_playing","carousel","current","Direction","_moveTo","prev","_resetInterval","setInterval","tick","IgxSlideComponent","IgxCarouselModule","IgxCheckboxComponent","LabelPosition","indeterminate","disableTransitions","checkbox","_onCheckboxChange","_onCheckboxClick","nativeCheckbox","preserveWhitespaces","IGX_CHECKBOX_REQUIRED_VALIDATOR","NG_VALIDATORS","IgxCheckboxRequiredDirective","CheckboxRequiredValidator","IgxCheckboxModule","CHIP_ID","IgxChipComponent","draggable","removable","selectable","class","onMoveStart","onMoveEnd","onRemove","onKeyDown","_selectedItemClass","_movedWhileRemoving","changeSelection","chipArea","backgroundColor","newColor","removeIcon","defaultRemoveIcon","selectIcon","defaultSelectIcon","selectClass","SELECT_CLASS","srcEvent","onSelectArgs","onChipKeyDown","keyDownArgs","onRemoveBtnKeyDown","onRemoveMouseDown","onRemoveClick","onRemoveTouchMove","onRemoveTouchEnd","onChipDragStart","onChipDragEnd","dragDirective","onChipMoveEnd","onChipDragClicked","clickEventArgs","onChipDragEnterHandler","chip","dragChip","onChipDrop","IgxChipsAreaComponent","_iterableDiffers","onReorder","selectedChips","chipsList","forEachAddedItem","addedChip","onChipMoveStart","onChipDragEnter","onChipSelectionChange","modifiedChipsArray","chipsArray","dragChipIndex","shiftKey","positionChipAtIndex","dropChipIndex","chipIndex","targetIndex","shiftRestLeft","eventData","IgxChipsModule","IgxComboHeaderDirective","IgxComboFooterDirective","IgxComboItemDirective","IgxComboEmptyDirective","IgxComboHeaderItemDirective","IgxComboAddItemDirective","IgxComboToggleIconDirective","IgxComboClearIconDirective","IgxComboAPIService","register","combo","add_custom_item","addItemToCollection","set_selected_item","isItemSelected","deselectItems","selectItems","IgxComboItemComponent","comboAPI","itemHeight","comboID","isVisible","rect","parentDiv","disableCheck","IgxComboAddItemComponent","IgxComboDropDownComponent","scrollHandler","itemsMaxHeight","focusSearchInput","lastIndex","focusAddItemButton","isAddButtonVisible","sortedChildren","sortedChildren_1","sortedChildren_1_1","handleEnter","handleSpace","isAddItemFocused","IgxComboFilteringPipe","SimpleFilteringStrategy","filteringExpressions","IgxComboSortingPipe","IgxComboGroupingPipe","groupKey","inserts","currentHeader","insertFlag","valueKey","IgxComboFilterConditionPipe","ItemHeights","IgxComboComponent","customValueFlag","defaultFallbackGroup","stringFilters","booleanFilters","_filteringLogic","_filteringExpressions","_sortingExpressions","_groupKey","_prevInputValue","_dataType","_filteredData","_itemHeight","_itemsMaxHeight","_overlaySettings","searchInput","comboInput","itemTemplate","headerTemplate","footerTemplate","headerItemTemplate","addItemTemplate","emptyTemplate","toggleIconTemplate","clearIconTemplate","dropdownContainer","onSelectionChange","onAddition","onSearchInput","onDataPreLoad","allowCustomValues","searchPlaceholder","filterable","IgxComboState","searchValue","_displayKey","clearSorting","onInputClick","checkMatch","handleKeyUp","displayKey","itemMatch","handleInputChange","cdrFlag","vContainer","getValueByValueKey","DataTypes","_stringifyItemID","_parseItemID","parse","triggerCheck","handleSelectAll","selectAllItems","deselectAllItems","addedItem","oldCollection","newCollection","opening","displaySearchInput","newArray","expression2","headerExpression","searchVale","NgControl","dataLoading","setDisabledState","complexTemplate","primitiveTemplate","handleClearItems","selectedItems","newItems","clearCurrentSelection","setSelection","ignoreFilter","allVisible","itemValue","oldSelectionEmit","handleOpening","handleOpened","handleClosing","handleClosed","IgxComboModule","ReactiveFormsModule","DatePickerUtil","parseDateFormat","maskValue","DEFAULT_LOCALE","dateStruct","SHORT_DATE_MASK","maskArray","monthInitPosition","dayInitPosition","yearInitPosition","initialPosition","formatType","getYearFormatType","getMonthFormatType","getDayFormatType","isDateChar","SEPARATOR","fillDatePartsPositions","getDefaultLocaleMask","getInputMask","inputMask","getMask","parseDateArray","dateFormatParts","prevDateValue","yearPrefix","dayStr","getDayValueFromInput","monthStr","getMonthValueFromInput","yearStr","getYearValueFromInput","getDateFormatPart","originalYear","fullYear","NaN","daysInMonth","maskToPromptChars","PROMPT_CHAR","trimUnderlines","getModifiedDateInput","isSpinLoop","maxValue","minValue","datePart","getDatePartOnPosition","datePartType","datePartFormatType","datePartValue","getDateValueFromInput","minMax","getMinMaxValue","tempValue","startIdx","endIdx","prefix","getNumericFormatPrefix","addPromptCharsEditMode","dateArray","checkForCompleteDateInput","dayValue","monthValue","yearValue","isFullInput","isFullYearInput","formatterOptions","resolvedOptions","NUMBER_OF_MONTHS","getFullYearFromString","partPosition","yearPart","currentPos","DatePickerDisplayValuePipe","_datePicker","rawDateString","DatePickerInputValuePipe","invalidDate","IgxDatePickerTemplateDirective","IgxDatePickerActionsDirective","DropDown","Dialog","IgxCalendarContainerComponent","mode","InteractionMode","onClose","onTodaySelection","onEscape","closeCalendar","triggerTodaySelection","ShortDate","MediumDate","LongDate","FullDate","IgxDatePickerComponent","_moduleRef","labelVisibility","onDisabledDate","onValidationFailed","inputValuePipe","spinDelta","defaultLocale","_destroy$","_onOpen","_onClose","_format","PredefinedFormatOptions","_modalOverlay","_dropDownOverlaySettings","_defaultDropDownOverlaySettings","_customFormatChecker","_transformedDate","_getEditorDate","_getDisplayDate","datePickerTemplateDirective","readOnlyDatePickerTemplate","editableDatePickerTemplate","displayData","openDialog","onSpaceClick","getInputGroupElement","inputElement","editableInput","readonlyInput","_positionSettings","_modalOverlaySettings","overlay","_componentID","_onOpening","_onOpened","_onClosed","handleSelection","calendar","modalOverlay","modalOverlaySettings","dropDownOverlaySettings","_setCursorPosition","setHours","setMinutes","setSeconds","setMilliseconds","_isInEditMode","calculateDate","spinValue","targetValue","cursorPosition","_getCursorPosition","checkInput","inputType","dateString","invokedByEvent","newDateArray","datePicker","prevValue","eventType","modifiedInputValue","_initializeCalendarContainer","_focusCalendarDate","componentInstance","isVertical","subheaderTemplate","cancelButtonLabel","todayButtonLabel","datePickerActions","datePickerActionsDirective","_setLocaleToDate","toLocaleDateString","formatDate","changedValue","NgModuleRef","IgxDatePickerModule","IgxDialogTitleDirective","defaultStyle","IgxDialogActionsDirective","DIALOG_ID","IgxDialogComponent","navService","title","leftButtonLabel","leftButtonType","leftButtonColor","leftButtonBackgroundColor","leftButtonRipple","rightButtonLabel","rightButtonType","rightButtonColor","rightButtonBackgroundColor","rightButtonRipple","onOpen","onLeftButtonSelect","onRightButtonSelect","_animaitonSettings","_closeOnOutsideSelect","_isModal","_titleId","_overlayDefaultSettings","isModal","closeOnOutsideSelect","isOpen","toggleRef","emitCloseFromDialog","dialog","onDialogSelected","DIALOG_CLASS","onInternalLeftButtonSelect","onInternalRightButtonSelect","IgxDialogModule","IgxSummaryOperand","operate","summaryResult","IgxNumberSummaryOperand","average","IgxDateSummaryOperand","latest","earliest","IgxRow","IgxCell","inlineEditorTemplate","parseFloat","isFinite","cellID","IgxGridCRUDService","createCell","createRow","sameRow","sameCell","columnID","beginRowEdit","onRowEditEnter","endRowEdit","openRowOverlay","begin","onCellEditEnter","rowEditing","isInEditMode","IgxGridSelectionService","dragMode","keyboardState","pointerState","temp","_ranges","initPointerState","initKeyboardState","addKeyboardRange","generateRange","primaryButton","ctrl","isActiveNode","isInMap","mrl","isActive","isActiveLayout","columnVisibleIndex","addRangeMeta","removeRangeMeta","rowStart","rowEnd","columnStart","columnEnd","keyboardStateOnKeydown","shiftTab","keyboardStateOnFocus","emitter","dom","kbState","vendor","_moveSelectionChrome","dragSelect","pointerDown","pointerDownShiftKey","clearTextSelection","mergeMap","source","entries","pair","newValue_1","pointerEnter","pointerUp","restoreTextSelection","runTask","getSelection","rangeCount","_selectionRange","getRangeAt","removeAllRanges","addRange","createRange","Range","selectNode","IgxRowComponent","selectionService","dragging","defaultCssClass","_rowSelection","inEditMode","_rowData","resolveClasses","visibleColumns","pinnedColumns","unpinnedColumns","showRowCheckboxes","rowDraggable","onCheckboxClick","gridID","triggerRowSelectionChange","update","isSelected","allRowsSelected","checkboxElement","indexClass","evenRowCSS","oddRowCSS","selectedClass","editClass","dirtyClass","deletedClass","deleted","mrlClass","hasColumnLayouts","dragClass","defaultDragIndicatorCssClass","rowDragging","changeDetection","ChangeDetectionStrategy","OnPush","IgxGridCellComponent","IgxColumnResizingService","resizeCursor","showResizer","getVisibleContentHeight","columnHeightMultiplier","columnLayoutChild","multiRowLayoutRowSize","topLevelParent","headerGroup","actualMinWidth","minWidth","headerCell","actualWidth","pinnedMaxWidth","calcPinnedContainerMaxWidth","getPinnedWidth","MAX_SAFE_INTEGER","autosizeColumnOnDblClick","currentColWidth","getLargestCellWidth","reflow","onColumnResized","prevWidth","newWidth","resizeColumn","startResizePos","colMinWidth","getColMinWidth","colMaxWidth","getColMaxWidth","resizeColumnLayoutFor","isColumnResizing","relativeColumns","getResizableColUnderEnd","combinedSpan","spanUsed","pinnedWidth","maxPinnedWidth","columnsToResize","updatedDiff","updatedCombinedSpan","setMinMaxCols","newCombinedSpan","newColsToResize","currentResizeWidth","calcWidth","resizeScaled","gridColumnSpan","IgxResizeHandleDirective","colResizingService","_dblClick","columnGroup","resizable","debounceTime","_onResizeAreaMouseDown","resizeLine","resizer","onMousedown","onMouseOver","onDoubleClick","IgxColumnResizerDirective","restrictHResizeMin","MIN_SAFE_INTEGER","restrictHResizeMax","resizeEnd","resizeStart","resize","_left","onMousemove","onMouseup","IgxFilterCellTemplateDirective","IgxCellTemplateDirective","IgxCellHeaderTemplateDirective","IgxCellFooterTemplateDirective","IgxCellEditorTemplateDirective","IgxColumnMovingService","_column","_icon","BeforeDropTarget","AfterDropTarget","IgxColumnMovingDragDirective","cms","_ghostImageClass","dragGhostImgIconClass","dragGhostImgIconGroupClass","movable","groupable","_unsubscribe","cancelDrop","isColumnMoving","onColumnMovingStart","subscription$","draggedColumn","onColumnMoving","flexBasis","createTextNode","hostElemLeft","hostElemTop","childNodes","paddingLeft","IgxColumnMovingDropDirective","_dropIndicator","_lastDropIndicator","_dragLeave","_dropIndicatorClass","IgxColumnComponent","_hVirtDir","hasMovableColumns","disablePinning","isDropTarget","clientRect","_dropPos","DropPosition","lastElementChild","innerText","horizontalScroll","wheelHandler","nextPinnedWidth","onColumnMovingEnd","moveColumn","IgxGridBodyDirective","IgxDatePipeComponent","LOCALE_ID","DatePipe","IgxDecimalPipeComponent","DecimalPipe","ContainerPositioningStrategy","isTop","isTopInitialPosition","container","_filterable","_groupable","sortable","_calcWidth","headerClasses","headerGroupClasses","sortingIgnoreCase","searchable","_pinned","_summaries","_filters","_sortStrategy","_hidden","_disableHiding","_disablePinning","_defaultMinWidth","_hasSummary","_vIndex","hasTransactions","isPrimaryColumn","_editable","editable","recalculateSummaries","resetCaches","check","resetSummaryHeight","filteringService","refreshExpressions","widthSetByUser","_width","defaultWidth","calcPixelWidth","cacheCalcWidth","_derivePossibleWidth","getCalcWidth","defaultMinWidth","minVal","pin","unpin","classRef","removeSummariesCachePerColumn","_summaryPipeTrigger","_groupingComparer","funcRef","_bodyTemplate","_headerTemplate","_inlineEditorTemplate","_filterCellTemplate","vIndex","allChildren","childrenVisibleIndexes","indexInCollection","columnLayout","ptr","lvl","colEnd","colStart","cellTemplate","headTemplate","editorTemplate","filterCellTemplateDirective","filters","getGridTemplate","isRow","rowsCount","getColumnSizesString","getInitialChildColumnSizes","columnSizes","newWidthSet","newSpanSmaller","colSpan","bothWidthsSet","bothWidthsNotSet","ref","columnWidthSetByUser","getFilledChildColumnSizes","getPossibleColumnWidth","columnSized","targets","targetsSquashed","getUnpinnedWidth","unpinnedAreaMinWidth","_unpinnedIndex","_unpinnedColumns","_pinnedColumns","targetColumn","isPinned","onColumnPinning","_moveColumns","reinitPinStates","populateVisibleIndexes","headerCellList","filterCellList","filterCell","headerGroupsList","autosize","largest","cellsContentWidths_1","calculateSizeToFit","cellStyle","cellPadding","paddingRight","borderRightWidth","headerStyle","headerPadding","largestCell","getCellWidth","colWidth","isPercentageWidth","cellWidth","featureColumnsWidth","IgxColumnGroupComponent","QueryList","isChildrenWidthInPercent","IgxColumnLayoutComponent","borderWidth","hasLastPinnedChildColumn","headerStyles","disableHiding","isLastPinned","orderedCols","rs","highlightClass","activeHighlightClass","lastPinned","editMode","isInCompositionMode","pointerdown","selectionNode","ctrlKey","pointerenter","pointerup","setStartNavigationCell","onRangeSelection","_updateCRUDStatus","defaultCellTemplate","setEditMode","gridRowSpan","isCellSelected","rowTransaction","rowCurrentState","_highlight","lastSearchInfo","compositionStartHandler","compositionEndHandler","crud","editableCell","onCellClick","onContextMenu","handleAlt","isToggleKey","trigger_row_expansion_toggle","treeRow","handleTab","performShiftTabKey","performTab","handleEnd","goToLastCell","handleHome","goToFirstCell","keydownArgs","targetType","onGridKeydown","_onFocusChange","navigateTop","navigateUp","navigateBottom","navigateDown","onKeydownEnterEditMode","onKeydownExitEditMode","onCellEditCancel","highlightText","ItemPropertyValueChanged","propName","valueChanged","_propName","_object","onValueChanged","ColumnChooserItemBase","indentation","IgxColumnHidingItemDirective","Alphabetical","DisplayOrder","CustomFilteringStrategy","ColumnChooserBase","disableFilter","columnsAreaMaxHeight","_currentColumns","_gridColumns","_rawColumns","_columnDisplayOrder","ColumnDisplayOrder","_filterCriteria","_filterColumnsPrompt","_title","createColumnItems","filterCriteria","clearFiltering","orderColumns","createColumnItem","localeCompare","createFilteringExpression","IgxColumnHidingComponent","showAllText","hideAllText","onColumnVisibilityChanged","columnItems","hiddenColumnsCount","hidableColumns","onVisibilityChanged","showAllColumns","hideAllColumns","IgxColumnHidingModule","IgxColumnPinningItemDirective","IgxColumnPinningComponent","checkboxValueChange","columnItem","pinnable","IgxColumnPinningModule","IgxGridToolbarComponent","excelExporter","csvExporter","gridHeight","calcHeight","exportExcel","exportCsv","getTitle","toolbarTitle","getExportText","exportText","getExportExcelText","exportExcelText","getExportCsvText","exportCsvText","exportClicked","exportButton","outletDirective","exportDropdown","exportToExcelClicked","performExport","exportToCsvClicked","exp","exportType","exporter","onToolbarExporting","toggleColumnHidingUI","columnHidingButton","columnHidingDropdown","toggleColumnPinningUI","columnPinningButton","columnPinningDropdown","toolbar","toolbarCustomContentTemplate","IgxGridToolbarCustomContentDirective","IgxRowEditTemplateDirective","IgxRowEditTextDirective","IgxRowEditActionsDirective","IgxRowEditTabStopDirective","activateCell","currentCellIndex","rowEditTabs","allTabs","last","move","handleEscape","activeNode","getCellElementByVisibleIndex","lastEditableColumnIndex","firstEditableColumnIndex","isColumnFullyVisible","performHorizontalScrollToCell","IgxGridBaseComponent","IgxGridGroupByRowComponent","gridSelection","paddingIndentationCssClass","isExpandedGroup","grRowExpr","isVirtualized","verticalScrollContainer","groupRowIndex","toggleGroup","isKeySupportedInGroupRow","handleTabKey","getColumnByName","rootSummariesEnabled","orderedColumns","gridOrderedColumns","lastCol","alt","IgxGridNavigationService","parentVirtDir","offsetWidth","rowComp","summariesRowList","virtDirRow","getColumnUnpinnedIndex","isColumnRightEdgeVisible","isColumnLeftEdgeVisible","forOfDir","isColumnPinned","displayContainerWidth","displayContainerScrollLeft","headerContainer","tslib_1.__spread","isRowInEditMode","findNextEditable","gridColumns","MoveDirection","isSummary","cellSelector","getCellSelector","selectedNode","isSummaryRow","nextElementSibling","getFocusableGrid","previousElementSibling","movePreviousEditable","currentColumnVisibleIndex","prevEditableColumnIndex","focusEditableTarget","moveNextEditable","nextEditableColumnIndex","rowElement","firstCell","allCells","verticalScroll","currentRowIndex","containerTopOffset","verticalDisplayContainerElement","offsetTop","tag","getRowSelector","getRowByIndex","focusPreviousElement","currentRowEl","focusElem","containerHeight","targetEndTopOffset","nextIndex_1","getNextRowByIndex","focusNextElement","rows","getAllRows","goToLastBodyElement","rowEl","moveFocusToFilterCell","toStart","isFilterRowVisible","focusFilterRowCloseButton","unpinnedFilterableColumns","focusFilterCellChip","scrollToFilterCell","navigatePrevFilterCell","prevFilterableIndex","firstFiltarableCol","getFirstPinnedFilterableColumn","prevColumn","prevVisibleIndex","navigateFirstCellIfPossible","navigateNextFilterCell","nextFilterableIndex","nextColumn","nextVisibleIndex","getLastPinnedFilterableColumn","pinnedFilterableColums","allowFiltering","filterMode","FilterMode","quickFilter","shouldPerformVerticalScroll","targetRowIndex","targetRow","performVerticalScrollToCell","visibleColIndex","unpinnedIndex","cellElement","nextIndex","tbody","icons","IgxFilteringService","columnsWithComplexFilter","areEventsSubscribed","isFiltering","columnToExpressionsMap","columnStartIndex","filteredColumn","selectedExpression","columnToFocus","shouldFocusNext","columnToMoreIconHidden","_datePipe","subscribeToEvents","updateFilteringCell","updateFilterCellArea","filterInternal","createSimpleFilteringTree","clearFilter","conditionOrExpressionTree","expressionsTreeForColumn","expressionForColumn","onFilteringDone","getExpressions","filterGlobal","registerSVGIcons","icons_1","icons_1_1","columnId","expressionUIs","generateExpressionsList","isFilteringTreeComplex","removeExpression","indexToRemove","expressionsList","beforeOperator","afterOperator","expressionUIList","currAndBranch","currExpressionUI","isFilterComplex","isComplex","getOperatorAsString","resourceStrings","igx_grid_filter_operator_and","igx_grid_filter_operator_or","getChipLabel","datePipe","focusFirst","focusChip","filteringRow","closeButton","currentColumnRight","currentColumnLeft","getChildAndOperatorsCount","expressionsUIs","generateExpressionsListRecursive","exprUI","ExpressionUI","prevExprUI","isFilteringExpressionsTreeEmpty","expressionTree","exprTree","WatchChanges","propDesc","privateKey","originalSetter","_init","SimpleChange","IgxExcelStyleSearchComponent","clearInput","onCheckboxChange","itemSize","IgxExcelStyleDefaultExpressionComponent","onExpressionRemoved","onLogicOperatorChanged","inputValuesDirective","expressionUI","inputGroupConditions","inputValuesElement","isConditionSelected","conditionName","getConditionName","translateCondition","getInputWidth","getCondition","getIconName","conditions","toggleCustomDialogDropDown","dropdownConditions","onConditionsChanged","onValuesInput","transformValue","onLogicOperatorButtonClicked","buttonIndex","logicOperatorButtonGroup","selectedButtons","onLogicOperatorKeyDown","onRemoveButtonClick","onInputConditionsKeyDown","IgxExcelStyleDateExpressionComponent","IgxExcelStyleCustomDialogComponent","_customDialogPositionSettings","_customDialogOverlaySettings","dateExpressionTemplate","defaultExpressionTemplate","onCustomDialogOpening","selectedOperator","createInitialExpressionUIElement","onCustomDialogOpened","expressionComponents","rootGrid","onClearButtonClick","closeDialog","overlayComponentId","onApplyButtonClick","onAddButtonClick","markChildrenForCheck","scrollToBottom","onApplyButtonKeyDown","createCondition","expressionDateComponents","firstExprUI","secondExprUI","expressionsContainer","IgxExcelStyleSortingComponent","onSortButtonClicked","sortDirection","sortButtonGroup","isColumnGrouped","clearSort","IgxExcelStyleSortingTemplateDirective","IgxExcelStyleMovingTemplateDirective","IgxExcelStyleHidingTemplateDirective","IgxExcelStylePinningTemplateDirective","IgxGridExcelStyleFilteringComponent","shouldOpenSubMenu","containsNullOrEmpty","selectAllSelected","selectAllIndeterminate","filterValues","columnMoving","Subscription","listData","uniqueValues","_subMenuPositionSettings","_subMenuOverlaySettings","igx_grid_excel_boolean_filter","igx_grid_excel_number_filter","igx_grid_excel_date_filter","igx_grid_excel_text_filter","customDialog","populateColumnData","excelStyleSorting","se","excelStyleSearch","clearFilterClass","closeDropdown","onPin","onHide","onTextFilterClick","currentTarget","gridRect","dropdownRect","mainDropdown","x1","subMenu","onTextFilterKeyDown","onSubMenuClosed","onSubMenuSelection","areExpressionsSelectable","areExpressionsValuesInTheList","firstValue","gridExpressionsTree","toDateString","shouldUpdateSelection","addBooleanItems","addItems","sortData","addBlanksItem","addSelectAllItem","filterListItem","FilterListItem","selectAll","igx_grid_excel_select_all","blanks","igx_grid_excel_blanks","valueA","valueB","excelStyleSortingTemplateDirective","defaultExcelStyleSortingTemplate","excelStyleMovingTemplateDirective","defaultExcelStyleMovingTemplate","excelStylePinningTemplateDirective","defaultExcelStylePinningTemplate","excelStyleHidingTemplateDirective","defaultExcelStyleHidingTemplate","applyFilter","filterTree","filterOptimizationThreshold","blanksItemIndex","blanksItem","onClearFilterKeyDown","showCustomFilterItem","IgxGridHeaderComponent","_filteringService","hostRole","defaultClasses","igx-grid__th","asc","ascending","descending","igx-grid__th--number","igx-grid__th--sortable","igx-grid__th--filtrable","igx-grid__th--sorted","sorted","klass","hasColumnGroups","maxLevelHeaderDepth","defaultRowHeight","_baseFontSize","initFilteringSettings","getSortDirection","_componentOverlayId","triggerSort","onFilteringIconClick","toggleFilterDropdown","onSortingIconClick","sortDir","groupingExpressions","filterIconTarget","filterIconClassName","_filterMenuOverlaySettings","_filterMenuPositionSettings","onOverlayOpening","onOverlayClosed","IgxGridFilteringCellComponent","baseClass","currentTemplate","moreFiltersCount","onTabKeyDown","isLastElementFocused","onShiftTabKeyDown","isFirstElementFocused","isChipVisible","updateVisibleFilters","filterCellTemplate","complexFilter","defaultFilter","emptyFilter","onChipClicked","isColumnRightVisible","isColumnLeftVisible","onChipRemoved","filteringIndicatorClass","isMoreIconHidden","focusFirstElement","focusElement","ghostChip","complexChip","ex","moreIcon","chipsArea","areaWidth","viewWidth","chipsAreaElements","visibleChipsCount","moreIconWidth","areAllColumnsInView","IgxGridHeaderGroupComponent","getHeaderGroupWidth","igx-grid__th--pinned","igx-grid__th--pinned-last","igx-grid__drag-col-header","isHeaderDragged","igx-grid__th--filtering","isFiltered","CurrentResourceStrings","GridResStrings","igx_grid_groupByArea_message","igx_grid_emptyFilteredGrid_message","igx_grid_emptyGrid_message","igx_grid_filter","igx_grid_filter_row_close","igx_grid_filter_row_reset","igx_grid_filter_row_placeholder","igx_grid_filter_row_boolean_placeholder","igx_grid_filter_row_date_placeholder","igx_grid_complex_filter","igx_grid_filter_contains","igx_grid_filter_doesNotContain","igx_grid_filter_startsWith","igx_grid_filter_endsWith","igx_grid_filter_equals","igx_grid_filter_doesNotEqual","igx_grid_filter_empty","igx_grid_filter_notEmpty","igx_grid_filter_null","igx_grid_filter_notNull","igx_grid_filter_before","igx_grid_filter_after","igx_grid_filter_today","igx_grid_filter_yesterday","igx_grid_filter_thisMonth","igx_grid_filter_lastMonth","igx_grid_filter_nextMonth","igx_grid_filter_thisYear","igx_grid_filter_lastYear","igx_grid_filter_nextYear","igx_grid_filter_greaterThan","igx_grid_filter_lessThan","igx_grid_filter_greaterThanOrEqualTo","igx_grid_filter_lessThanOrEqualTo","igx_grid_filter_true","igx_grid_filter_false","igx_grid_filter_all","igx_grid_filter_condition_placeholder","igx_grid_summary_count","igx_grid_summary_min","igx_grid_summary_max","igx_grid_summary_sum","igx_grid_summary_average","igx_grid_summary_earliest","igx_grid_summary_latest","igx_grid_excel_filter_moving_left","igx_grid_excel_filter_moving_left_short","igx_grid_excel_filter_moving_right","igx_grid_excel_filter_moving_right_short","igx_grid_excel_filter_moving_header","igx_grid_excel_filter_sorting_asc","igx_grid_excel_filter_sorting_asc_short","igx_grid_excel_filter_sorting_desc","igx_grid_excel_filter_sorting_desc_short","igx_grid_excel_filter_sorting_header","igx_grid_excel_filter_clear","igx_grid_excel_custom_dialog_add","igx_grid_excel_custom_dialog_clear","igx_grid_excel_custom_dialog_header","igx_grid_excel_cancel","igx_grid_excel_apply","igx_grid_excel_search_placeholder","igx_grid_excel_hide","igx_grid_excel_pin","igx_grid_excel_unpin","igx_grid_excel_custom_filter","igx_grid_paginator_label","TimePickerResStrings","igx_time_picker_ok","igx_time_picker_cancel","updateResourceStrings","currentStrings","newStrings","IgxGridSummaryService","summaryCacheMap","rootSummaryID","summaryHeight","maxSummariesLenght","retriggerRootPipe","deleteOperation","calculateGridHeight","isGroupedColumn","deleteSummaryCache","isTreeGrid","removeAllTreeGridSummaries","isHierarchicalGrid","getSummaryID","cache","calcMaxSummaryHeight","maxSummaryLength","hasSummary","getCurrentSummaryColumn","defaultSummaryHeight","calculateSummaries","rowSummaries","columnValues","updateSummaryCache","groupingArgs","compareGroupingExpressions","filteringApplied","summaryIDs","removeChildRowSummaries","newExpressions","removedCols","ungroupedColumns","newExpr","colName","IgxSummaryCellComponent","firstCellIndentation","isKeySupportedInCell","getRowElementByIndex","sr","dataRowIndex","translateSummary","summary","IgxSummaryRowComponent","getColumnSummaries","TOP","BOTTOM","TOPLEFT","TOPRIGHT","BOTTOMLEFT","BOTTOMRIGHT","IgxGridDragSelectDirective","onDragStop","onDragScroll","end$","lastDirection","DragScrollDirection","startDragSelection","activeDrag","_measureDimensions","_sub","_interval$","stopDragSelection","_activeDrag","trunc","IgxTemplateOutletDirective","_viewContainerRef","_embeddedViewsMap","onViewCreated","onViewMoved","onCachedViewLoaded","_getActionType","TemplateOutletAction","CreateView","_recreateView","MoveView","_moveView","UseCachedView","_useCachedView","UpdateViewContext","_updateExistingContext","igxTemplateOutletContext","cleanCache","cleanView","tmplID","_viewRef","igxTemplateOutlet","cachedView","oldContext","_cloneContext","_shouldRecreateView","ctxChange","_hasContextShapeChanged","prevCtxKeys","currCtxKeys","currCtxKeys_1","currCtxKeys_1_1","ctx","movedView","shouldRecreate","IgxTemplateOutletModule","IgxGridColumnResizerComponent","IgxGridFilteringRowComponent","_conditionsOverlaySettings","_operatorsOverlaySettings","chipAreaScrollOffset","isKeyPressed","isComposing","_cancelChipClick","resetExpression","addExpression","showHideArrowButtons","onTabKeydown","onEscKeydown","defaultDateUI","defaultFilterUI","onPrefixKeyDown","dropDownConditions","toggleConditionsDropDown","inputGroupPrefix","onInputKeyDown","commitInput","onInputKeyUp","onCompositionStart","onCompositionEnd","datePickerClose","indexToDeselect","scrollChipsWhenAddingExpression","onClearKeyDown","onClearClick","onCommitKeyDown","onCommitClick","onInputGroupFocusout","focusedElement","onDateSelected","toggleOperatorsDropDown","dropDownOperators","unaryConditionChangedCallback","conditionChangedCallback","onChipPointerdown","onChipClick","onChipSelected","onLeftArrowKeyDown","scrollChipsOnRemove","scrollChipsOnArrowPress","arrowPosition","chipAraeChildren","containerRect","containerWidth","chipsAreaWidth","showArrows","isColumnFiltered","containerRectRight","lastChipRectRight","resetChipsArea","dif","IgxGridTransaction","rootLevelOnly","childLevelsOnly","rootAndChildLevels","excelStyleFilter","dataCell","summaryCell","hierarchicalRow","differs","viewRef","_resourceStrings","_emptyGridMessage","_emptyFilteredGridMessage","_isLoading","overlayIDs","autoGenerate","columnHidingTitle","columnPinningTitle","onRowSelectionChange","onRowEditCancel","onColumnInit","onSortingDone","onPagingDone","onRowAdded","onRowDragStart","onRowDragEnd","onGridCopy","columnsWithNoSetWidths","_showToolbar","_exportExcel","_exportCsv","_toolbarTitle","_exportText","_exportExcelText","_exportCsvText","_rowEditable","_filteredSortedData","toolbarHtml","clipboardOptions","copyHeaders","copyFormatters","separator","chipsGoupingExpressions","activeMatchIndex","matchInfoCache","_perPage","_page","_paging","_rowDrag","_columns","_filteringExpressionsTree","_maxLevelHeaderDepth","_columnHiding","_columnPinning","_keydownListener","_vScrollListener","_hScrollListener","_wheelListener","_allowFiltering","_filterMode","_hiddenColumnsText","_pinnedColumnsText","_autoSize","_ngAfterViewInitPassed","_multiRowLayoutRowSize","_totalWidth","_pinnedVisible","_unpinnedVisible","_pinnedWidth","_unpinnedWidth","_visibleColumns","_columnGroups","_defaultTargetRecordNumber","_summaryPosition","GridSummaryPosition","_summaryCalculationMode","GridSummaryCalculationMode","rowEditPositioningStrategy","rowEditSettings","rowOutletDirective","resizeHandler","calculateGridSizes","_scrollWidth","filteringExpressionTreeClone","previous","deselectAllRows","refreshGridState","theadRow","headerGroups","_summaryRowList","sumList","_rowList","rList","_dataRowList","toolbarCustomContentTemplates","_outletDirective","rowEditingOutletDirective","rowEditCustom","defaultRowEditTemplate","rowEditTabsCUSTOM","rowEditTabsDEFAULT","_currentRowState","getExportExcel","getExportCsv","onStable","changeRowEditingOverlayStateOnScroll","hideOverlays","horizontalScrollHandler","_horizontalForOfs","vfor","overlayID","keydownHandler","isNavigationKey","_setupServices","_setupListeners","destructor","ind","columnListDiffer","shouldGenerate","getScrollWidth","setupColumns","autogenerateColumns","initColumns","onColumnsChanged","resetColumnsCaches","resetForOfCache","firstVirtRow","resetColumnCollections","resetCachedWidths","initPinning","isAttachedToDom","mutationsList","subtree","list","combineForOfCollections","summaryList","vertScrDC","$event","reattach","dataList","tmpOutlets","tmplOutlet","toggleColumnVisibility","paginatorClassName","paginatorSelectDisplayDensity","getFeatureColumnsWidth","defaultHeaderGroupMinWidth","getRowByKey","keyValue","getCellByColumn","columnField","getCellByKey","pagingState","nextPage","isLastPage","previousPage","isFirstPage","to","fromIndex","toIndex","newList","_resetColumnList","notifyOnChanges","_reorderPinnedColumns","dropIndex","_moveChildColumns","buffer","dropTarget","fi","ti","paginate","addRow","deleteRow","updateCell","isDefined","updateRow","enableSummaries","rest","_multipleSummaries","disableSummaries","_disableMultipleSummaries","pinColumn","unpinColumn","findNext","findPrev","updateActiveInfo","rebuildMatchCache","activeInfo_1","clearSearch","summaryCalculationMode","dataLength","columnWidthCombined","allItems","getPropertyValue","minHeight","summariesHeight","_calculateGridBodyHeight","getGroupAreaHeight","getToolbarHeight","toolbarHeight","showToolbar","getPagingHeight","pagingHeight","footer","footerBordersAndScrollbars","tfoot","computed","groupAreaHeight","renderedHeight","isPercentHeight","bodyHeight","getDataBasedBodyHeight","defaultTargetBodyHeight","hasVerticalSroll","scrollWidth","baseWidth","computedWidth","headerCheckboxContainer","visibleChildColumns","visibleCols","colsPerBlock","block","combinedBlocksSize","blockCols","columnsWithSetWidths","columnsToSize","sumExistingWidths","curr","widthValue","calculateGridWidth","getElementById","isPercentWidth","added_1","removed_1","hasScroll","repositionRowEditingOverlay","headerDragContainer","takeHidden","fc","fc_1","fc_1_1","summaryOperand","customSummary","resolveDataTypes","fields","generateDataFields","onlyTopLevel","layoutSize","columnLayoutColumns","onHeaderCheckboxClick","headerCheckbox","headerStatus","filteredItemsStatus","currSelection","atLeastOneSelected","notAllSelected","dataItem","updateHeaderCheckboxStatusOnFilter","selectedRows","selectRows","rowIDs","selectableRows","selectAllRows","clearCellSelection","dragScroll","arg","columnToVisibleIndex","startNode","endNode","getSelectedRanges","extractDataFromSelection","formatters","selectedData","selectionMap","tuple","temp_1","temp_1_1","getSelectableColumnsAt","selectionMap_1","selectionMap_1_1","colLayout","getSelectedData","newSelectionAsSet","oldSelectionAsSet","copyHandlerIE","copyHandler","ie11","setData","navigateTo","childGridsData","executeCallback","getNextCell","currRowIndex","curVisibleColIndex","isValidPosition","colIndexes","editCol","nextCellIndex","getNextDataRowIndex","getPreviousCell","prevCellIndex","getPrevDataRowIndex","GridKeydownTargetType","summaryCells","prevRow","nextRow","isScroll","compareDocumentPosition","DOCUMENT_POSITION_CONTAINS","trackColumnChanges","increment","rebuildCache","matchInfo","currentPinnedWidth","newUnpinnedCols","inCollection","filteredSortedData","delayScrolling","scrollDirective","scrollToHorizontally","scrollRow","goal","c1","c2","numberPipe","dataRow","occurenceIndex","searchIndex","_group","rowEditingOverlay","toggleRowEditingOverlay","configureRowEditingOverlay","rowEditingWheelHandler","closeRowEditingOverlay","rowStyle","useOuter","parentRowOutletDirective","rowChanges","writeToData","endRowTransaction","activeCell","hasHorizontalScroll","unpinnedWidth","_restoreVirtState","rowForOf","gridScrLeft","cachedViewLoaded","tmplId","templateID","index_1","summaryRow","IgxGridFooterComponent","IgxSummaryDataPipe","IgxProcessBarTextTemplateDirective","MIN_VALUE","CENTER","DANGER","BaseProgress","requestAnimationId","_valueInPercent","_max","_animate","runAnimation","updateProgressSmoothly","passedValue","convertInPercentage","progressValue","valueInPercent","updateProgress","isInLimitRange","updateProgressDirectly","directionFlow","comparator","isExceedingUpperLimit","isExceedingLowerLimit","NEXT_LINEAR_ID","NEXT_CIRCULAR_ID","IgxLinearProgressBarComponent","valueMin","striped","textAlign","IgxTextAlign","textVisibility","textTop","onProgressChanged","maxNum","_step","valueInRange","getValueInProperRange","changedValues","IgxProgressType","IgxCircularProgressBarComponent","STROKE_OPACITY_DVIDER","STROKE_OPACITY_ADDITION","_circleRadius","_circumference","PI","valueInProperRange","FRAMES","strokeDashoffset","getProgress","strokeOpacity","_svgCircle","percentage","IgxProgressBarModule","IgxSelectGroupComponent","IgxSelectItemComponent","SelectPositioningStrategy","_selectDefaultSettings","defaultWindowToListOffset","viewPort","positionAndScrollBottom","outBoundsAmount","listContainerBoundRect","positionNoScroll","CURRENT_POSITION_Y","itemTextToInputTextDiff","positionAndScrollTop","getItemsOutOfView","currentScroll","remainingScroll","listOutOfBounds","elementContainer","returnVals","Amount","inputRect","LIST_HEIGHT","itemTextPadding","itemTextIndent","point","itemElement","X","Y","getFirstItemElement","inputHeight","itemBoundRect","itemTopListOffset","inputFontSize","fontSize","numericInputFontSize","itemFontSize","inputTextToInputTop","itemTextToItemTop","CURRENT_BOTTOM_Y","OUT_OF_BOUNDS","itemLeftPadding","textIndent","numericLeftPadding","numericTextIndent","selectItemPaddingHorizontal","IgxSelectToggleIconDirective","IgxSelectComponent","itemText","manageRequiredAsterisk","IgxSelectItemNavigationDirective","inputStream","clearStream$","EMPTY","captureKey","timer","activateItemByText","activeItemIndex","nextItem","IgxSelectModule","IgxPaginatorComponent","defaultSelectValues","pagerEnabled","pagerHidden","dropdownEnabled","dropdownHidden","selectLabel","perPageChange","pageChange","_selectOptions","sortUniqueOptions","totalRecords","_totalRecords","newOption","IgxPaginatorModule","IgxGridCellStylesPipe","callbackOrValue","IgxGridNotGroupedPipe","IgxGridTopLevelColumns","IgxGridFilterConditionPipe","IgxGridTransactionPipe","IgxGridPaginatorOptionsPipe","IgxGridPipesModule","IgxExcelStyleColumnMovingComponent","findColumn","onMoveButtonClicked","moveDirection","IgxListBase","IgxEmptyListTemplateDirective","IgxDataLoadingTemplateDirective","IgxListItemLeftPanningTemplateDirective","IgxListItemRightPanningTemplateDirective","HammerGesturesManager","doc","hammerOptions","inputClass","TouchInput","recognizers","Pan","Pinch","enable","Rotate","Swipe","DIRECTION_HORIZONTAL","_hammerManagers","supports","eventHandler","mc","getManagerForElement","addManagerForElement","handler","eventObj","on","off","addGlobalEventListener","getGlobalEventTarget","getDOM","setManagerOption","manager","removeManagerForElement","IgxListItemComponent","_panState","IgxListPanState","panOffset","lastPanDir","onItemClicked","panStart","isTrue","allowLeftPanning","allowRightPanning","panMove","isPanningToLeft","showLeftPanTemplate","setContentElementLeft","maxLeft","showRightPanTemplate","maxRight","panEnd","relativeOffset","widthTriggeringGrip","panEndTriggeringThreshold","oldPanState","hideLeftAndRightPanTemplates","keepItem","onLeftPan","onRightPan","args2","oldState","newState","onPanStateChange","setLeftAndRightTemplatesVisibility","leftVisibility","rightVisibility","leftPanningTemplateElement","rightPanningTemplateElement","candidates","getElementsByClassName","IgxListThumbnailDirective","IgxListActionDirective","IgxListLineDirective","IgxListLineTitleDirective","IgxListLineSubTitleDirective","IgxListComponent","isLoading","isListEmpty","dataLoadingTemplate","defaultDataLoadingTemplate","emptyListTemplate","defaultEmptyListTemplate","IgxListModule","IgxExcelStyleSearchFilterPipe","it","IgxGridExcelStyleFilteringModule","IgxRowDragDirective","_rowDragStarted","transitionEndEvent","endDragging","dropArea","ghost","rowRect","ghostCells","IgxDragIndicatorIconDirective","IgxRowDragModule","IgxGridCommonModule","IgxGridAPIService","groupingState","arrange_sorting_expressions","groupBy_multiple","clear_groupby","names_1","groupedCols","newSortingExpr","grExprIndex","grpExpandState","groupingExpansionState","grExpr","sortExprIndex","groupingState_1","groupingState_1_1","groupBy_get_expanded_for_group","grState","groupBy_is_row_in_group","rowInGroup","groupBy_toggle_group","expansionState","isEditRowInGroup","rowState","groupsExpanded","groupBy_fully_expand_group","groupExprA","groupExprB","get_groupBy_record_id","recordId","hierrarchy","groupByKey","IgxGroupByRowTemplateDirective","IgxGroupAreaDropDirective","hovered","columnBelongsToGrid","isGrouped","column_1","closestParentByAttr","attr","closestGridID","IgxGridMRLNavigationService","startNavigationCell","applyNavigationCell","navDirection","oppositeDir","NavigationDirection","focusCellUpFromLayout","focusCellDownFromLayout","isParentColumnFullyVisible","scrollPos","getChildColumnScrollPositions","rightScroll","leftScroll","focusNextCellFromLayout","focusPrevCellFromLayout","nextElementColumn","_moveFocusToCell","nextCell_1","currCell","_focusCell","lastVisibleIndex_1","prevElementColumn","movePrev","isGroupRow","currentRowStart","currentColStart","parentIndex","upperElementColumn","layoutRowEnd_1","moveNext","currentRowEnd","currentColEnd","nextElement","layoutSize_1","prevElement","cellRowStart","layouts","lastLayout","lastLayoutChildren","indexInLayout","allBlocks","getColumnLayoutSelector","firstLayout","targetCol","getColunmByVisibleIndex","parentVIndex","childSizes","_isGroupRecordAt","getVerticalScrollPositions","topOffset","verticalDCTopOffset","rowBottom","isPrevious","rowTop","cellElem","gridBoundingClientRect","diffTop","diffBottom","IgxGridComponent","_groupingExpressions","_groupingExpandState","_hideGroupedColumns","_dropAreaMessage","onGroupingDone","dragIndicatorIconTemplate","_gridAPI","oldExpressions","_applyGrouping","groupedCols_1","ungroupedCols_1","groupingDoneArgs","groupedColumns","groupingDiffer","_setGroupColsVisibility","_groupsRowList","_groupRowTemplate","_groupAreaTemplate","clearGrouping","_getStateForGroupRow","_toggleGroup","fullyExpandGroup","_fullyExpandGroup","isGroupByRecord","toggleAllGroupRows","emptyGridTemplate","emptyFilteredGridTemplate","emptyGridDefaultTemplate","loadingGridTemplate","loadingGridDefaultTemplate","chipsOrderChanged","newGrouping","KeyboardEvent","chipsMovingEnded","columnExpr","groupArea","headerGroupContainer","groupingResult","groupByRecord","groupingMetadata","groupingFlatResult","dropAreaTemplate","defaultDropAreaTemplate","getGroupByChipTitle","groupTemplate","hideGroupedColumns","_setupNavigationService","source_1","IgxGridSortingPipe","IgxGridGroupingPipe","IgxGridPagingPipe","IgxGridFilteringPipe","IgxGridRowComponent","IgxGridSummaryPipe","summaryPosition","summaryPipeTrigger","addSummaryRows","gridId","recordsWithSummary","lastChildMap","maxSummaryHeight","g","skipAdd","groupRecords","groupRecord","groupRecordId","removeDeletedRecord","summaryRecord","lastChild","lastChildId","IgxGridModule","IgxTreeGridAPIService","flatData","processedRootRecords","expand_row","collapse_row","toggle_row_expansion","treeRecord","isExpanded","get_row_expansion_state","loadChildrenOnDemand","hasChildrenKey","onRowToggle","expand_path_to_record","expansionDepth","foreignKey","childData","treeGrid","flatDataWithCascadeOnDeleteAndTransactions","cascadeOnDelete","selectedChildren","get_selected_children","generateRowPath","selectedRowIDs","row_deleted_parent","IgxTreeGridNavigationService","IgxRowLoadingIndicatorTemplateDirective","IgxTreeGridComponent","processedRecords","_expansionDepth","Infinity","_expansionStates","loadingRows","cloneMap","_rowLoadingIndicatorTemplate","loadChildrenOnRowExpansion","rowLoadingTemplate","parentID_1","addChildRows","parentID","children_1","children_1_1","parentData","pid","mapIn","mapCloned","mapObj","expandRow","collapseRow","toggleRow","expandAll","collapseAll","parentRowID","parentRecord","childKey","processedExpandedFlatData","nonColumnLayoutColumns","IgxTreeGridRowComponent","_treeRow","IgxTreeGridHierarchizingPipe","hierarchicalRecords","treeGridRecordsMap","hierarchizeFlatData","hierarchizeRecursive","getRowID","missingParentRecords","setIndentationLevels","indentationLevel","IgxTreeGridFlatteningPipe","expandedLevels","getFlatDataRecursive","parentExpanded","updateNonProcessedRecordExpansion","IgxTreeGridSortingPipe","flattenTreeGridRecords","records_1","records_1_1","IgxTreeGridPagingPipe","IgxTreeGridTransactionPipe","aggregatedChanges","flatDataClone","hierarchicalDataClone","cloneHierarchicalArray","array_1","array_1_1","clonedItem","IgxTreeGridCellComponent","showIndicator","treeGridAPI","onIndicatorFocus","onLoadingDblClick","indicatorWidth","indicator","indicatorStyle","indicatorMargin","marginRight","leftPadding","indentationDiv","indentationStyle","IgxTreeGridSummaryPipe","cellIndentation","childRecord","deletedRows","lenght","IgxTreeGridModule","IgxHierarchicalSelectionAPIService","hSelection","add_sub_item","rootID","selItem","get_sub_item","clear_sub_item","IgxHierarchicalGridNavigationService","parentGrid","getClosestElemByTag","getChildContainer","getChildGridRowContainer","getChildGrid","childGridID","hgridAPI","getChildGrids","getIsChildAtIndex","isChildGridRecord","prevElem","focusPrevChild","_navigateUpInChild","scrollGrid","focusPrev","nextElem","focusNextChild","_navigateDownInChild","focusNext","cellSelector_1","_focusScrollCellInView","targetIndex_1","scrTopPosition","cellSelector_2","endIsVisible","scrollable","getNextScrollableDown","targetIndex_2","rowIsVisible","gridTop","_getMaxTop","scrGrid","getNextScrollable","topGrid","summaryRows","hasSummaries","isLastDataRow","nextIsDataRow","isLastColumn","isLastSummaryRow","virt","isNextChild","parentHasSummary","parentRowIndex","isLastRowInParent","nextIsSiblingChild","parentSummary","focusNextRow","childContainer","focusNextChildDOMElem","childGrid","targetGrid","prevSiblingChild","gridElem","dataRows","hasRows","performShiftTabIntoChild","selNode","getLastGridElem","lastRowIndex_1","closestChild","trContainer","focusPrevRow","scrTop","maxScroll","scrWith","parentRowOffset","lastCellIndex","grids","gridElems","childLevel","childLayoutList","hg","parentRow","isScrolledToBottom","lastRowInChild","currGrid","parentContainer","childRowContainer","prevIsSiblingChild","getNextParentInfo","nonScrollable","parentInfo","nextParentGrid","nextParentElem","_getMinBottom","cell_1","closestScrollableGrid","gridBottom","inView","canScroll","inChild","cellSelector_3","cell_2","rIndex_1","horizontalScrollGridToIndex","callBackFunc","containerTop","sourceElem","targetTag","IgxHierarchicalTransactionServiceFactory","useFactory","hierarchicalTransactionServiceFactory","IgxHierarchicalGridBaseComponent","transactionFactory","_expandChildren","createColumnsList","_createColumn","_createColGroupComponent","_createColComponent","factoryGroup","inputs","newChildren_1","newCol","factoryColumn","getGridsForIsland","rowIslandID","getChildGridsForRowIsland","IgxHierarchicalGridAPIService","childRowIslands","childGrids","registerChildRowIsland","rowIsland","unsetChildRowIsland","getChildRowIsland","currPath","pathElem","childrenForLayout","rowIslandKey","inDepth","layoutMap","getParentRowId","registerChildGrid","getChildGridByID","IgxRowIslandAPIService","unset","oldId","rowIslandAPI","IgxRowIslandComponent","childColumns","onLayoutChange","onGridCreated","initialChanges","layout_id","isInit","expandChildren","updateOnRender","pId","parentId","parentIsland","updateChildren","onRowIslandChange","nestedColumns","colsArray","topCols","updateColumnList","cleanGridState","childGridTemplates","tmpl","IgxChildGridRowComponent","selectionAPI","ch","_handleLayoutChanges","hGrid","childRow","l","IgxHierarchicalGridComponent","childLayoutKeys","highlightedRowID","_hierarchicalState","h_id","updateParentSizes","hierarchicalState","hg_verticalScrollHandler","hg_horizontalScrollHandler","cachedData","recalcColSizes","allLayoutList","colLength","_clearSeletionHighlights","hasExpandableChildren","headerHierarchyExpander","getDefaultExpanderWidth","isRowHighlighted","isHierarchicalRecord","trackChanges","moveView","rootHeight","topDiff","collapseAllRows","viewCreatedHandler","viewMovedHandler","relatedGrid","vScr","hScr","inDeph","onContainerScroll","hadScrollbar","IgxHierarchicalGridCellComponent","helement","_rootGrid","_getRootGrid","_clearAllHighlights","currentElement","added","persistFocusedCell","IgxHierarchicalRowComponent","hselection","IgxGridHierarchicalPipe","childKeys","addHierarchy","IgxGridHierarchicalPagingPipe","IgxHierarchicalGridModule","IgxActionIconDirective","IgxNavbarComponent","titleId","actionIconTemplate","actionButtonIcon","_triggerAction","IgxNavbarModule","IgxNavDrawerItemDirective","activeClass","IgxNavDrawerTemplateDirective","IgxNavDrawerMiniTemplateDirective","IgxNavigationDrawerComponent","_state","_touchManager","enableGestures","pinThreshold","miniWidth","pinChange","opened","closing","_gesturesAttached","_widthCache","windowWidth","css","drawer","mini","styleDummy","_panning","_maxEdgeZone","checkPinThreshold","getWindowWidth","swipe","startPosition","center","distance","maxEdgeZone","panstart","_panStartWidth","getExpectedWidth","_panLimit","setElementClass","visibleWidth","newX","percent","hasAnimateWidth","setXSize","toPrecision","resetPan","toggleOpenedEvent","toggleClosedEvent","miniTemplate","contentTemplate","_miniTemplate","setDrawerWidth","_drawer","_overlay","_styleDummy","updateEdgeZone","ensureEvents","_resizeObserver","set_maxEdgeZone","innerWidth","screen","setElementStyle","getDrawerWidth","Renderer","IgxNavigationDrawerModule","IgxThumbFromTemplateDirective","IgxThumbToTemplateDirective","SLIDER","FROM","TO","IgxSliderThumbComponent","_elementRef","_isActiveLabel","_isPressed","onThumbValueChange","onChange","onHoverChange","zIndex","thumbBounderies","thumbCenter","SliderHandle","onPan","mouseX","updateThumbValue","onPinterEnter","onPointerLeave","onFocusListener","showThumbIndicators","toggleThumbIndicators","hideThumbIndicators","calculateTrackUpdate","scaleX","thumbPositionX","stepDistanceCenter","stepDistance","stepToProceed","stepDist","continuous","IgxSliderComponent","_pMin","_pMax","_hasViewInit","_minValue","_maxValue","_continuous","_labels","SliderType","_destroyer$","_indicatorsDestroyer$","thumbs","slierClass","thumbLabelVisibilityDuration","thumb","lowerValue","labelsViewEnabled","upperValue","labels","updateTrack","calculateStepDistance","positionHandlesAndUpdateTrack","setTickInterval","normalizeByStep","disable","changeThumbFocusableState","lowerBound","updateLowerBoundAndMinTravelZone","upperBound","updateUpperBoundAndMaxTravelZone","_lowerBound","valueToFraction","_upperBound","isRange","lower","upper","validateInitialValue","findClosestThumb","thumbTo","thumbFrom","showThumbsIndicators","hideThumbsIndicators","toggleThumbLabels","onPanListener","onPanStart","onPanEnd","onTapListener","onTap","_lowerValue","_upperValue","sliderSetup","subscribeTo","thumbChanged","positionHandle","thumbType","swapThumb","hasValueChanged","emitValueChanged","onThumbChange","toggleThumb","closestHandle","generateTickMarks","handle","fromOffset","offsetLeft","toOffset","xPointer","closestTo","trackRange","renderCallbackExecution","ticks","_indicatorsTimer","positions","pMin","pMax","positionGap","trackLeftIndention","track","unsubscriber","merge","isSliderWithDifferentValue","isRangeWithOneDifferentValue","IgxSliderModule","IgxSnackbarComponent","autoHide","displayTime","animationStarted","triggerAction","snackbarAnimationStarted","fromState","snackbarAnimationDone","toOpacity","IgxSnackbarModule","IgxSwitchComponent","switch","_onSwitchChange","_onSwitchClick","SwitchLabelPosition","IGX_SWITCH_REQUIRED_VALIDATOR","IgxSwitchRequiredDirective","IgxSwitchModule","IgxTabTemplateDirective","IgxBottomNavComponent","onTabSelected","onTabDeselected","selectedIndex","_itemStyle","hasContentTabs","contentTabs","viewTabs","tabs","panels","_selectedPanelHandler","tab","_deselectTab","_deselectPanel","selectedTab","aTab","IgxTabComponent","IgxTabPanelComponent","_tabBar","_isSelected","relatedTab","changesCount","_tabTemplate","tabTemplate","ariaDisabled","ariaSelected","ariaControls","_changesCount","relatedPanel","customTabTemplate","customTabTemplateDir","defaultTabTemplate","IgxBottomNavModule","IgxTabsBase","scrollElement","scrollRight","IgxRightButtonStyleDirective","getRightButtonStyle","ButtonStyle","viewPortWidth","itemsContainerChildrenCount","itemsContainer","itemsContainerWidth","lastTab","headerContainerWidth","IgxLeftButtonStyleDirective","getLeftButtonStyle","IgxTabItemTemplateDirective","IgxTabsGroupComponent","_tabs","onResize","transformContentAnimation","tabItem","nativeTabItem","transformIndicatorAnimation","focusDelay","onTabItemSelected","tabElement","viewPortOffsetWidth","contentOffset","tabsContainer","contentsContainer","selectedIndicator","IgxTabItemComponent","_nativeTabItem","relatedGroup","handleTabSelectionAnimation","isLeftArrow","tabsArray","FIXED","CONTENTFIT","IgxTabsComponent","tabsType","onTabItemDeselected","_selectedIndex","setSelectedGroup","iconLabelFoundInGroups","iconLabelFoundInTabs","TabsType","selectedGroupHandler","theTabsArray","prevSelectedIndex","deselectGroup","_groupChanges$","resetSelectionOnCollectionChanged","selectGroupByIndex","selectableGroup","selectedTabItem","tabsArray_1","tabsArray_1_1","IgxTabsModule","IgxItemListDirective","timePicker","nextHour","nextMinute","nextAmPm","prevHour","prevMinute","prevAmPm","listName","minuteList","ampmList","hourList","okButtonClick","cancelButtonClick","onHover","onPanMove","IgxHourItemDirective","itemList","isSelectedHour","selectedHour","scrollHourIntoView","IgxMinuteItemDirective","isSelectedMinute","selectedMinute","scrollMinuteIntoView","IgxAmPmItemDirective","isSelectedAmPm","selectedAmPm","scrollAmPmIntoView","IgxTimePickerTemplateDirective","IgxTimePickerActionsDirective","TimeDisplayFormatPipe","hour","amPM","maskAmPM","sections","showHoursList","showMinutesList","showAmPmList","prompt","regExp","hourVal","minutesVal","TimeInputFormatPipe","cleared","leadZeroHour","leadZeroMinutes","HOURS_POS","MINUTES_POS","AMPM_POS","TimePickerHammerConfig","IgxTimePickerComponent","itemsDelta","_hourItems","_minuteItems","_ampmItems","isNotEmpty","displayFormat","inputFormat","_okButtonLabel","_cancelButtonLabel","_isHourListLoop","_isMinuteListLoop","_hourView","_minuteView","_ampmView","_isValueValid","dispVal","_formatTime","_displayValue","displayValue","setThroughUI","formatValue","_dialogOverlaySettings","_mask","minuteEntries","hourEntries","timePickerTemplateDirective","defaultTimePickerTemplate","dropdownInputTemplate","_generateHours","_generateMinutes","_generateAmPm","spinOnEdit","_input","_onDropDownClosed","onKeydownSpace","onAltArrowDown","_scrollItemIntoView","isListLoop","viewType","itemIntoView","_itemToString","_nextItem","_prevItem","_viewToString","leadZeroMinute","itemsCount","formattedMinute","formattedHour","minute","_updateHourView","_updateMinuteView","_updateAmPmView","_addEmptyItems","hourItemsCount","minuteItemsCount","_getSelectedTime","_convertMinMaxValue","_dateFromModel","_isEntryValid","validH","validM","re","validHourEntries","validMinuteEntries","_updateEditableInput","_spinHours","currentVal","maxVal","hDelta","_spinMinutes","mDelta","_initializeContainer","_prevSelectedHour","_prevSelectedMinute","_prevSelectedAmPm","hourIntoView","minuteIntoView","ampmIntoView","time","hoursInView","minutesInView","ampmInView","ampm","preserveAmPm","maskWithAmPm","pureMask","displayVal","IgxTimePickerModule","IgxToastComponent","CSS_CLASSES","IGX_TOAST_BOTTOM","IGX_TOAST_MIDDLE","IGX_TOAST_TOP","onShowing","onShown","onHiding","onHidden","IgxToastPosition","mapPositionToClassName","IgxToastModule","SMALL","MEDIUM","LARGE"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","enum EaseIn {\n    quad = `cubic-bezier(0.550, 0.085, 0.680, 0.530)` as any,\n    cubic = `cubic-bezier(0.550, 0.055, 0.675, 0.190)` as any,\n    quart = `cubic-bezier(0.895, 0.030, 0.685, 0.220)` as any,\n    quint = `cubic-bezier(0.755, 0.050, 0.855, 0.060)` as any,\n    sine = `cubic-bezier(0.470, 0.000, 0.745, 0.715)` as any,\n    expo = `cubic-bezier(0.950, 0.050, 0.795, 0.035)` as any,\n    circ = `cubic-bezier(0.600, 0.040, 0.980, 0.335)` as any,\n    back = `cubic-bezier(0.600, -0.280, 0.735, 0.045)` as any\n}\n\nenum EaseOut {\n    quad = `cubic-bezier(0.250, 0.460, 0.450, 0.940)` as any,\n    cubic = `cubic-bezier(0.215, 0.610, 0.355, 1.000)` as any,\n    quart = `cubic-bezier(0.165, 0.840, 0.440, 1.000)` as any,\n    quint = `cubic-bezier(0.230, 1.000, 0.320, 1.000)` as any,\n    sine = `cubic-bezier(0.390, 0.575, 0.565, 1.000)` as any,\n    expo = `cubic-bezier(0.190, 1.000, 0.220, 1.000)` as any,\n    circ = `cubic-bezier(0.075, 0.820, 0.165, 1.000)` as any,\n    back = `cubic-bezier(0.175, 0.885, 0.320, 1.275)` as any\n}\n\nenum EaseInOut {\n    quad = `cubic-bezier(0.455, 0.030, 0.515, 0.955)` as any,\n    cubic = `cubic-bezier(0.645, 0.045, 0.355, 1.000)` as any,\n    quart = `cubic-bezier(0.770, 0.000, 0.175, 1.000)` as any,\n    quint = `cubic-bezier(0.860, 0.000, 0.070, 1.000)` as any,\n    sine = `cubic-bezier(0.445, 0.050, 0.550, 0.950)` as any,\n    expo = `cubic-bezier(1.000, 0.000, 0.000, 1.000)` as any,\n    circ = `cubic-bezier(0.785, 0.135, 0.150, 0.860)` as any,\n    back = `cubic-bezier(0.680, -0.550, 0.265, 1.550)` as any\n}\n\nexport { EaseIn, EaseOut, EaseInOut };\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`\n        })\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseOut.sine,\n    endOpacity: 1,\n    startOpacity: 0\n};\n\nconst fadeIn: AnimationReferenceMetadata = animation(base, {\n    params: baseParams\n});\n\nconst fadeOut: AnimationReferenceMetadata = animation(base, {\n    params: {\n        delay: '0s',\n        duration: '350ms',\n        easing: EaseOut.sine,\n        endOpacity: 0,\n        startOpacity: 1\n    }\n});\n\nexport { fadeIn, fadeOut };\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst baseRecipe: AnimationMetadata[] = [\n    style({\n        backfaceVisibility: 'hidden',\n        transformStyle: 'preserve-3d'\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `translateZ({{startDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{startAngle}}deg)`\n            }),\n            style({\n                offset: 1,\n                transform: `translateZ({{endDistance}})\n                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{endAngle}}deg)`\n            })\n        ])\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '600ms',\n    easing: EaseOut.quad,\n    endAngle: 180,\n    endDistance: '0px',\n    rotateX: 1,\n    rotateY: 0,\n    rotateZ: 0,\n    startAngle: 0,\n    startDistance: '0px'\n};\n\nconst flipTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams\n    }\n});\n\nconst flipBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: -180\n    }\n});\n\nconst flipLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: -180,\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipHorFwd: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '170px'\n    }\n});\n\nconst flipHorBck: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '-170px'\n    }\n});\n\nconst flipVerFwd: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '170px',\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nconst flipVerBck: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endDistance: '-170px',\n        rotateX: 0,\n        rotateY: 1\n    }\n});\n\nexport {\n    flipTop,\n    flipRight,\n    flipBottom,\n    flipLeft,\n    flipHorFwd,\n    flipHorBck,\n    flipVerFwd,\n    flipVerBck\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst baseRecipe: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{startAngle}}deg)`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            offset: 0,\n            opacity: `{{endOpacity}}`,\n            transform: `rotate3d({{rotateX}},{{rotateY}},{{rotateZ}},{{endAngle}}deg)`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    duration: '600ms',\n    easing: EaseOut.quad,\n    endAngle: 0,\n    endOpacity: 1,\n    rotateX: 0,\n    rotateY: 0,\n    rotateZ: 1,\n    startAngle: -360,\n    startOpacity: 0,\n    xPos: 'center',\n    yPos: 'center'\n};\n\nconst baseOutParams: IAnimationParams = {\n    ...baseInParams,\n    easing: EaseIn.quad,\n    endOpacity: 0,\n    startOpacity: 1\n};\n\nconst rotateInCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: { ...baseInParams }\n});\n\nconst rotateOutCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: { ...baseOutParams }\n});\n\nconst rotateInTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'top'\n    }\n});\n\nconst rotateOutTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'top'\n    }\n});\n\nconst rotateInRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right'\n    }\n});\n\nconst rotateOutRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right'\n    }\n});\n\nconst rotateInBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'bottom'\n    }\n});\n\nconst rotateOutBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'bottom'\n    }\n});\n\nconst rotateInLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left'\n    }\n});\n\nconst rotateOutLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left'\n    }\n});\n\nconst rotateInTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst rotateOutTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst rotateInBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateOutBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateInBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateOutBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst rotateInTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nconst rotateOutTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nconst rotateInDiagonal1: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutDiagonal1: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInDiagonal2: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: -1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutDiagonal2: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: -1,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 0,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 0,\n        rotateY: 1,\n        rotateZ: 0\n    }\n});\n\nconst rotateInVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseInParams,\n        rotateX: 1,\n        rotateY: 0,\n        rotateZ: 0\n    }\n});\n\nconst rotateOutVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseOutParams,\n        rotateX: 1,\n        rotateY: 0,\n        rotateZ: 0\n    }\n});\n\nexport {\n    rotateInCenter,\n    rotateInTop,\n    rotateInRight,\n    rotateInLeft,\n    rotateInBottom,\n    rotateInTr,\n    rotateInBr,\n    rotateInBl,\n    rotateInTl,\n    rotateInDiagonal1,\n    rotateInDiagonal2,\n    rotateInHor,\n    rotateInVer,\n    rotateOutCenter,\n    rotateOutTop,\n    rotateOutRight,\n    rotateOutLeft,\n    rotateOutBottom,\n    rotateOutTr,\n    rotateOutBr,\n    rotateOutBl,\n    rotateOutTl,\n    rotateOutDiagonal1,\n    rotateOutDiagonal2,\n    rotateOutHor,\n    rotateOutVer\n};\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { EaseInOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst baseRecipe: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `rotate(0deg) translate{{direction}}(0)`,\n                transformOrigin: `{{xPos}} {{yPos}}`\n            }),\n            style({\n                offset: 0.1,\n                transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.2,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n            }),\n            style({\n                offset: 0.3,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.4,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n\n            }),\n            style({\n                offset: 0.5,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.6,\n                transform: `rotate(-{{startAngle}}deg) translate{{direction}}({{startDistance}})`\n\n            }),\n            style({\n                offset: 0.7,\n                transform: `rotate({{startAngle}}deg) translate{{direction}}(-{{startDistance}})`\n            }),\n            style({\n                offset: 0.8,\n                transform: `rotate(-{{endAngle}}deg) translate{{direction}}({{endDistance}})`\n\n            }),\n            style({\n                offset: 0.9,\n                transform: `rotate({{endAngle}}deg) translate{{direction}}(-{{endDistance}})`\n\n            }),\n            style({\n                offset: 1,\n                transform: `rotate(0deg) translate{{direction}}(0)`,\n                transformOrigin: `{{xPos}} {{yPos}}`\n            })\n        ])\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    direction: 'X',\n    duration: '800ms',\n    easing: EaseInOut.quad,\n    endAngle: 0,\n    endDistance: '8px',\n    startAngle: 0,\n    startDistance: '10px',\n    xPos: 'center',\n    yPos: 'center'\n};\n\nconst shakeHor: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'X'\n    }\n});\n\nconst shakeVer: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y'\n    }\n});\n\nconst shakeTop: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        yPos: 'top'\n    }\n});\n\nconst shakeBottom: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeRight: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'center'\n    }\n});\n\nconst shakeLeft: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'center'\n    }\n});\n\nconst shakeCenter: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 8,\n        endDistance: '0',\n        startAngle: 10,\n        startDistance: '0',\n        xPos: 'center',\n        yPos: 'center'\n    }\n});\n\nconst shakeTr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'top'\n    }\n});\n\nconst shakeBr: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'right',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeBl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'bottom'\n    }\n});\n\nconst shakeTl: AnimationReferenceMetadata = animation(baseRecipe, {\n    params: {\n        ...baseParams,\n        direction: 'Y',\n        endAngle: 2,\n        endDistance: '0',\n        startAngle: 4,\n        startDistance: '0',\n        xPos: 'left',\n        yPos: 'top'\n    }\n});\n\nexport {\n    shakeHor,\n    shakeVer,\n    shakeTop,\n    shakeBottom,\n    shakeRight,\n    shakeLeft,\n    shakeCenter,\n    shakeTr,\n    shakeBr,\n    shakeBl,\n    shakeTl\n};\n","import {\n    animate,\n    animation,\n    AnimationMetadata,\n    AnimationReferenceMetadata,\n    keyframes,\n    style\n} from '@angular/animations';\nimport { IAnimationParams } from '../main';\n\nconst heartbeatBase: AnimationMetadata[] = [\n    style({\n        animationTimingFunction: `ease-out`,\n        transform: `scale(1)`,\n        transformOrigin: `center center`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                animationTimingFunction: `ease-in`,\n                offset: 0.1,\n                transform: `scale(0.91)`\n            }),\n            style({\n                animationTimingFunction: `ease-out`,\n                offset: 0.17,\n                transform: `scale(0.98)`\n            }),\n            style({\n                animationTimingFunction: `ease-in`,\n                offset: 0.33,\n                transform: `scale(0.87)`\n            }),\n            style({\n                animationTimingFunction: `ease-out`,\n                offset: 0.45,\n                transform: `scale(1)`\n            })\n        ])\n    )\n];\n\nconst heartbeatParams: IAnimationParams = {\n    delay: '0s',\n    duration: '1.5s',\n    easing: 'ease-in-out'\n};\n\nconst pulsateBase: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                transform: `scale({{fromScale}})`\n            }),\n            style({\n                offset: 0.5,\n                transform: `scale({{toScale}})`\n            }),\n            style({\n                offset: 1,\n                transform: `scale({{fromScale}})`\n            })\n        ])\n    )\n];\n\nconst pulsateParams: IAnimationParams = {\n    delay: '0s',\n    duration: '.5s',\n    easing: 'ease-in-out',\n    fromScale: 1,\n    toScale: 1.1\n};\n\nconst blinkBase: AnimationMetadata[] = [\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        keyframes([\n            style({\n                offset: 0,\n                opacity: .8,\n                transform: `scale({{fromScale}})`\n            }),\n            style({\n                offset: 0.8,\n                opacity: 0,\n                transform: `scale({{midScale}})`\n            }),\n            style({\n                offset: 1,\n                opacity: 0,\n                transform: `scale({{toScale}})`\n            })\n        ])\n    )\n];\n\nconst blinkParams: IAnimationParams = {\n    delay: '0s',\n    duration: '.8s',\n    easing: 'ease-in-out',\n    fromScale: .2,\n    midScale: 1.2,\n    toScale: 2.2\n};\n\nconst pulsateFwd = animation(pulsateBase, {\n    params: {\n        ...pulsateParams\n    }\n});\n\nconst pulsateBck = animation(pulsateBase, {\n    params: {\n        ...pulsateParams,\n        toScale: .9\n    }\n});\n\nconst heartbeat = animation(heartbeatBase, {\n    params: {\n        ...heartbeatParams\n    }\n});\n\nconst blink = animation(blinkBase, {\n    params: {\n        ...blinkParams\n    }\n});\n\nexport {\n    heartbeat,\n    pulsateFwd,\n    pulsateBck,\n    blink\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `scale{{direction}}({{fromScale}})`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `scale{{direction}}({{toScale}})`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    direction: '',\n    duration: '350ms',\n    easing: EaseOut.quad,\n    endOpacity: 1,\n    fromScale: .5,\n    startOpacity: 0,\n    toScale: 1,\n    xPos: '50%',\n    yPos: '50%'\n};\n\nconst baseOutParams: IAnimationParams = {\n    ...baseInParams,\n    easing: EaseOut.sine,\n    endOpacity: 0,\n    fromScale: 1,\n    startOpacity: 1,\n    toScale: .5\n};\n\nconst scaleInCenter: AnimationReferenceMetadata = animation(base, { params: baseInParams });\n\nconst scaleInBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInVerCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4\n        }\n    }\n);\n\nconst scaleInTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '50%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleInVerTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInTr = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInVerBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'Y',\n            fromScale: .4,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleInHorCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4\n        }\n    }\n);\n\nconst scaleInBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInHorLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleInBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            xPos: '50%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleInHorRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            direction: 'X',\n            fromScale: .4,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutCenter: AnimationReferenceMetadata = animation(base, { params: baseOutParams });\n\nconst scaleOutBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutVerCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3\n        }\n    }\n);\n\nconst scaleOutVerTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutVerBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'Y',\n            toScale: .3,\n            xPos: '0',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutTop: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '50%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleOutTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '100%',\n            yPos: '50%'\n        }\n    }\n);\n\nconst scaleOutBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            xPos: '50%',\n            yPos: '100%'\n        }\n    }\n);\n\nconst scaleOutHorCenter: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3\n        }\n    }\n);\n\nconst scaleOutHorLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3,\n            xPos: '0',\n            yPos: '0'\n        }\n    }\n);\n\nconst scaleOutHorRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            direction: 'X',\n            toScale: .3,\n            xPos: '100%',\n            yPos: '100%'\n        }\n    }\n);\n\nexport {\n    scaleInTop,\n    scaleInRight,\n    scaleInBottom,\n    scaleInLeft,\n    scaleInCenter,\n    scaleInTr,\n    scaleInBr,\n    scaleInBl,\n    scaleInTl,\n    scaleInVerTop,\n    scaleInVerBottom,\n    scaleInVerCenter,\n    scaleInHorCenter,\n    scaleInHorLeft,\n    scaleInHorRight,\n    scaleOutTop,\n    scaleOutRight,\n    scaleOutBottom,\n    scaleOutLeft,\n    scaleOutCenter,\n    scaleOutTr,\n    scaleOutBr,\n    scaleOutBl,\n    scaleOutTl,\n    scaleOutVerTop,\n    scaleOutVerBottom,\n    scaleOutVerCenter,\n    scaleOutHorCenter,\n    scaleOutHorLeft,\n    scaleOutHorRight\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `{{fromPosition}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `{{toPosition}}`\n        })\n    )\n];\n\nconst baseInParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseOut.quad,\n    endOpacity: 1,\n    fromPosition: 'translateY(-500px)',\n    startOpacity: 0,\n    toPosition: 'translateY(0)'\n};\n\nconst baseOutParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseIn.quad,\n    endOpacity: 0,\n    fromPosition: 'translateY(0)',\n    startOpacity: 1,\n    toPosition: 'translateY(-500px)'\n};\n\nconst slideInTop: AnimationReferenceMetadata = animation(base, { params: baseInParams });\n\nconst slideInLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateX(-500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateX(500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseOut.quad,\n            endOpacity: 1,\n            fromPosition: 'translateY(500px)',\n            startOpacity: 0,\n            toPosition: 'translateY(0)'\n        }\n    }\n);\n\nconst slideInTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(-500px) translateX(500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(-500px) translateX(-500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(500px) translateX(500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideInBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseInParams,\n            fromPosition: 'translateY(500px) translateX(-500px)',\n            toPosition: 'translateY(0) translateX(0)'\n        }\n    }\n);\n\nconst slideOutTop: AnimationReferenceMetadata = animation(base, { params: baseOutParams });\n\nconst slideOutRight: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            toPosition: 'translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBottom: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            delay: '0s',\n            duration: '350ms',\n            easing: EaseIn.quad,\n            endOpacity: 0,\n            fromPosition: 'translateY(0)',\n            startOpacity: 1,\n            toPosition: 'translateY(500px)'\n        }\n    }\n);\n\nconst slideOutLeft: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            toPosition: 'translateX(-500px)'\n        }\n    }\n);\n\nconst slideOutTr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(-500px) translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBr: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(500px) translateX(500px)'\n        }\n    }\n);\n\nconst slideOutBl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(500px) translateX(-500px)'\n        }\n    }\n);\n\nconst slideOutTl: AnimationReferenceMetadata = animation(base,\n    {\n        params: {\n            ...baseOutParams,\n            fromPosition: 'translateY(0) translateX(0)',\n            toPosition: 'translateY(-500px) translateX(-500px)'\n        }\n    }\n);\n\nexport {\n    slideInTop,\n    slideInRight,\n    slideInBottom,\n    slideInLeft,\n    slideInTr,\n    slideInBr,\n    slideInBl,\n    slideInTl,\n    slideOutTop,\n    slideOutBottom,\n    slideOutRight,\n    slideOutLeft,\n    slideOutTr,\n    slideOutBr,\n    slideOutBl,\n    slideOutTl\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseIn, EaseOut } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst swingBase: AnimationMetadata[] = [\n    style({\n        opacity: `{{startOpacity}}`,\n        transform: `rotate{{direction}}({{startAngle}}deg)`,\n        transformOrigin: `{{xPos}} {{yPos}}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{endOpacity}}`,\n            transform: `rotate{{direction}}({{endAngle}}deg)`,\n            transformOrigin: `{{xPos}} {{yPos}}`\n        })\n    )\n];\n\nconst swingParams: IAnimationParams = {\n    delay: '0s',\n    direction: 'X',\n    duration: '.5s',\n    easing: EaseOut.back,\n    endAngle: 0,\n    endOpacity: 1,\n    startAngle: -100,\n    startOpacity: 0,\n    xPos: 'top',\n    yPos: 'center'\n};\n\nconst swingOutParams: IAnimationParams = {\n    ...swingParams,\n    duration: '.55s',\n    easing: EaseIn.back,\n    endAngle: 70,\n    endOpacity: 0,\n    startAngle: 0,\n    startOpacity: 1\n};\n\nconst swingInTopFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams\n    }\n});\n\nconst swingInRightFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingInBottomFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        startAngle: 100,\n        xPos: 'bottom'\n    }\n});\n\nconst swingInLeftFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        startAngle: 100,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingInTopBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        duration: '.6s',\n        startAngle: 70\n    }\n});\n\nconst swingInRightBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        duration: '.6s',\n        startAngle: 70,\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingInBottomBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        duration: '.6s',\n        startAngle: -70,\n        xPos: 'bottom'\n    }\n});\n\nconst swingInLeftBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingParams,\n        direction: 'Y',\n        duration: '.6s',\n        startAngle: -70,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingOutTopFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams\n    }\n});\n\nconst swingOutRightFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingOutBottomFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        endAngle: -70,\n        xPos: 'bottom'\n    }\n});\n\nconst swingOutLefttFwd: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        endAngle: -70,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nconst swingOutTopBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        duration: '.45s',\n        endAngle: -100\n    }\n});\n\nconst swingOutRightBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        duration: '.45s',\n        endAngle: -100,\n        xPos: 'center',\n        yPos: 'right'\n    }\n});\n\nconst swingOutBottomBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        duration: '.45s',\n        endAngle: 100,\n        xPos: 'bottom'\n    }\n});\n\nconst swingOutLeftBck: AnimationReferenceMetadata = animation(swingBase, {\n    params: {\n        ...swingOutParams,\n        direction: 'Y',\n        duration: '.45s',\n        endAngle: 100,\n        xPos: 'center',\n        yPos: 'left'\n    }\n});\n\nexport {\n    swingInTopFwd,\n    swingInRightFwd,\n    swingInLeftFwd,\n    swingInBottomFwd,\n    swingInTopBck,\n    swingInRightBck,\n    swingInBottomBck,\n    swingInLeftBck,\n    swingOutTopFwd,\n    swingOutRightFwd,\n    swingOutBottomFwd,\n    swingOutLefttFwd,\n    swingOutTopBck,\n    swingOutRightBck,\n    swingOutBottomBck,\n    swingOutLeftBck\n};\n","import { animate, animation, AnimationMetadata, AnimationReferenceMetadata, style } from '@angular/animations';\nimport { EaseOut, EaseIn } from '../easings';\nimport { IAnimationParams } from '../main';\n\nconst base: AnimationMetadata[] = [\n    style({\n        opacity: `{{ startOpacity }}`,\n        height: `{{ startHeight }}`\n    }),\n    animate(\n        `{{duration}} {{delay}} {{easing}}`,\n        style({\n            opacity: `{{ endOpacity }}`,\n            height: `{{ endHeight }}`\n        })\n    )\n];\n\nconst baseParams: IAnimationParams = {\n    delay: '0s',\n    duration: '350ms',\n    easing: EaseIn.quad,\n    startOpacity: 0,\n    endOpacity: 1,\n    startHeight: '',\n    endHeight: ''\n};\n\nconst growVerIn: AnimationReferenceMetadata = animation(base, {\n    params: {\n        ...baseParams,\n        easing: EaseOut.quad,\n        startOpacity: 0,\n        endOpacity: 1,\n        startHeight: '0px',\n        endHeight: '*'\n    }\n});\n\nconst growVerOut: AnimationReferenceMetadata = animation(base, {\n    params: {\n        ...baseParams,\n        easing: EaseOut.quad,\n        startOpacity: 1,\n        endOpacity: 0,\n        startHeight: '*',\n        endHeight: '0px'\n    }\n});\n\nexport { growVerIn, growVerOut };\n","import { IToggleView } from './IToggleView';\n\n/**\n * Common service to be injected between components where those implementing common\n * ToggleView interface can register and toggle directives can call their methods.\n * TODO: Track currently active? Events?\n */\nexport class IgxNavigationService {\n    private navs: { [id: string]: IToggleView; };\n\n    constructor() {\n        this.navs = {};\n    }\n\n    public add(id: string, navItem: IToggleView) {\n        this.navs[id] = navItem;\n    }\n\n    public remove(id: string) {\n        delete this.navs[id];\n    }\n\n    public get(id: string): IToggleView {\n        if (id) {\n            return this.navs[id];\n        }\n    }\n\n    public toggle(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].toggle(...args);\n        }\n    }\n    public open(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].open(...args);\n        }\n    }\n    public close(id: string, ...args) {\n        if (this.navs[id]) {\n            return this.navs[id].close(...args);\n        }\n    }\n}\n","import { Directive, HostListener, Input, NgModule } from '@angular/core';\nimport {IgxNavigationService} from './nav.service';\n\n/**\n * Directive that can toggle targets through provided NavigationService.\n *\n * Usage:\n * ```\n * <button igxNavToggle=\"ID\"> Toggle </button>\n * ```\n * Where the `ID` matches the ID of compatible `IToggleView` component.\n */\n@Directive({ selector: '[igxNavToggle]' })\nexport class IgxNavigationToggleDirective {\n    public state: IgxNavigationService;\n\n    @Input('igxNavToggle') private target;\n\n    constructor(nav: IgxNavigationService) {\n        this.state = nav;\n    }\n\n    @HostListener('click')\n    public toggleNavigationDrawer() {\n        this.state.toggle(this.target, true);\n    }\n}\n\n/**\n * Directive that can close targets through provided NavigationService.\n *\n * Usage:\n * ```\n * <button igxNavClose=\"ID\"> Close </button>\n * ```\n * Where the `ID` matches the ID of compatible `IToggleView` component.\n */\n@Directive({ selector: '[igxNavClose]' })\nexport class IgxNavigationCloseDirective {\n    public state: IgxNavigationService;\n\n    @Input('igxNavClose') private target;\n\n    constructor(nav: IgxNavigationService) {\n        this.state = nav;\n    }\n\n    @HostListener('click')\n    public closeNavigationDrawer() {\n        this.state.close(this.target, true);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],\n    exports: [IgxNavigationCloseDirective, IgxNavigationToggleDirective],\n    providers: [IgxNavigationService]\n})\nexport class IgxNavigationModule {}\n","/**\n *@hidden\n */\nexport function cloneArray(array: any[], deep?: boolean) {\n    const arr = [];\n    if (!array) {\n        return arr;\n    }\n    let i = array.length;\n    while (i--) {\n        arr[i] = deep ? cloneValue(array[i]) : array[i];\n    }\n    return arr;\n}\n\n/**\n * Doesn't clone leaf items\n * @hidden\n */\nexport function cloneHierarchicalArray(array: any[], childDataKey: any): any[] {\n    const result: any[] = [];\n    if (!array) {\n        return result;\n    }\n\n    for (const item of array) {\n        const clonedItem = cloneValue(item);\n        if (Array.isArray(item[childDataKey])) {\n            clonedItem[childDataKey] = cloneHierarchicalArray(clonedItem[childDataKey], childDataKey);\n        }\n        result.push(clonedItem);\n    }\n    return result;\n}\n\n/**\n * Deep clones all first level keys of Obj2 and merges them to Obj1\n * @param obj1 Object to merge into\n * @param obj2 Object to merge from\n * @returns Obj1 with merged cloned keys from Obj2\n * @hidden\n */\nexport function mergeObjects(obj1: {}, obj2: {}): any {\n    if (!isObject(obj1)) {\n        throw new Error(`Cannot merge into ${obj1}. First param must be an object.`);\n    }\n\n    if (!isObject(obj2)) {\n        return obj1;\n    }\n\n    for (const key of Object.keys(obj2)) {\n        obj1[key] = cloneValue(obj2[key]);\n    }\n\n    return obj1;\n}\n\n/**\n * Creates deep clone of provided value.\n * Supports primitive values, dates and objects.\n * If passed value is array returns shallow copy of the array.\n * @param value value to clone\n * @returns Deep copy of provided value\n *@hidden\n */\nexport function cloneValue(value: any): any {\n    if (isDate(value)) {\n        return new Date(value.getTime());\n    }\n    if (Array.isArray(value)) {\n        return [...value];\n    }\n\n    if (value instanceof Map || value instanceof Set) {\n        return value;\n    }\n\n    if (isObject(value)) {\n        const result = {};\n\n        for (const key of Object.keys(value)) {\n            result[key] = cloneValue(value[key]);\n        }\n        return result;\n    }\n    return value;\n}\n\n/**\n * Checks if provided variable is Object\n * @param value Value to check\n * @returns true if provided variable is Object\n *@hidden\n */\nexport function isObject(value: any): boolean {\n    return value && value.toString() === '[object Object]';\n}\n\n/**\n * Checks if provided variable is Date\n * @param value Value to check\n * @returns true if provided variable is Date\n *@hidden\n */\nexport function isDate(value: any) {\n    return Object.prototype.toString.call(value) === '[object Date]';\n}\n\n/**\n * Checks if the two passed arguments are equal\n * Currently supports date objects\n * @param obj1\n * @param obj2\n * @returns: `boolean`\n * @hidden\n */\nexport function isEqual(obj1, obj2): boolean {\n    if (isDate(obj1) && isDate(obj2)) {\n        return obj1.getTime() === obj2.getTime();\n    }\n    return obj1 === obj2;\n}\n\n/**\n *@hidden\n */\nexport const enum KEYCODES {\n    ENTER = 13,\n    SPACE = 32,\n    ESCAPE = 27,\n    LEFT_ARROW = 37,\n    UP_ARROW = 38,\n    RIGHT_ARROW = 39,\n    DOWN_ARROW = 40,\n    F2 = 113,\n    TAB = 9\n}\n\n/**\n *@hidden\n */\nexport const enum KEYS {\n    ENTER = 'Enter',\n    SPACE = ' ',\n    SPACE_IE = 'Spacebar',\n    ESCAPE = 'Escape',\n    ESCAPE_IE = 'Esc',\n    LEFT_ARROW = 'ArrowLeft',\n    LEFT_ARROW_IE = 'Left',\n    UP_ARROW = 'ArrowUp',\n    UP_ARROW_IE = 'Up',\n    RIGHT_ARROW = 'ArrowRight',\n    RIGHT_ARROW_IE = 'Right',\n    DOWN_ARROW = 'ArrowDown',\n    DOWN_ARROW_IE = 'Down',\n    F2 = 'F2',\n    TAB = 'Tab'\n}\n\n/**\n *@hidden\n* Returns the actual size of the node content, using Range\n* ```typescript\n* let range = document.createRange();\n* let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n*\n* let size = getNodeSizeViaRange(range, column.cells[0].nativeElement);\n* ```\n */\nexport function getNodeSizeViaRange(range: Range, node: any): number {\n    let overflow = null;\n    if (isIE() || isEdge()) {\n        overflow = node.style.overflow;\n        // we need that hack - otherwise content won't be measured correctly in IE/Edge\n        node.style.overflow = 'visible';\n    }\n\n    range.selectNodeContents(node);\n    const width = range.getBoundingClientRect().width;\n\n    if (isIE() || isEdge()) {\n        // we need that hack - otherwise content won't be measured correctly in IE/Edge\n        node.style.overflow = overflow;\n    }\n\n    return width;\n}\n/**\n *@hidden\n* Returns the actual size of the node content, using Canvas\n* ```typescript\n* let ctx = document.createElement('canvas').getContext('2d');\n* let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n*\n* let size = valToPxlsUsingCanvas(ctx, column.cells[0].nativeElement);\n* ```\n */\nexport function getNodeSizeViaCanvas(canvas2dCtx: any, node: any): number {\n    const s = this.grid.document.defaultView.getComputedStyle(node);\n\n    // need to set the font to get correct width\n    canvas2dCtx.font = s.fontSize + ' ' + s.fontFamily;\n\n    return canvas2dCtx.measureText(node.textContent).width;\n}\n/**\n *@hidden\n */\nexport function isIE(): boolean {\n    return navigator.appVersion.indexOf('Trident/') > 0;\n}\n/**\n *@hidden\n */\nexport function isEdge(): boolean {\n    const edgeBrowser = /Edge[\\/\\s](\\d+\\.\\d+)/.test(navigator.userAgent);\n    return edgeBrowser;\n}\n\n/**\n *@hidden\n */\nexport function isFirefox(): boolean {\n    const firefoxBrowser = /Firefox[\\/\\s](\\d+\\.\\d+)/.test(navigator.userAgent);\n    return firefoxBrowser;\n}\n\n/**\n * @hidden\n */\nexport function isLeftClick(event: PointerEvent) {\n    return event.button === 0;\n}\n\n/** @hidden */\nexport function isNavigationKey(key: string): boolean {\n    return ['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright',\n        'home', 'end', 'space', 'spacebar', ' '].indexOf(key) !== -1;\n}\n\n/**\n *@hidden\n */\nexport function flatten(arr: any[]) {\n    let result = [];\n\n    arr.forEach(el => {\n        result.push(el);\n        if (el.children) {\n            const children = Array.isArray(el.children) ? el.children : el.children.toArray();\n            result = result.concat(flatten(children));\n        }\n    });\n    return result;\n}\n\nexport interface CancelableEventArgs {\n    /**\n     * Provides the ability to cancel the event.\n     */\n    cancel: boolean;\n}\n\nexport interface CancelableBrowserEventArgs extends CancelableEventArgs {\n    /** Browser event */\n    event?: Event;\n}\n\nexport const NAVIGATION_KEYS = new Set(['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright',\n                                'home', 'end', 'space', 'spacebar', ' ']);\nexport const ROW_EXPAND_KEYS = new Set('right down arrowright arrowdown'.split(' '));\nexport const ROW_COLLAPSE_KEYS = new Set('left up arrowleft arrowup'.split(' '));\nexport const SUPPORTED_KEYS = new Set([...Array.from(NAVIGATION_KEYS), 'tab', 'enter', 'f2', 'escape', 'esc']);\n","import { ISortingStrategy } from './sorting-strategy';\n\n/**\n * Represents sorting expressions.\n */\nexport enum SortingDirection {\n    None = 0,\n    Asc = 1,\n    Desc = 2\n}\n\nexport interface ISortingExpression {\n   fieldName: string;\n   dir: SortingDirection;\n   ignoreCase?: boolean;\n   strategy?: ISortingStrategy;\n}\n","import { cloneArray } from '../core/utils';\nimport { IGroupByRecord } from './groupby-record.interface';\nimport { ISortingExpression, SortingDirection } from './sorting-expression.interface';\nimport { IGroupingExpression } from './grouping-expression.interface';\nimport { IGroupingState } from './groupby-state.interface';\nimport { DataUtil } from './data-util';\nimport { IGroupByExpandState } from './groupby-expand-state.interface';\nimport { IGroupByResult } from './grouping-result.interface';\n\nexport interface ISortingStrategy {\n    sort: (data: any[],\n           fieldName: string,\n           dir: SortingDirection,\n           ignoreCase: boolean,\n           valueResolver: (obj: any, key: string) => any) => any[];\n}\n\nexport class DefaultSortingStrategy implements ISortingStrategy {\n    private static _instance: DefaultSortingStrategy = null;\n\n    protected constructor() {}\n\n    public static instance(): DefaultSortingStrategy {\n        return this._instance || (this._instance = new this());\n    }\n\n    public sort(data: any[],\n                fieldName: string,\n                dir: SortingDirection,\n                ignoreCase: boolean,\n                valueResolver: (obj: any, key: string) => any) {\n        const key = fieldName;\n        const reverse = (dir === SortingDirection.Desc ? -1 : 1);\n        const cmpFunc = (obj1, obj2) => {\n            return this.compareObjects(obj1, obj2, key, reverse, ignoreCase, valueResolver);\n        };\n        return this.arraySort(data, cmpFunc);\n    }\n\n    public compareValues(a: any, b: any) {\n        const an = (a === null || a === undefined);\n        const bn = (b === null || b === undefined);\n        if (an) {\n            if (bn) {\n                return 0;\n            }\n            return -1;\n        } else if (bn) {\n            return 1;\n        }\n        return a > b ? 1 : a < b ? -1 : 0;\n    }\n\n    protected compareObjects(obj1: object,\n                             obj2: object,\n                             key: string,\n                             reverse: number,\n                             ignoreCase: boolean,\n                             valueResolver: (obj: any, key: string) => any) {\n        let a = valueResolver(obj1, key);\n        let b = valueResolver(obj2, key);\n        if (ignoreCase) {\n            a = a && a.toLowerCase ? a.toLowerCase() : a;\n            b = b && b.toLowerCase ? b.toLowerCase() : b;\n        }\n        return reverse * this.compareValues(a, b);\n    }\n\n    protected arraySort(data: any[], compareFn?): any[] {\n        return data.sort(compareFn);\n    }\n}\n\nexport class IgxSorting {\n    public sort(data: any[], expressions: ISortingExpression[]): any[] {\n        return this.sortDataRecursive(data, expressions);\n    }\n\n    private groupedRecordsByExpression(data: any[],\n            index: number,\n            expression: IGroupingExpression): any[] {\n        let i;\n        let groupval;\n        const res = [];\n        const key = expression.fieldName;\n        const len = data.length;\n        res.push(data[index]);\n        groupval = this.getFieldValue(data[index], key);\n        index++;\n        const comparer = expression.groupingComparer || DefaultSortingStrategy.instance().compareValues;\n        for (i = index; i < len; i++) {\n            if (comparer(this.getFieldValue(data[i], key), groupval) === 0) {\n                res.push(data[i]);\n            } else {\n                break;\n            }\n        }\n        return res;\n    }\n    private sortDataRecursive<T>(data: T[],\n                                 expressions: ISortingExpression[],\n                                 expressionIndex: number = 0): T[] {\n        let i;\n        let j;\n        let expr: ISortingExpression;\n        let gbData;\n        let gbDataLen;\n        const exprsLen = expressions.length;\n        const dataLen = data.length;\n        expressionIndex = expressionIndex || 0;\n        if (expressionIndex >= exprsLen || dataLen <= 1) {\n            return data;\n        }\n        expr = expressions[expressionIndex];\n        if (!expr.strategy) {\n            expr.strategy = DefaultSortingStrategy.instance();\n        }\n        data = expr.strategy.sort(data, expr.fieldName, expr.dir, expr.ignoreCase, this.getFieldValue);\n        if (expressionIndex === exprsLen - 1) {\n            return data;\n        }\n        // in case of multiple sorting\n        for (i = 0; i < dataLen; i++) {\n            gbData = this.groupedRecordsByExpression(data, i, expr);\n            gbDataLen = gbData.length;\n            if (gbDataLen > 1) {\n                gbData = this.sortDataRecursive(gbData, expressions, expressionIndex + 1);\n            }\n            for (j = 0; j < gbDataLen; j++) {\n                data[i + j] = gbData[j];\n            }\n            i += gbDataLen - 1;\n        }\n        return data;\n    }\n    protected groupDataRecursive<T>(data: T[], state: IGroupingState, level: number,\n        parent: IGroupByRecord, metadata: IGroupByRecord[], grid: any = null,\n        groupsRecords: any[] = [], fullResult: IGroupByResult = { data: [], metadata: [] }): T[] {\n        const expressions = state.expressions;\n        const expansion = state.expansion;\n        let i = 0;\n        let result = [];\n        while (i < data.length) {\n            const group = this.groupedRecordsByExpression(data, i, expressions[level]);\n            const groupRow: IGroupByRecord = {\n                expression: expressions[level],\n                level,\n                records: cloneArray(group),\n                value: group[0][expressions[level].fieldName],\n                groupParent: parent,\n                groups: [],\n                height: grid ? grid.renderedRowHeight : null\n            };\n            if (parent) {\n                parent.groups.push(groupRow);\n            } else {\n                groupsRecords.push(groupRow);\n            }\n            const hierarchy = DataUtil.getHierarchy(groupRow);\n            const expandState: IGroupByExpandState = expansion.find((s) =>\n                DataUtil.isHierarchyMatch(s.hierarchy || [{ fieldName: groupRow.expression.fieldName, value: groupRow.value }], hierarchy));\n            const expanded = expandState ? expandState.expanded : state.defaultExpanded;\n            let recursiveResult;\n            result.push(groupRow);\n            metadata.push(null);\n            fullResult.data.push(groupRow);\n            fullResult.metadata.push(null);\n            if (level < expressions.length - 1) {\n                recursiveResult = this.groupDataRecursive(group, state, level + 1, groupRow,\n                    expanded ? metadata : [], grid, groupsRecords, fullResult);\n                if (expanded) {\n                    result = result.concat(recursiveResult);\n                }\n            } else {\n                for (const groupItem of group) {\n                    fullResult.metadata.push(groupRow);\n                    fullResult.data.push(groupItem);\n                }\n                if (expanded) {\n                    metadata.push(...fullResult.metadata.slice(fullResult.metadata.length - group.length));\n                    result.push(...fullResult.data.slice(fullResult.data.length - group.length));\n                }\n            }\n            i += group.length;\n        }\n        return result;\n    }\n    protected getFieldValue(obj: any, key: string): any {\n        return obj[key];\n    }\n}\n\nexport class IgxDataRecordSorting extends IgxSorting {\n    protected getFieldValue(obj: any, key: string): any {\n        return obj.data[key];\n    }\n}\n","import { IGroupByRecord } from './groupby-record.interface';\nimport { ISortingExpression } from './sorting-expression.interface';\nimport { IgxSorting } from './sorting-strategy';\nimport { IGroupingState } from './groupby-state.interface';\nimport { IGroupByResult } from './grouping-result.interface';\n\nexport class IgxGrouping extends IgxSorting {\n    public groupBy(data: any[], state: IGroupingState, grid?: any,\n        groupsRecords?: any[], fullResult: IGroupByResult = { data: [], metadata: [] }): IGroupByResult {\n        const metadata: IGroupByRecord[] = [];\n        const grouping = this.groupDataRecursive(data, state, 0, null, metadata, grid, groupsRecords, fullResult);\n        return {\n            data: grouping,\n            metadata: metadata\n        };\n    }\n}\n\n","export enum PagingError {\n    None,\n    IncorrectPageIndex,\n    IncorrectRecordsPerPage\n}\n\nexport declare interface IPagingState {\n    index: number;\n    recordsPerPage: number;\n    metadata?: {\n        countPages: number;\n        error: PagingError;\n        countRecords: number;\n    };\n}\n","import { IFilteringExpression, FilteringLogic } from './filtering-expression.interface';\n\nexport declare interface IFilteringExpressionsTree {\n    filteringOperands: (IFilteringExpressionsTree | IFilteringExpression)[];\n    operator: FilteringLogic;\n    fieldName?: string;\n\n    find(fieldName: string): IFilteringExpressionsTree | IFilteringExpression;\n    findIndex(fieldName: string): number;\n}\n\nexport class FilteringExpressionsTree implements IFilteringExpressionsTree {\n\n    /**\n     * Sets/gets the filtering operands.\n     * ```typescript\n     * const gridExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);\n     * const expression = [\n     * {\n     *   condition: IgxStringFilteringOperand.instance().condition('contains'),\n     *   fieldName: 'Column Field',\n     *   searchVal: 'Value',\n     *   ignoreCase: false\n     * }];\n     * gridExpressionsTree.filteringOperands.push(expression);\n     * this.grid.filteringExpressionsTree = gridExpressionsTree;\n     * ```\n     * ```typescript\n     * let filteringOperands = gridExpressionsTree.filteringOperands;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    filteringOperands: (IFilteringExpressionsTree | IFilteringExpression)[] = [];\n\n    /**\n     * Sets/gets the operator.\n     * ```typescript\n     * gridExpressionsTree.operator = FilteringLogic.And;\n     * ```\n     * ```typescript\n     * let operator = gridExpressionsTree.operator;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    operator: FilteringLogic;\n\n    /**\n     * Sets/gets the field name of the column where the filtering expression is placed.\n     * ```typescript\n     *  gridExpressionTree.fieldName = 'Column Field';\n     * ```\n     * ```typescript\n     * let columnField = expressionTree.fieldName;\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    fieldName?: string;\n\n    constructor(operator: FilteringLogic, fieldName?: string) {\n        this.operator = operator;\n        this.fieldName = fieldName;\n    }\n\n    /**\n     * Returns the filtering expression for a column with the provided fieldName.\n     * ```typescript\n     * let filteringExpression = gridExpressionTree.find('Column Field');\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    public find(fieldName: string): IFilteringExpressionsTree | IFilteringExpression {\n        const index = this.findIndex(fieldName);\n\n        if (index > -1) {\n            return this.filteringOperands[index];\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns the index of the filtering expression for a column with the provided fieldName.\n     * ```typescript\n     * let filteringExpressionIndex = gridExpressionTree.findIndex('Column Field');\n     * ```\n     * @memberof FilteringExpressionsTree\n     */\n    public findIndex(fieldName: string): number {\n        let expr;\n        for (let i = 0; i < this.filteringOperands.length; i++) {\n            expr = this.filteringOperands[i];\n            if (expr instanceof FilteringExpressionsTree) {\n                if (this.isFilteringExpressionsTreeForColumn(expr, fieldName)) {\n                    return i;\n                }\n            } else {\n                if ((expr as IFilteringExpression).fieldName === fieldName) {\n                    return i;\n                }\n            }\n        }\n\n        return -1;\n    }\n\n    protected isFilteringExpressionsTreeForColumn(expressionsTree: IFilteringExpressionsTree, fieldName: string): boolean {\n        if (expressionsTree.fieldName === fieldName) {\n            return true;\n        }\n\n        let expr;\n        for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n            expr = expressionsTree.filteringOperands[i];\n            if ((expr instanceof FilteringExpressionsTree)) {\n                return this.isFilteringExpressionsTreeForColumn(expr, fieldName);\n            } else {\n                return (expr as IFilteringExpression).fieldName === fieldName;\n            }\n        }\n\n        return false;\n    }\n}\n","import { EventEmitter } from '@angular/core';\n\nexport enum TransactionType {\n    ADD = 'add',\n    DELETE = 'delete',\n    UPDATE = 'update'\n}\n\nexport interface Transaction {\n    id: any;\n    type: TransactionType;\n    newValue: any;\n}\n\n/**\n * @experimental\n * @hidden\n */\nexport interface HierarchicalTransaction extends Transaction {\n    path: any[];\n}\n\nexport interface State {\n    value: any;\n    recordRef: any;\n    type: TransactionType;\n}\n\n/**\n * @experimental\n * @hidden\n */\nexport interface HierarchicalState extends State {\n    path: any[];\n}\n\nexport interface TransactionService<T extends Transaction, S extends State> {\n    /**\n     * Returns whether transaction is enabled for this service\n     */\n    readonly enabled: boolean;\n\n    /**\n     * Event fired when transaction state has changed - add transaction, commit all transactions, undo and redo\n     */\n    onStateUpdate?: EventEmitter<void>;\n\n    /**\n     * @returns if there are any transactions in the Undo stack\n     */\n    canUndo: boolean;\n\n    /**\n     * @returns if there are any transactions in the Redo stack\n     */\n    canRedo: boolean;\n\n    /**\n     * Adds provided  transaction with recordRef if any\n     * @param transaction Transaction to be added\n     * @param recordRef Reference to the value of the record in the data source related to the changed item\n     */\n    add(transaction: T, recordRef?: any): void;\n\n    /**\n     * Returns all recorded transactions in chronological order\n     * @param id Optional record id to get transactions for\n     * @returns All transaction in the service or for the specified record\n     */\n    getTransactionLog(id?: any): T[];\n\n    /**\n     * Remove the last transaction if any\n     */\n    undo(): void;\n\n    /**\n     * Applies the last undone transaction if any\n     */\n    redo(): void;\n\n    /**\n     * Returns aggregated changes from all transactions\n     * @param mergeChanges If set to true will merge each state's value over relate recordRef\n     * and will record resulting value in the related transaction\n     * @returns Collection of aggregated transactions for each changed record\n     */\n    getAggregatedChanges(mergeChanges: boolean): T[];\n\n    /**\n     * Returns the state of the record with provided id\n     * @param id The id of the record\n     * @param pending Should get pending state\n     * @returns State of the record if any\n     */\n    getState(id: any, pending?: boolean): S;\n\n    /**\n     * Returns value of the required id including all uncommitted changes\n     * @param id The id of the record to return value for\n     * @param mergeChanges If set to true will merge state's value over relate recordRef\n     * and will return merged value\n     * @returns Value with changes or **null**\n     */\n    getAggregatedValue(id: any, mergeChanges: boolean): any;\n\n    /**\n     * Applies all transactions over the provided data\n     * @param data Data source to update\n     * @param id Optional record id to commit transactions for\n     */\n    commit(data: any[], id?: any): void;\n\n    /**\n     * Clears all transactions\n     * @param id Optional record id to clear transactions for\n     */\n    clear(id?: any): void;\n\n    /**\n     * Starts pending transactions. All transactions passed after call to startPending\n     * will not be added to transaction log\n     */\n    startPending(): void;\n\n    /**\n     * Clears all pending transactions and aggregated pending state. If commit is set to true\n     * commits pending states as single transaction\n     * @param commit Should commit the pending states\n     */\n    endPending(commit: boolean): void;\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { cloneArray, isEqual, mergeObjects } from '../core/utils';\nimport { DataUtil, DataType } from '../data-operations/data-util';\nimport { IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { ISortingExpression, SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxRowComponent } from './row.component';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { IFilteringExpressionsTree, FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { Transaction, TransactionType, State } from '../services/transaction/transaction';\nimport { IgxCell, IgxRow } from '../core/grid-selection';\n/**\n *@hidden\n */\n@Injectable()\nexport class GridBaseAPIService <T extends IgxGridBaseComponent & IGridDataBindable> {\n\n    grid: T;\n    protected editCellState: Map<string, any> = new Map<string, any>();\n    protected editRowState: Map<string, { rowID: any, rowIndex: number }> = new Map();\n    protected destroyMap: Map<string, Subject<boolean>> = new Map<string, Subject<boolean>>();\n\n    public get_column_by_name(name: string): IgxColumnComponent {\n        return this.grid.columnList.find((col) => col.field === name);\n    }\n\n    public get_summary_data() {\n        const grid = this.grid;\n        let data = grid.filteredData;\n        if (!data) {\n            if (grid.transactions.enabled) {\n                data = DataUtil.mergeTransactions(\n                    cloneArray(grid.data),\n                    grid.transactions.getAggregatedChanges(true),\n                    grid.primaryKey\n                );\n                const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === TransactionType.DELETE).map(t => t.id);\n                deletedRows.forEach(rowID => {\n                    const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n                    const index = tempData.indexOf(rowID);\n                    if (index !== -1) {\n                       data.splice(index, 1);\n                    }\n                });\n            } else {\n                data = grid.data;\n            }\n        }\n        return data;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public getRowData(rowID: any) {\n        const data = this.get_all_data(this.grid.transactions.enabled);\n        const index = this.get_row_index_in_data(rowID);\n        return data[index];\n    }\n\n    // TODO: Refactor\n    public escape_editMode() {\n        this.grid.crudService.end();\n    }\n\n    // TODO: Refactor\n    public get_cell_inEditMode(): IgxCell {\n        return this.grid.crudService.cell;\n    }\n\n    public get_row_index_in_data(rowID: any): number {\n        const grid = this.grid as IgxGridBaseComponent;\n        if (!grid) {\n            return -1;\n        }\n        const data = this.get_all_data(grid.transactions.enabled);\n        return grid.primaryKey ? data.findIndex(record => record[grid.primaryKey] === rowID) : data.indexOf(rowID);\n    }\n\n    public get_row_by_key(rowSelector: any): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        const primaryKey = this.grid.primaryKey;\n        if (primaryKey !== undefined && primaryKey !== null) {\n            return this.grid.dataRowList.find((row) => row.rowData[primaryKey] === rowSelector);\n        } else {\n            return this.grid.dataRowList.find((row) => row.rowData === rowSelector);\n        }\n    }\n\n    public get_row_by_index(rowIndex: number): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        return this.grid.rowList.find((row) => row.index === rowIndex);\n    }\n\n    public get_cell_by_key(rowSelector: any, field: string): IgxGridCellComponent {\n        const row = this.get_row_by_key(rowSelector);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.column.field === field);\n        }\n    }\n\n    public get_cell_by_index(rowIndex: number, columnIndex: number): IgxGridCellComponent {\n        const row = this.get_row_by_index(rowIndex);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.columnIndex === columnIndex);\n        }\n    }\n\n    public get_cell_by_visible_index(rowIndex: number, columnIndex: number): IgxGridCellComponent {\n        const row = this.get_row_by_index(rowIndex);\n        if (row && row.cells) {\n            return row.cells.find((cell) => cell.visibleColumnIndex === columnIndex);\n        }\n    }\n\n    public submit_value() {\n        const cell = this.grid.crudService.cell;\n        if (cell) {\n            const args = this.update_cell(cell, cell.editValue);\n            if (args.cancel) {\n                return;\n            }\n            this.escape_editMode();\n        }\n    }\n\n    update_cell(cell: IgxCell, value: any) {\n        const data = this.get_all_data(this.grid.transactions.enabled);\n        const index = this.get_row_index_in_data(cell.id.rowID);\n\n        cell.editValue = value;\n\n        const args = cell.createEditEventArgs();\n\n        this.grid.onCellEdit.emit(args);\n        if (args.cancel) {\n            return args;\n        }\n\n        // Cast to number after emit\n        // TODO: Clean up this\n        args.newValue = cell.castToNumber(args.newValue);\n\n        if (isEqual(args.oldValue, args.newValue)) {\n            return args;\n        }\n\n        this.grid.summaryService.clearSummaryCache(args);\n        this.updateData(this.grid, cell.id.rowID, data[index], cell.rowData, { [cell.column.field ]: args.newValue });\n        if (this.grid.primaryKey === cell.column.field) {\n            if (this.grid.selection.is_item_selected(this.grid.id, cell.id.rowID)) {\n                this.grid.selection.deselect_item(this.grid.id, cell.id.rowID);\n                this.grid.selection.select_item(this.grid.id, args.newValue);\n            }\n            if (this.grid.hasSummarizedColumns) {\n                this.grid.summaryService.removeSummaries(cell.id.rowID);\n            }\n        }\n        if (!this.grid.rowEditable || !this.grid.crudService.row ||\n                this.grid.crudService.row.id !== cell.id.rowID || !this.grid.transactions.enabled) {\n            this.grid.summaryService.clearSummaryCache(args);\n            (this.grid as any)._pipeTrigger++;\n        }\n\n        return args;\n    }\n\n    /**\n     * Updates related row of provided grid's data source with provided new row value\n     * @param grid Grid to update data for\n     * @param rowID ID of the row to update\n     * @param rowValueInDataSource Initial value of the row as it is in data source\n     * @param rowCurrentValue Current value of the row as it is with applied previous transactions\n     * @param rowNewValue New value of the row\n     */\n    protected updateData(grid, rowID, rowValueInDataSource: any, rowCurrentValue: any, rowNewValue: {[x: string]: any}) {\n        if (grid.transactions.enabled) {\n            const transaction: Transaction = {\n                id: rowID,\n                type: TransactionType.UPDATE,\n                newValue: rowNewValue\n            };\n            grid.transactions.add(transaction, rowCurrentValue);\n        } else {\n            mergeObjects(rowValueInDataSource, rowNewValue);\n        }\n    }\n\n    _update_row(row: IgxRow, value?: any) {\n        const grid = this.grid;\n\n        const rowInEditMode = grid.crudService.row;\n        row.newData = value ? value : grid.transactions.getAggregatedValue(row.id, true);\n\n\n        if (rowInEditMode && row.id === rowInEditMode.id) {\n            row.data = { ...row.data, ...rowInEditMode.transactionState };\n        // TODO: Workaround for updating a row in edit mode through the API\n        } else if (this.grid.transactions.enabled) {\n            const lastCommitedValue = grid.transactions.getState(row.id) ?\n                grid.transactions.getState(row.id).value : null;\n            row.data = lastCommitedValue ? Object.assign(row.data, lastCommitedValue) : row.data;\n        }\n    }\n\n    update_row(row: IgxRow, value: any) {\n        const grid = this.grid;\n        const selected = grid.selection.is_item_selected(grid.id, row.id);\n        const rowInEditMode = grid.crudService.row;\n        const data = this.get_all_data(grid.transactions.enabled);\n        const index = this.get_row_index_in_data(row.id);\n        const hasSummarized = grid.hasSummarizedColumns;\n\n        this._update_row(row, value);\n\n        const args = row.createEditEventArgs();\n\n        // If no valid row is found\n        if (index === -1) {\n            return args;\n        }\n\n        grid.onRowEdit.emit(args);\n\n        if (args.cancel) {\n            return args;\n        }\n\n        if (rowInEditMode) {\n            const hasChanges = grid.transactions.getState(args.rowID, true);\n            grid.transactions.endPending(false);\n            if (!hasChanges) {\n                return args;\n            }\n        }\n\n        if (!args.newValue) {\n            return args;\n        }\n\n        if (hasSummarized) {\n            grid.summaryService.removeSummaries(args.rowID);\n        }\n\n        this.updateData(grid, row.id, data[index], args.oldValue, args.newValue);\n        const newId = grid.primaryKey ? args.newValue[grid.primaryKey] : args.newValue;\n        if (selected) {\n            grid.selection.deselect_item(grid.id, row.id);\n            grid.selection.select_item(grid.id, newId);\n        }\n        if (hasSummarized) {\n            grid.summaryService.removeSummaries(newId);\n        }\n        (grid as any)._pipeTrigger++;\n\n        return args;\n    }\n\n\n\n    protected update_row_in_array(value: any, rowID: any, index: number) {\n        const grid = this.grid;\n        grid.data[index] = value;\n    }\n\n    public sort(expression: ISortingExpression): void {\n        if (expression.dir === SortingDirection.None) {\n            this.remove_grouping_expression(expression.fieldName);\n        }\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n        this.prepare_sorting_expression([sortingState], expression);\n        this.grid.sortingExpressions = sortingState;\n    }\n\n    public sort_multiple(expressions: ISortingExpression[]): void {\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        for (const each of expressions) {\n            if (each.dir === SortingDirection.None) {\n                this.remove_grouping_expression(each.fieldName);\n            }\n            this.prepare_sorting_expression([sortingState], each);\n        }\n\n        this.grid.sortingExpressions = sortingState;\n    }\n\n    public filter(fieldName: string, term, conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase: boolean) {\n        const grid = this.grid;\n        const filteringTree = grid.filteringExpressionsTree;\n        grid.endEdit(false);\n\n        if (grid.paging) {\n            grid.page = 0;\n        }\n\n        const fieldFilterIndex = filteringTree.findIndex(fieldName);\n        if (fieldFilterIndex > -1) {\n            filteringTree.filteringOperands.splice(fieldFilterIndex, 1);\n        }\n\n        this.prepare_filtering_expression(filteringTree, fieldName, term, conditionOrExpressionsTree, ignoreCase, fieldFilterIndex);\n        grid.filteringExpressionsTree = filteringTree;\n    }\n\n    public filter_global(term, condition, ignoreCase) {\n        if (!condition) {\n            return;\n        }\n\n        const grid = this.grid;\n        const filteringTree = grid.filteringExpressionsTree;\n        grid.endEdit(false);\n        if (grid.paging) {\n            grid.page = 0;\n        }\n\n        filteringTree.filteringOperands = [];\n        for (const column of grid.columns) {\n            this.prepare_filtering_expression(filteringTree, column.field, term,\n                condition, ignoreCase || column.filteringIgnoreCase);\n        }\n\n        grid.filteringExpressionsTree = filteringTree;\n    }\n\n    public clear_filter(fieldName: string) {\n        if (fieldName) {\n            const column = this.get_column_by_name(fieldName);\n            if (!column) {\n                return;\n            }\n        }\n\n        const grid = this.grid;\n        grid.endEdit(false);\n        const filteringState = grid.filteringExpressionsTree;\n        const index = filteringState.findIndex(fieldName);\n\n        if (index > -1) {\n            filteringState.filteringOperands.splice(index, 1);\n        } else if (!fieldName) {\n            filteringState.filteringOperands = [];\n        }\n\n        grid.filteringExpressionsTree = filteringState;\n    }\n\n    public clear_sort(fieldName: string) {\n        const sortingState = this.grid.sortingExpressions;\n        const index = sortingState.findIndex((expr) => expr.fieldName === fieldName);\n        if (index > -1) {\n            sortingState.splice(index, 1);\n            this.grid.sortingExpressions = sortingState;\n        }\n    }\n\n    protected prepare_filtering_expression(filteringState: IFilteringExpressionsTree, fieldName: string, searchVal,\n        conditionOrExpressionsTree: IFilteringOperation | IFilteringExpressionsTree, ignoreCase: boolean, insertAtIndex = -1) {\n\n        let newExpressionsTree;\n        const oldExpressionsTreeIndex = filteringState.findIndex(fieldName);\n        const expressionsTree = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?\n            conditionOrExpressionsTree as IFilteringExpressionsTree : null;\n        const condition = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?\n            null : conditionOrExpressionsTree as IFilteringOperation;\n        const newExpression: IFilteringExpression = { fieldName, searchVal, condition, ignoreCase };\n\n        if (oldExpressionsTreeIndex === -1) {\n            // no expressions tree found for this field\n            if (expressionsTree) {\n                if (insertAtIndex > -1) {\n                    filteringState.filteringOperands.splice(insertAtIndex, 0, expressionsTree);\n                } else {\n                    filteringState.filteringOperands.push(expressionsTree);\n                }\n            } else if (condition) {\n                // create expressions tree for this field and add the new expression to it\n                newExpressionsTree = new FilteringExpressionsTree(filteringState.operator, fieldName);\n                newExpressionsTree.filteringOperands.push(newExpression);\n                filteringState.filteringOperands.push(newExpressionsTree);\n            }\n        }\n    }\n\n    protected prepare_sorting_expression(stateCollections: Array<Array<any>>, expression: ISortingExpression) {\n        if (expression.dir === SortingDirection.None) {\n            stateCollections.forEach(state => {\n                state.splice(state.findIndex((expr) => expr.fieldName === expression.fieldName), 1);\n            });\n            return;\n        }\n\n        /**\n         * We need to make sure the states in each collection with same fields point to the same object reference.\n         * If the different state collections provided have different sizes we need to get the largest one.\n         * That way we can get the state reference from the largest one that has the same fieldName as the expression to prepare.\n         */\n        let maxCollection = stateCollections[0];\n        for (let i = 1; i < stateCollections.length; i++) {\n            if (maxCollection.length < stateCollections[i].length) {\n                maxCollection = stateCollections[i];\n            }\n        }\n        const maxExpr = maxCollection.find((expr) => expr.fieldName === expression.fieldName);\n\n        stateCollections.forEach(collection => {\n            const myExpr = collection.find((expr) => expr.fieldName === expression.fieldName);\n            if (!myExpr && !maxExpr) {\n                // Expression with this fieldName is missing from the current and the max collection.\n                collection.push(expression);\n            } else if (!myExpr && maxExpr) {\n                // Expression with this fieldName is missing from the current and but the max collection has.\n                collection.push(maxExpr);\n                Object.assign(maxExpr, expression);\n            } else {\n                // The current collection has the expression so just update it.\n                Object.assign(myExpr, expression);\n            }\n        });\n    }\n\n    protected remove_grouping_expression(fieldName) {\n    }\n\n    public should_apply_number_style(column: IgxColumnComponent): boolean {\n        return column.dataType === DataType.Number;\n    }\n\n    public get_data(): any[] {\n        const grid = this.grid;\n        const data = grid.data ? grid.data : [];\n        return data;\n    }\n\n    public get_all_data(includeTransactions = false): any[] {\n        const grid = this.grid;\n        let data = grid.data ? grid.data : [];\n        data = includeTransactions ? grid.dataWithAddedInTransactionRows : data;\n        return data;\n    }\n\n    public get_filtered_data(): any[] {\n        return this.grid.filteredData;\n    }\n\n    protected getSortStrategyPerColumn(fieldName: string) {\n        return this.get_column_by_name(fieldName) ?\n            this.get_column_by_name(fieldName).sortStrategy : undefined;\n    }\n\n    public addRowToData(rowData: any) {\n        // Add row goes to transactions and if rowEditable is properly implemented, added rows will go to pending transactions\n        // If there is a row in edit - > commit and close\n        const grid = this.grid;\n        if (grid.transactions.enabled) {\n            const transactionId = grid.primaryKey ? rowData[grid.primaryKey] : rowData;\n            const transaction: Transaction = { id: transactionId, type: TransactionType.ADD, newValue: rowData };\n            grid.transactions.add(transaction);\n        } else {\n            grid.data.push(rowData);\n        }\n    }\n\n    public deleteRowFromData(rowID: any, index: number) {\n        //  if there is a row (index !== 0) delete it\n        //  if there is a row in ADD or UPDATE state change it's state to DELETE\n        const grid = this.grid;\n        if (index !== -1) {\n            if (grid.transactions.enabled) {\n                const transaction: Transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };\n                grid.transactions.add(transaction, grid.data[index]);\n            } else {\n                grid.data.splice(index, 1);\n            }\n        } else {\n            const state: State = grid.transactions.getState(rowID);\n            grid.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);\n        }\n    }\n\n    public deleteRowById(rowId: any) {\n        let index: number;\n        const grid = this.grid;\n        const data = this.get_all_data();\n        if (grid.primaryKey) {\n            index = data.map((record) => record[grid.primaryKey]).indexOf(rowId);\n        } else {\n            index = data.indexOf(rowId);\n        }\n        const state: State = grid.transactions.getState(rowId);\n        const hasRowInNonDeletedState = state && state.type !== TransactionType.DELETE;\n\n        //  if there is a row (index !== -1) and the we have cell in edit mode on same row exit edit mode\n        //  if there is no row (index === -1), but there is a row in ADD or UPDATE state do as above\n        //  Otherwise just exit - there is nothing to delete\n        if (index !== -1 || hasRowInNonDeletedState) {\n            // Always exit edit when row is deleted\n            grid.endEdit(true);\n        } else {\n            return;\n        }\n\n        //  TODO: should we emit this when cascadeOnDelete is true for each row?!?!\n        grid.onRowDeleted.emit({ data: data[index] });\n\n        //  first deselect row then delete it\n        if (grid.rowSelectable && grid.selection.is_item_selected(grid.id, rowId)) {\n            grid.deselectRows([rowId]);\n        } else {\n            grid.checkHeaderCheckboxStatus();\n        }\n\n        this.deleteRowFromData(rowId, index);\n        (grid as any)._pipeTrigger++;\n        grid.cdr.markForCheck();\n        // Data needs to be recalculated if transactions are in place\n        // If no transactions, `data` will be a reference to the grid getter, otherwise it will be stale\n        const dataAfterDelete = grid.transactions.enabled ? grid.dataWithAddedInTransactionRows : data;\n        grid.refreshSearch();\n        if (dataAfterDelete.length % grid.perPage === 0 && dataAfterDelete.length / grid.perPage - 1 < grid.page && grid.page !== 0) {\n            grid.page--;\n        }\n    }\n\n    public get_row_id(rowData) {\n        const grid = this.grid;\n        return grid.primaryKey ? rowData[grid.primaryKey] : rowData;\n    }\n\n    public row_deleted_transaction(rowID: any): boolean {\n        const grid = this.grid;\n        if (!grid) {\n            return false;\n        }\n        if (!grid.transactions.enabled) {\n            return false;\n        }\n        const state = grid.transactions.getState(rowID);\n        if (state) {\n            return state.type === TransactionType.DELETE;\n        }\n\n        return false;\n    }\n\n    public atInexistingPage(): Boolean {\n        return this.grid.totalPages - 1 > this.grid.page;\n    }\n}\n","import { IFilteringOperation } from './filtering-condition';\n\nexport enum FilteringLogic {\n    And,\n    Or\n}\n\n/**\n * Represents filtering expressions.\n */\nexport declare interface IFilteringExpression {\n    fieldName: string;\n    condition: IFilteringOperation;\n    searchVal?: any;\n    ignoreCase?: boolean;\n}\n","import { FilteringLogic, IFilteringExpression } from './filtering-expression.interface';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from './filtering-expressions-tree';\n\nexport interface IFilteringStrategy {\n    filter(data: any[], expressionsTree: IFilteringExpressionsTree): any[];\n}\n\nexport abstract class BaseFilteringStrategy implements IFilteringStrategy  {\n    public abstract filter(data: any[], expressionsTree: IFilteringExpressionsTree): any[];\n\n    protected abstract getFieldValue(rec: object, fieldName: string): any;\n\n    public findMatchByExpression(rec: object, expr: IFilteringExpression): boolean {\n        const cond = expr.condition;\n        const val = this.getFieldValue(rec, expr.fieldName);\n        return cond.logic(val, expr.searchVal, expr.ignoreCase);\n    }\n\n    public matchRecord(rec: object, expressions: IFilteringExpressionsTree | IFilteringExpression): boolean {\n        if (expressions) {\n            if (expressions instanceof FilteringExpressionsTree) {\n                const expressionsTree = expressions as IFilteringExpressionsTree;\n                const operator = expressionsTree.operator as FilteringLogic;\n                let matchOperand, operand;\n\n                if (expressionsTree.filteringOperands && expressionsTree.filteringOperands.length) {\n                    for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                        operand = expressionsTree.filteringOperands[i];\n                        matchOperand = this.matchRecord(rec, operand);\n\n                        // Return false if at least one operand does not match and the filtering logic is And\n                        if (!matchOperand && operator === FilteringLogic.And) {\n                            return false;\n                        }\n\n                        // Return true if at least one operand matches and the filtering logic is Or\n                        if (matchOperand && operator === FilteringLogic.Or) {\n                            return true;\n                        }\n                    }\n\n                    return matchOperand;\n                }\n\n                return true;\n            } else {\n                const expression = expressions as IFilteringExpression;\n                return this.findMatchByExpression(rec, expression);\n            }\n        }\n\n        return true;\n    }\n}\n\nexport class FilteringStrategy extends BaseFilteringStrategy {\n    public filter<T>(data: T[], expressionsTree: IFilteringExpressionsTree): T[] {\n        let i;\n        let rec;\n        const len = data.length;\n        const res: T[] = [];\n        if (!expressionsTree || !expressionsTree.filteringOperands || expressionsTree.filteringOperands.length === 0 || !len) {\n            return data;\n        }\n        for (i = 0; i < len; i++) {\n            rec = data[i];\n            if (this.matchRecord(rec, expressionsTree)) {\n                res.push(rec);\n            }\n        }\n        return res;\n    }\n\n    protected getFieldValue(rec: object, fieldName: string): any {\n        return rec[fieldName];\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { BaseFilteringStrategy } from '../../data-operations/filtering-strategy';\nimport { IFilteringState } from '../../data-operations/filtering-state.interface';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid';\n\n/** @hidden */\nexport class TreeGridFilteringStrategy extends BaseFilteringStrategy {\n    public filter(data: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree): ITreeGridRecord[] {\n        return this.filterImpl(data, expressionsTree, undefined);\n    }\n\n    private filterImpl(data: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree, parent: ITreeGridRecord): ITreeGridRecord[] {\n        let i: number;\n        let rec: ITreeGridRecord;\n        const len = data.length;\n        const res: ITreeGridRecord[] = [];\n        if (!expressionsTree || !expressionsTree.filteringOperands || expressionsTree.filteringOperands.length === 0 || !len) {\n            return data;\n        }\n        for (i = 0; i < len; i++) {\n            rec = DataUtil.cloneTreeGridRecord(data[i]);\n            rec.parent = parent;\n            if (rec.children) {\n                const filteredChildren = this.filterImpl(rec.children, expressionsTree, rec);\n                rec.children = filteredChildren.length > 0 ? filteredChildren : null;\n            }\n\n            if (this.matchRecord(rec, expressionsTree)) {\n                res.push(rec);\n            } else if (rec.children && rec.children.length > 0) {\n                rec.isFilteredOutParent = true;\n                res.push(rec);\n            }\n        }\n        return res;\n    }\n\n    protected getFieldValue(rec: object, fieldName: string): any {\n        const hierarchicalRecord = <ITreeGridRecord>rec;\n        return hierarchicalRecord.data[fieldName];\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridFiltering',\n    pure: true\n})\nexport class IgxTreeGridFilteringPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n     }\n\n    public transform(hierarchyData: ITreeGridRecord[], expressionsTree: IFilteringExpressionsTree,\n        id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n        const state = {\n            expressionsTree: expressionsTree,\n            strategy: new TreeGridFilteringStrategy()\n        };\n\n        this.resetFilteredOutProperty(grid.records);\n\n        if (!state.expressionsTree ||\n            !state.expressionsTree.filteringOperands ||\n            state.expressionsTree.filteringOperands.length === 0) {\n            grid.filteredData = null;\n            return hierarchyData;\n        }\n\n        const result = this.filter(hierarchyData, state);\n        const filteredData: any[] = [];\n        this.expandAllRecursive(grid, result, grid.expansionStates, filteredData);\n        grid.filteredData = filteredData;\n\n        return result;\n    }\n\n    private resetFilteredOutProperty(map: Map<any, ITreeGridRecord>) {\n        const keys = Array.from(map.keys());\n        for (let i = 0; i < keys.length; i++) {\n            map.get(keys[i]).isFilteredOutParent = undefined;\n        }\n    }\n\n    private expandAllRecursive(grid: IgxTreeGridComponent, data: ITreeGridRecord[],\n        expandedStates: Map<any, boolean>, filteredData: any[]) {\n        for (let i = 0; i < data.length; i++) {\n            const rec = data[i];\n            filteredData.push(rec.data);\n            this.updateNonProcessedRecord(grid, rec);\n\n            if (rec.children && rec.children.length > 0) {\n                expandedStates.set(rec.rowID, true);\n                this.expandAllRecursive(grid, rec.children, expandedStates, filteredData);\n            }\n        }\n    }\n\n    private updateNonProcessedRecord(grid: IgxTreeGridComponent, record: ITreeGridRecord) {\n        const rec = grid.records.get(record.rowID);\n        rec.isFilteredOutParent = record.isFilteredOutParent;\n    }\n\n    private filter(data: ITreeGridRecord[], state: IFilteringState): ITreeGridRecord[] {\n        return state.strategy.filter(data, state.expressionsTree);\n    }\n}\n","import { IFilteringState } from './filtering-state.interface';\n\nimport { IgxSorting, IgxDataRecordSorting } from './sorting-strategy';\nimport { IgxGrouping } from './grouping-strategy';\nimport { IGroupByResult } from './grouping-result.interface';\n\nimport { IPagingState, PagingError } from './paging-state.interface';\n\nimport { IGroupByExpandState, IGroupByKey } from './groupby-expand-state.interface';\nimport { IGroupByRecord } from './groupby-record.interface';\nimport { IGroupingState } from './groupby-state.interface';\nimport { TreeGridFilteringStrategy } from '../grids/tree-grid/tree-grid.filtering.pipe';\nimport { ISortingExpression } from './sorting-expression.interface';\nimport { FilteringStrategy } from './filtering-strategy';\nimport { ITreeGridRecord } from '../grids/tree-grid';\nimport { cloneValue, mergeObjects } from '../core/utils';\nimport { Transaction, TransactionType, HierarchicalTransaction } from '../services/transaction/transaction';\n\n/**\n * @hidden\n */\nexport enum DataType {\n    String = 'string',\n    Number = 'number',\n    Boolean = 'boolean',\n    Date = 'date'\n}\n\n/**\n * @hidden\n */\nexport class DataUtil {\n    public static sort<T>(data: T[], expressions: ISortingExpression[], sorting: IgxSorting = new IgxSorting()): T[] {\n        return sorting.sort(data, expressions);\n    }\n\n    public static treeGridSort(hierarchicalData: ITreeGridRecord[],\n        expressions: ISortingExpression[],\n        parent?: ITreeGridRecord): ITreeGridRecord[] {\n        let res: ITreeGridRecord[] = [];\n        hierarchicalData.forEach((hr: ITreeGridRecord) => {\n            const rec: ITreeGridRecord = DataUtil.cloneTreeGridRecord(hr);\n            rec.parent = parent;\n            if (rec.children) {\n                rec.children = DataUtil.treeGridSort(rec.children, expressions, rec);\n            }\n            res.push(rec);\n        });\n\n        res = DataUtil.sort(res, expressions, new IgxDataRecordSorting());\n\n        return res;\n    }\n\n    public static cloneTreeGridRecord(hierarchicalRecord: ITreeGridRecord) {\n        const rec: ITreeGridRecord = {\n            rowID: hierarchicalRecord.rowID,\n            data: hierarchicalRecord.data,\n            children: hierarchicalRecord.children,\n            isFilteredOutParent: hierarchicalRecord.isFilteredOutParent,\n            level: hierarchicalRecord.level,\n            expanded: hierarchicalRecord.expanded\n        };\n        return rec;\n    }\n\n    public static group<T>(data: T[], state: IGroupingState, grid: any = null,\n        groupsRecords: any[] = [], fullResult: IGroupByResult = { data: [], metadata: [] }): IGroupByResult {\n        const grouping = new IgxGrouping();\n        groupsRecords.splice(0, groupsRecords.length);\n        return grouping.groupBy(data, state, grid, groupsRecords, fullResult);\n    }\n    public static page<T>(data: T[], state: IPagingState): T[] {\n        if (!state) {\n            return data;\n        }\n        const len = data.length;\n        const index = state.index;\n        const res = [];\n        const recordsPerPage = state.recordsPerPage;\n        state.metadata = {\n            countPages: 0,\n            countRecords: data.length,\n            error: PagingError.None\n        };\n        if (index < 0 || isNaN(index)) {\n            state.metadata.error = PagingError.IncorrectPageIndex;\n            return res;\n        }\n        if (recordsPerPage <= 0 || isNaN(recordsPerPage)) {\n            state.metadata.error = PagingError.IncorrectRecordsPerPage;\n            return res;\n        }\n        state.metadata.countPages = Math.ceil(len / recordsPerPage);\n        if (!len) {\n            return data;\n        }\n        if (index >= state.metadata.countPages) {\n            state.metadata.error = PagingError.IncorrectPageIndex;\n            return res;\n        }\n        return data.slice(index * recordsPerPage, (index + 1) * recordsPerPage);\n    }\n    public static filter<T>(data: T[], state: IFilteringState): T[] {\n        if (!state.strategy) {\n            state.strategy = new FilteringStrategy();\n        }\n        return state.strategy.filter(data, state.expressionsTree);\n    }\n    public static treeGridFilter(data: ITreeGridRecord[], state: IFilteringState): ITreeGridRecord[] {\n        if (!state.strategy) {\n            state.strategy = new TreeGridFilteringStrategy();\n        }\n        return state.strategy.filter(data, state.expressionsTree);\n    }\n\n    public static correctPagingState(state: IPagingState, length: number) {\n        const maxPage = Math.ceil(length / state.recordsPerPage) - 1;\n        if (!isNaN(maxPage) && state.index > maxPage) {\n            state.index = maxPage;\n        }\n    }\n\n    public static getHierarchy(gRow: IGroupByRecord): Array<IGroupByKey> {\n        const hierarchy: Array<IGroupByKey> = [];\n        if (gRow !== undefined && gRow.expression) {\n            hierarchy.push({ fieldName: gRow.expression.fieldName, value: gRow.value });\n            while (gRow.groupParent) {\n                gRow = gRow.groupParent;\n                hierarchy.unshift({ fieldName: gRow.expression.fieldName, value: gRow.value });\n            }\n        }\n        return hierarchy;\n    }\n\n    public static isHierarchyMatch(h1: Array<IGroupByKey>, h2: Array<IGroupByKey>): boolean {\n        if (h1.length !== h2.length) {\n            return false;\n        }\n        return h1.every((level, index): boolean => {\n            return level.fieldName === h2[index].fieldName && level.value === h2[index].value;\n        });\n    }\n\n    /**\n     * Merges all changes from provided transactions into provided data collection\n     * @param data Collection to merge\n     * @param transactions Transactions to merge into data\n     * @param primaryKey Primary key of the collection, if any\n     * @param deleteRows Should delete rows with DELETE transaction type from data\n     * @returns Provided data collections updated with all provided transactions\n     */\n    public static mergeTransactions<T>(data: T[], transactions: Transaction[], primaryKey?: any, deleteRows: boolean = false): T[] {\n        data.forEach((item: any, index: number) => {\n            const rowId = primaryKey ? item[primaryKey] : item;\n            const transaction = transactions.find(t => t.id === rowId);\n            if (transaction && transaction.type === TransactionType.UPDATE) {\n                data[index] = transaction.newValue;\n            }\n        });\n\n        if (deleteRows) {\n            transactions\n                .filter(t => t.type === TransactionType.DELETE)\n                .forEach(t => {\n                    const index = primaryKey ? data.findIndex(d => d[primaryKey] === t.id) : data.findIndex(d => d === t.id);\n                    if (0 <= index && index < data.length) {\n                        data.splice(index, 1);\n                    }\n                });\n        }\n\n        data.push(...transactions\n            .filter(t => t.type === TransactionType.ADD)\n            .map(t => t.newValue));\n\n        return data;\n    }\n\n    /**\n     * Merges all changes from provided transactions into provided hierarchical data collection\n     * @param data Collection to merge\n     * @param transactions Transactions to merge into data\n     * @param childDataKey Data key of child collections\n     * @param primaryKey Primary key of the collection, if any\n     * @param deleteRows Should delete rows with DELETE transaction type from data\n     * @returns Provided data collections updated with all provided transactions\n     */\n    public static mergeHierarchicalTransactions(\n        data: any[],\n        transactions: HierarchicalTransaction[],\n        childDataKey: any,\n        primaryKey?: any,\n        deleteRows: boolean = false): any[] {\n        for (const transaction of transactions) {\n            if (transaction.path) {\n                const parent = this.findParentFromPath(data, primaryKey, childDataKey, transaction.path);\n                let collection: any[] = parent ? parent[childDataKey] : data;\n                switch (transaction.type) {\n                    case TransactionType.ADD:\n                        //  if there is no parent this is ADD row at root level\n                        if (parent && !parent[childDataKey]) {\n                            parent[childDataKey] = collection = [];\n                        }\n                        collection.push(transaction.newValue);\n                        break;\n                    case TransactionType.UPDATE:\n                        const updateIndex = collection.findIndex(x => x[primaryKey] === transaction.id);\n                        if (updateIndex !== -1) {\n                            collection[updateIndex] = mergeObjects(cloneValue(collection[updateIndex]), transaction.newValue);\n                        }\n                        break;\n                    case TransactionType.DELETE:\n                        if (deleteRows) {\n                            const deleteIndex = collection.findIndex(r => r[primaryKey] === transaction.id);\n                            if (deleteIndex !== -1) {\n                                collection.splice(deleteIndex, 1);\n                            }\n                        }\n                        break;\n                }\n            } else {\n                //  if there is no path this is ADD row in root. Push the newValue to data\n                data.push(transaction.newValue);\n            }\n        }\n        return data;\n    }\n\n    private static findParentFromPath(data: any[], primaryKey: any, childDataKey: any, path: any[]): any {\n        let collection: any[] = data;\n        let result: any;\n\n        for (const id of path) {\n            result = collection && collection.find(x => x[primaryKey] === id);\n            if (!result) {\n                break;\n            }\n\n            collection = result[childDataKey];\n        }\n\n        return result;\n    }\n}\n","\n/**\n * @hidden\n */\nexport class ExportUtilities {\n    public static getKeysFromData(data: any[]) {\n        const length = data.length;\n        if (length === 0) {\n            return [];\n        }\n\n        const dataEntry = data[0];\n        const dataEntryMiddle = data[Math.floor(length / 2)];\n        const dataEntryLast = data[length - 1];\n\n        const keys1 = Object.keys(dataEntry);\n        const keys2 = Object.keys(dataEntryMiddle);\n        const keys3 = Object.keys(dataEntryLast);\n\n        const keys = new Set(keys1.concat(keys2).concat(keys3));\n\n        return !ExportUtilities.isSpecialData(data) ? Array.from(keys) : [ 'Column 1' ];\n    }\n\n    public static saveBlobToFile(blob: Blob, fileName) {\n        const a = document.createElement('a');\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n            window.navigator.msSaveOrOpenBlob(blob, fileName);\n        } else {\n            const url = window.URL.createObjectURL(blob);\n            a.download = fileName;\n\n            a.href = url;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            window.URL.revokeObjectURL(url);\n        }\n    }\n\n    public static stringToArrayBuffer(s: string): ArrayBuffer {\n        const buf = new ArrayBuffer(s.length);\n        const view = new Uint8Array(buf);\n        for (let i = 0; i !== s.length; ++i) {\n            /* tslint:disable no-bitwise */\n            view[i] = s.charCodeAt(i) & 0xFF;\n            /* tslint:enable no-bitwise */\n        }\n        return buf;\n    }\n\n    public static isSpecialData(data: any[]): boolean {\n        const dataEntry = data[0];\n        return (typeof dataEntry === 'string' ||\n                typeof dataEntry === 'number' ||\n                dataEntry instanceof Date);\n    }\n\n    public static hasValue(value: any): boolean {\n        return value !== undefined && value !== null;\n    }\n\n    public static isNullOrWhitespaces(value: string): boolean {\n        return value === undefined || value === null || !value.trim();\n    }\n}\n","import {\n    EventEmitter,\n    Output\n} from '@angular/core';\n\nimport { cloneValue } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\n\nimport { ExportUtilities } from './export-utilities';\nimport { IgxExporterOptionsBase } from './exporter-options-base';\nimport { ITreeGridRecord } from '../../grids/tree-grid/tree-grid.interfaces';\n\n/**\n * onRowExport event arguments\n * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {\n * // set args properties here\n * })\n */\nexport interface IRowExportingEventArgs {\n    /**\n     * Contains the exporting row data\n     */\n    rowData: any;\n\n    /**\n     * Contains the exporting row index\n     */\n    rowIndex: number;\n\n    /**\n     * Skip the exporting row when set to true\n     */\n    cancel: boolean;\n}\n\n/**\n    * onColumnExport event arguments\n    * ```typescript\n    * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {\n    * // set args properties here\n    * });\n    * ```\n    */\nexport interface IColumnExportingEventArgs {\n    /**\n     * Contains the exporting column header\n     */\n    header: string;\n\n    /**\n     * Contains the exporting column field name\n     */\n    field: string;\n\n    /**\n     * Contains the exporting column index\n     */\n    columnIndex: number;\n\n    /**\n     * Skip the exporting column when set to true\n     */\n    cancel: boolean;\n\n    /**\n     * Export the column's data without applying its formatter, when set to true\n     */\n    skipFormatter: boolean;\n}\n\nexport abstract class IgxBaseExporter {\n    private _columnList: any[];\n    private flatRecords = [];\n\n    protected _isTreeGrid = false;\n    protected _indexOfLastPinnedColumn = -1;\n    protected _sort = null;\n\n    /**\n     * This event is emitted when a row is exported.\n     * ```typescript\n     * this.exporterService.onRowExport.subscribe((args: IRowExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    @Output()\n    public onRowExport = new EventEmitter<IRowExportingEventArgs>();\n\n    /**\n     * This event is emitted when a column is exported.\n     * ```typescript\n     * this.exporterService.onColumnExport.subscribe((args: IColumnExportingEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    @Output()\n    public onColumnExport = new EventEmitter<IColumnExportingEventArgs>();\n\n    /**\n     * Method for exporting IgxGrid component's data.\n     * ```typescript\n     * this.exporterService.export(this.igxGridForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public export(grid: any, options: IgxExporterOptionsBase): void {\n        if (options === undefined || options === null) {\n            throw Error('No options provided!');\n        }\n\n        const columns = grid.columnList.toArray();\n        this._columnList = new Array<any>(columns.length);\n\n        const hiddenColumns = [];\n        let lastVisbleColumnIndex = -1;\n\n        columns.forEach((column) => {\n            const columnHeader = column.header !== '' ? column.header : column.field;\n            const exportColumn = !column.hidden || options.ignoreColumnsVisibility;\n            const index = options.ignoreColumnsOrder ? column.index : column.visibleIndex;\n\n            const columnInfo = {\n                header: columnHeader,\n                field: column.field,\n                skip: !exportColumn,\n                formatter: column.formatter,\n                skipFormatter: false\n            };\n\n            if (index !== -1) {\n                this._columnList[index] = columnInfo;\n                lastVisbleColumnIndex = Math.max(lastVisbleColumnIndex, index);\n            } else {\n                hiddenColumns.push(columnInfo);\n            }\n\n            if (column.pinned && exportColumn) {\n                this._indexOfLastPinnedColumn = index;\n            }\n        });\n\n        // Append the hidden columns to the end of the list\n        hiddenColumns.forEach((hiddenColumn) => {\n            this._columnList[++lastVisbleColumnIndex] = hiddenColumn;\n        });\n\n        const data = this.prepareData(grid, options);\n        this.exportData(data, options);\n    }\n\n    /**\n     * Method for exporting any kind of array data.\n     * ```typescript\n     * this.exporterService.exportData(this.arrayForExport, this.exportOptions);\n     * ```\n     * @memberof IgxBaseExporter\n     */\n    public exportData(data: any[], options: IgxExporterOptionsBase): void {\n        if (options === undefined || options === null) {\n            throw Error('No options provided!');\n        }\n\n        if (!this._columnList || this._columnList.length === 0) {\n            const keys = ExportUtilities.getKeysFromData(data);\n            this._columnList = keys.map((k) => ({ header: k, field: k, skip: false }));\n        }\n\n        let skippedPinnedColumnsCount = 0;\n        let columnsWithoutHeaderCount = 1;\n        this._columnList.forEach((column, index) => {\n            if (!column.skip) {\n                const columnExportArgs = {\n                    header: ExportUtilities.isNullOrWhitespaces(column.header) ?\n                        'Column' + columnsWithoutHeaderCount++ : column.header,\n                    field: column.field,\n                    columnIndex: index,\n                    cancel: false,\n                    skipFormatter: false\n                };\n                this.onColumnExport.emit(columnExportArgs);\n\n                column.header = columnExportArgs.header;\n                column.skip = columnExportArgs.cancel;\n                column.skipFormatter = columnExportArgs.skipFormatter;\n\n                if (column.skip && index <= this._indexOfLastPinnedColumn) {\n                    skippedPinnedColumnsCount++;\n                }\n\n                if (this._sort && this._sort.fieldName === column.field) {\n                    if (column.skip) {\n                        this._sort = null;\n                    } else {\n                        this._sort.fieldName = column.header;\n                    }\n                }\n            }\n        });\n\n        this._indexOfLastPinnedColumn -= skippedPinnedColumnsCount;\n\n        const dataToExport = new Array<any>();\n        const isSpecialData = ExportUtilities.isSpecialData(data);\n\n        data.forEach((row, index) => {\n            this.exportRow(dataToExport, row, index, isSpecialData);\n        });\n\n        this.exportDataImplementation(dataToExport, options);\n        this.resetDefaults();\n    }\n\n    protected abstract exportDataImplementation(data: any[], options: IgxExporterOptionsBase): void;\n\n    private exportRow(data: any[], rowData: any, index: number, isSpecialData: boolean) {\n        let row;\n\n        if (!isSpecialData) {\n            row = this._columnList.reduce((a, e) => {\n                if (!e.skip) {\n                    const rawValue = this._isTreeGrid ? rowData.data[e.field] : rowData[e.field];\n                    a[e.header] = e.formatter && !e.skipFormatter ? e.formatter(rawValue) : rawValue;\n                }\n                return a;\n            }, {});\n        } else {\n            row = this._isTreeGrid ? rowData.data : rowData;\n        }\n\n        const rowArgs = {\n            rowData: row,\n            rowIndex: index,\n            cancel: false\n        };\n        this.onRowExport.emit(rowArgs);\n\n        if (!rowArgs.cancel) {\n            data.push({ rowData: rowArgs.rowData, originalRowData: rowData });\n        }\n    }\n\n    private prepareData(grid: any, options: IgxExporterOptionsBase): any[] {\n        this.flatRecords = [];\n        let rootRecords = grid.rootRecords;\n        this._isTreeGrid = rootRecords !== undefined;\n\n        if (this._isTreeGrid) {\n            this.prepareHierarchicalData(rootRecords);\n        }\n\n        let data = this._isTreeGrid ? this.flatRecords : grid.data;\n\n        if (grid.filteringExpressionsTree &&\n            grid.filteringExpressionsTree.filteringOperands.length > 0 &&\n            !options.ignoreFiltering) {\n            const filteringState = {\n                expressionsTree: grid.filteringExpressionsTree,\n                logic: grid.filteringLogic\n            };\n\n            if (this._isTreeGrid) {\n                this.flatRecords = [];\n                rootRecords = DataUtil.treeGridFilter(rootRecords, filteringState);\n                this.prepareHierarchicalData(rootRecords);\n                data = this.flatRecords;\n            } else {\n                data = DataUtil.filter(data, filteringState);\n            }\n        }\n\n        if (grid.sortingExpressions &&\n            grid.sortingExpressions.length > 0 &&\n            !options.ignoreSorting) {\n            this._sort = cloneValue(grid.sortingExpressions[0]);\n\n            if (this._isTreeGrid) {\n                this.flatRecords = [];\n                rootRecords = DataUtil.treeGridSort(rootRecords, grid.sortingExpressions);\n                this.prepareHierarchicalData(rootRecords);\n                data = this.flatRecords;\n            } else {\n                data = DataUtil.sort(data, grid.sortingExpressions);\n            }\n        }\n\n        return data;\n    }\n\n    private prepareHierarchicalData(records: ITreeGridRecord[]) {\n        if (!records) {\n            return;\n        }\n        for (let i = 0; i < records.length; i++) {\n            const hierarchicalRecord = records[i];\n\n            this.flatRecords.push(hierarchicalRecord);\n            this.prepareHierarchicalData(hierarchicalRecord.children);\n        }\n    }\n\n    private resetDefaults() {\n        this._columnList = [];\n        this._indexOfLastPinnedColumn = -1;\n        this._sort = null;\n        this.flatRecords = [];\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\n\n/**\n * @hidden\n */\nexport class CharSeparatedValueData {\n    private _headerRecord = '';\n    private _dataRecords = '';\n    private _eor = '\\r\\n';\n    private _delimiter;\n    private _escapeCharacters = ['\\r', '\\n', '\\r\\n'];\n    private _delimiterLength = 1;\n    private _isSpecialData = false;\n\n    constructor(private _data: any[], valueDelimiter: string)  {\n        this.setDelimiter(valueDelimiter);\n    }\n\n    public prepareData() {\n        if (!this._data || this._data.length === 0) {\n            return '';\n        }\n\n        const keys = ExportUtilities.getKeysFromData(this._data);\n\n        if (keys.length === 0) {\n            return '';\n        }\n\n        this._isSpecialData = ExportUtilities.isSpecialData(this._data);\n        this._escapeCharacters.push(this._delimiter);\n\n        this._headerRecord = this.processHeaderRecord(keys, this._escapeCharacters);\n        this._dataRecords = this.processDataRecords(this._data, keys, this._escapeCharacters);\n\n        return this._headerRecord + this._dataRecords;\n    }\n\n    private processField(value, escapeChars): string {\n        let safeValue = ExportUtilities.hasValue(value) ? String(value) : '';\n        if (escapeChars.some((v) => safeValue.includes(v))) {\n            safeValue = `\"${safeValue}\"`;\n        }\n        return safeValue + this._delimiter;\n    }\n\n    private processHeaderRecord(keys, escapeChars): string {\n        let recordData = '';\n        for (const keyName of keys) {\n            recordData += this.processField(keyName, this._escapeCharacters);\n        }\n\n        return recordData.slice(0, -this._delimiterLength) + this._eor;\n    }\n\n    private processRecord(record, keys, escapeChars): string {\n        let recordData = '';\n        for (const keyName of keys) {\n\n            const value = (record[keyName] !== undefined) ? record[keyName] : this._isSpecialData ? record : '';\n            recordData += this.processField(value, this._escapeCharacters);\n        }\n\n        return recordData.slice(0, -this._delimiterLength) + this._eor;\n    }\n\n    private processDataRecords(currentData, keys, escapeChars) {\n        let dataRecords = '';\n        for (const row of currentData) {\n            dataRecords += this.processRecord(row, keys, escapeChars);\n        }\n\n        return dataRecords;\n    }\n\n    private setDelimiter(value) {\n        this._delimiter = value;\n        this._delimiterLength = value.length;\n    }\n}\n","export abstract class IgxExporterOptionsBase {\n    private _fileName: string;\n\n    /**\n     * Specifies whether hidden columns should be exported.\n     * ```typescript\n     * let ignoreColumnsVisibility = this.exportOptions.ignoreColumnsVisibility;\n     * this.exportOptions.ignoreColumnsVisibility = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreColumnsVisibility = false;\n\n    /**\n     * Specifies whether filtered out rows should be exported.\n     * ```typescript\n     * let ignoreFiltering = this.exportOptions.ignoreFiltering;\n     * this.exportOptions.ignoreFiltering = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreFiltering = false;\n\n    /**\n     * Specifies if the exporter should ignore the current column order in the IgxGrid.\n     * ```typescript\n     * let ignoreColumnsOrder = this.exportOptions.ignoreColumnsOrder;\n     * this.exportOptions.ignoreColumnsOrder = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreColumnsOrder = false;\n\n    /**\n     * Specifies whether the exported data should be sorted as in the provided IgxGrid.\n     * ```typescript\n     * let ignoreSorting = this.exportOptions.ignoreSorting;\n     * this.exportOptions.ignoreSorting = true;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    public ignoreSorting = false;\n\n    constructor(fileName: string, protected _fileExtension: string) {\n        this.setFileName(fileName);\n    }\n\n    private setFileName(fileName: string): void {\n        this._fileName = fileName + (fileName.endsWith(this._fileExtension) === false ? this._fileExtension : '');\n    }\n\n    /**\n     * Gets the file name which will be used for the exporting operation.\n     * ```typescript\n     * let fileName = this.exportOptions.fileName;\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    get fileName() {\n        return this._fileName;\n    }\n\n    /**\n     * Sets the file name which will be used for the exporting operation.\n     * ```typescript\n     * this.exportOptions.fileName = 'exportedData01';\n     * ```\n     * @memberof IgxExporterOptionsBase\n     */\n    set fileName(value) {\n        this.setFileName(value);\n    }\n\n}\n","import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';\n\n/**\n * Objects of this class are used to configure the CSV exporting process.\n */\nexport class IgxCsvExporterOptions extends IgxExporterOptionsBase {\n\n    private _valueDelimiter;\n    private _fileType;\n\n    constructor(fileName: string, fileType: CsvFileTypes) {\n        super(fileName, IgxCsvExporterOptions.getExtensionFromFileType(fileType));\n        this.setFileType(fileType);\n        this.setDelimiter();\n    }\n\n    private static getExtensionFromFileType(fType: CsvFileTypes) {\n        let extension = '';\n        switch (fType) {\n            case CsvFileTypes.CSV:\n                extension = '.csv';\n                break;\n            case CsvFileTypes.TSV:\n                extension = '.tsv';\n                break;\n            case CsvFileTypes.TAB:\n                extension = '.tab';\n                break;\n            default:\n                throw Error('Unsupported CSV file type!');\n        }\n        return extension;\n    }\n\n    /**\n     * Gets the value delimiter which will be used for the exporting operation.\n     * ```typescript\n     * let delimiter = this.exportOptions.valueDelimiter;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    get valueDelimiter() {\n        return this._valueDelimiter;\n    }\n\n    /**\n     * Sets a value delimiter which will overwrite the default delimiter of the selected export format.\n     * ```typescript\n     * this.exportOptions.valueDelimiter = '|';\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    set valueDelimiter(value) {\n        this.setDelimiter(value);\n    }\n\n    /**\n     * Gets the CSV export format.\n     * ```typescript\n     * let filetype = this.exportOptions.fileType;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    get fileType() {\n        return this._fileType;\n    }\n\n    /**\n     * Sets the CSV export format.\n     * ```typescript\n     * this.exportOptions.fileType = CsvFileTypes.TAB;\n     * ```\n     * @memberof IgxCsvExporterOptions\n     */\n    set fileType(value) {\n        this.setFileType(value);\n    }\n\n    private setFileType(value) {\n        if (value !== undefined && value !== null && value !== this._fileType) {\n            this._fileType = value;\n            const extension = IgxCsvExporterOptions.getExtensionFromFileType(value);\n            if (!this.fileName.endsWith(extension)) {\n                const oldExt = '.' + this.fileName.split('.').pop();\n                const newName = this.fileName.replace(oldExt, extension);\n                this._fileExtension = extension;\n                this.fileName = newName;\n            }\n        }\n    }\n\n    private setDelimiter(value?) {\n        if (value !== undefined && value !== '' && value !== null) {\n            this._valueDelimiter = value;\n        } else {\n            switch (this.fileType) {\n                case CsvFileTypes.CSV:\n                    this._valueDelimiter = ',';\n                    break;\n                case CsvFileTypes.TSV:\n                case CsvFileTypes.TAB:\n                    this._valueDelimiter = '\\t';\n                    break;\n            }\n        }\n    }\n}\n\n/**\n * This enumeration is used to configure the default value separator\n * as well as the default file extension used when performing CSV exporting.\n */\nexport enum CsvFileTypes {\n    /**\n     * Character Separated Values, default separator is \"comma\", default file extension is .csv\n     */\n    CSV,\n    /**\n     * Tab Separated Values, default separator is tab, default file extension is .tsv\n     */\n    TSV,\n    /**\n     * Tab Separated Values, default separator is tab, default file extension is .tab\n     */\n    TAB\n}\n","import { EventEmitter, Injectable, Output } from '@angular/core';\nimport { IgxBaseExporter } from '../exporter-common/base-export-service';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\nimport { CharSeparatedValueData } from './char-separated-value-data';\nimport { CsvFileTypes, IgxCsvExporterOptions } from './csv-exporter-options';\n\nexport interface ICsvExportEndedEventArgs {\n    csvData: string;\n}\n\n/**\n * **Ignite UI for Angular CSV Exporter Service** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_csv.html)\n *\n * The Ignite UI for Angular CSV Exporter service can export data in a Character Separated Values format from\n * both raw data (array) or from an `IgxGrid`.\n *\n * Example:\n * ```typescript\n * public localData = [\n *   { Name: \"Eric Ridley\", Age: \"26\" },\n *   { Name: \"Alanis Brook\", Age: \"22\" },\n *   { Name: \"Jonathan Morris\", Age: \"23\" }\n * ];\n *\n * constructor(private csvExportService: IgxCsvExporterService) {\n * }\n *\n * const opt: IgxCsvExporterOptions = new IgxCsvExporterOptions(\"FileName\", CsvFileTypes.CSV);\n * this.csvExportService.exportData(this.localData, opt);\n * ```\n */\n@Injectable()\nexport class IgxCsvExporterService extends IgxBaseExporter {\n    private _stringData: string;\n\n    /**\n     * This event is emitted when the export process finishes.\n     * ```typescript\n     * this.exporterService.onExportEnded.subscribe((args: ICsvExportEndedEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxCsvExporterService\n     */\n    @Output()\n    public onExportEnded = new EventEmitter<ICsvExportEndedEventArgs>();\n\n    protected exportDataImplementation(data: any[], options: IgxCsvExporterOptions) {\n        data = data.map((item) => item.rowData);\n        const csvData = new CharSeparatedValueData(data, options.valueDelimiter);\n        this._stringData = csvData.prepareData();\n\n        this.saveFile(options);\n        this.onExportEnded.emit({ csvData: this._stringData });\n    }\n\n    private saveFile(options: IgxCsvExporterOptions) {\n        switch (options.fileType) {\n            case CsvFileTypes.CSV:\n                this.exportFile(this._stringData, options.fileName, 'text/csv;charset=utf-8;');\n                break;\n            case CsvFileTypes.TSV:\n            case CsvFileTypes.TAB:\n                this.exportFile(this._stringData, options.fileName, 'text/tab-separated-values;charset=utf-8;');\n                break;\n        }\n    }\n\n    private exportFile(data: string, fileName: string, fileType: string): void {\n        const blob = new Blob(['\\ufeff', data], { type: fileType });\n        ExportUtilities.saveBlobToFile(blob, fileName);\n    }\n}\n","/**\n * @hidden\n */\nexport enum ExcelFolderTypes {\n    RootExcelFolder,\n    RootRelsExcelFolder,\n    DocPropsExcelFolder,\n    XLExcelFolder,\n    XLRelsExcelFolder,\n    ThemeExcelFolder,\n    WorksheetsExcelFolder,\n    WorksheetsRelsExcelFolder,\n    TablesExcelFolder\n}\n/**\n * @hidden\n */\nexport enum ExcelFileTypes {\n    RootRelsFile,\n    AppFile,\n    CoreFile,\n    WorkbookRelsFile,\n    ThemeFile,\n    WorksheetFile,\n    StyleFile,\n    WorkbookFile,\n    ContentTypesFile,\n    SharedStringsFile,\n    WorksheetRelsFile,\n    TablesFile\n}\n","/** @hidden */\nexport class ExcelStrings {\n    /* tslint:disable max-line-length */\n    private static XML_STRING = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\r\\n';\n    private static SHARED_STRING_RELATIONSHIP = '<Relationship Id=\"rId4\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\" Target=\"sharedStrings.xml\" />';\n\n    public static getRels(): string {\n        return ExcelStrings.XML_STRING + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties\" Target=\"docProps/app.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\" Target=\"docProps/core.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" Target=\"xl/workbook.xml\"/></Relationships>';\n    }\n\n    public static getApp(): string {\n        return ExcelStrings.XML_STRING + '<Properties xmlns=\"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\" xmlns:vt=\"http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes\"><Application>Microsoft Excel</Application><DocSecurity>0</DocSecurity><ScaleCrop>false</ScaleCrop><HeadingPairs><vt:vector size=\"2\" baseType=\"variant\"><vt:variant><vt:lpstr>Worksheets</vt:lpstr></vt:variant><vt:variant><vt:i4>1</vt:i4></vt:variant></vt:vector></HeadingPairs><TitlesOfParts><vt:vector size=\"1\" baseType=\"lpstr\"><vt:lpstr>Sheet1</vt:lpstr></vt:vector></TitlesOfParts><Company></Company><LinksUpToDate>false</LinksUpToDate><SharedDoc>false</SharedDoc><HyperlinksChanged>false</HyperlinksChanged><AppVersion>16.0300</AppVersion></Properties>';\n    }\n\n    public static getCore(): string {\n        return ExcelStrings.XML_STRING + '<cp:coreProperties xmlns:cp=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:dcmitype=\"http://purl.org/dc/dcmitype/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><dc:creator></dc:creator><cp:lastModifiedBy></cp:lastModifiedBy><dcterms:created xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:20Z</dcterms:created><dcterms:modified xsi:type=\"dcterms:W3CDTF\">2015-06-05T18:17:26Z</dcterms:modified></cp:coreProperties>';\n    }\n\n    public static getTheme(): string {\n        return ExcelStrings.XML_STRING + '<a:theme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Office Theme\"><a:themeElements><a:clrScheme name=\"Office\"><a:dk1><a:sysClr val=\"windowText\" lastClr=\"000000\"/></a:dk1><a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1><a:dk2><a:srgbClr val=\"44546A\"/></a:dk2><a:lt2><a:srgbClr val=\"E7E6E6\"/></a:lt2><a:accent1><a:srgbClr val=\"5B9BD5\"/></a:accent1><a:accent2><a:srgbClr val=\"ED7D31\"/></a:accent2><a:accent3><a:srgbClr val=\"A5A5A5\"/></a:accent3><a:accent4><a:srgbClr val=\"FFC000\"/></a:accent4><a:accent5><a:srgbClr val=\"4472C4\"/></a:accent5><a:accent6><a:srgbClr val=\"70AD47\"/></a:accent6><a:hlink><a:srgbClr val=\"0563C1\"/></a:hlink><a:folHlink><a:srgbClr val=\"954F72\"/></a:folHlink></a:clrScheme><a:fontScheme name=\"Office\"><a:majorFont><a:latin typeface=\"Calibri Light\" panose=\"020F0302020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"æ¸¸ã´ã·ãã¯ Light\"/><a:font script=\"Hang\" typeface=\"ë§ì ê³ ë\"/><a:font script=\"Hans\" typeface=\"ç­çº¿ Light\"/><a:font script=\"Hant\" typeface=\"æ°ç´°æé«\"/><a:font script=\"Arab\" typeface=\"Times New Roman\"/><a:font script=\"Hebr\" typeface=\"Times New Roman\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"MoolBoran\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Times New Roman\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:majorFont><a:minorFont><a:latin typeface=\"Calibri\" panose=\"020F0502020204030204\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"æ¸¸ã´ã·ãã¯\"/><a:font script=\"Hang\" typeface=\"ë§ì ê³ ë\"/><a:font script=\"Hans\" typeface=\"ç­çº¿\"/><a:font script=\"Hant\" typeface=\"æ°ç´°æé«\"/><a:font script=\"Arab\" typeface=\"Arial\"/><a:font script=\"Hebr\" typeface=\"Arial\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"DaunPenh\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Arial\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:minorFont></a:fontScheme><a:fmtScheme name=\"Office\"><a:fillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"110000\"/><a:satMod val=\"105000\"/><a:tint val=\"67000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"103000\"/><a:tint val=\"73000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"105000\"/><a:satMod val=\"109000\"/><a:tint val=\"81000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:satMod val=\"103000\"/><a:lumMod val=\"102000\"/><a:tint val=\"94000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:satMod val=\"110000\"/><a:lumMod val=\"100000\"/><a:shade val=\"100000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:lumMod val=\"99000\"/><a:satMod val=\"120000\"/><a:shade val=\"78000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:fillStyleLst><a:lnStyleLst><a:ln w=\"6350\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"12700\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln><a:ln w=\"19050\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/><a:miter lim=\"800000\"/></a:ln></a:lnStyleLst><a:effectStyleLst><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst/></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"57150\" dist=\"19050\" dir=\"5400000\" algn=\"ctr\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"63000\"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle></a:effectStyleLst><a:bgFillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:solidFill><a:schemeClr val=\"phClr\"><a:tint val=\"95000\"/><a:satMod val=\"170000\"/></a:schemeClr></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"93000\"/><a:satMod val=\"150000\"/><a:shade val=\"98000\"/><a:lumMod val=\"102000\"/></a:schemeClr></a:gs><a:gs pos=\"50000\"><a:schemeClr val=\"phClr\"><a:tint val=\"98000\"/><a:satMod val=\"130000\"/><a:shade val=\"90000\"/><a:lumMod val=\"103000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"63000\"/><a:satMod val=\"120000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"5400000\" scaled=\"0\"/></a:gradFill></a:bgFillStyleLst></a:fmtScheme></a:themeElements><a:objectDefaults/><a:extraClrSchemeLst/><a:extLst><a:ext uri=\"{05A4C25C-085E-4340-85A3-A5531E510DB2}\"><thm15:themeFamily xmlns:thm15=\"http://schemas.microsoft.com/office/thememl/2012/main\" name=\"Office Theme\" id=\"{62F939B6-93AF-4DB8-9C6B-D6C7DFDC589F}\" vid=\"{4A3C46E8-61CC-4603-A589-7422A47A8E4A}\"/></a:ext></a:extLst></a:theme>';\n    }\n\n    public static getStyles(hasNonStringValues: boolean): string {\n        const additionalCellXF = '<xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\" applyNumberFormat=\"1\"/>';\n        const cellXFCount = hasNonStringValues ? 2 : 1;\n        return ExcelStrings.XML_STRING + '<styleSheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac x16r2\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\" xmlns:x16r2=\"http://schemas.microsoft.com/office/spreadsheetml/2015/02/main\"><fonts count=\"1\" x14ac:knownFonts=\"1\"><font><sz val=\"11\"/><color theme=\"1\"/><name val=\"Calibri\"/><family val=\"2\"/><scheme val=\"minor\"/></font></fonts><fills count=\"2\"><fill><patternFill patternType=\"none\"/></fill><fill><patternFill patternType=\"gray125\"/></fill></fills><borders count=\"1\"><border><left/><right/><top/><bottom/><diagonal/></border></borders><cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs><cellXfs count=\"' + cellXFCount + '\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\" xfId=\"0\"/>' + additionalCellXF + '</cellXfs><cellStyles count=\"1\"><cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\"/></cellStyles><dxfs count=\"0\"/><tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium2\" defaultPivotStyle=\"PivotStyleLight16\"/><extLst><ext uri=\"{EB79DEF2-80B8-43e5-95BD-54CBDDF9020C}\" xmlns:x14=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/main\"><x14:slicerStyles defaultSlicerStyle=\"SlicerStyleLight1\"/></ext><ext uri=\"{9260A510-F301-46a8-8635-F512D64BE5F5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:timelineStyles defaultTimelineStyle=\"TimeSlicerStyleLight1\"/></ext></extLst></styleSheet>';\n    }\n\n    public static getWorkbook(): string {\n        return ExcelStrings.XML_STRING + '<workbook xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x15\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><fileVersion appName=\"xl\" lastEdited=\"6\" lowestEdited=\"6\" rupBuild=\"14420\"/><workbookPr filterPrivacy=\"1\" defaultThemeVersion=\"164011\"/><bookViews><workbookView xWindow=\"0\" yWindow=\"0\" windowWidth=\"22260\" windowHeight=\"12645\"/></bookViews><sheets><sheet name=\"Sheet1\" sheetId=\"1\" r:id=\"rId1\"/></sheets><calcPr calcId=\"162913\"/><extLst><ext uri=\"{140A7094-0E35-4892-8432-C4D2E57EDEB5}\" xmlns:x15=\"http://schemas.microsoft.com/office/spreadsheetml/2010/11/main\"><x15:workbookPr chartTrackingRefBase=\"1\"/></ext></extLst></workbook>';\n    }\n\n    public static getWorksheetRels(): string {\n        return ExcelStrings.XML_STRING + `<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/table\" Target=\"../tables/table1.xml\"/></Relationships>`;\n    }\n\n    public static getWorkbookRels(hasSharedStrings): string {\n        let retVal = ExcelStrings.XML_STRING + '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\"><Relationship Id=\"rId3\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\" Target=\"styles.xml\"/><Relationship Id=\"rId2\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\" Target=\"theme/theme1.xml\"/><Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\" Target=\"worksheets/sheet1.xml\"/>';\n\n        if (hasSharedStrings) {\n            retVal += ExcelStrings.SHARED_STRING_RELATIONSHIP;\n        }\n\n        retVal += '</Relationships>';\n\n        return retVal;\n    }\n\n    public static getSheetXML(dimension: string, freezePane: string, cols: string, sheetData: string, hasTable: boolean, hasGroupedRows = false, outlineLevel = 0): string {\n        const tableParts = hasTable ? '<tableParts count=\"1\"><tablePart r:id=\"rId1\"/></tableParts>' : '';\n        const sheetOutlineProp = hasGroupedRows ? '<sheetPr><outlinePr summaryBelow=\"0\"/></sheetPr>' : '';\n        const sOutlineLevel = outlineLevel > 0 ? `outlineLevelRow=\"${outlineLevel}\"` : '';\n        // return ExcelStrings.XML_STRING +\n        //     '<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\"><dimension ref=\"' + dimension + '\"/><sheetViews><sheetView tabSelected=\"1\" workbookViewId=\"0\">' + freezePane + '</sheetView></sheetViews><sheetFormatPr defaultRowHeight=\"15\" x14ac:dyDescent=\"0.25\"/>' + cols + sheetData + '<pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/>' + tableParts + '</worksheet>';\n\n        return `${ExcelStrings.XML_STRING}\n<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">\n${sheetOutlineProp}\n<dimension ref=\"${dimension}\"/>\n<sheetViews><sheetView tabSelected=\"1\" workbookViewId=\"0\">${freezePane}</sheetView></sheetViews>\n<sheetFormatPr defaultRowHeight=\"15\" ${sOutlineLevel} x14ac:dyDescent=\"0.25\"/>\n${cols}\n${sheetData}\n<pageMargins left=\"0.7\" right=\"0.7\" top=\"0.75\" bottom=\"0.75\" header=\"0.3\" footer=\"0.3\"/>\n${tableParts}</worksheet>`;\n\n    }\n\n    public static getSharedStringXML(count: number, uniqueCount: number, table: string): string {\n        return ExcelStrings.XML_STRING + '<sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"' + count + '\" uniqueCount=\"' + uniqueCount + '\">' + table + '</sst>';\n    }\n\n    public static getContentTypesXML(hasSharedStrings: boolean, hasTable: boolean): string {\n        let contentTypes = ExcelStrings.XML_STRING +\n        `<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\\\">\n            <Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\"/>\n            <Default Extension=\"xml\" ContentType=\"application/xml\"/>\n            <Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\"/>\n            <Override PartName=\"/xl/worksheets/sheet1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\"/>\n            <Override PartName=\"/xl/theme/theme1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.theme+xml\"/>\n            <Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\"/>\n            <Override PartName=\"/docProps/core.xml\" ContentType=\"application/vnd.openxmlformats-package.core-properties+xml\"/>\n            <Override PartName=\"/docProps/app.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.extended-properties+xml\"/>`;\n\n        contentTypes += hasSharedStrings ?\n        `\t<Override PartName=\"/xl/sharedStrings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\"/>` : '';\n\n        contentTypes += hasTable ?\n            `<Override PartName=\"/xl/tables/table1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\"/>` : '';\n        contentTypes += `</Types>`;\n\n        return contentTypes;\n    }\n\n    public static getTablesXML(dimension: string, tableColumns: string, sort: string): string {\n        return `${ExcelStrings.XML_STRING}<table xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" id=\"1\" name=\"Table1\" displayName=\"Table1\" ref=\"${dimension}\" totalsRowShown=\"0\">\n    <autoFilter ref=\"${dimension}\"/>${sort}${tableColumns}<tableStyleInfo name=\"TableStyleMedium2\" showFirstColumn=\"0\" showLastColumn=\"0\" showRowStripes=\"1\" showColumnStripes=\"0\"/>\n</table>`;\n    }\n    /* tslint:enable max-line-length */\n\n    public static getExcelColumn(index: number): string {\n        // Returns the excel column name for given 0-based index\n        // For example 27 should return \"AB\"\n        let returnString = '';\n        while (index >= 0) {\n            const char = index % 26;\n            returnString = String.fromCharCode(65 + char) + returnString;\n            index = Math.floor(index / 26) - 1;\n        }\n        return returnString;\n    }\n}\n","import { IExcelFile } from './excel-interfaces';\nimport { ExcelStrings } from './excel-strings';\nimport { WorksheetData } from './worksheet-data';\n\nimport * as JSZip from 'jszip/dist/jszip';\n\n/**\n * @hidden\n */\nexport class RootRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('.rels', ExcelStrings.getRels());\n    }\n}\n\n/**\n * @hidden\n */\nexport class AppFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('app.xml', ExcelStrings.getApp());\n    }\n}\n\n/**\n * @hidden\n */\nexport class CoreFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('core.xml', ExcelStrings.getCore());\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorkbookRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const hasSharedStrings = worksheetData.isEmpty === false;\n        folder.file('workbook.xml.rels', ExcelStrings.getWorkbookRels(hasSharedStrings));\n    }\n}\n\n/**\n * @hidden\n */\nexport class ThemeFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('theme1.xml', ExcelStrings.getTheme());\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorksheetFile implements IExcelFile {\n    private static MIN_WIDTH = 8.34;\n\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const sheetData = [];\n        const cols = [];\n        let dimension: string;\n        const dictionary = worksheetData.dataDictionary;\n        let freezePane = '';\n        let maxOutlineLevel = 0;\n\n        if (worksheetData.isEmpty) {\n            sheetData.push('<sheetData/>');\n            dimension = 'A1';\n        } else {\n            sheetData.push('<sheetData>');\n            const height =  worksheetData.options.rowHeight;\n            const rowHeight = height ? ' ht=\"' + height + '\" customHeight=\"1\"' : '';\n\n            sheetData.push(`<row r=\"1\"${rowHeight}>`);\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const column = ExcelStrings.getExcelColumn(i) + 1;\n                const value = dictionary.saveValue(worksheetData.keys[i], i, true);\n                sheetData.push(`<c r=\"${column}\" t=\"s\"><v>${value}</v></c>`);\n            }\n            sheetData.push('</row>');\n\n            for (let i = 1; i < worksheetData.rowCount; i++) {\n                if (!worksheetData.isTreeGridData) {\n                    sheetData.push(`<row r=\"${(i + 1)}\"${rowHeight}>`);\n                } else {\n                    const rowData = worksheetData.data[i - 1].originalRowData;\n                    const sCollapsed = (!rowData.expanded) ? '' : (rowData.expanded === true) ? '' : ` collapsed=\"1\"`;\n                    const sHidden = (rowData.parent && this.hasCollapsedParent(rowData)) ? ` hidden=\"1\"` : '';\n                    const rowOutlineLevel = rowData.level ? rowData.level : 0;\n                    const sOutlineLevel = rowOutlineLevel > 0 ? ` outlineLevel=\"${rowOutlineLevel}\"` : '';\n                    maxOutlineLevel = maxOutlineLevel < rowOutlineLevel ? rowOutlineLevel : maxOutlineLevel;\n\n                    sheetData.push(`<row r=\"${(i + 1)}\"${rowHeight}${sOutlineLevel}${sCollapsed}${sHidden}>`);\n                }\n                for (let j = 0; j < worksheetData.columnCount; j++) {\n                    const cellData = WorksheetFile.getCellData(worksheetData, i, j);\n                    sheetData.push(cellData);\n                }\n                sheetData.push('</row>');\n            }\n            sheetData.push('</sheetData>');\n            dimension = 'A1:' + ExcelStrings.getExcelColumn(worksheetData.columnCount - 1) + worksheetData.rowCount;\n\n            cols.push('<cols>');\n\n            for (let i = 0; i < worksheetData.columnCount; i++) {\n                const width = dictionary.columnWidths[i];\n                // Use the width provided in the options if it exists\n                const widthInTwips = worksheetData.options.columnWidth ?\n                                    worksheetData.options.columnWidth :\n                                    Math.max(((width / 96) * 14.4), WorksheetFile.MIN_WIDTH);\n\n                cols.push(`<col min=\"${(i + 1)}\" max=\"${(i + 1)}\" width=\"${widthInTwips}\" customWidth=\"1\"/>`);\n            }\n\n            cols.push('</cols>');\n\n            if (worksheetData.indexOfLastPinnedColumn !== -1 &&\n                !worksheetData.options.ignorePinning &&\n                !worksheetData.options.ignoreColumnsOrder) {\n                const frozenColumnCount = worksheetData.indexOfLastPinnedColumn + 1;\n                const firstCell = ExcelStrings.getExcelColumn(frozenColumnCount) + '1';\n                freezePane = `<pane xSplit=\"${frozenColumnCount}\" topLeftCell=\"${firstCell}\" activePane=\"topRight\" state=\"frozen\"/>`;\n            }\n        }\n        const hasTable = !worksheetData.isEmpty && worksheetData.options.exportAsTable;\n\n        folder.file('sheet1.xml',\n                    ExcelStrings.getSheetXML(dimension, freezePane, cols.join(''), sheetData.join(''), hasTable,\n                    worksheetData.isTreeGridData, maxOutlineLevel));\n    }\n\n    private hasCollapsedParent(rowData) {\n        let result = !rowData.parent.expanded;\n        while (rowData.parent) {\n            result = result || !rowData.parent.expanded;\n            rowData = rowData.parent;\n        }\n\n        return result;\n    }\n    /* tslint:disable member-ordering */\n    private static getCellData(worksheetData: WorksheetData, row: number, column: number): string {\n        const dictionary = worksheetData.dataDictionary;\n        const columnName = ExcelStrings.getExcelColumn(column) + (row + 1);\n        const columnHeader = worksheetData.keys[column];\n\n        const rowData = worksheetData.data[row - 1].rowData;\n\n        const cellValue = worksheetData.isSpecialData ? rowData : rowData[columnHeader];\n\n        if (cellValue === undefined || cellValue === null) {\n            return `<c r=\"${columnName}\" s=\"1\"/>`;\n        } else {\n            const savedValue = dictionary.saveValue(cellValue, column, false);\n            const isSavedAsString = savedValue !== -1;\n\n            const value = isSavedAsString ? savedValue : cellValue;\n            const type = isSavedAsString ? ` t=\"s\"` : '';\n            const format = isSavedAsString ? '' : ` s=\"1\"`;\n\n            return `<c r=\"${columnName}\"${type}${format}><v>${value}</v></c>`;\n        }\n    }\n    /* tslint:enable member-ordering */\n}\n\n/**\n * @hidden\n */\nexport class StyleFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('styles.xml', ExcelStrings.getStyles(worksheetData.dataDictionary && worksheetData.dataDictionary.hasNonStringValues));\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorkbookFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('workbook.xml', ExcelStrings.getWorkbook());\n    }\n}\n\n/**\n * @hidden\n */\nexport class ContentTypesFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('[Content_Types].xml', ExcelStrings.getContentTypesXML(!worksheetData.isEmpty, worksheetData.options.exportAsTable));\n    }\n}\n\n/**\n * @hidden\n */\nexport class SharedStringsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const dict = worksheetData.dataDictionary;\n        const sortedValues = dict.getKeys();\n        const sharedStrings = new Array<string>(sortedValues.length);\n\n        for (const value of sortedValues) {\n            sharedStrings[dict.getSanitizedValue(value)] = '<si><t>' + value + '</t></si>';\n        }\n\n        folder.file('sharedStrings.xml', ExcelStrings.getSharedStringXML(\n                        dict.stringsCount,\n                        sortedValues.length,\n                        sharedStrings.join(''))\n                    );\n    }\n}\n\n/**\n * @hidden\n */\nexport class TablesFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        const columnCount = worksheetData.columnCount;\n        const lastColumn = ExcelStrings.getExcelColumn(columnCount - 1) + worksheetData.rowCount;\n        const dimension = 'A1:' + lastColumn;\n        const values = worksheetData.keys;\n        let sortString = '';\n\n        let tableColumns = '<tableColumns count=\"' + columnCount + '\">';\n        for (let i = 0; i < columnCount; i++) {\n            const value =  values[i];\n            tableColumns += '<tableColumn id=\"' + (i + 1) + '\" name=\"' + value + '\"/>';\n        }\n\n        tableColumns += '</tableColumns>';\n\n        if (worksheetData.sort) {\n            const sortingExpression = worksheetData.sort;\n            const sc = ExcelStrings.getExcelColumn(values.indexOf(sortingExpression.fieldName));\n            const dir = sortingExpression.dir - 1;\n            sortString = `<sortState ref=\"A2:${lastColumn}\"><sortCondition descending=\"${dir}\" ref=\"${sc}1:${sc}15\"/></sortState>`;\n        }\n\n        folder.file('table1.xml', ExcelStrings.getTablesXML(dimension, tableColumns, sortString));\n    }\n}\n\n/**\n * @hidden\n */\nexport class WorksheetRelsFile implements IExcelFile {\n    public writeElement(folder: JSZip, worksheetData: WorksheetData) {\n        folder.file('sheet1.xml.rels', ExcelStrings.getWorksheetRels());\n    }\n}\n","import {\n    ExcelFileTypes,\n    ExcelFolderTypes\n} from './excel-enums';\n\nimport { IExcelFolder } from './excel-interfaces';\nimport { WorksheetData } from './worksheet-data';\n\n/** @hidden */\nexport class RootExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.ContentTypesFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [\n            ExcelFolderTypes.RootRelsExcelFolder,\n            ExcelFolderTypes.DocPropsExcelFolder,\n            ExcelFolderTypes.XLExcelFolder\n        ];\n    }\n}\n\n/** @hidden */\nexport class RootRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.RootRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class DocPropsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'docProps';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [\n            ExcelFileTypes.AppFile,\n            ExcelFileTypes.CoreFile\n        ];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class XLExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'xl';\n    }\n\n    childFiles(data: WorksheetData) {\n        const retVal = [\n            ExcelFileTypes.StyleFile,\n            ExcelFileTypes.WorkbookFile\n        ];\n\n        if (!data.isEmpty) {\n            retVal.push(ExcelFileTypes.SharedStringsFile);\n        }\n\n        return retVal;\n    }\n\n    childFolders(data: WorksheetData) {\n        const retVal = [\n            ExcelFolderTypes.XLRelsExcelFolder,\n            ExcelFolderTypes.ThemeExcelFolder,\n            ExcelFolderTypes.WorksheetsExcelFolder\n        ];\n\n        if (!data.isEmpty && data.options.exportAsTable) {\n            retVal.push(ExcelFolderTypes.TablesExcelFolder);\n        }\n\n        return retVal;\n    }\n}\n\n/** @hidden */\nexport class XLRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorkbookRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class ThemeExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'theme';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.ThemeFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class WorksheetsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return  'worksheets';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorksheetFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return data.isEmpty || !data.options.exportAsTable ? [] : [ExcelFolderTypes.WorksheetsRelsExcelFolder];\n    }\n}\n\n/** @hidden */\nexport class TablesExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return 'tables';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.TablesFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n\n/** @hidden */\nexport class WorksheetsRelsExcelFolder implements IExcelFolder {\n    public get folderName() {\n        return '_rels';\n    }\n\n    childFiles(data: WorksheetData) {\n        return [ExcelFileTypes.WorksheetRelsFile];\n    }\n\n    childFolders(data: WorksheetData) {\n        return [];\n    }\n}\n","import {\n    ExcelFileTypes,\n    ExcelFolderTypes\n} from './excel-enums';\n\nimport {\n    AppFile,\n    ContentTypesFile,\n    CoreFile,\n    RootRelsFile,\n    SharedStringsFile,\n    StyleFile,\n    TablesFile,\n    ThemeFile,\n    WorkbookFile,\n    WorkbookRelsFile,\n    WorksheetFile,\n    WorksheetRelsFile\n} from './excel-files';\n\nimport {\n    DocPropsExcelFolder,\n    RootExcelFolder,\n    RootRelsExcelFolder,\n    TablesExcelFolder,\n    ThemeExcelFolder,\n    WorksheetsExcelFolder,\n    WorksheetsRelsExcelFolder,\n    XLExcelFolder,\n    XLRelsExcelFolder\n} from './excel-folders';\n\nimport {\n    IExcelFile,\n    IExcelFolder\n} from './excel-interfaces';\n\n/** @hidden */\nexport class ExcelElementsFactory {\n\n    public static getExcelFolder(type: ExcelFolderTypes): IExcelFolder {\n        switch (type) {\n            case ExcelFolderTypes.RootExcelFolder:\n                return new RootExcelFolder();\n            case ExcelFolderTypes.RootRelsExcelFolder:\n                return new RootRelsExcelFolder();\n            case ExcelFolderTypes.DocPropsExcelFolder:\n                return new DocPropsExcelFolder();\n            case ExcelFolderTypes.XLExcelFolder:\n                return new XLExcelFolder();\n            case ExcelFolderTypes.XLRelsExcelFolder:\n                return new XLRelsExcelFolder();\n            case ExcelFolderTypes.ThemeExcelFolder:\n                return new ThemeExcelFolder();\n            case ExcelFolderTypes.WorksheetsExcelFolder:\n                return  new WorksheetsExcelFolder();\n            case ExcelFolderTypes.WorksheetsRelsExcelFolder:\n                return new WorksheetsRelsExcelFolder();\n            case ExcelFolderTypes.TablesExcelFolder:\n                return new TablesExcelFolder();\n            default:\n                throw new Error('Unknown excel folder type!');\n        }\n    }\n\n    public static getExcelFile(type: ExcelFileTypes): IExcelFile {\n        switch (type) {\n            case ExcelFileTypes.RootRelsFile:\n                return  new RootRelsFile();\n            case ExcelFileTypes.AppFile:\n                return  new AppFile();\n            case ExcelFileTypes.CoreFile:\n                return new CoreFile();\n            case ExcelFileTypes.WorkbookRelsFile:\n                return new WorkbookRelsFile();\n            case ExcelFileTypes.ThemeFile:\n                return new ThemeFile();\n            case ExcelFileTypes.WorksheetFile:\n                return new WorksheetFile();\n            case ExcelFileTypes.StyleFile:\n                return new StyleFile();\n            case ExcelFileTypes.WorkbookFile:\n                return new WorkbookFile();\n            case ExcelFileTypes.ContentTypesFile:\n                return new ContentTypesFile();\n            case ExcelFileTypes.SharedStringsFile:\n                return new SharedStringsFile();\n            case ExcelFileTypes.WorksheetRelsFile:\n                return new WorksheetRelsFile();\n            case ExcelFileTypes.TablesFile:\n                return new TablesFile();\n            default:\n                throw Error('Unknown excel file type!');\n        }\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\n\n/** @hidden */\nexport class WorksheetDataDictionary {\n    private static DEFAULT_FONT = '11pt Calibri';\n    private static TEXT_PADDING = 5;\n\n    private _dictionary: any;\n    private _widthsDictionary: any;\n\n    private _sortedKeysByValue: string[];\n    private _sortedKeysByValueAreValid: boolean;\n\n    private _keys: string[];\n    private _keysAreValid: boolean;\n\n    private _counter: number;\n    private _calculateColumnWidth: boolean;\n    private _columnWidths: number[];\n    private _context: any;\n\n    private _columnTypeInfo: boolean[];\n    public hasNonStringValues = false;\n\n    public stringsCount: number;\n\n    constructor(columnCount: number, columnWidth: number) {\n        this._dictionary = {};\n        this._widthsDictionary = {};\n        this._counter = 0;\n        this.dirtyKeyCollections();\n\n        this._calculateColumnWidth = !columnWidth;\n        this._columnWidths = new Array<number>(columnCount);\n        this._columnTypeInfo = new Array<boolean>(columnCount);\n\n        if (!this._calculateColumnWidth) {\n            this._columnWidths.fill(columnWidth);\n        }\n\n        this.stringsCount = 0;\n    }\n\n    public get columnWidths() {\n        return this._columnWidths;\n    }\n\n    public saveValue(value: any, column: number, isHeader: boolean): number {\n        if (this._columnTypeInfo[column] === undefined && isHeader === false) {\n            this._columnTypeInfo[column] = typeof value === 'string' ||\n                                            typeof value === 'boolean' ||\n                                            value instanceof Date;\n        }\n\n        let sanitizedValue = '';\n        const isSavedAsString = this._columnTypeInfo[column] || isHeader;\n\n        if (isSavedAsString) {\n            sanitizedValue = this.sanitizeValue(value);\n\n            if (this._dictionary[sanitizedValue] === undefined) {\n                this._dictionary[sanitizedValue] = this._counter++;\n                this.dirtyKeyCollections();\n            }\n\n            this.stringsCount ++;\n        } else {\n            this.hasNonStringValues = true;\n        }\n\n        if (this._calculateColumnWidth) {\n            const width = this.getTextWidth(value);\n            const maxWidth = Math.max(this._columnWidths[column] || 0, width);\n            this._columnWidths[column] = maxWidth;\n        }\n\n        return isSavedAsString ? this.getSanitizedValue(sanitizedValue) : -1;\n    }\n\n    public getValue(value: string): number {\n        return this.getSanitizedValue(this.sanitizeValue(value));\n    }\n\n    public getSanitizedValue(sanitizedValue: string): number {\n        return this._dictionary[sanitizedValue];\n    }\n\n    public getKeys(): string[] {\n        if (!this._keysAreValid) {\n            this._keys = Object.keys(this._dictionary);\n            this._keysAreValid = true;\n        }\n\n        return this._keys;\n    }\n\n    private getTextWidth(value: any): number {\n        if (this._widthsDictionary[value] === undefined) {\n            const context = this.getContext();\n            const metrics = context.measureText(value);\n            this._widthsDictionary[value] = metrics.width + WorksheetDataDictionary.TEXT_PADDING;\n        }\n\n        return this._widthsDictionary[value];\n    }\n\n    private getContext(): any {\n        if (!this._context) {\n            const canvas = document.createElement('canvas');\n            this._context = canvas.getContext('2d');\n            this._context.font = WorksheetDataDictionary.DEFAULT_FONT;\n        }\n\n        return this._context;\n    }\n\n    private sanitizeValue(value: any): string {\n        if (ExportUtilities.hasValue(value) === false) {\n            return '';\n        } else {\n            const stringValue = String(value);\n            return stringValue.replace(/&/g, '&amp;')\n                            .replace(/</g, '&lt;')\n                            .replace(/>/g, '&gt;')\n                            .replace(/\"/g, '&quot;')\n                            .replace(/'/g, '&apos;');\n        }\n    }\n\n    private dirtyKeyCollections(): void {\n        this._keysAreValid = false;\n    }\n}\n","import { ExportUtilities } from '../exporter-common/export-utilities';\nimport { IgxExcelExporterOptions } from './excel-exporter-options';\nimport { WorksheetDataDictionary } from './worksheet-data-dictionary';\n\n/** @hidden */\nexport class WorksheetData {\n    private _columnCount: number;\n    private _rowCount: number;\n    private _dataDictionary: WorksheetDataDictionary;\n    private _keys: string[];\n    private _isSpecialData: boolean;\n\n    constructor(private _data: any[], public options: IgxExcelExporterOptions, public indexOfLastPinnedColumn,\n                public sort: any, public isTreeGridData = false) {\n        this.initializeData();\n    }\n\n    public get data() {\n        return this._data;\n    }\n\n    public get columnCount(): number {\n        return this._columnCount;\n    }\n\n    public get rowCount(): number {\n        return this._rowCount;\n    }\n\n    public get isEmpty() {\n        return !this.rowCount || !this._columnCount;\n    }\n\n    public get keys(): string[] {\n        return this._keys;\n    }\n\n    public get isSpecialData(): boolean {\n        return this._isSpecialData;\n    }\n\n    public get dataDictionary() {\n        return this._dataDictionary;\n    }\n\n    private initializeData() {\n        if (!this._data || this._data.length === 0) {\n            return;\n        }\n\n        const actualData = this._data.map((item) => item.rowData);\n\n        this._keys = ExportUtilities.getKeysFromData(actualData);\n        if (this._keys.length === 0) {\n            return;\n        }\n\n        this._isSpecialData = ExportUtilities.isSpecialData(actualData);\n\n        this._columnCount = this._keys.length;\n        this._rowCount = this._data.length + 1;\n\n        this._dataDictionary = new WorksheetDataDictionary(this._columnCount, this.options.columnWidth);\n    }\n}\n","import * as JSZip from 'jszip/dist/jszip';\n\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { ExcelElementsFactory } from './excel-elements-factory';\nimport { ExcelFolderTypes } from './excel-enums';\nimport { IgxExcelExporterOptions } from './excel-exporter-options';\nimport { IExcelFolder } from './excel-interfaces';\nimport { IgxBaseExporter } from '../exporter-common/base-export-service';\nimport { ExportUtilities } from '../exporter-common/export-utilities';\nimport { WorksheetData } from './worksheet-data';\n\nexport interface IExcelExportEndedEventArgs {\n    xlsx: JSZip;\n}\n\n/**\n * **Ignite UI for Angular Excel Exporter Service** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/exporter_excel.html)\n *\n * The Ignite UI for Angular Excel Exporter service can export data in MicrosoftÂ® ExcelÂ® format from both raw data\n * (array) or from an `IgxGrid`.\n *\n * Example:\n * ```typescript\n * public localData = [\n *   { Name: \"Eric Ridley\", Age: \"26\" },\n *   { Name: \"Alanis Brook\", Age: \"22\" },\n *   { Name: \"Jonathan Morris\", Age: \"23\" }\n * ];\n *\n * constructor(private excelExportService: IgxExcelExporterService) {\n * }\n *\n * this.excelExportService.exportData(this.localData, new IgxExcelExporterOptions(\"FileName\"));\n * ```\n */\n@Injectable()\nexport class IgxExcelExporterService extends IgxBaseExporter {\n\n    private static ZIP_OPTIONS = { compression: 'DEFLATE', type: 'base64' };\n    private _xlsx: JSZip;\n\n    /**\n     * This event is emitted when the export process finishes.\n     * ```typescript\n     * this.exporterService.onExportEnded.subscribe((args: IExcelExportEndedEventArgs) => {\n     * // put event handler code here\n     * });\n     * ```\n     * @memberof IgxExcelExporterService\n     */\n    @Output()\n    public onExportEnded = new EventEmitter<IExcelExportEndedEventArgs>();\n\n    private static populateFolder(folder: IExcelFolder, zip: JSZip, worksheetData: WorksheetData): any {\n        for (const childFolder of folder.childFolders(worksheetData)) {\n            const folderIntance = ExcelElementsFactory.getExcelFolder(childFolder);\n            const zipFolder = zip.folder(folderIntance.folderName);\n            IgxExcelExporterService.populateFolder(folderIntance, zipFolder, worksheetData);\n        }\n\n        for (const childFile of folder.childFiles(worksheetData)) {\n            const fileInstance = ExcelElementsFactory.getExcelFile(childFile);\n            fileInstance.writeElement(zip, worksheetData);\n        }\n    }\n\n    protected exportDataImplementation(data: any[], options: IgxExcelExporterOptions): void {\n        if (this._isTreeGrid) {\n            let maxLevel = 0;\n            data.forEach((r) => {\n                maxLevel = Math.max(maxLevel, r.originalRowData.level);\n            });\n            if (maxLevel > 7) {\n                throw Error('Can create an outline of up to eight levels!');\n            }\n        }\n\n        const worksheetData = new WorksheetData(data, options, this._indexOfLastPinnedColumn, this._sort, this._isTreeGrid);\n        this._xlsx = new JSZip();\n\n        const rootFolder = ExcelElementsFactory.getExcelFolder(ExcelFolderTypes.RootExcelFolder);\n        IgxExcelExporterService.populateFolder(rootFolder, this._xlsx, worksheetData);\n\n        this._xlsx.generateAsync(IgxExcelExporterService.ZIP_OPTIONS).then((result) => {\n            this.saveFile(result, options.fileName);\n\n            this.onExportEnded.emit({ xlsx: this._xlsx });\n        });\n    }\n\n    private saveFile(data: string, fileName: string): void {\n        const blob = new Blob([ExportUtilities.stringToArrayBuffer(atob(data))], {\n            type: ''\n        });\n\n        ExportUtilities.saveBlobToFile(blob, fileName);\n    }\n}\n","import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';\n\n/**\n * Objects of this class are used to configure the Excel exporting process.\n */\nexport class IgxExcelExporterOptions extends IgxExporterOptionsBase {\n    private _columnWidth: number;\n    private _rowHeight: number;\n\n    /**\n     * Specifies if column pinning should be ignored. If ignoreColumnsOrder is set to true,\n     * this option will always be considered as set to true.\n     * ```typescript\n     * let ignorePinning = this.exportOptions.ignorePinning;\n     * this.exportOptions.ignorePinning = true;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public ignorePinning = false;\n\n    /**\n     * Specifies whether the exported data should be formatted as Excel table. (True by default)\n     * ```typescript\n     * let exportAsTable = this.exportOptions.exportAsTable;\n     * this.exportOptions.exportAsTable = false;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public exportAsTable = true;\n\n    constructor(fileName: string) {\n        super(fileName, '.xlsx');\n    }\n\n    /**\n     * Gets the width of the columns in the exported excel file.\n     * ```typescript\n     * let width = this.exportOptions.columnWidth;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public get columnWidth(): number {\n        return this._columnWidth;\n    }\n\n    /**\n     * Sets the width of the columns in the exported excel file. If left unspecified or 0,\n     * the width of the largest string in the column will be used.\n     * ```typescript\n     * this.exportOptions.columnWidth = 55;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public set columnWidth(value: number) {\n        if (value < 0) {\n            throw Error('Invalid value for column width!');\n        }\n\n        this._columnWidth = value;\n    }\n\n    /**\n     * Gets the height of the rows in the exported excel file.\n     * ```typescript\n     * let height = this.exportOptions.rowHeight;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public get rowHeight(): number {\n        return this._rowHeight;\n    }\n\n    /**\n     * Sets the height of the rows in the exported excel file. If left unspecified or 0,\n     * the default height of the excel rows will be used.\n     * ```typescript\n     * this.exportOptions.rowHeight = 25;\n     * ```\n     * @memberof IgxExcelExporterOptions\n     */\n    public set rowHeight(value: number) {\n        if (value < 0) {\n            throw Error('Invalid value for row height!');\n        }\n\n        this._rowHeight = value;\n    }\n}\n","import { IPositionStrategy } from './position/IPositionStrategy';\n\nimport { IScrollStrategy } from './scroll';\nimport { AnimationReferenceMetadata, AnimationPlayer } from '@angular/animations';\nimport { ComponentRef, ElementRef, NgZone } from '@angular/core';\nimport { IgxOverlayOutletDirective } from '../../directives/toggle/toggle.directive';\nimport { CancelableEventArgs, CancelableBrowserEventArgs, cloneValue } from '../../core/utils';\n\nexport enum HorizontalAlignment {\n    Left = -1,\n    Center = -0.5,\n    Right = 0\n}\n\nexport enum VerticalAlignment {\n    Top = -1,\n    Middle = -0.5,\n    Bottom = 0\n}\n\nexport class Point {\n    constructor(public x: number, public y: number) { }\n}\n\nexport interface PositionSettings {\n    /** Attaching target for the component to show */\n    target?: Point | HTMLElement;\n    /** Direction in which the component should show */\n    horizontalDirection?: HorizontalAlignment;\n    /** Direction in which the component should show */\n    verticalDirection?: VerticalAlignment;\n    /** Target's starting point */\n    horizontalStartPoint?: HorizontalAlignment;\n    /** Target's starting point */\n    verticalStartPoint?: VerticalAlignment;\n    /** Animation applied while overlay opens */\n    openAnimation?: AnimationReferenceMetadata;\n    /** Animation applied while overlay closes */\n    closeAnimation?: AnimationReferenceMetadata;\n    /** The size up to which element may shrink when shown in elastic position strategy */\n    minSize?: Size;\n}\n\nexport interface OverlaySettings {\n    /** Position strategy to use with this settings */\n    positionStrategy?: IPositionStrategy;\n    /** Scroll strategy to use with this settings */\n    scrollStrategy?: IScrollStrategy;\n    /** Set if the overlay should be in modal mode */\n    modal?: boolean;\n    /** Set if the overlay should closed on outside click */\n    closeOnOutsideClick?: boolean;\n    /** Set the outlet container to attach the overlay to */\n    outlet?: IgxOverlayOutletDirective | ElementRef;\n    /**\n     * @hidden @internal\n     * Exclude the position strategy target for outside clicks\n     */\n    excludePositionTarget?: boolean;\n}\n\nexport interface OverlayEventArgs {\n    /** Id of the overlay generated with `attach()` method */\n    id: string;\n    /** Available when `Type<T>` is provided to the `attach()` method and allows access to the created Component instance */\n    componentRef?: ComponentRef<{}>;\n}\n\nexport interface OverlayCancelableEventArgs extends OverlayEventArgs, CancelableEventArgs {\n}\n\nexport interface OverlayClosingEventArgs extends OverlayEventArgs, CancelableBrowserEventArgs {\n}\n\nexport interface OverlayAnimationEventArgs {\n    /** Id of the overlay generated with `attach()` method */\n    id: string;\n    /** Animation player that will play the animation */\n    animationPlayer: AnimationPlayer;\n    /** Type of animation to be played. It should be either 'open' or 'close' */\n    animationType: 'open' | 'close';\n}\n\nexport interface Size {\n    /** Gets or sets the horizontal component of Size */\n    width: number;\n\n    /** Gets or sets the vertical component of Size */\n    height: number;\n}\n\n/** @hidden */\nexport interface OverlayInfo {\n    id?: string;\n    elementRef?: ElementRef;\n    componentRef?: ComponentRef<{}>;\n    settings?: OverlaySettings;\n    initialSize?: Size;\n    hook?: HTMLElement;\n    openAnimationPlayer?: AnimationPlayer;\n    closeAnimationPlayer?: AnimationPlayer;\n    openAnimationInnerPlayer?: any;\n    closeAnimationInnerPlayer?: any;\n    ngZone: NgZone;\n}\n\n/** @hidden */\nexport class Util {\n    /**\n     * @hidden\n     * Calculates the rectangle of target for provided overlay settings. Defaults to 0,0,0,0,0,0 rectangle\n     * if no target is provided\n     * @param settings Overlay settings for which to calculate target rectangle\n     */\n    static getTargetRect(settings: PositionSettings): ClientRect {\n        let targetRect: ClientRect = {\n            bottom: 0,\n            height: 0,\n            left: 0,\n            right: 0,\n            top: 0,\n            width: 0\n        };\n\n        if (settings.target instanceof HTMLElement) {\n            targetRect = (settings.target as HTMLElement).getBoundingClientRect();\n        } else if (settings.target instanceof Point) {\n            const targetPoint = settings.target as Point;\n            targetRect = {\n                bottom: targetPoint.y,\n                height: 0,\n                left: targetPoint.x,\n                right: targetPoint.x,\n                top: targetPoint.y,\n                width: 0\n            };\n        }\n\n        return targetRect;\n    }\n\n    /** @hidden @internal */\n    static getViewportRect(document: Document): ClientRect {\n        const width = document.documentElement.clientWidth;\n        const height = document.documentElement.clientHeight;\n        const scrollPosition = Util.getViewportScrollPosition(document);\n\n        return {\n            top: scrollPosition.y,\n            left: scrollPosition.x,\n            right: scrollPosition.x + width,\n            bottom: scrollPosition.y + height,\n            width: width,\n            height: height,\n        };\n    }\n\n    /** @hidden @internal */\n    static getViewportScrollPosition(document: Document): Point {\n        const documentElement = document.documentElement;\n        const documentRect = documentElement.getBoundingClientRect();\n\n        const horizontalScrollPosition =\n            -documentRect.left || document.body.scrollLeft || window.scrollX || documentElement.scrollLeft || 0;\n        const verticalScrollPosition = -documentRect.top || document.body.scrollTop || window.scrollY || documentElement.scrollTop || 0;\n\n        return new Point(horizontalScrollPosition, verticalScrollPosition);\n    }\n\n    /** @hidden @internal*/\n    static cloneInstance(object) {\n        const clonedObj = Object.assign(Object.create(Object.getPrototypeOf(object)), object);\n        clonedObj.settings = cloneValue(clonedObj.settings);\n        return clonedObj;\n    }\n}\n","import { IPositionStrategy } from './IPositionStrategy';\nimport { PositionSettings, HorizontalAlignment, VerticalAlignment, Size, Util } from './../utilities';\nimport { fadeIn, fadeOut } from '../../../animations/main';\n\n/**\n * Positions the element based on the directions passed in trough PositionSettings.\n * These are Top/Middle/Bottom for verticalDirection and Left/Center/Right for horizontalDirection\n */\nexport class GlobalPositionStrategy implements IPositionStrategy {\n    private _defaultSettings: PositionSettings = {\n        horizontalDirection: HorizontalAlignment.Center,\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle,\n        openAnimation: fadeIn,\n        closeAnimation: fadeOut,\n        minSize: { width: 0, height: 0 }\n    };\n\n    /** @inheritdoc */\n    public settings: PositionSettings;\n\n    constructor(settings?: PositionSettings) {\n        this.settings = Object.assign({}, this._defaultSettings, settings);\n    }\n\n    position(contentElement: HTMLElement, size?: Size, document?: Document, initialCall?: boolean): void {\n        contentElement.classList.add('igx-overlay__content--relative');\n        contentElement.parentElement.classList.add('igx-overlay__wrapper--flex');\n        switch (this.settings.horizontalDirection) {\n            case HorizontalAlignment.Left:\n                contentElement.parentElement.style.justifyContent = 'flex-start';\n                break;\n            case HorizontalAlignment.Center:\n                contentElement.parentElement.style.justifyContent = 'center';\n                break;\n            case HorizontalAlignment.Right:\n                contentElement.parentElement.style.justifyContent = 'flex-end';\n                break;\n            default:\n                break;\n        }\n\n        switch (this.settings.verticalDirection) {\n            case VerticalAlignment.Top:\n                contentElement.parentElement.style.alignItems = 'flex-start';\n                break;\n            case VerticalAlignment.Middle:\n                contentElement.parentElement.style.alignItems = 'center';\n                break;\n            case VerticalAlignment.Bottom:\n                contentElement.parentElement.style.alignItems = 'flex-end';\n                break;\n            default:\n                break;\n        }\n    }\n\n    /** @inheritdoc */\n    clone(): IPositionStrategy {\n        return Util.cloneInstance(this);\n    }\n}\n\n","import { IScrollStrategy } from './IScrollStrategy';\nimport { IgxOverlayService } from '../overlay';\n\nexport abstract class ScrollStrategy implements IScrollStrategy {\n    constructor(scrollContainer?: HTMLElement) { }\n    /** @inheritdoc */\n    abstract initialize(document: Document, overlayService: IgxOverlayService, id: string);\n\n    /** @inheritdoc */\n    abstract attach(): void;\n\n    /** @inheritdoc */\n    abstract detach(): void;\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Empty scroll strategy. Does nothing.\n */\nexport class NoOpScrollStrategy extends ScrollStrategy {\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n    }\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) { }\n\n    /** @inheritdoc */\n    attach(): void { }\n\n    /** @inheritdoc */\n    detach(): void { }\n}\n","import { isDevMode } from '@angular/core';\n\n/**\n * @hidden\n */\nexport function DeprecateMethod(message: string): MethodDecorator {\n    let isMessageShown = false;\n\n    return function (target: any, key: string, descriptor: PropertyDescriptor) {\n        if (descriptor && descriptor.value) {\n            const originalMethod = descriptor.value;\n\n            descriptor.value = function () {\n                const targetName = typeof target === 'function' ? target.name : target.constructor.name;\n                isMessageShown = showMessage(`${targetName}.${key}: ${message}`, isMessageShown);\n\n                return originalMethod.call(this, arguments);\n            };\n\n            return descriptor;\n        }\n    };\n}\n\n/**\n * @hidden\n */\nexport function DeprecateProperty(message: string): PropertyDecorator {\n    return function(target: any, key: string) {\n        let isMessageShown = false;\n        const messageToDisplay = `${target.constructor.name}.${key}: ${message}`;\n\n        // if the target already has the property defined\n        const originalDescriptor = Object.getOwnPropertyDescriptor(target, key);\n        if (originalDescriptor) {\n            let getter, setter;\n            getter = originalDescriptor.get;\n            setter = originalDescriptor.set;\n\n            if (getter) {\n                originalDescriptor.get = function() {\n                    isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                    return getter.call(this);\n                };\n            }\n\n            if (setter) {\n                originalDescriptor.set = function (value) {\n                    isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                    setter.call(this, value);\n                };\n            }\n\n            return originalDescriptor;\n        }\n\n        // the target doesn't contain a descriptor for that property, so create one\n        // use backing field to set/get the value of the property to ensure there won't be infinite recursive calls\n        const newKey = generateUniqueKey(target, key);\n        Object.defineProperty(target, key, {\n            configurable: true,\n            enumerable: true,\n            set: function(value) {\n                isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                this[newKey] = value;\n            },\n            get: function() {\n                isMessageShown = showMessage(messageToDisplay, isMessageShown);\n                return this[newKey];\n            }\n        });\n    };\n}\n\n/**\n * @hidden\n */\nfunction generateUniqueKey(target: any, key: string): string {\n    let newKey = '_' + key;\n    while (target.hasOwnProperty(newKey)) {\n        newKey = '_' + newKey;\n    }\n\n    return newKey;\n}\n\n/**\n * @hidden\n */\nexport function showMessage(message: string, isMessageShown: boolean): boolean {\n    if (!isMessageShown && isDevMode()) {\n        console.warn(message);\n    }\n\n    return true;\n}\n","import { DOCUMENT } from '@angular/common';\nimport { GlobalPositionStrategy } from './position/global-position-strategy';\nimport { NoOpScrollStrategy } from './scroll/NoOpScrollStrategy';\nimport {\n    OverlaySettings,\n    OverlayEventArgs,\n    OverlayInfo,\n    OverlayAnimationEventArgs,\n    OverlayCancelableEventArgs,\n    OverlayClosingEventArgs\n} from './utilities';\n\nimport {\n    ApplicationRef,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injectable,\n    Injector,\n    Type,\n    OnDestroy,\n    NgModuleRef,\n    NgZone\n} from '@angular/core';\nimport { AnimationBuilder, AnimationReferenceMetadata, AnimationMetadataType, AnimationAnimateRefMetadata } from '@angular/animations';\nimport { fromEvent, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { IAnimationParams } from '../../animations/main';\nimport { showMessage } from '../../core/deprecateDecorators';\n\nlet warningShown = false;\n\n/**\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/overlay_main.html)\n * The overlay service allows users to show components on overlay div above all other elements in the page.\n */\n@Injectable({ providedIn: 'root' })\nexport class IgxOverlayService implements OnDestroy {\n    private _componentId = 0;\n    private _overlayInfos: OverlayInfo[] = [];\n    private _overlayElement: HTMLElement;\n    private _document: Document;\n    private destroy$ = new Subject<boolean>();\n\n    private _defaultSettings: OverlaySettings = {\n        positionStrategy: new GlobalPositionStrategy(),\n        scrollStrategy: new NoOpScrollStrategy(),\n        modal: true,\n        closeOnOutsideClick: true\n    };\n\n    /**\n     * Emitted before the component is opened.\n     * ```typescript\n     * onOpening(event: OverlayCancelableEventArgs){\n     *     const onOpening = event;\n     * }\n     * ```\n     */\n    public onOpening = new EventEmitter<OverlayCancelableEventArgs>();\n\n    /**\n     * Emitted after the component is opened and all animations are finished.\n     * ```typescript\n     * onOpened(event: OverlayEventArgs){\n     *     const onOpened = event;\n     * }\n     * ```\n     */\n    public onOpened = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted before the component is closed.\n     * ```typescript\n     * onClosing(event: OverlayCancelableEventArgs){\n     *     const onClosing = event;\n     * }\n     * ```\n     */\n    public onClosing = new EventEmitter<OverlayClosingEventArgs>();\n\n    /**\n     * Emitted after the component is closed and all animations are finished.\n     * ```typescript\n     * onClosed(event: OverlayEventArgs){\n     *     const onClosed = event;\n     * }\n     * ```\n     */\n    public onClosed = new EventEmitter<OverlayEventArgs>();\n\n    /**\n     * Emitted before animation is started\n     * ```typescript\n     * onAnimation(event: OverlayAnimationEventArgs){\n     *     const onAnimation = event;\n     * }\n     * ```\n     */\n    public onAnimation = new EventEmitter<OverlayAnimationEventArgs>();\n\n    constructor(\n        private _factoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _injector: Injector,\n        private builder: AnimationBuilder,\n        @Inject(DOCUMENT) private document: any,\n        private _zone: NgZone) {\n        this._document = <Document>this.document;\n    }\n\n    /**\n     * Generates Id. Provide this Id when call `show(id, settings?)` method\n     * @param component ElementRef to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     */\n    attach(element: ElementRef, settings?: OverlaySettings): string;\n    /**\n     * Generates Id. Provide this Id when call `show(id, settings?)` method\n     * @param component Component Type to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @param moduleRef Optional reference to the NgModule that can resolve the component's factory\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     */\n    attach(component: Type<any>, settings?: OverlaySettings, moduleRef?: NgModuleRef<any>): string;\n    attach(component: ElementRef | Type<any>, settings?: OverlaySettings, moduleRef?: NgModuleRef<any>): string {\n        let info: OverlayInfo;\n        info = this.getOverlayInfo(component, moduleRef);\n\n        //  if there is no info most probably wrong type component was provided and we just go out\n        if (!info) {\n            return null;\n        }\n\n        info.id = (this._componentId++).toString();\n        settings = Object.assign({}, this._defaultSettings, settings);\n        info.settings = settings;\n        this._overlayInfos.push(info);\n        return info.id;\n    }\n\n    /**\n     * Shows the overlay for provided id.\n     * @param id Id to show overlay for\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     */\n    show(id: string, settings?: OverlaySettings): string;\n    /**\n     * Shows the provided component.\n     * @param component ElementRef or Component Type to show in overlay\n     * @param settings Display settings for the overlay, such as positioning and scroll/close behavior.\n     * @returns Id of the created overlay. Valid until `onClosed` is emitted.\n     * ```typescript\n     * this.overlay.show(element, settings);\n     * ```\n     * @deprecated Use `attach(component)` to obtain an Id. Then `show(id, settings?)` with provided Id.\n     */\n    // tslint:disable-next-line:unified-signatures\n    show(component: ElementRef | Type<any>, settings?: OverlaySettings): string;\n    show(compOrId: string | ElementRef | Type<any>, settings?: OverlaySettings): string {\n        let info: OverlayInfo;\n        let id: string;\n        if (typeof compOrId === 'string') {\n            id = compOrId;\n            info = this.getOverlayById(compOrId);\n            if (!info) {\n                console.warn('igxOverlay.show was called with wrong id: ' + compOrId);\n                return null;\n            }\n        } else {\n            warningShown = showMessage(\n                '`show(component, settings?)` overload is deprecated. Use `attach(component)` to obtain an Id.' +\n                'Then `show(id, settings?)` with provided Id.',\n                warningShown);\n            id = (this._componentId++).toString();\n            info = this.getOverlayInfo(compOrId);\n\n            //  if there is no info most probably wrong type component was provided and we just go out\n            if (!info) {\n                return;\n            }\n\n            info.id = id;\n        }\n\n        settings = Object.assign({}, this._defaultSettings, info.settings, settings);\n        info.settings = settings;\n\n        this._show(info);\n        return id;\n    }\n\n    /**\n     * Hides the component with the ID provided as a parameter.\n     * ```typescript\n     * this.overlay.hide(id);\n     * ```\n     */\n    hide(id: string) {\n        this._hide(id);\n    }\n\n    /**\n     * Hides all the components and the overlay.\n     * ```typescript\n     * this.overlay.hideAll();\n     * ```\n     */\n    hideAll() {\n        // since overlays are removed on animation done, que all hides\n        for (let i = this._overlayInfos.length; i--;) {\n            this.hide(this._overlayInfos[i].id);\n        }\n    }\n\n    /**\n     * Repositions the component with ID provided as a parameter.\n     * ```typescript\n     * this.overlay.reposition(id);\n     * ```\n     */\n    reposition(id: string) {\n        const overlayInfo = this.getOverlayById(id);\n        if (!overlayInfo || !overlayInfo.settings) {\n            console.error('Wrong id provided in overlay.reposition method. Id: ' + id);\n            return;\n        }\n\n        const contentElement = overlayInfo.elementRef.nativeElement.parentElement;\n        const contentElementRect = contentElement.getBoundingClientRect();\n        overlayInfo.settings.positionStrategy.position(\n            contentElement,\n            {\n                width: contentElementRect.width,\n                height: contentElementRect.height\n            },\n            this._document,\n            false);\n    }\n\n    private _show(info: OverlayInfo) {\n        const eventArgs: OverlayCancelableEventArgs = { id: info.id, componentRef: info.componentRef, cancel: false };\n        this.onOpening.emit(eventArgs);\n        if (eventArgs.cancel) {\n            if (info.componentRef) {\n                this._appRef.detachView(info.componentRef.hostView);\n                info.componentRef.destroy();\n            }\n\n            return;\n        }\n\n        //  if there is no close animation player, or there is one but it is not started yet we are in clear\n        //  opening. Otherwise, if there is close animation player playing animation now we should not setup\n        //  overlay this is already done\n        if (!info.closeAnimationPlayer || (info.closeAnimationPlayer && !info.closeAnimationPlayer.hasStarted())) {\n            const elementRect = info.elementRef.nativeElement.getBoundingClientRect();\n            info.initialSize = { width: elementRect.width, height: elementRect.height };\n            info.hook = this.placeElementHook(info.elementRef.nativeElement);\n\n            this.moveElementToOverlay(info);\n            if (info.componentRef) {\n                info.componentRef.changeDetectorRef.detectChanges();\n            }\n            this.updateSize(info);\n            if (this._overlayInfos.indexOf(info) === -1) {\n                this._overlayInfos.push(info);\n            }\n\n            info.settings.positionStrategy.position(\n                info.elementRef.nativeElement.parentElement,\n                { width: info.initialSize.width, height: info.initialSize.height },\n                document,\n                true);\n            info.settings.scrollStrategy.initialize(this._document, this, info.id);\n            info.settings.scrollStrategy.attach();\n        }\n\n        this.addOutsideClickListener(info);\n        this.addResizeHandler(info.id);\n\n        if (info.settings.modal) {\n            this.setupModalWrapper(info);\n        }\n\n        if (info.settings.positionStrategy.settings.openAnimation) {\n            this.playOpenAnimation(info);\n        } else {\n            //  to eliminate flickering show the element just before onOpened fire\n            info.elementRef.nativeElement.parentElement.style.visibility = '';\n            this.onOpened.emit({ id: info.id, componentRef: info.componentRef });\n        }\n    }\n\n    private _hide(id: string, event?: Event) {\n        const info: OverlayInfo = this.getOverlayById(id);\n\n        if (!info) {\n            console.warn('igxOverlay.hide was called with wrong id: ' + id);\n            return;\n        }\n\n        const eventArgs = { id, componentRef: info.componentRef, cancel: false, event };\n        this.onClosing.emit(eventArgs);\n        if (eventArgs.cancel) {\n            return;\n        }\n\n        //  TODO: synchronize where these are added/attached and where removed/detached\n        info.settings.scrollStrategy.detach();\n        this.removeOutsideClickListener(info);\n        this.removeResizeHandler(info.id);\n\n        const child: HTMLElement = info.elementRef.nativeElement;\n        if (info.settings.modal) {\n            const parent = child.parentNode.parentNode as HTMLElement;\n            this.applyAnimationParams(parent, info.settings.positionStrategy.settings.closeAnimation);\n            parent.classList.remove('igx-overlay__wrapper--modal');\n            parent.classList.add('igx-overlay__wrapper');\n        }\n\n        if (info.settings.positionStrategy.settings.closeAnimation) {\n            this.playCloseAnimation(info);\n        } else {\n            this.onCloseDone(info);\n        }\n    }\n\n    private getOverlayInfo(component: any, moduleRef?: NgModuleRef<any>): OverlayInfo {\n        const info: OverlayInfo = { ngZone: this._zone };\n        if (component instanceof ElementRef) {\n            info.elementRef = <ElementRef>component;\n        } else {\n            let dynamicFactory: ComponentFactory<{}>;\n            const factoryResolver = moduleRef ? moduleRef.componentFactoryResolver : this._factoryResolver;\n            try {\n                dynamicFactory = factoryResolver.resolveComponentFactory(component);\n            } catch (error) {\n                console.error(error);\n                return null;\n            }\n\n            const injector = moduleRef ? moduleRef.injector : this._injector;\n            const dynamicComponent: ComponentRef<{}> = dynamicFactory.create(injector);\n            this._appRef.attachView(dynamicComponent.hostView);\n\n            // If the element is newly created from a Component, it is wrapped in 'ng-component' tag - we do not want that.\n            const element = dynamicComponent.location.nativeElement;\n            info.elementRef = <ElementRef>{ nativeElement: element };\n            info.componentRef = dynamicComponent;\n        }\n\n        return info;\n    }\n\n    private placeElementHook(element: HTMLElement): HTMLElement {\n        if (!element.parentElement) {\n            return null;\n        }\n\n        const hook = this._document.createElement('div');\n        element.parentElement.insertBefore(hook, element);\n        return hook;\n    }\n\n    private moveElementToOverlay(info: OverlayInfo) {\n        const wrapperElement = this.getWrapperElement();\n        const contentElement = this.getContentElement(wrapperElement, info.settings.modal);\n        this.getOverlayElement(info).appendChild(wrapperElement);\n        const elementScrollTop = info.elementRef.nativeElement.scrollTop;\n        contentElement.appendChild(info.elementRef.nativeElement);\n\n        if (elementScrollTop) {\n            info.elementRef.nativeElement.scrollTop = elementScrollTop;\n        }\n    }\n\n    private getWrapperElement(): HTMLElement {\n        const wrapper: HTMLElement = this._document.createElement('div');\n        wrapper.classList.add('igx-overlay__wrapper');\n        return wrapper;\n    }\n\n    private getContentElement(wrapperElement: HTMLElement, modal: boolean): HTMLElement {\n        const content: HTMLElement = this._document.createElement('div');\n        if (modal) {\n            content.classList.add('igx-overlay__content--modal');\n            content.addEventListener('click', (ev: Event) => {\n                ev.stopPropagation();\n            });\n        } else {\n            content.classList.add('igx-overlay__content');\n        }\n\n        content.addEventListener('scroll', (ev: Event) => {\n            ev.stopPropagation();\n        });\n\n        //  hide element to eliminate flickering. Show the element exactly before animation starts\n        content.style.visibility = 'hidden';\n\n        wrapperElement.appendChild(content);\n        return content;\n    }\n\n    private getOverlayElement(info: OverlayInfo): HTMLElement {\n        if (info.settings.outlet) {\n            return info.settings.outlet.nativeElement;\n        }\n        if (!this._overlayElement) {\n            this._overlayElement = this._document.createElement('div');\n            this._overlayElement.classList.add('igx-overlay');\n            this._document.body.appendChild(this._overlayElement);\n        }\n\n        return this._overlayElement;\n    }\n\n    private updateSize(info: OverlayInfo) {\n        if (info.componentRef) {\n            //  if we are positioning component this is first time it gets visible\n            //  and we can finally get its size\n            info.initialSize = info.elementRef.nativeElement.getBoundingClientRect();\n        }\n\n        // set content div width only if element to show has width\n        if (info.initialSize.width !== 0) {\n            info.elementRef.nativeElement.parentElement.style.width = info.initialSize.width + 'px';\n        }\n    }\n\n    private setupModalWrapper(info: OverlayInfo) {\n        const wrapperElement = info.elementRef.nativeElement.parentElement.parentElement;\n        fromEvent(wrapperElement, 'keydown').pipe(\n            filter((ev: KeyboardEvent) => ev.key === 'Escape' || ev.key === 'Esc'),\n            takeUntil(this.destroy$)\n        ).subscribe(() => this.hide(info.id));\n        wrapperElement.classList.remove('igx-overlay__wrapper');\n        this.applyAnimationParams(wrapperElement, info.settings.positionStrategy.settings.openAnimation);\n        wrapperElement.classList.add('igx-overlay__wrapper--modal');\n    }\n\n    private onCloseDone(info: OverlayInfo) {\n        this.cleanUp(info);\n        this.onClosed.emit({ id: info.id, componentRef: info.componentRef });\n    }\n\n    private cleanUp(info: OverlayInfo) {\n        const child: HTMLElement = info.elementRef.nativeElement;\n        const outlet = this.getOverlayElement(info);\n        if (!outlet.contains(child)) {\n            console.warn('Component with id:' + info.id + ' is already removed!');\n            return;\n        }\n\n        outlet.removeChild(child.parentNode.parentNode);\n        if (info.componentRef) {\n            this._appRef.detachView(info.componentRef.hostView);\n            info.componentRef.destroy();\n        }\n\n        if (info.hook) {\n            info.hook.parentElement.insertBefore(info.elementRef.nativeElement, info.hook);\n            info.hook.parentElement.removeChild(info.hook);\n        }\n\n        const index = this._overlayInfos.indexOf(info);\n        this._overlayInfos.splice(index, 1);\n\n        // this._overlayElement.parentElement check just for tests that manually delete the element\n        if (this._overlayInfos.length === 0 && this._overlayElement && this._overlayElement.parentElement) {\n            this._overlayElement.parentElement.removeChild(this._overlayElement);\n            this._overlayElement = null;\n        }\n    }\n\n    private playOpenAnimation(info: OverlayInfo) {\n        if (!info.openAnimationPlayer) {\n            const animationBuilder = this.builder.build(info.settings.positionStrategy.settings.openAnimation);\n            info.openAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);\n\n            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer\n            //  and then getting the positions from it.\n            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891\n            //  As soon as this is resolved we can remove this hack\n            const innerRenderer = (<any>info.openAnimationPlayer)._renderer;\n            info.openAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];\n            info.openAnimationPlayer.onDone(() => {\n                this.onOpened.emit({ id: info.id, componentRef: info.componentRef });\n                if (info.openAnimationPlayer) {\n                    info.openAnimationPlayer.reset();\n                    info.openAnimationPlayer = null;\n                }\n\n                if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {\n                    info.closeAnimationPlayer.reset();\n                }\n            });\n        }\n\n        //  if there is opening animation already started do nothing\n        if (info.openAnimationPlayer.hasStarted()) {\n            return;\n        }\n\n        //  if there is closing animation already started start open animation from where close one has reached\n        //  and remove close animation\n        if (info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted()) {\n            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation\n            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where\n            //  the previous has finished we need the amount up to 1, therefore we are subtracting what\n            //  getPosition() returns from one\n            const position = 1 - info.closeAnimationInnerPlayer.getPosition();\n            info.closeAnimationPlayer.reset();\n            info.closeAnimationPlayer = null;\n            info.openAnimationPlayer.init();\n            info.openAnimationPlayer.setPosition(position);\n        }\n\n        this.onAnimation.emit({ id: info.id, animationPlayer: info.openAnimationPlayer, animationType: 'open' });\n\n        //  to eliminate flickering show the element just before animation start\n        info.elementRef.nativeElement.parentElement.style.visibility = '';\n        info.openAnimationPlayer.play();\n    }\n\n    private playCloseAnimation(info: OverlayInfo) {\n        if (!info.closeAnimationPlayer) {\n            const animationBuilder = this.builder.build(info.settings.positionStrategy.settings.closeAnimation);\n            info.closeAnimationPlayer = animationBuilder.create(info.elementRef.nativeElement);\n\n            //  AnimationPlayer.getPosition returns always 0. To workaround this we are getting inner WebAnimationPlayer\n            //  and then getting the positions from it.\n            //  This is logged in Angular here - https://github.com/angular/angular/issues/18891\n            //  As soon as this is resolved we can remove this hack\n            const innerRenderer = (<any>info.closeAnimationPlayer)._renderer;\n            info.closeAnimationInnerPlayer = innerRenderer.engine.players[innerRenderer.engine.players.length - 1];\n\n            info.closeAnimationPlayer.onDone(() => {\n                if (info.closeAnimationPlayer) {\n                    info.closeAnimationPlayer.reset();\n                    info.closeAnimationPlayer = null;\n                }\n\n                if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {\n                    info.openAnimationPlayer.reset();\n                }\n                this.onCloseDone(info);\n            });\n        }\n\n        //  if there is closing animation already started do nothing\n        if (info.closeAnimationPlayer.hasStarted()) {\n            return;\n        }\n\n        //  if there is opening animation already started start close animation from where open one has reached\n        //  and remove open animation\n        if (info.openAnimationPlayer && info.openAnimationPlayer.hasStarted()) {\n            //  getPosition() returns what part of the animation is passed, e.g. 0.5 if half the animation\n            //  is done, 0.75 if 3/4 of the animation is done. As we need to start next animation from where\n            //  the previous has finished we need the amount up to 1, therefore we are subtracting what\n            //  getPosition() returns from one\n            const position = 1 - info.openAnimationInnerPlayer.getPosition();\n            info.openAnimationPlayer.reset();\n            info.openAnimationPlayer = null;\n            info.closeAnimationPlayer.init();\n            info.closeAnimationPlayer.setPosition(position);\n        }\n\n        this.onAnimation.emit({ id: info.id, animationPlayer: info.closeAnimationPlayer, animationType: 'close' });\n        info.closeAnimationPlayer.play();\n    }\n\n    //  TODO: check if applyAnimationParams will work with complex animations\n    private applyAnimationParams(wrapperElement: HTMLElement, animationOptions: AnimationReferenceMetadata) {\n        if (!animationOptions) {\n            wrapperElement.style.transitionDuration = '0ms';\n            return;\n        }\n        if (animationOptions.type === AnimationMetadataType.AnimateRef) {\n            animationOptions = (animationOptions as AnimationAnimateRefMetadata).animation;\n        }\n        if (!animationOptions.options || !animationOptions.options.params) {\n            return;\n        }\n        const params = animationOptions.options.params as IAnimationParams;\n        if (params.duration) {\n            wrapperElement.style.transitionDuration = params.duration;\n        }\n        if (params.easing) {\n            wrapperElement.style.transitionTimingFunction = params.easing;\n        }\n    }\n\n    /** @hidden @internal */\n    public getOverlayById(id: string): OverlayInfo {\n        if (!id) {\n            return null;\n        }\n\n        const info = this._overlayInfos.find(e => e.id === id);\n        return info;\n    }\n\n    private documentClicked = (ev: MouseEvent) => {\n        //  if we get to modal overlay just return - we should not close anything under it\n        //  if we get to non-modal overlay do the next:\n        //   1. Check it has close on outside click. If not go on to next overlay;\n        //   2. If true check if click is on the element. If it is on the element we have closed\n        //  already all previous non-modal with close on outside click elements, so we return. If\n        //  not close the overlay and check next\n        for (let i = this._overlayInfos.length; i--;) {\n            const info = this._overlayInfos[i];\n            if (info.settings.modal) {\n                return;\n            }\n            if (info.settings.closeOnOutsideClick) {\n                //  if the click is on the element do not close this overlay\n                if (!info.elementRef.nativeElement.contains(ev.target)) {\n                    // if we should exclude position target check if the click is over it. If so do not close overlay\n                    const positionTarget = info.settings.positionStrategy.settings.target as HTMLElement;\n                    let clickOnPositionTarget = false;\n                    if (positionTarget) {\n                        const positionTargetRect = positionTarget.getBoundingClientRect();\n                        clickOnPositionTarget = ev.clientX >= positionTargetRect.left && ev.clientX <= positionTargetRect.right &&\n                                                ev.clientY >= positionTargetRect.top && ev.clientY <= positionTargetRect.bottom;\n                    }\n\n                    if (!(info.settings.excludePositionTarget && clickOnPositionTarget)) {\n                        //  if the click is outside click, but close animation has started do nothing\n                        if (!(info.closeAnimationPlayer && info.closeAnimationPlayer.hasStarted())) {\n                            this._hide(info.id, ev);\n                        }\n                    }\n                } else {\n                    //  TODO: should we return here, or continue with next overlays\n                    return;\n                }\n            }\n        }\n    }\n\n    private addOutsideClickListener(info: OverlayInfo) {\n        if (info.settings.closeOnOutsideClick) {\n            if (info.settings.modal) {\n                fromEvent(info.elementRef.nativeElement.parentElement.parentElement, 'click')\n                    .pipe(takeUntil(this.destroy$))\n                    .subscribe(() => this.hide(info.id));\n            } else if (\n                //  if all overlays minus closing overlays equals one add the handler\n                this._overlayInfos.filter(x => x.settings.closeOnOutsideClick && !x.settings.modal).length -\n                this._overlayInfos.filter(x => x.settings.closeOnOutsideClick && !x.settings.modal &&\n                    x.closeAnimationPlayer &&\n                    x.closeAnimationPlayer.hasStarted()).length === 1) {\n                this._document.addEventListener('click', this.documentClicked, true);\n            }\n        }\n    }\n\n    private removeOutsideClickListener(info: OverlayInfo) {\n        if (info.settings.modal === false) {\n            let shouldRemoveClickEventListener = true;\n            this._overlayInfos.forEach(o => {\n                if (o.settings.modal === false && o.id !== info.id) {\n                    shouldRemoveClickEventListener = false;\n                }\n            });\n\n            if (shouldRemoveClickEventListener) {\n                this._document.removeEventListener('click', this.documentClicked, true);\n            }\n        }\n    }\n\n    private addResizeHandler(id: string) {\n        const closingOverlaysCount =\n            this._overlayInfos\n                .filter(o => o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted())\n                .length;\n        if (this._overlayInfos.length - closingOverlaysCount === 1) {\n            this._document.defaultView.addEventListener('resize', this.repositionAll);\n        }\n    }\n\n    private removeResizeHandler(id: string) {\n        const closingOverlaysCount =\n            this._overlayInfos\n                .filter(o => o.closeAnimationPlayer && o.closeAnimationPlayer.hasStarted())\n                .length;\n        if (this._overlayInfos.length - closingOverlaysCount === 1) {\n            this._document.defaultView.removeEventListener('resize', this.repositionAll);\n        }\n    }\n\n    /** @hidden */\n    public repositionAll = () => {\n        for (let i = this._overlayInfos.length; i--;) {\n            this.reposition(this._overlayInfos[i].id);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n","import { IPositionStrategy } from './IPositionStrategy';\nimport {\n  HorizontalAlignment,\n  Point,\n  PositionSettings,\n  Size,\n  Util,\n  VerticalAlignment\n} from './../utilities';\nimport { scaleInVerTop, scaleOutVerTop } from '../../../animations/main';\n\n/**\n * Positions the element based on the directions and start point passed in trough PositionSettings.\n * It is possible to either pass a start point or an HTMLElement as a positioning base.\n */\nexport class ConnectedPositioningStrategy implements IPositionStrategy {\n  private _defaultSettings: PositionSettings = {\n    // default Point(0, 0) in getPointFromPositionsSettings\n    target: null,\n    horizontalDirection: HorizontalAlignment.Right,\n    verticalDirection: VerticalAlignment.Bottom,\n    horizontalStartPoint: HorizontalAlignment.Left,\n    verticalStartPoint: VerticalAlignment.Bottom,\n    openAnimation: scaleInVerTop,\n    closeAnimation: scaleOutVerTop,\n    minSize: { width: 0, height: 0 }\n  };\n\n  /** @inheritdoc */\n  public settings: PositionSettings;\n\n  constructor(settings?: PositionSettings) {\n    this.settings = Object.assign({}, this._defaultSettings, settings);\n  }\n\n  /** @inheritdoc */\n  position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n    const targetRect = Util.getTargetRect(this.settings);\n    const contentElementRect = contentElement.getBoundingClientRect();\n    this.setStyle(contentElement, targetRect, contentElementRect);\n  }\n\n  /**\n   * @inheritdoc\n   * Creates clone of this position strategy\n   * @returns clone of this position strategy\n   */\n  clone(): IPositionStrategy {\n    return Util.cloneInstance(this);\n  }\n\n  /**\n   * Sets element's style which effectively positions provided element according\n   * to provided position settings\n   * @param element Element to position\n   * @param targetRect Bounding rectangle of strategy target\n   * @param elementRect Bounding rectangle of the element\n   */\n  protected setStyle(element: HTMLElement, targetRect: ClientRect, elementRect: ClientRect) {\n    const startPoint: Point = {\n      x: targetRect.right + targetRect.width * this.settings.horizontalStartPoint,\n      y: targetRect.bottom + targetRect.height * this.settings.verticalStartPoint,\n    };\n    const wrapperRect: ClientRect = element.parentElement.getBoundingClientRect();\n\n    //  clean up styles - if auto position strategy is chosen we may pass here several times\n    element.style.right = '';\n    element.style.left = '';\n    element.style.bottom = '';\n    element.style.top = '';\n\n    switch (this.settings.horizontalDirection) {\n      case HorizontalAlignment.Left:\n        element.style.right = `${Math.round(wrapperRect.right - startPoint.x)}px`;\n        break;\n      case HorizontalAlignment.Center:\n        element.style.left = `${Math.round(startPoint.x - wrapperRect.left - elementRect.width / 2)}px`;\n        break;\n      case HorizontalAlignment.Right:\n        element.style.left = `${Math.round(startPoint.x - wrapperRect.left)}px`;\n        break;\n    }\n\n    switch (this.settings.verticalDirection) {\n      case VerticalAlignment.Top:\n        element.style.bottom = `${Math.round(wrapperRect.bottom - startPoint.y)}px`;\n        break;\n      case VerticalAlignment.Middle:\n        element.style.top = `${Math.round(startPoint.y - wrapperRect.top - elementRect.height / 2)}px`;\n        break;\n      case VerticalAlignment.Bottom:\n        element.style.top = `${Math.round(startPoint.y - wrapperRect.top)}px`;\n        break;\n    }\n  }\n}\n","import { ConnectedPositioningStrategy } from './connected-positioning-strategy';\nimport { HorizontalAlignment, VerticalAlignment, PositionSettings, Size, Util } from '../utilities';\n\nexport abstract class BaseFitPositionStrategy extends ConnectedPositioningStrategy {\n    protected _initialSize: Size;\n    protected _initialSettings: PositionSettings;\n\n    /** @inheritdoc */\n    position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n        const targetRect = Util.getTargetRect(this.settings);\n        const contentElementRect = contentElement.getBoundingClientRect();\n        if (initialCall) {\n            const connectedFit: ConnectedFit = {};\n            connectedFit.targetRect = targetRect;\n            connectedFit.contentElementRect = contentElementRect;\n            this._initialSettings = this._initialSettings || Object.assign({}, this.settings);\n            this.settings = Object.assign({}, this._initialSettings);\n            connectedFit.viewPortRect = Util.getViewportRect(document);\n            this.updateViewPortFit(connectedFit);\n            if (!connectedFit.fitHorizontal || !connectedFit.fitVertical) {\n                this.fitInViewport(contentElement, connectedFit);\n            }\n        }\n        this.setStyle(contentElement, targetRect, contentElementRect);\n    }\n\n    /**\n     * Checks if element can fit in viewport and updates provided connectedFit\n     * with the result\n     * @param connectedFit connectedFit to update\n     */\n    protected updateViewPortFit(connectedFit: ConnectedFit) {\n        connectedFit.left = this.calculateLeft(\n            connectedFit.targetRect,\n            connectedFit.contentElementRect,\n            this.settings.horizontalStartPoint,\n            this.settings.horizontalDirection);\n        connectedFit.right = connectedFit.left + connectedFit.contentElementRect.width;\n        connectedFit.fitHorizontal =\n            connectedFit.viewPortRect.left < connectedFit.left && connectedFit.right < connectedFit.viewPortRect.right;\n\n        connectedFit.top = this.calculateTop(\n            connectedFit.targetRect,\n            connectedFit.contentElementRect,\n            this.settings.verticalStartPoint,\n            this.settings.verticalDirection);\n        connectedFit.bottom = connectedFit.top + connectedFit.contentElementRect.height;\n        connectedFit.fitVertical =\n            connectedFit.viewPortRect.top < connectedFit.top && connectedFit.bottom < connectedFit.viewPortRect.bottom;\n    }\n\n    /**\n     * Calculates the position of the left border of the element if it gets positioned\n     * with provided start point and direction\n     * @param targetRect Rectangle of the target where element is attached\n     * @param elementRect Rectangle of the element\n     * @param startPoint Start point of the target\n     * @param direction Direction in which to show the element\n     */\n    protected calculateLeft(\n        targetRect: ClientRect, elementRect: ClientRect, startPoint: HorizontalAlignment, direction: HorizontalAlignment): number {\n        return targetRect.right + targetRect.width * startPoint + elementRect.width * direction;\n    }\n\n    /**\n     * Calculates the position of the top border of the element if it gets positioned\n     * with provided position settings related to the target\n     * @param targetRect Rectangle of the target where element is attached\n     * @param elementRect Rectangle of the element\n     * @param startPoint Start point of the target\n     * @param direction Direction in which to show the element\n     */\n    protected calculateTop(\n        targetRect: ClientRect, elementRect: ClientRect, startPoint: VerticalAlignment, direction: VerticalAlignment): number {\n        return targetRect.bottom + targetRect.height * startPoint + elementRect.height * direction;\n    }\n\n    /**\n     * Fits the element into viewport according to the position settings\n     * @param element element to fit in viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     */\n    protected abstract fitInViewport(\n        element: HTMLElement,\n        connectedFit: ConnectedFit);\n}\n\nexport interface ConnectedFit {\n    contentElementRect?: ClientRect;\n    targetRect?: ClientRect;\n    viewPortRect?: ClientRect;\n    fitHorizontal?: boolean;\n    fitVertical?: boolean;\n    left?: number;\n    right?: number;\n    top?: number;\n    bottom?: number;\n}\n","import { VerticalAlignment, HorizontalAlignment, PositionSettings } from './../utilities';\nimport { BaseFitPositionStrategy, ConnectedFit } from './base-fit-position-strategy';\n\n/**\n * Positions the element as in **Connected** positioning strategy and re-positions the element in\n * the view port (calculating a different start point) in case the element is partially getting out of view\n */\nexport class AutoPositionStrategy extends BaseFitPositionStrategy {\n\n    /** @inheritdoc */\n    protected fitInViewport(element: HTMLElement, connectedFit: ConnectedFit) {\n        const transformString: string[] = [];\n        if (!connectedFit.fitHorizontal) {\n            if (this.canFlipHorizontal(connectedFit)) {\n                this.flipHorizontal();\n            } else {\n                const horizontalPush = this.horizontalPush(connectedFit);\n                transformString.push(`translateX(${horizontalPush}px)`);\n            }\n        }\n\n        if (!connectedFit.fitVertical) {\n            if (this.canFlipVertical(connectedFit)) {\n                this.flipVertical();\n            } else {\n                const verticalPush = this.verticalPush(connectedFit);\n                transformString.push(`translateY(${verticalPush}px)`);\n            }\n        }\n\n        element.style.transform = transformString.join(' ').trim();\n    }\n\n    /**\n     * Checks if element can be flipped without get off the viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns true if element can be flipped and stain in viewport\n     */\n    private canFlipHorizontal(connectedFit: ConnectedFit): boolean {\n        //  HorizontalAlignment can be Left = -1; Center = -0.5 or Right = 0.\n        //  To virtually flip direction and start point (both are HorizontalAlignment) we can do this:\n        //  flippedAlignment = (-1) * (HorizontalAlignment + 1)\n        //  this way:\n        //  (-1) * (Left + 1) = 0 = Right\n        //  (-1) * (Center + 1) = -0.5 = Center\n        //  (-1) * (Right + 1) = -1 = Left\n        const flippedStartPoint = (-1) * (this.settings.horizontalStartPoint + 1);\n        const flippedDirection = (-1) * (this.settings.horizontalDirection + 1);\n\n        const leftBorder = this.calculateLeft(\n            connectedFit.targetRect, connectedFit.contentElementRect, flippedStartPoint, flippedDirection);\n        const rightBorder = leftBorder + connectedFit.contentElementRect.width;\n        return connectedFit.viewPortRect.left < leftBorder && rightBorder < connectedFit.viewPortRect.right;\n    }\n\n    /**\n     * Checks if element can be flipped without get off the viewport\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns true if element can be flipped and stain in viewport\n     */\n    private canFlipVertical(connectedFit: ConnectedFit): boolean {\n        const flippedStartPoint = (-1) * (this.settings.verticalStartPoint + 1);\n        const flippedDirection = (-1) * (this.settings.verticalDirection + 1);\n\n        const topBorder = this.calculateTop(\n            connectedFit.targetRect, connectedFit.contentElementRect, flippedStartPoint, flippedDirection);\n        const bottomBorder = topBorder + connectedFit.contentElementRect.height;\n        return connectedFit.viewPortRect.top < topBorder && bottomBorder < connectedFit.viewPortRect.bottom;\n    }\n\n    /**\n     * Flips direction and start point of the position settings\n     */\n    private flipHorizontal() {\n        switch (this.settings.horizontalDirection) {\n            case HorizontalAlignment.Left:\n                this.settings.horizontalDirection = HorizontalAlignment.Right;\n                break;\n            case HorizontalAlignment.Right:\n                this.settings.horizontalDirection = HorizontalAlignment.Left;\n                break;\n        }\n        switch (this.settings.horizontalStartPoint) {\n            case HorizontalAlignment.Left:\n                this.settings.horizontalStartPoint = HorizontalAlignment.Right;\n                break;\n            case HorizontalAlignment.Right:\n                this.settings.horizontalStartPoint = HorizontalAlignment.Left;\n                break;\n        }\n    }\n\n    /**\n     * Flips direction and start point of the position settings\n     */\n    private flipVertical() {\n        switch (this.settings.verticalDirection) {\n            case VerticalAlignment.Top:\n                this.settings.verticalDirection = VerticalAlignment.Bottom;\n                break;\n            case VerticalAlignment.Bottom:\n                this.settings.verticalDirection = VerticalAlignment.Top;\n                break;\n        }\n        switch (this.settings.verticalStartPoint) {\n            case VerticalAlignment.Top:\n                this.settings.verticalStartPoint = VerticalAlignment.Bottom;\n                break;\n            case VerticalAlignment.Bottom:\n                this.settings.verticalStartPoint = VerticalAlignment.Top;\n                break;\n        }\n    }\n\n    /**\n     * Calculates necessary horizontal push according to provided connectedFit\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns amount of necessary translation which will push the element into viewport\n     */\n    private horizontalPush(connectedFit: ConnectedFit): number {\n        const leftExtend = connectedFit.left;\n        const rightExtend = connectedFit.right - connectedFit.viewPortRect.right;\n        //  if leftExtend < 0 overlay goes beyond left end of the screen. We should push it back with exactly\n        //  as much as it is beyond the screen.\n        //  if rightExtend > 0 overlay goes beyond right end of the screen. We should push it back with the\n        //  extend but with amount not bigger than what left between left border of screen and left border of\n        //  overlay, e.g. leftExtend\n        if (leftExtend < 0) {\n            return Math.abs(leftExtend);\n        } else if (rightExtend > 0) {\n            return - Math.min(rightExtend, leftExtend);\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Calculates necessary vertical push according to provided connectedFit\n     * @param connectedFit connectedFit object containing all necessary parameters\n     * @returns amount of necessary translation which will push the element into viewport\n     */\n    private verticalPush(connectedFit: ConnectedFit): number {\n        const topExtend = connectedFit.top;\n        const bottomExtend = connectedFit.bottom - connectedFit.viewPortRect.bottom;\n        if (topExtend < 0) {\n            return Math.abs(topExtend);\n        } else if (bottomExtend > 0) {\n            return - Math.min(bottomExtend, topExtend);\n        } else {\n            return 0;\n        }\n    }\n}\n","import { BaseFitPositionStrategy, ConnectedFit } from './base-fit-position-strategy';\nimport { HorizontalAlignment, VerticalAlignment, PositionSettings } from '../utilities';\n\n/**\n * Positions the element as in **Connected** positioning strategy and resize the element\n * to fit in the view port in case the element is partially getting out of view\n */\nexport class ElasticPositionStrategy extends BaseFitPositionStrategy {\n    /** @inheritdoc */\n    protected fitInViewport(element: HTMLElement, connectedFit: ConnectedFit) {\n        element.classList.add('igx-overlay__content--elastic');\n        const transformString: string[] = [];\n        if (!connectedFit.fitHorizontal) {\n            const maxReduction = Math.max(0, connectedFit.contentElementRect.width - this.settings.minSize.width);\n            const leftExtend = Math.max(0, connectedFit.viewPortRect.left - connectedFit.left);\n            const rightExtend = Math.max(0, connectedFit.right - connectedFit.viewPortRect.right);\n            const reduction = Math.min(maxReduction, leftExtend + rightExtend);\n            element.style.width = `${connectedFit.contentElementRect.width - reduction}px`;\n\n            //  if direction is center and element goes off the screen in left direction we should push the\n            //  element to the right. Prevents left still going out of view when normally positioned\n            if (this.settings.horizontalDirection === HorizontalAlignment.Center) {\n                //  the amount of translation depends on whether element goes off the screen to the left,\n                //  to the right or in both directions, as well as how much it goes of the screen and finally\n                //  on the minSize. The translation should be proportional between left and right extend\n                //  taken from the reduction\n                const translation = leftExtend * reduction / (leftExtend + rightExtend);\n                if (translation > 0) {\n                    transformString.push(`translateX(${translation}px)`);\n                }\n            }\n        }\n\n        if (!connectedFit.fitVertical) {\n            const maxReduction = Math.max(0, connectedFit.contentElementRect.height - this.settings.minSize.height);\n            const topExtend = Math.max(0, connectedFit.viewPortRect.top - connectedFit.top);\n            const bottomExtend = Math.max(0, connectedFit.bottom - connectedFit.viewPortRect.bottom);\n            const reduction = Math.min(maxReduction, topExtend + bottomExtend);\n            element.style.height = `${connectedFit.contentElementRect.height - reduction}px`;\n\n            //  if direction is middle and element goes off the screen in top direction we should push the\n            //  element to the bottom. Prevents top still going out of view when normally positioned\n            if (this.settings.verticalDirection === VerticalAlignment.Middle) {\n                //  the amount of translation depends on whether element goes off the screen to the top,\n                //  to the bottom or in both directions, as well as how much it goes of the screen and finally\n                //  on the minSize. The translation should be proportional between top and bottom extend\n                //  taken from the reduction\n                const translation = topExtend * reduction / (topExtend + bottomExtend);\n                if (translation > 0) {\n                    transformString.push(`translateY(${translation}px)`);\n                }\n            }\n        }\n        element.style.transform = transformString.join(' ').trim();\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\nimport { NgZone } from '@angular/core';\n\n/**\n * On scroll reposition the overlay content.\n */\nexport class AbsoluteScrollStrategy extends ScrollStrategy {\n    private _initialized = false;\n    private _document: Document;\n    private _overlayService: IgxOverlayService;\n    private _id: string;\n    private _scrollContainer: HTMLElement;\n    private _zone: NgZone;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n        this._scrollContainer = scrollContainer;\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n        this._overlayService = overlayService;\n        this._id = id;\n        this._document = document;\n        this._zone = overlayService.getOverlayById(id).ngZone;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        if (this._zone) {\n            this._zone.runOutsideAngular(() => {\n                this.addScrollEventListener();\n            });\n        } else {\n            this.addScrollEventListener();\n        }\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.removeEventListener('scroll', this.onScroll, true);\n        } else {\n            this._document.removeEventListener('scroll', this.onScroll, true);\n        }\n\n        this._initialized = false;\n    }\n\n    private addScrollEventListener() {\n        if (this._scrollContainer) {\n            this._scrollContainer.addEventListener('scroll', this.onScroll, true);\n        } else {\n            this._document.addEventListener('scroll', this.onScroll, true);\n        }\n    }\n\n    private onScroll = () => {\n        this._overlayService.repositionAll();\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Prevents scrolling while the overlay content is shown.\n */\nexport class BlockScrollStrategy extends ScrollStrategy {\n    private _initialized = false;\n    private _document: Document;\n    private _initialScrollTop: number;\n    private _initialScrollLeft: number;\n    private _sourceElement: Element;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n\n        this._document = document;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        this._document.addEventListener('scroll', this.onScroll, true);\n        this._document.addEventListener('wheel', this.onWheel, true);\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        this._document.removeEventListener('scroll', this.onScroll, true);\n        this._document.removeEventListener('wheel', this.onWheel, true);\n        this._sourceElement = null;\n        this._initialScrollTop = 0;\n        this._initialScrollLeft = 0;\n        this._initialized = false;\n    }\n\n    private onScroll = (ev: Event) => {\n        ev.preventDefault();\n        if (!this._sourceElement || this._sourceElement !== ev.target) {\n            this._sourceElement = ev.target as Element;\n            this._initialScrollTop = this._sourceElement.scrollTop;\n            this._initialScrollLeft = this._sourceElement.scrollLeft;\n        }\n\n        this._sourceElement.scrollTop = this._initialScrollTop;\n        this._sourceElement.scrollLeft = this._initialScrollLeft;\n    }\n\n    private onWheel(ev: WheelEvent) {\n        ev.stopImmediatePropagation();\n        ev.preventDefault();\n    }\n}\n","import { IgxOverlayService } from '../overlay';\nimport { ScrollStrategy } from './scroll-strategy';\n\n/**\n * Uses a tolerance and closes the shown component upon scrolling if the tolerance is exceeded\n */\nexport class CloseScrollStrategy extends ScrollStrategy {\n    private _document: Document;\n    private _overlayService: IgxOverlayService;\n    private _id: string;\n    private initialScrollTop: number;\n    private initialScrollLeft: number;\n    private cumulativeScrollTop: number;\n    private cumulativeScrollLeft: number;\n    private _threshold: number;\n    private _initialized = false;\n    private _sourceElement: Element;\n    private _scrollContainer: HTMLElement;\n\n    constructor(scrollContainer?: HTMLElement) {\n        super(scrollContainer);\n        this._scrollContainer = scrollContainer;\n        this._threshold = 10;\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n    }\n\n    /** @inheritdoc */\n    public initialize(document: Document, overlayService: IgxOverlayService, id: string) {\n        if (this._initialized) {\n            return;\n        }\n        this._overlayService = overlayService;\n        this._id = id;\n        this._document = document;\n        this._initialized = true;\n    }\n\n    /** @inheritdoc */\n    public attach(): void {\n        if (this._scrollContainer) {\n            this._scrollContainer.addEventListener('scroll', this.onScroll);\n            this._sourceElement = this._scrollContainer;\n        } else {\n            this._document.addEventListener('scroll', this.onScroll);\n            if (document.documentElement.scrollHeight > document.documentElement.clientHeight) {\n                this._sourceElement = document.documentElement as Element;\n            } else if (document.body.scrollHeight > document.body.clientHeight) {\n                this._sourceElement = document.body as Element;\n            }\n        }\n\n        if (!this._sourceElement) {\n            return;\n        }\n\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n        this.initialScrollTop = this._sourceElement.scrollTop;\n        this.initialScrollLeft = this._sourceElement.scrollLeft;\n    }\n\n    /** @inheritdoc */\n    public detach(): void {\n        // TODO: check why event listener removes only on first call and remains on each next!!!\n        if (this._scrollContainer) {\n            this._scrollContainer.removeEventListener('scroll', this.onScroll);\n        } else {\n            this._document.removeEventListener('scroll', this.onScroll);\n        }\n        this._sourceElement = null;\n        this.cumulativeScrollTop = 0;\n        this.cumulativeScrollLeft = 0;\n        this.initialScrollTop = 0;\n        this.initialScrollLeft = 0;\n        this._initialized = false;\n    }\n\n    private onScroll = (ev: Event) => {\n        if (!this._sourceElement) {\n            return;\n        }\n\n        this.cumulativeScrollTop += this._sourceElement.scrollTop;\n        this.cumulativeScrollLeft += this._sourceElement.scrollLeft;\n\n        if (Math.abs(this.cumulativeScrollTop - this.initialScrollTop) > this._threshold ||\n            Math.abs(this.cumulativeScrollLeft - this.initialScrollLeft) > this._threshold) {\n            this._document.removeEventListener('scroll', this.onScroll, true);\n            this._overlayService.hide(this._id);\n        }\n    }\n}\n","import { TransactionService, Transaction, State } from './transaction';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { isObject, mergeObjects, cloneValue } from '../../core/utils';\n\n@Injectable()\nexport class IgxBaseTransactionService<T extends Transaction, S extends State> implements TransactionService<T, S> {\n    protected _isPending = false;\n    protected _pendingTransactions: T[] = [];\n    protected _pendingStates: Map<any, S> = new Map();\n\n    /**\n     * @inheritdoc\n     */\n    public get canRedo(): boolean {\n        return false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get canUndo(): boolean {\n        return false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get enabled(): boolean {\n        return this._isPending;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public onStateUpdate = new EventEmitter<void>();\n\n    /**\n     * @inheritdoc\n     */\n    public add(transaction: T, recordRef?: any): void {\n        if (this._isPending) {\n            this.updateState(this._pendingStates, transaction, recordRef);\n            this._pendingTransactions.push(transaction);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getTransactionLog(id?: any): T[] { return []; }\n\n    /**\n     * @inheritdoc\n     */\n    undo(): void { }\n\n    /**\n     * @inheritdoc\n     */\n    redo(): void { }\n\n    /**\n     * @inheritdoc\n     */\n    getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._pendingStates.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.getAggregatedValue(key, mergeChanges) : state.value;\n            result.push({ id: key, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getState(id: any): S {\n        return this._pendingStates.get(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedValue(id: any, mergeChanges: boolean): any {\n        const state = this._pendingStates.get(id);\n        if (!state) {\n            return null;\n        }\n        if (mergeChanges) {\n            return this.updateValue(state);\n        }\n        return state.value;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    commit(data: any[], id?: any): void { }\n\n    /**\n     * @inheritdoc\n     */\n    clear(id?: any): void {\n        this._pendingStates.clear();\n        this._pendingTransactions = [];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public startPending(): void {\n        this._isPending = true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endPending(commit: boolean): void {\n        this._isPending = false;\n        this._pendingStates.clear();\n        this._pendingTransactions = [];\n    }\n\n\n    /**\n     * Updates the provided states collection according to passed transaction and recordRef\n     * @param states States collection to apply the update to\n     * @param transaction Transaction to apply to the current state\n     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied\n     */\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        let state = states.get(transaction.id);\n        if (state) {\n            if (isObject(state.value)) {\n                mergeObjects(state.value, transaction.newValue);\n            } else {\n                state.value = transaction.newValue;\n            }\n        } else {\n            state = { value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type } as S;\n            states.set(transaction.id, state);\n        }\n    }\n\n    /**\n     * Updates the recordRef of the provided state with all the changes in the state. Accepts primitive and object value types\n     * @param state State to update value for\n     * @returns updated value including all the changes in provided state\n     */\n    protected updateValue(state: S) {\n        return this.mergeValues(state.recordRef, state.value);\n    }\n\n    /**\n     * Merges second values in first value and the result in empty object. If values are primitive type\n     * returns second value if exists, or first value.\n     * @param first Value to merge into\n     * @param second Value to merge\n     */\n    protected mergeValues<U>(first: U, second: U): U {\n        let result: U;\n        if (isObject(first) || isObject(second)) {\n            result = mergeObjects(mergeObjects({}, first), second);\n        } else {\n            result = second ? second : first;\n        }\n        return result;\n    }\n}\n","import { Transaction, State, TransactionType } from './transaction';\nimport { IgxBaseTransactionService } from './base-transaction';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { isObject, mergeObjects, cloneValue } from '../../core/utils';\n\n@Injectable()\nexport class IgxTransactionService<T extends Transaction, S extends State> extends IgxBaseTransactionService<T, S> {\n    protected _transactions: T[] = [];\n    protected _redoStack: { transaction: T, recordRef: any }[][] = [];\n    protected _undoStack: { transaction: T, recordRef: any }[][] = [];\n    protected _states: Map<any, S> = new Map();\n\n    /**\n     * @inheritdoc\n     */\n    get canUndo(): boolean {\n        return this._undoStack.length > 0;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get canRedo(): boolean {\n        return this._redoStack.length > 0;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public onStateUpdate = new EventEmitter<void>();\n\n    /**\n     * @inheritdoc\n     */\n    public add(transaction: T, recordRef?: any): void {\n        const states = this._isPending ? this._pendingStates : this._states;\n        this.verifyAddedTransaction(states, transaction, recordRef);\n        this.addTransaction(transaction, states, recordRef);\n    }\n\n    protected addTransaction(transaction: T, states: Map<any, S>, recordRef?: any) {\n        this.updateState(states, transaction, recordRef);\n\n        const transactions = this._isPending ? this._pendingTransactions : this._transactions;\n        transactions.push(transaction);\n\n        if (!this._isPending) {\n            this._undoStack.push([{ transaction, recordRef }]);\n            this._redoStack = [];\n            this.onStateUpdate.emit();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getTransactionLog(id?: any): T[] {\n        if (id !== undefined) {\n            return this._transactions.filter(t => t.id === id);\n        }\n        return [...this._transactions];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._states.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : state.value;\n            result.push({ id: key, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getState(id: any, pending: boolean = false): S {\n        return pending ? this._pendingStates.get(id) : this._states.get(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public get enabled(): boolean {\n        return true;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public getAggregatedValue(id: any, mergeChanges: boolean): any {\n        const state = this._states.get(id);\n        const pendingState = super.getState(id);\n\n        //  if there is no state and there is no pending state return null\n        if (!state && !pendingState) {\n            return null;\n        }\n\n        const pendingChange = super.getAggregatedValue(id, false);\n        const change = state && state.value;\n        let aggregatedValue = this.mergeValues(change, pendingChange);\n        if (mergeChanges) {\n            const originalValue = state ? state.recordRef : pendingState.recordRef;\n            aggregatedValue = this.mergeValues(originalValue, aggregatedValue);\n        }\n        return aggregatedValue;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public endPending(commit: boolean): void {\n        this._isPending = false;\n        if (commit) {\n            const actions: { transaction: T, recordRef: any }[] = [];\n            // don't use addTransaction due to custom undo handling\n            for (const transaction of this._pendingTransactions) {\n                const pendingState = this._pendingStates.get(transaction.id);\n                this._transactions.push(transaction);\n                this.updateState(this._states, transaction, pendingState.recordRef);\n                actions.push({ transaction, recordRef: pendingState.recordRef });\n            }\n\n            this._undoStack.push(actions);\n            this._redoStack = [];\n\n            this.onStateUpdate.emit();\n        }\n        super.endPending(commit);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public commit(data: any[], id?: any): void {\n        if (id !== undefined) {\n            const state = this.getState(id);\n            if (state) {\n                this.updateRecord(data, state);\n            }\n        } else {\n            this._states.forEach((s: S) => {\n                this.updateRecord(data, s);\n            });\n        }\n        this.clear(id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public clear(id?: any): void {\n        if (id !== undefined) {\n            this._transactions = this._transactions.filter(t => t.id !== id);\n            this._states.delete(id);\n            //  Undo stack is an array of actions. Each action is array of transaction like objects\n            //  We are going trough all the actions. For each action we are filtering out transactions\n            //  with provided id. Finally if any action ends up as empty array we are removing it from\n            //  undo stack\n            this._undoStack = this._undoStack.map(a => a.filter(t => t.transaction.id !== id)).filter(a => a.length > 0);\n        } else {\n            this._transactions = [];\n            this._states.clear();\n            this._undoStack = [];\n        }\n        this._redoStack = [];\n        this.onStateUpdate.emit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public undo(): void {\n        if (this._undoStack.length <= 0) {\n            return;\n        }\n\n        const lastActions: { transaction: T, recordRef: any }[] = this._undoStack.pop();\n        this._transactions.splice(this._transactions.length - lastActions.length);\n        this._redoStack.push(lastActions);\n\n        this._states.clear();\n        for (const currentActions of this._undoStack) {\n            for (const transaction of currentActions) {\n                this.updateState(this._states, transaction.transaction, transaction.recordRef);\n            }\n        }\n\n        this.onStateUpdate.emit();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    public redo(): void {\n        if (this._redoStack.length > 0) {\n            let actions: { transaction: T, recordRef: any, useInUndo?: boolean }[];\n            actions = this._redoStack.pop();\n            for (const action of actions) {\n                this.updateState(this._states, action.transaction, action.recordRef);\n                this._transactions.push(action.transaction);\n            }\n\n            this._undoStack.push(actions);\n            this.onStateUpdate.emit();\n        }\n    }\n\n    /**\n     * Verifies if the passed transaction is correct. If not throws an exception.\n     * @param transaction Transaction to be verified\n     */\n    protected verifyAddedTransaction(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        const state = states.get(transaction.id);\n        switch (transaction.type) {\n            case TransactionType.ADD:\n                if (state) {\n                    //  cannot add same item twice\n                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already added.`);\n                }\n                break;\n            case TransactionType.DELETE:\n            case TransactionType.UPDATE:\n                if (state && state.type === TransactionType.DELETE) {\n                    //  cannot delete or update deleted items\n                    throw new Error(`Cannot add this transaction. Transaction with id: ${transaction.id} has been already deleted.`);\n                }\n                if (!state && !recordRef && !this._isPending) {\n                    //  cannot initially add transaction or delete item with no recordRef\n                    throw new Error(`Cannot add this transaction. This is first transaction of type ${transaction.type} ` +\n                        `for id ${transaction.id}. For first transaction of this type recordRef is mandatory.`);\n                }\n                break;\n        }\n    }\n\n    /**\n     * Updates the provided states collection according to passed transaction and recordRef\n     * @param states States collection to apply the update to\n     * @param transaction Transaction to apply to the current state\n     * @param recordRef Reference to the value of the record in data source, if any, where transaction should be applied\n     */\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        let state = states.get(transaction.id);\n        //  if TransactionType is ADD simply add transaction to states;\n        //  if TransactionType is DELETE:\n        //    - if there is state with this id of type ADD remove it from the states;\n        //    - if there is state with this id of type UPDATE change its type to DELETE;\n        //    - if there is no state with this id add transaction to states;\n        //  if TransactionType is UPDATE:\n        //    - if there is state with this id of type ADD merge new value and state recordRef into state new value\n        //    - if there is state with this id of type UPDATE merge new value into state new value\n        //    - if there is state with this id and state type is DELETE change its type to UPDATE\n        //    - if there is no state with this id add transaction to states;\n        if (state) {\n            switch (transaction.type) {\n                case TransactionType.DELETE:\n                    if (state.type === TransactionType.ADD) {\n                        states.delete(transaction.id);\n                    } else if (state.type === TransactionType.UPDATE) {\n                        state.value = transaction.newValue;\n                        state.type = TransactionType.DELETE;\n                    }\n                    break;\n                case TransactionType.UPDATE:\n                    if (isObject(state.value)) {\n                        if (state.type === TransactionType.ADD) {\n                            state.value = this.mergeValues(state.value, transaction.newValue);\n                        }\n                        if (state.type === TransactionType.UPDATE) {\n                            mergeObjects(state.value, transaction.newValue);\n                        }\n                    } else {\n                        state.value = transaction.newValue;\n                    }\n            }\n        } else {\n            state = { value: cloneValue(transaction.newValue), recordRef: recordRef, type: transaction.type } as S;\n            states.set(transaction.id, state);\n        }\n\n        //  should not clean pending state. This will happen automatically on endPending call\n        if (!this._isPending) {\n            this.cleanState(transaction.id, states);\n        }\n    }\n\n    /**\n     * Compares the state with recordRef and clears all duplicated values. If any state ends as\n     * empty object removes it from states.\n     * @param state State to clean\n     */\n    protected cleanState(id: any, states: Map<any, S>): void {\n        const state = states.get(id);\n        //  do nothing if\n        //  there is no state, or\n        //  there is no state value (e.g. DELETED transaction), or\n        //  there is no recordRef (e.g. ADDED transaction)\n        if (state && state.value && state.recordRef) {\n            //  if state's value is object compare each key with the ones in recordRef\n            //  if values in any key are the same delete it from state's value\n            //  if state's value is not object, simply compare with recordRef and remove\n            //  the state if they are equal\n            if (isObject(state.recordRef)) {\n                for (const key of Object.keys(state.value)) {\n                    if (JSON.stringify(state.recordRef[key]) === JSON.stringify(state.value[key])) {\n                        delete state.value[key];\n                    }\n                }\n\n                //  if state's value is empty remove the state from the states, only if state is not DELETE type\n                if (state.type !== TransactionType.DELETE && Object.keys(state.value).length === 0) {\n                    states.delete(id);\n                }\n            } else {\n                if (state.recordRef === state.value) {\n                    states.delete(id);\n                }\n            }\n        }\n    }\n\n    /**\n     * Updates state related record in the provided data\n     * @param data Data source to update\n     * @param state State to update data from\n     */\n    protected updateRecord(data: any[], state: S) {\n        const index = data.findIndex(i => JSON.stringify(i) === JSON.stringify(state.recordRef || {}));\n        switch (state.type) {\n            case TransactionType.ADD:\n                data.push(state.value);\n                break;\n            case TransactionType.DELETE:\n                if (0 <= index && index < data.length) {\n                    data.splice(index, 1);\n                }\n                break;\n            case TransactionType.UPDATE:\n                if (0 <= index && index < data.length) {\n                    data[index] = this.updateValue(state);\n                }\n                break;\n        }\n    }\n}\n","import { HierarchicalTransaction, HierarchicalState, TransactionType } from './transaction';\nimport { Injectable } from '@angular/core';\nimport { IgxTransactionService } from './igx-transaction';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneValue } from '../../core/utils';\n\n/** @experimental @hidden */\n@Injectable()\nexport class IgxHierarchicalTransactionService<T extends HierarchicalTransaction, S extends HierarchicalState>\n    extends IgxTransactionService<T, S> {\n\n    public getAggregatedChanges(mergeChanges: boolean): T[] {\n        const result: T[] = [];\n        this._states.forEach((state: S, key: any) => {\n            const value = mergeChanges ? this.mergeValues(state.recordRef, state.value) : cloneValue(state.value);\n            this.clearArraysFromObject(value);\n            result.push({ id: key, path: state.path, newValue: value, type: state.type } as T);\n        });\n        return result;\n    }\n\n    protected updateState(states: Map<any, S>, transaction: T, recordRef?: any): void {\n        super.updateState(states, transaction, recordRef);\n\n        //  if transaction has no path, e.g. flat data source, get out\n        if (!transaction.path) {\n            return;\n        }\n\n        const currentState = states.get(transaction.id);\n        if (currentState) {\n            currentState.path = transaction.path;\n        }\n\n        //  if transaction has path, Hierarchical data source, and it is DELETE\n        //  type transaction for all child rows remove ADD states and update\n        //  transaction type and value of UPDATE states\n        if (transaction.type === TransactionType.DELETE) {\n            states.forEach((v: S, k: any) => {\n                if (v.path && v.path.indexOf(transaction.id) !== -1) {\n                    switch (v.type) {\n                        case TransactionType.ADD:\n                            states.delete(k);\n                            break;\n                        case TransactionType.UPDATE:\n                            states.get(k).type = TransactionType.DELETE;\n                            states.get(k).value = null;\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * Applies all transactions over the provided data\n     * @param data Data source to update\n     * @param primaryKey Primary key of the hierarchical data\n     * @param childDataKey Kye of child data collection\n     * @param id Optional record id to commit transactions for\n     */\n    public commit(data: any[], primaryKey?: any, childDataKey?: any, id?: any): void {\n        if (childDataKey !== undefined) {\n            let transactions = this.getAggregatedChanges(true);\n            if (id !== undefined) {\n                transactions = transactions.filter(t => t.id === id);\n            }\n            DataUtil.mergeHierarchicalTransactions(data, transactions, childDataKey, primaryKey, true);\n        } else {\n            super.commit(data, id);\n        }\n        this.clear(id);\n    }\n\n    //  TODO: remove this method. Force cloning to strip child arrays when needed instead\n    private clearArraysFromObject(obj: {}) {\n        if (obj) {\n            for (const prop of Object.keys(obj)) {\n                if (Array.isArray(obj[prop])) {\n                    delete obj[prop];\n                }\n            }\n        }\n    }\n}\n\n","import {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    Inject\n} from '@angular/core';\nimport { IgxNavigationService, IToggleView } from '../../core/navigation';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { OverlaySettings, OverlayEventArgs, ConnectedPositioningStrategy, AbsoluteScrollStrategy, IPositionStrategy } from '../../services';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subscription, Subject, MonoTypeOperatorFunction } from 'rxjs';\nimport { OverlayClosingEventArgs } from '../../services/overlay/utilities';\nimport { CancelableEventArgs, CancelableBrowserEventArgs } from '../../core/utils';\n\n@Directive({\n    exportAs: 'toggle',\n    selector: '[igxToggle]'\n})\nexport class IgxToggleDirective implements IToggleView, OnInit, OnDestroy {\n    protected _overlayId: string;\n    private destroy$ = new Subject<boolean>();\n    private _overlaySubFilter: [MonoTypeOperatorFunction<OverlayEventArgs>, MonoTypeOperatorFunction<OverlayEventArgs>] = [\n        filter(x => x.id === this._overlayId),\n        takeUntil(this.destroy$)\n    ];\n    private _overlayOpenedSub: Subscription;\n    private _overlayClosingSub: Subscription;\n    private _overlayClosedSub: Subscription;\n\n    /**\n     * Emits an event after the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpened(event) {\n     *    alert(\"Toggle opened!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpened)='onToggleOpened($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter();\n\n    /**\n     * Emits an event before the toggle container is opened.\n     *\n     * ```typescript\n     * onToggleOpening(event) {\n     *  alert(\"Toggle opening!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onOpening)='onToggleOpening($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs>();\n\n    /**\n     * Emits an event after the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosed(event) {\n     *  alert(\"Toggle closed!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *   igxToggle\n     *   (onClosed)='onToggleClosed($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter();\n\n    /**\n     * Emits an event before the toggle container is closed.\n     *\n     * ```typescript\n     * onToggleClosing(event) {\n     *  alert(\"Toggle closing!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <div\n     *  igxToggle\n     *  (onClosing)='onToggleClosing($event)'>\n     * </div>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs>();\n\n    private _collapsed = true;\n    /**\n     * @hidden\n     */\n    public get collapsed(): boolean {\n        return this._collapsed;\n    }\n\n    /**\n     * Identifier which is registered into `IgxNavigationService`\n     *\n     * ```typescript\n     * let myToggleId = this.toggle.id;\n     * ```\n     */\n    @Input()\n    public id: string;\n\n    /**\n     * @hidden\n     */\n    public get element(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-toggle--hidden')\n    @HostBinding('attr.aria-hidden')\n    public get hiddenClass() {\n        return this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-toggle')\n    public get defaultClass() {\n        return !this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    constructor(\n        private elementRef: ElementRef,\n        private cdr: ChangeDetectorRef,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        @Optional() private navigationService: IgxNavigationService) {\n    }\n\n    /**\n     * Opens the toggle.\n     *\n     * ```typescript\n     * this.myToggle.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        //  if there is open animation do nothing\n        //  if toggle is not collapsed and there is no close animation do nothing\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasOpenAnimation = info ? info.openAnimationPlayer : false;\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n        if (hasOpenAnimation || !(this._collapsed || hasCloseAnimation)) {\n            return;\n        }\n\n        if (!info) {\n            this._overlayId = this.overlayService.attach(this.elementRef, overlaySettings);\n        }\n\n        this._collapsed = false;\n        this.cdr.detectChanges();\n\n        const openEventArgs: CancelableEventArgs = { cancel: false };\n        this.onOpening.emit(openEventArgs);\n        if (openEventArgs.cancel) {\n            this._collapsed = true;\n            this.cdr.detectChanges();\n            return;\n        }\n\n        this.overlayService.show(this._overlayId, overlaySettings);\n\n        this.unsubscribe();\n        this._overlayOpenedSub = this.overlayService.onOpened.pipe(...this._overlaySubFilter).subscribe(() => {\n            this.onOpened.emit();\n        });\n\n        this._overlayClosingSub = this.overlayService\n            .onClosing\n            .pipe(...this._overlaySubFilter)\n            .subscribe((e: OverlayClosingEventArgs) => {\n                const eventArgs: CancelableBrowserEventArgs = { cancel: false, event: e.event };\n                this.onClosing.emit(eventArgs);\n                e.cancel = eventArgs.cancel;\n\n                //  in case event is not canceled this will close the toggle and we need to unsubscribe.\n                //  Otherwise if for some reason, e.g. close on outside click, close() gets called before\n                //  onClosed was fired we will end with calling onClosing more than once\n                if (!e.cancel) {\n                    this.clearSubscription(this._overlayClosingSub);\n                }\n            });\n\n        this._overlayClosedSub = this.overlayService.onClosed\n            .pipe(...this._overlaySubFilter)\n            .subscribe(this.overlayClosed);\n    }\n\n    /**\n     * Closes the toggle.\n     *\n     * ```typescript\n     * this.myToggle.close();\n     * ```\n     */\n    public close() {\n        //  if toggle is collapsed do nothing\n        //  if there is close animation do nothing, toggle will close anyway\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n        if (this._collapsed || hasCloseAnimation) {\n            return;\n        }\n\n        this.overlayService.hide(this._overlayId);\n    }\n\n    /**\n     * Opens or closes the toggle, depending on its current state.\n     *\n     * ```typescript\n     * this.myToggle.toggle();\n     * ```\n     */\n    public toggle(overlaySettings?: OverlaySettings) {\n        //  if toggle is collapsed call open\n        //  if there is close animation call open\n        if (this.collapsed || this.isClosing) {\n            this.open(overlaySettings);\n        } else {\n            this.close();\n        }\n    }\n\n    /** @hidden @internal */\n    public get isClosing() {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        return info ? info.closeAnimationPlayer : false;\n    }\n\n    /**\n     * Repositions the toggle.\n     * ```typescript\n     * this.myToggle.reposition();\n     * ```\n     */\n    public reposition() {\n        this.overlayService.reposition(this._overlayId);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.navigationService && this.id) {\n            this.navigationService.add(this.id, this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this.navigationService && this.id) {\n            this.navigationService.remove(this.id);\n        }\n        if (!this.collapsed && this._overlayId) {\n            this.overlayService.hide(this._overlayId);\n        }\n        this.unsubscribe();\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    private overlayClosed = () => {\n        this._collapsed = true;\n        this.cdr.detectChanges();\n        delete this._overlayId;\n        this.unsubscribe();\n        this.onClosed.emit();\n    }\n\n    private unsubscribe() {\n        this.clearSubscription(this._overlayOpenedSub);\n        this.clearSubscription(this._overlayClosingSub);\n        this.clearSubscription(this._overlayClosedSub);\n    }\n\n    private clearSubscription(subscription: Subscription) {\n        if (subscription && !subscription.closed) {\n            subscription.unsubscribe();\n        }\n    }\n}\n\n@Directive({\n    exportAs: 'toggle-action',\n    selector: '[igxToggleAction]'\n})\nexport class IgxToggleActionDirective implements OnInit {\n    protected _overlayDefaults: OverlaySettings;\n\n    /**\n     * Provide settings that control the toggle overlay positioning, interaction and scroll behavior.\n     * ```typescript\n     * const settings: OverlaySettings = {\n     *      closeOnOutsideClick: false,\n     *      modal: false\n     *  }\n     * ```\n     * ---\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [overlaySettings]=\"settings\"></div>\n     * ```\n     */\n    @Input()\n    public overlaySettings: OverlaySettings;\n\n    /**\n     * Determines where the toggle element overlay should be attached.\n     *\n     * ```html\n     * <!--set-->\n     * <div igxToggleAction [igxToggleOutlet]=\"outlet\"></div>\n     * ```\n     * Where `outlet` in an instance of `IgxOverlayOutletDirective` or an `ElementRef`\n     */\n    @Input('igxToggleOutlet')\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     * @hidden\n     */\n    @Input('igxToggleAction')\n    set target(target: any) {\n        if (target !== null && target !== '') {\n            this._target = target;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get target(): any {\n        if (typeof this._target === 'string') {\n            return this.navigationService.get(this._target);\n        }\n        return this._target;\n    }\n\n    protected _target: IToggleView | string;\n\n    constructor(private element: ElementRef, @Optional() private navigationService: IgxNavigationService) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this._overlayDefaults = {\n            positionStrategy: new ConnectedPositioningStrategy({ target: this.element.nativeElement }),\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            closeOnOutsideClick: true,\n            modal: false,\n            excludePositionTarget: true\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        if (this.outlet) {\n            this._overlayDefaults.outlet = this.outlet;\n        }\n\n        const clonedSettings = Object.assign({}, this._overlayDefaults, this.overlaySettings);\n        this.updateOverlaySettings(clonedSettings);\n        this.target.toggle(clonedSettings);\n    }\n\n    /**\n     * Updates provided overlay settings\n     * @param settings settings to update\n     * @returns returns updated copy of provided overlay settings\n     */\n    protected updateOverlaySettings(settings: OverlaySettings): OverlaySettings {\n        if (settings && settings.positionStrategy) {\n            const positionStrategyClone: IPositionStrategy = settings.positionStrategy.clone();\n            positionStrategyClone.settings.target = this.element.nativeElement;\n            settings.positionStrategy = positionStrategyClone;\n        }\n\n        return settings;\n    }\n}\n\n/**\n * Mark an element as an igxOverlay outlet container.\n * Directive instance is exported as `overlay-outlet` to be assigned to templates variables:\n * ```html\n * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n * ```\n */\n@Directive({\n    exportAs: 'overlay-outlet',\n    selector: '[igxOverlayOutlet]'\n})\nexport class IgxOverlayOutletDirective {\n    constructor(public element: ElementRef) { }\n\n    /** @hidden */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],\n    exports: [IgxToggleDirective, IgxToggleActionDirective, IgxOverlayOutletDirective],\n    providers: [IgxNavigationService]\n})\nexport class IgxToggleModule { }\n","import { CancelableEventArgs, CancelableBrowserEventArgs } from '../core/utils';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\nimport { IToggleView } from '../core/navigation/IToggleView';\nimport { EventEmitter } from '@angular/core';\nimport { DisplayDensityBase } from '../core/density';\n\n/** @hidden */\nexport enum Navigate {\n    Up = -1,\n    Down = 1\n}\n\n/** Key actions that have designated handlers in IgxDropDownComponent */\nexport enum DropDownActionKey {\n    ESCAPE = 'escape',\n    ENTER = 'enter',\n    SPACE = 'space'\n}\n\n/**\n * Interface that encapsulates onSelection event arguments - old selection, new selection and cancel selection.\n * @export\n */\nexport interface ISelectionEventArgs extends CancelableEventArgs {\n    oldSelection: IgxDropDownItemBase;\n    newSelection: IgxDropDownItemBase;\n}\n\n/**\n * Interface for an instance of IgxDropDownNavigationDirective\n * @export\n */\nexport interface IDropDownNavigationDirective {\n    target: any;\n    handleKeyDown(event: KeyboardEvent): void;\n    onArrowDownKeyDown(event?: KeyboardEvent): void;\n    onArrowUpKeyDown(event?: KeyboardEvent): void;\n    onEndKeyDown(event?: KeyboardEvent): void;\n    onHomeKeyDown(event?: KeyboardEvent): void;\n}\n\nexport const IGX_DROPDOWN_BASE = 'IgxDropDownBaseToken';\n\n/**\n * @hidden\n */\nexport interface IDropDownList extends DisplayDensityBase {\n    onSelection: EventEmitter<ISelectionEventArgs>;\n    width: string;\n    height: string;\n    id: string;\n    maxHeight: string;\n    collapsed: boolean;\n    items: IgxDropDownItemBase[];\n    headers: IgxDropDownItemBase[];\n    focusedItem: IgxDropDownItemBase;\n    navigateFirst(): void;\n    navigateLast(): void;\n    navigateNext(): void;\n    navigatePrev(): void;\n    navigateItem(newIndex: number, direction?: Navigate): void;\n    onItemActionKey(key: DropDownActionKey, event?: Event): void;\n}\n\n/**\n * @hidden\n */\nexport interface IDropDownBase extends IDropDownList, IToggleView {\n    selectedItem: any;\n    onOpening: EventEmitter<CancelableEventArgs>;\n    onOpened: EventEmitter<void>;\n    onClosing: EventEmitter<CancelableBrowserEventArgs>;\n    onClosed: EventEmitter<void>;\n    allowItemsFocus?: boolean;\n    setSelectedItem(index: number): void;\n    selectItem(item: IgxDropDownItemBase, event?: Event): void;\n}\n\n","import { Injectable } from '@angular/core';\n\n/** @hidden */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxSelectionAPIService {\n    /**\n     * If primaryKey is defined, then multiple selection is based on the primaryKey, and it is array of numbers, strings, etc.\n     * If the primaryKey is omitted, then selection is based on the item data\n     */\n    protected selection: Map<string,  Set<any>> = new Map<string, Set<any>>();\n\n    /**\n     * Get current component selection.\n     * @param componentID ID of the component.\n     */\n    public get(componentID: string): Set<any> {\n        return this.selection.get(componentID);\n    }\n\n    /**\n     * Set new component selection.\n     * @param componentID ID of the component.\n     * @param newSelection The new component selection to be set.\n     */\n    public set(componentID: string, newSelection: Set<any>) {\n        if (!componentID) {\n            throw Error('Invalid value for component id!');\n        }\n        this.selection.set(componentID, newSelection);\n    }\n\n    /**\n     * Clears selection for component.\n     * @param componentID ID of the component.\n     */\n    public clear(componentID: string) {\n        this.selection.set(componentID, this.get_empty());\n    }\n\n    /**\n     * Get current component selection length.\n     * @param componentID ID of the component.\n     */\n    public size(componentID: string): number {\n        const sel = this.get(componentID);\n        return sel ? sel.size : 0;\n    }\n\n    /**\n     * Creates new selection that consist of the new item added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_item() one.\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (add_items method) to accumulate selection for multiple items.\n     *\n     * @returns Selection after the new item is added.\n     */\n    public add_item(componentID: string, itemID, sel?: Set<any>): Set<any> {\n        if (!sel) {\n            sel = new Set(this.get(componentID));\n        }\n        if (sel === undefined) {\n            sel = this.get_empty();\n        }\n        if (!itemID && itemID !== 0) {\n            throw Error('Invalid value for item id!');\n        }\n        sel.add(itemID);\n        return sel;\n    }\n\n    /**\n     * Creates new selection that consist of the new items added to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the select_items() one.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     *\n     * @returns Selection after the new items are added.\n     */\n    public add_items(componentID: string, itemIDs: any[], clearSelection?: boolean): Set<any> {\n        let selection: Set<any>;\n        if (clearSelection) {\n            selection = this.get_empty();\n        } else if (itemIDs && itemIDs.length === 0) {\n            selection = new Set(this.get(componentID));\n        }\n        itemIDs.forEach((item) => selection = this.add_item(componentID, item, selection));\n        return selection;\n    }\n\n    /**\n     * Add item to the current component selection.\n     * @param componentID ID of the component, which we add new item to.\n     * @param itemID ID of the item to add to component selection.\n     * @param sel Used internally only by the selection (select_items method) to accumulate selection for multiple items.\n     */\n    public select_item(componentID: string, itemID, sel?: Set<any>) {\n        this.set(componentID, this.add_item(componentID, itemID, sel));\n    }\n\n    /**\n     * Add items to the current component selection.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     * @param clearSelection If true it will clear previous selection.\n     */\n    public select_items(componentID: string, itemID: any[], clearSelection?: boolean) {\n        this.set(componentID, this.add_items(componentID, itemID, clearSelection));\n    }\n\n    /**\n     * Creates new selection that consist of the new items excluded from the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_item() one.\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (delete_items method) to accumulate deselected items.\n     *\n     * @returns Selection after the item is removed.\n     */\n    public delete_item(componentID: string, itemID, sel?: Set<any>) {\n        if (!sel) {\n            sel = new Set(this.get(componentID));\n        }\n        if (sel === undefined) {\n            return;\n        }\n        sel.delete(itemID);\n        return sel;\n    }\n\n    /**\n     * Creates new selection that consist of the new items removed to the current component selection.\n     * The returned collection is new Set,\n     * therefore if you want to update component selection you need to call in addition the set_selection() method\n     * or instead use the deselect_items() one.\n     * @param componentID ID of the component, which we remove items from.\n     * @param itemID ID of the items to remove from component selection.\n     *\n     * @returns Selection after the items are removed.\n     */\n    public delete_items(componentID: string, itemIDs: any[]): Set<any> {\n        let selection: Set<any>;\n        itemIDs.forEach((deselectedItem) => selection = this.delete_item(componentID, deselectedItem, selection));\n        return selection;\n    }\n\n    /**\n     * Remove item from the current component selection.\n     * @param componentID ID of the component, which we remove item from.\n     * @param itemID ID of the item to remove from component selection.\n     * @param sel Used internally only by the selection (deselect_items method) to accumulate selection for multiple items.\n     */\n    public deselect_item(componentID: string, itemID, sel?: Set<any>) {\n        this.set(componentID, this.delete_item(componentID, itemID, sel));\n    }\n\n    /**\n     * Remove items to the current component selection.\n     * @param componentID ID of the component, which we add new items to.\n     * @param itemIDs Array of IDs of the items to add to component selection.\n     */\n    public deselect_items(componentID: string, itemID: any[], clearSelection?: boolean) {\n        this.set(componentID, this.delete_items(componentID, itemID));\n    }\n\n    /**\n     * Check if the item is selected in the component selection.\n     * @param componentID ID of the component.\n     * @param itemID ID of the item to search.\n     *\n     * @returns If item is selected.\n     */\n    public is_item_selected(componentID: string, itemID): boolean {\n        const sel = this.get(componentID);\n        if (!sel) {\n            return false;\n        }\n        return sel.has(itemID);\n    }\n\n    /**\n     * Get first element in the selection.\n     * This is correct when we have only one item in the collection (for single selection purposes)\n     * and the method returns that item.\n     * @param componentID ID of the component.\n     *\n     * @returns First element in the set.\n     */\n    public first_item(componentID: string) {\n        const sel = this.get(componentID);\n        if (sel && sel.size > 0) {\n            return sel.values().next().value;\n       }\n    }\n\n    /**\n     * Returns whether all items are selected.\n     * @param componentID ID of the component.\n     * @param dataCount: number Number of items in the data.\n     *\n     * @returns If all items are selected.\n     */\n    public are_all_selected(componentID: string, dataCount: number): boolean {\n        return dataCount > 0 && dataCount === this.size(componentID);\n    }\n\n    /**\n     * Returns whether any of the items is selected.\n     * @param componentID ID of the component.\n     * @param data Entire data array.\n     *\n     * @returns If there is any item selected.\n     */\n    public are_none_selected(componentID: string): boolean {\n        return this.size(componentID) === 0;\n    }\n\n    /**\n     * Get all primary key values from a data array. If there isn't a primary key defined that the entire data is returned instead.\n     * @param data Entire data array.\n     * @param primaryKey Data primary key.\n     *\n     * @returns Array of identifiers, either primary key values or the entire data array.\n     */\n    public get_all_ids(data, primaryKey?) {\n        return primaryKey ? data.map((x) => x[primaryKey]) : data;\n    }\n\n    /**\n     * Returns empty selection collection.\n     * @returns empty set.\n    */\n    public get_empty() {\n        return new Set();\n    }\n}\n","import { Component, Input, HostBinding } from '@angular/core';\n\nlet NEXT_ID = 0;\n/**\n * The `<igx-drop-down-item>` is a container intended for row items in\n * a `<igx-drop-down>` container.\n */\n@Component({\n    selector: 'igx-drop-down-item-group',\n    template: `\n        <label id=\"{{labelId}}\">{{ label }}</label>\n        <ng-content select=\"igx-drop-down-item\"></ng-content>\n    `\n})\nexport class IgxDropDownGroupComponent {\n    private _id = NEXT_ID++;\n\n    /**\n     * @hidden @internal\n     */\n    public get labelId(): string {\n        return `igx-item-group-label-${this._id}`;\n    }\n\n    @HostBinding(`attr.aria-labelledby`)\n    public get labelledBy(): string {\n        return this.labelId;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.role')\n    public role = 'group';\n\n    /** @hidden @internal */\n    @HostBinding('class.igx-drop-down__group')\n    public groupClass = true;\n    /**\n     * Sets/gets if the item group is disabled\n     *\n     * ```typescript\n     * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;\n     * // get\n     * ...\n     * const groupState: boolean = myDropDownGroup.disabled;\n     * ...\n     * //set\n     * ...\n     * myDropDownGroup,disabled = false;\n     * ...\n     * ```\n     *\n     * ```html\n     * <igx-drop-down-item-group [label]=\"'My Items'\" [disabled]=\"true\">\n     *     <igx-drop-down-item *ngFor=\"let item of items[index]\" [value]=\"item.value\">\n     *         {{ item.text }}\n     *     </igx-drop-down-item>\n     * </igx-drop-down-item-group>\n     * ```\n     *\n     * **NOTE:** All items inside of a disabled drop down group will be treated as disabled\n     */\n    @Input()\n    @HostBinding(`attr.aria-disabled`)\n    @HostBinding('class.igx-drop-down__group--disabled')\n    public disabled = false;\n\n    /**\n     * Sets/gets the label of the item group\n     *\n     * ```typescript\n     * const myDropDownGroup: IgxDropDownGroupComponent = this.dropdownGroup;\n     * // get\n     * ...\n     * const myLabel: string = myDropDownGroup.label;\n     * ...\n     * // set\n     * ...\n     * myDropDownGroup.label = 'My New Label';\n     * ...\n     * ```\n     *\n     * ```html\n     * <igx-drop-down-item-group [label]=\"'My new Label'\">\n     *      ...\n     * </igx-drop-down-item-group>\n     * ```\n    */\n    @Input()\n    public label: string;\n}\n","import { IDropDownBase, IGX_DROPDOWN_BASE } from './drop-down.common';\nimport { Input, HostBinding, HostListener, ElementRef, Optional, Inject, DoCheck } from '@angular/core';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { DeprecateProperty, showMessage } from '../core/deprecateDecorators';\nimport { IgxDropDownGroupComponent } from './drop-down-group.component';\n\nlet NEXT_ID = 0;\nlet warningShown = false;\n\n/**\n * An abstract class defining a drop-down item:\n * With properties / styles for selection, highlight, height\n * Bindable property for passing data (`value: any`)\n * Parent component (has to be used under a parent with type `IDropDownBase`)\n * Method for handling click on Host()\n */\nexport abstract class IgxDropDownItemBase implements DoCheck {\n    /**\n     * @hidden\n     */\n    protected _focused = false;\n    protected _selected = false;\n    protected _index = null;\n    protected _disabled = false;\n    protected get hasIndex(): boolean {\n        return this._index !== null && this._index !== undefined;\n    }\n\n    /**\n     * Sets/gets the `id` of the item.\n     * ```html\n     * <igx-drop-down-item [id] = 'igx-drop-down-item-0'></igx-drop-down-item>\n     * ```\n     * ```typescript\n     * let itemId =  this.item.id;\n     * ```\n     * @memberof IgxSelectItemComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-drop-down-item-${NEXT_ID++}`;\n\n    /**\n     * @hidden @internal\n     */\n    public get itemID() {\n        return this;\n    }\n\n    /**\n     * The data index of the dropdown item.\n     *\n     * ```typescript\n     * // get the data index of the selected dropdown item\n     * let selectedItemIndex = this.dropdown.selectedItem.index\n     * ```\n     */\n    @Input()\n    public get index(): number {\n        if (this._index === null) {\n            warningShown = showMessage(\n                'IgxDropDownItemBase: Automatic index is deprecated.' +\n                'Bind in the template instead using `<igx-drop-down-item [index]=\"i\"` instead.`',\n                warningShown);\n            return this.itemIndex;\n        }\n        return this._index;\n    }\n\n    public set index(value) {\n        this._index = value;\n    }\n\n    /**\n     * Gets/sets the value of the item if the item is databound\n     *\n     * ```typescript\n     * // usage in IgxDropDownItemComponent\n     * // get\n     * let mySelectedItemValue = this.dropdown.selectedItem.value;\n     *\n     * // set\n     * let mySelectedItem = this.dropdown.selectedItem;\n     * mySelectedItem.value = { id: 123, name: 'Example Name' }\n     *\n     * // usage in IgxComboItemComponent\n     * // get\n     * let myComboItemValue = this.combo.items[0].value;\n     * ```\n     */\n    @Input()\n    public value: any;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item')\n    get itemStyle(): boolean {\n        return !this.isHeader;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item--cosy')\n    public get itemStyleCosy() {\n        return this.dropDown.displayDensity === 'cosy' && !this.isHeader;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__item--compact')\n    public get itemStyleCompact() {\n        return this.dropDown.displayDensity === 'compact' && !this.isHeader;\n    }\n\n    /**\n     * Sets/Gets if the item is the currently selected one in the dropdown\n     *\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemSelected = mySelectedItem.selected; // true\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-selected')\n    @HostBinding('class.igx-drop-down__item--selected')\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @Input()\n    @DeprecateProperty(`IgxDropDownItemBase \\`isSelected\\` property is deprecated.\\n` +\n        `Use \\`selected\\` instead.`)\n    get isSelected(): boolean {\n        return this.selected;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    set isSelected(value: boolean) {\n        this.selected = value;\n    }\n\n    /**\n     * Sets/gets if the given item is focused\n     * ```typescript\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemFocused = mySelectedItem.focused;\n     * ```\n     */\n    @HostBinding('class.igx-drop-down__item--focused')\n    get focused(): boolean {\n        return (!this.isHeader && !this.disabled) && this._focused;\n    }\n\n    /**\n     * ```html\n     *  <igx-drop-down-item *ngFor=\"let item of items\" focused={{!item.focused}}>\n     *      <div>\n     *          {{item.field}}\n     *      </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @DeprecateProperty(`IgxDropDownItemBase \\`isFocused\\` property is depracated.\\n` +\n        `Use \\`focused\\` instead.`)\n    get isFocused(): boolean {\n        return this.focused;\n    }\n    /**\n     * @hidden @internal\n     */\n    set isFocused(value: boolean) {\n        this.focused = value;\n    }\n\n    /**\n     * Sets/gets if the given item is header\n     * ```typescript\n     *  // get\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let isMyItemHeader = mySelectedItem.isHeader;\n     * ```\n     *\n     * ```html\n     *  <!--set-->\n     *  <igx-dropdown-item *ngFor=\"let item of items\">\n     *      <div *ngIf=\"items.indexOf(item) === 5; then item.isHeader = true\">\n     *          {{item.field}}\n*           </div>\n     *  </igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('class.igx-drop-down__header')\n    public isHeader: boolean;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__header--cosy')\n    public get headerClassCosy() {\n        return this.isHeader && this.dropDown.displayDensity === 'cosy';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down__header--compact')\n    public get headerClassCompact() {\n        return this.isHeader && this.dropDown.displayDensity === 'compact';\n    }\n\n    /**\n     * Sets/gets if the given item is disabled\n     *\n     * ```typescript\n     *  // get\n     *  let mySelectedItem = this.dropdown.selectedItem;\n     *  let myItemIsDisabled = mySelectedItem.disabled;\n     * ```\n     *\n     * ```html\n     *  <igx-drop-down-item *ngFor=\"let item of items\" disabled={{!item.disabled}}>\n     *      <div>\n     *          {{item.field}}\n     *      </div>\n     *  </igx-drop-down-item>\n     * ```\n     * **NOTE:** Drop-down items inside of a disabled `IgxDropDownGroup` will always count as disabled\n     */\n    @Input()\n    @HostBinding('attr.aria-disabled')\n    @HostBinding('class.igx-drop-down__item--disabled')\n    public get disabled(): boolean {\n        return this.group ? this.group.disabled || this._disabled : this._disabled;\n    }\n\n    public set disabled(value: boolean) {\n        this._disabled = value;\n    }\n\n    /**\n     * Gets/sets the `role` attribute of the item. Default is 'option'.\n     *\n     * ```html\n     *  <igx-drop-down-item [role]=\"customRole\"></igx-drop-down-item>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.role')\n    public role = 'option';\n\n    /**\n     * Gets item index\n     * @hidden @internal\n     */\n    public get itemIndex(): number {\n        return this.dropDown.items.indexOf(this);\n    }\n\n    /**\n     * Gets item element height\n     * @hidden @internal\n     */\n    public get elementHeight(): number {\n        return this.elementRef.nativeElement.clientHeight;\n    }\n\n    /**\n     * Get item html element\n     * @hidden @internal\n     */\n    public get element(): ElementRef {\n        return this.elementRef;\n    }\n\n    constructor(\n        @Inject(IGX_DROPDOWN_BASE) protected dropDown: IDropDownBase,\n        protected elementRef: ElementRef,\n        @Optional() protected group: IgxDropDownGroupComponent,\n        @Optional() @Inject(IgxSelectionAPIService) protected selection?: IgxSelectionAPIService\n    ) { }\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('click', ['$event'])\n    clicked(event) {\n    }\n\n    ngDoCheck(): void {\n        if (this._selected) {\n            const dropDownSelectedItem = this.dropDown.selectedItem;\n            if (!dropDownSelectedItem) {\n                this.dropDown.selectItem(this);\n            } else if (this.hasIndex\n                ? this._index !== dropDownSelectedItem.index || this.value !== dropDownSelectedItem.value :\n                this !== dropDownSelectedItem) {\n                this.dropDown.selectItem(this);\n            }\n        }\n    }\n}\n","import {\n    Component,\n    DoCheck,\n    HostListener,\n    HostBinding\n} from '@angular/core';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\n\n/**\n * The `<igx-drop-down-item>` is a container intended for row items in\n * a `<igx-drop-down>` container.\n */\n@Component({\n    selector: 'igx-drop-down-item',\n    templateUrl: 'drop-down-item.component.html'\n})\nexport class IgxDropDownItemComponent extends IgxDropDownItemBase implements DoCheck {\n    /**\n     * @inheritdoc\n     */\n    get focused(): boolean {\n        let focusedState = this._focused;\n        if (this.hasIndex) {\n            const focusedItem = this.selection.first_item(`${this.dropDown.id}-active`);\n            const focusedIndex = focusedItem ? focusedItem.index : -1;\n            focusedState = this._index === focusedIndex;\n        }\n        return !this.isHeader && !this.disabled && focusedState;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n    /**\n     * @inheritdoc\n     */\n    get selected(): boolean {\n        if (this.hasIndex) {\n            const item = this.selection.first_item(`${this.dropDown.id}`);\n            return item ? item.index === this._index && item.value === this.value : false;\n        }\n        return this._selected;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n    }\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.tabindex')\n    get setTabIndex() {\n        const shouldSetTabIndex = this.dropDown.allowItemsFocus && !(this.disabled || this.isHeader);\n        if (shouldSetTabIndex) {\n            return 0;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('click', ['$event'])\n    clicked(event) {\n        if (this.disabled || this.isHeader) {\n            const focusedItem = this.dropDown.items.find((item) => item.focused);\n            if (this.dropDown.allowItemsFocus && focusedItem) {\n                focusedItem.element.nativeElement.focus({ preventScroll: true });\n            }\n            return;\n        }\n        if (this.selection) {\n            this.dropDown.selectItem(this, event);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('mousedown', ['$event'])\n    mousedownHandler(event) {\n        event.preventDefault();\n    }\n}\n","import { InjectionToken, Input, Output, EventEmitter, DoCheck, OnInit } from '@angular/core';\n\n\n/**\n * Defines the posible values of the components' display density.\n */\nexport enum DisplayDensity {\n    comfortable = 'comfortable',\n    cosy = 'cosy',\n    compact = 'compact'\n}\n\n/**\n * Describes the object used to configure the DisplayDensity in Angular DI.\n */\nexport interface IDisplayDensityOptions {\n    displayDensity: DisplayDensity;\n}\n\nexport interface IDensityChangedEventArgs {\n    oldDensity: DisplayDensity;\n    newDensity: DisplayDensity;\n}\n\n/**\n * Defines the DisplayDensity DI token.\n */\nexport const DisplayDensityToken = new InjectionToken<IDisplayDensityOptions>('DisplayDensity');\n\n/**\n * Base class containing all logic required for implementing DisplayDensity.\n */\nexport class DisplayDensityBase implements DoCheck, OnInit {\n    protected _displayDensity: DisplayDensity;\n\n     /**\n     * @hidden\n     */\n    public initialDensity: DisplayDensity;\n\n    /**\n     * Returns the theme of the component.\n     * The default theme is `comfortable`.\n     * Available options are `comfortable`, `cosy`, `compact`.\n     * ```typescript\n     * let componentTheme = this.component.displayDensity;\n     * ```\n     */\n    @Input()\n    public get displayDensity(): DisplayDensity | string {\n        return this._displayDensity ||\n            ((this.displayDensityOptions && this.displayDensityOptions.displayDensity) || DisplayDensity.comfortable);\n    }\n\n    /**\n     * Sets the theme of the component.\n     */\n    public set displayDensity(val: DisplayDensity | string) {\n        const currentDisplayDensity = this._displayDensity;\n        this._displayDensity = val as DisplayDensity;\n\n        if (currentDisplayDensity !== this._displayDensity) {\n            const densityChangedArgs: IDensityChangedEventArgs = {\n                oldDensity: currentDisplayDensity,\n                newDensity: this._displayDensity\n            };\n\n            this.onDensityChanged.emit(densityChangedArgs);\n        }\n    }\n\n    @Output()\n    public onDensityChanged = new EventEmitter<IDensityChangedEventArgs>();\n\n    protected oldDisplayDensityOptions: IDisplayDensityOptions = { displayDensity: DisplayDensity.comfortable };\n\n\n    constructor(protected displayDensityOptions: IDisplayDensityOptions) {\n        Object.assign(this.oldDisplayDensityOptions, displayDensityOptions);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        this.initialDensity = this._displayDensity;\n    }\n\n    public ngDoCheck() {\n        if (!this._displayDensity && this.displayDensityOptions &&\n                this.oldDisplayDensityOptions.displayDensity !== this.displayDensityOptions.displayDensity) {\n            const densityChangedArgs: IDensityChangedEventArgs = {\n                oldDensity: this.oldDisplayDensityOptions.displayDensity,\n                newDensity: this.displayDensityOptions.displayDensity\n            };\n\n            this.onDensityChanged.emit(densityChangedArgs);\n            this.oldDisplayDensityOptions = Object.assign(this.oldDisplayDensityOptions, this.displayDensityOptions);\n        }\n    }\n\n    /**\n     * Given a style class of a component/element returns the modified version of it based\n     * on the current display density.\n     */\n    protected getComponentDensityClass(baseStyleClass: string): string {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return `${baseStyleClass}--${DisplayDensity.cosy}`;\n            case DisplayDensity.compact:\n                return `${baseStyleClass}--${DisplayDensity.compact}`;\n            default:\n                return baseStyleClass;\n        }\n    }\n}\n","import {\n    Input, HostBinding, ElementRef, QueryList, Output, EventEmitter, ChangeDetectorRef, Optional, Inject\n} from '@angular/core';\n\nimport { Navigate, ISelectionEventArgs } from './drop-down.common';\nimport { IDropDownList } from './drop-down.common';\nimport { DropDownActionKey } from './drop-down.common';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\nlet NEXT_ID = 0;\n\n/**\n * An abstract class, defining a drop-down component, with:\n * Properties for display styles and classes\n * A collection items of type `IgxDropDownItemBase`\n * Properties and methods for navigating (highlighting/focusing) items from the collection\n * Properties and methods for selecting items from the collection\n */\nexport abstract class IgxDropDownBase extends DisplayDensityBase implements IDropDownList {\n    protected _width;\n    protected _height;\n    protected _focusedItem: any = null;\n    protected _id = `igx-drop-down-${NEXT_ID++}`;\n\n    /**\n     * Get dropdown's html element of it scroll container\n     */\n    protected get scrollContainer() {\n        return this.element;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public children: QueryList<IgxDropDownItemBase>;\n\n    /**\n     * Emitted when item selection is changing, before the selection completes\n     *\n     * ```html\n     * <igx-drop-down (onSelection)='handleSelection()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<ISelectionEventArgs>();\n\n    /**\n     *  Gets/Sets the width of the drop down\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentWidth = this.dropdown.width;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [width]='160px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public width: string;\n\n    /**\n     * Gets/Sets the height of the drop down\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentHeight = this.dropdown.height;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [height]='400px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public height: string;\n\n    /**\n     * Gets/Sets the drop down's id\n     *\n     * ```typescript\n     * // get\n     * let myDropDownCurrentId = this.dropdown.id;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [id]='newDropDownId'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public id: string;\n\n    /**\n     * Gets/Sets the drop down's container max height.\n     *\n     * ```typescript\n     * // get\n     * let maxHeight = this.dropdown.maxHeight;\n     * ```\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [maxHeight]='200px'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    @HostBinding('style.maxHeight')\n    public maxHeight = null;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-drop-down')\n    public cssClass = true;\n\n    /**\n     * Get all non-header items\n     *\n     * ```typescript\n     * let myDropDownItems = this.dropdown.items;\n     * ```\n     */\n    public get items(): IgxDropDownItemBase[] {\n        const items: IgxDropDownItemBase[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n\n        return items;\n    }\n\n    /**\n     * Get all header items\n     *\n     * ```typescript\n     * let myDropDownHeaderItems = this.dropdown.headers;\n     * ```\n     */\n    public get headers(): IgxDropDownItemBase[] {\n        const headers: IgxDropDownItemBase[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (child.isHeader) {\n                    headers.push(child);\n                }\n            }\n        }\n\n        return headers;\n    }\n\n    /**\n     * Get dropdown html element\n     *\n     * ```typescript\n     * let myDropDownElement = this.dropdown.element;\n     * ```\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Gets if the dropdown is collapsed\n     */\n    public abstract collapsed: boolean;\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n        }\n\n    /** Keydown Handler */\n    public onItemActionKey(key: DropDownActionKey, event?: Event) {\n        switch (key) {\n            case DropDownActionKey.ENTER:\n            case DropDownActionKey.SPACE:\n                this.selectItem(this.focusedItem, event);\n                break;\n            case DropDownActionKey.ESCAPE:\n        }\n    }\n\n    /**\n     * Emits onSelection with the target item & event\n     * @hidden @internal\n     * @param newSelection the item selected\n     * @param event the event that triggered the call\n     */\n    public selectItem(newSelection?: IgxDropDownItemBase, event?: Event) {\n        this.onSelection.emit({\n            newSelection,\n            oldSelection: null,\n            cancel: false\n        });\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get focusedItem(): IgxDropDownItemBase {\n        return this._focusedItem;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set focusedItem(item: IgxDropDownItemBase) {\n        this._focusedItem = item;\n    }\n\n    protected navigate(direction: Navigate, currentIndex?: number) {\n        let index = -1;\n        if (this._focusedItem) {\n            index = currentIndex ? currentIndex : this.focusedItem.itemIndex;\n        }\n        const newIndex = this.getNearestSiblingFocusableItemIndex(index, direction);\n        this.navigateItem(newIndex);\n    }\n\n    protected getNearestSiblingFocusableItemIndex(startIndex: number, direction: Navigate): number {\n        let index = startIndex;\n        const items = this.items;\n        while (items[index + direction] && items[index + direction].disabled) {\n            index += direction;\n        }\n\n        index += direction;\n        if (index >= 0 && index < items.length) {\n            return index;\n        } else {\n            return -1;\n        }\n    }\n\n    /**\n     * Navigates to the item on the specified index\n     * @param newIndex number - the index of the item in the `items` collection\n     */\n    public navigateItem(newIndex: number) {\n        if (newIndex !== -1) {\n            const oldItem = this._focusedItem;\n            const newItem = this.items[newIndex];\n            if (oldItem) {\n                oldItem.focused = false;\n            }\n            this.focusedItem = newItem;\n            this.scrollToHiddenItem(newItem);\n            this.focusedItem.focused = true;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateFirst() {\n        this.navigate(Navigate.Down, -1);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateLast() {\n        this.navigate(Navigate.Up, this.items.length);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateNext() {\n        this.navigate(Navigate.Down);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigatePrev() {\n        this.navigate(Navigate.Up);\n    }\n\n    protected scrollToHiddenItem(newItem: IgxDropDownItemBase) {\n        const elementRect = newItem.element.nativeElement.getBoundingClientRect();\n        const parentRect = this.scrollContainer.getBoundingClientRect();\n        if (parentRect.top > elementRect.top) {\n            this.scrollContainer.scrollTop -= (parentRect.top - elementRect.top);\n        }\n\n        if (parentRect.bottom < elementRect.bottom) {\n            this.scrollContainer.scrollTop += (elementRect.bottom - parentRect.bottom);\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    HostBinding,\n    ViewChild,\n    ViewContainerRef\n} from '@angular/core';\n\n@Component({\n    selector: 'igx-display-container',\n    template: `\n        <ng-template\n            #display_container\n            igxScrollInertia\n            [IgxScrollInertiaScrollContainer]=\"scrollContainer\"\n            [IgxScrollInertiaDirection]=\"scrollDirection\">\n        </ng-template>\n    `\n})\nexport class DisplayContainerComponent {\n    @ViewChild('display_container', { read: ViewContainerRef, static: true })\n    public _vcr;\n\n    public scrollDirection: string;\n\n    @HostBinding('class')\n    public cssClass = 'igx-display-container';\n\n    @HostBinding('class.igx-display-container--inactive')\n    public notVirtual = true;\n\n    public scrollContainer;\n\n    constructor(public cdr: ChangeDetectorRef, public _viewContainer: ViewContainerRef) { }\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef } from '@angular/core';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-horizontal-virtual-helper',\n    template: '<div #horizontal_container class=\"igx-vhelper__placeholder-content\" [style.width.px]=\"width\"></div>'\n})\nexport class HVirtualHelperComponent {\n    @ViewChild('horizontal_container', { read: ViewContainerRef, static: true }) public _vcr;\n    @Input() public width: number;\n    @HostBinding('class')\n    public cssClasses = 'igx-vhelper--horizontal';\n\n    constructor(public elementRef: ElementRef) { }\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild, ViewContainerRef, ChangeDetectorRef, OnDestroy } from '@angular/core';\n\n@Component({\n    selector: 'igx-virtual-helper',\n    template: '<div #container class=\"igx-vhelper__placeholder-content\" [style.height.px]=\"height\"></div>'\n})\nexport class VirtualHelperComponent implements OnDestroy {\n    @HostBinding('scrollTop')\n    public scrollTop;\n\n    @ViewChild('container', { read: ViewContainerRef, static: true }) public _vcr;\n    @Input() public itemsLength: number;\n\n    public set height(value) {\n        if (this.destroyed) {\n            return;\n        }\n        this._height = value;\n        this.cdr.detectChanges();\n    }\n\n    public get height() {\n        return this._height;\n    }\n\n    @HostBinding('class')\n    public cssClasses = 'igx-vhelper--vertical';\n\n    public destroyed;\n    private _height: number;\n\n    constructor(public elementRef: ElementRef, public cdr: ChangeDetectorRef) { }\n\n    public ngOnDestroy() {\n        this.destroyed = true;\n    }\n\n}\n","import { Directive, Input, ElementRef, NgZone, OnInit, NgModule, OnDestroy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @hidden\n */\n@Directive({ selector: '[igxScrollInertia]' })\nexport class IgxScrollInertiaDirective implements OnInit, OnDestroy {\n\n    constructor(private element: ElementRef, private _zone: NgZone) {\n\n    }\n\n    @Input()\n    public IgxScrollInertiaDirection: string;\n\n    @Input()\n    public IgxScrollInertiaScrollContainer: any;\n\n    @Input()\n    public wheelStep = 50;\n\n    @Input()\n    public inertiaStep = 1.5;\n\n    @Input()\n    public swipeToleranceX = 20;\n\n    @Input()\n    public inertiaDeltaY = 3;\n\n    @Input()\n    public inertiaDeltaX = 2;\n\n    @Input()\n    public inertiaDuration = 0.5;\n\n    private _touchInertiaAnimID;\n    private _startX;\n    private _startY;\n    private _touchStartX;\n    private _touchStartY;\n    private _lastTouchEnd;\n    private _lastTouchX;\n    private _lastTouchY;\n    private _savedSpeedsX = [];\n    private _savedSpeedsY;\n    private _totalMovedX;\n    private _offsetRecorded;\n    private _offsetDirection;\n    private _touchPrevented;\n    private _lastMovedX;\n    private _lastMovedY;\n    private _gestureObject;\n    private setPointerCaptureFName = typeof Element.prototype['msSetPointerCapture'] === 'function' ?\n    'msSetPointerCapture' :\n    'setPointerCapture';\n    private releasePointerCaptureFName = typeof Element.prototype['msReleasePointerCapture'] === 'function' ?\n    'msReleasePointerCapture' :\n    'releasePointerCapture';\n    private _pointer;\n    private _nextX;\n    private _nextY;\n\n    ngOnInit(): void {\n        this._zone.runOutsideAngular(() => {\n            const targetElem = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n            targetElem.addEventListener('wheel',\n                    (evt) => { this.onWheel(evt); });\n            targetElem.addEventListener('touchstart',\n                    (evt) => { this.onTouchStart(evt); });\n            targetElem.addEventListener('touchmove',\n                    (evt) => { this.onTouchMove(evt); });\n            targetElem.addEventListener('touchend',\n                    (evt) => { this.onTouchEnd(evt); });\n            targetElem.addEventListener('pointerdown',\n                    (evt) => { this.onPointerDown(evt); });\n            targetElem.addEventListener('pointerup',\n                     (evt) => { this.onPointerUp(evt); });\n            targetElem.addEventListener('MSGestureStart',\n                    (evt) => { this.onMSGestureStart(evt); });\n            targetElem.addEventListener('MSGestureChange',\n                    (evt) => { this.onMSGestureChange(evt); });\n        });\n    }\n\n     /**\n     * @hidden\n     * Function that is called when scrolling with the mouse wheel or using touchpad\n     */\n    protected onWheel(evt) {\n        // if no scrollbar return\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        let scrollDeltaX;\n        let scrollDeltaY;\n        const scrollStep = this.wheelStep;\n        const minWheelStep = 1 / this.wheelStep;\n\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n        if (evt.wheelDeltaX) {\n            /* Option supported on Chrome, Safari, Opera.\n            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */\n            scrollDeltaX = -evt.wheelDeltaX / 120;\n\n            if (-minWheelStep < scrollDeltaX && scrollDeltaX < minWheelStep) {\n                scrollDeltaX = Math.sign(scrollDeltaX) * minWheelStep;\n            }\n        } else if (evt.deltaX) {\n            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */\n            scrollDeltaX = this.calcAxisCoords(evt.deltaX, -1, 1);\n        }\n\n        /** Get delta for the Y axis*/\n        if (evt.wheelDeltaY) {\n            /* Option supported on Chrome, Safari, Opera.\n            /* 120 is default for mousewheel on these browsers. Other values are for trackpads */\n            scrollDeltaY = -evt.wheelDeltaY / 120;\n\n            if (-minWheelStep < scrollDeltaY && scrollDeltaY < minWheelStep) {\n                scrollDeltaY = Math.sign(scrollDeltaY) * minWheelStep;\n            }\n        } else if (evt.deltaY) {\n            /* For other browsers that don't provide wheelDelta, use the deltaY to determine direction and pass default values. */\n            scrollDeltaY = this.calcAxisCoords(evt.deltaY, -1, 1);\n        }\n        if (scrollDeltaX && this.IgxScrollInertiaDirection === 'horizontal') {\n            this._scrollToX(\n                this._startX + scrollDeltaX * scrollStep\n            );\n            const curScrollLeft = this.IgxScrollInertiaScrollContainer.scrollLeft;\n            const maxScrollLeft = parseInt(this.IgxScrollInertiaScrollContainer.children[0].style.width, 10);\n            if (0 < curScrollLeft && curScrollLeft < maxScrollLeft) {\n                // Prevent navigating through pages when scrolling on Mac\n                evt.preventDefault();\n            }\n        } else if (scrollDeltaY && this.IgxScrollInertiaDirection === 'vertical') {\n            this._scrollToY(\n                this._startY + scrollDeltaY * scrollStep\n            );\n            this.preventParentScroll(evt, true);\n        }\n    }\n\n    /**\n     * @hidden\n     * When there is still room to scroll up/down prevent the parent elements from scrolling too.\n     */\n    protected preventParentScroll(evt, preventDefault) {\n        const curScrollTop = this.IgxScrollInertiaScrollContainer.scrollTop;\n        const maxScrollTop = this.IgxScrollInertiaScrollContainer.children[0].scrollHeight -\n            this.IgxScrollInertiaScrollContainer.offsetHeight;\n        if (0 < curScrollTop && curScrollTop < maxScrollTop) {\n            if (preventDefault) {\n                 evt.preventDefault();\n            }\n            if (evt.stopPropagation) {\n                evt.stopPropagation();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called the first moment we start interacting with the content on a touch device\n     */\n    protected onTouchStart(event) {\n        if (typeof MSGesture === 'function' || !this.IgxScrollInertiaScrollContainer) {\n            return false;\n        }\n\n        // stops any current ongoing inertia\n        cancelAnimationFrame(this._touchInertiaAnimID);\n\n        const touch = event.touches[ 0 ];\n\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n        this._touchStartX = touch.pageX;\n        this._touchStartY = touch.pageY;\n\n        this._lastTouchEnd = new Date().getTime();\n        this._lastTouchX = touch.pageX;\n        this._lastTouchY = touch.pageY;\n        this._savedSpeedsX = [];\n        this._savedSpeedsY = [];\n\n        // Vars regarding swipe offset\n        this._totalMovedX = 0;\n        this._offsetRecorded = false;\n        this._offsetDirection = 0;\n\n        this._touchPrevented = false;\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event, false);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to scroll the content based on touch interactions\n     */\n    protected onTouchMove(event) {\n        if (typeof MSGesture === 'function') {\n            this._touchPrevented = false;\n            return false;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n\n        const touch = event.touches[ 0 ];\n        const destX = this._startX + (this._touchStartX - touch.pageX) * Math.sign(this.inertiaStep);\n        const destY = this._startY + (this._touchStartY - touch.pageY) * Math.sign(this.inertiaStep);\n\n        /* Handle complex touchmoves when swipe stops but the toch doesn't end and then a swipe is initiated again */\n        /* **********************************************************/\n\n\n        const timeFromLastTouch = (new Date().getTime()) - this._lastTouchEnd;\n        if (timeFromLastTouch !== 0 && timeFromLastTouch < 100) {\n            const speedX = (this._lastTouchX - touch.pageX) / timeFromLastTouch;\n            const speedY = (this._lastTouchY - touch.pageY) / timeFromLastTouch;\n\n            // Save the last 5 speeds between two touchmoves on X axis\n            if (this._savedSpeedsX.length < 5) {\n                this._savedSpeedsX.push(speedX);\n            } else {\n                this._savedSpeedsX.shift();\n                this._savedSpeedsX.push(speedX);\n            }\n\n            // Save the last 5 speeds between two touchmoves on Y axis\n            if (this._savedSpeedsY.length < 5) {\n                this._savedSpeedsY.push(speedY);\n            } else {\n                this._savedSpeedsY.shift();\n                this._savedSpeedsY.push(speedY);\n            }\n        }\n        this._lastTouchEnd = new Date().getTime();\n        this._lastMovedX = this._lastTouchX - touch.pageX;\n        this._lastMovedY = this._lastTouchY - touch.pageY;\n        this._lastTouchX = touch.pageX;\n        this._lastTouchY = touch.pageY;\n\n        this._totalMovedX += this._lastMovedX;\n\n        let scrolledXY; // Object: {x, y}\n        /*\tDo not scroll using touch untill out of the swipeToleranceX bounds */\n        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {\n            scrolledXY = this._scrollTo(this._startX, destY);\n        } else {\n            /*\tRecord the direction the first time we are out of the swipeToleranceX bounds.\n\t\t\t*\tThat way we know which direction we apply the offset so it doesn't hickup when moving out of the swipeToleranceX bounds */\n            if (!this._offsetRecorded) {\n                this._offsetDirection = Math.sign(destX - this._startX);\n                this._offsetRecorded = true;\n            }\n\n            /*\tScroll with offset ammout of swipeToleranceX in the direction we have exited the bounds and\n            don't change it after that ever until touchend and again touchstart */\n            scrolledXY = this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX,\n                destY);\n        }\n\n        if (scrolledXY.x === 0 && scrolledXY.y === 0) {\n            this._touchPrevented = true;\n        }\n\n        // On Safari preventing the touchmove would prevent default page scroll behaviour even if there is the element doesn't have overflow\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event, true);\n        }\n    }\n\n    protected onTouchEnd(event) {\n        if (typeof MSGesture === 'function') {\n            return;\n        }\n        let speedX = 0;\n        let speedY = 0;\n\n        // savedSpeedsX and savedSpeedsY have same length\n        for (let i = 0; i < this._savedSpeedsX.length; i++) {\n            speedX += this._savedSpeedsX[ i ];\n            speedY += this._savedSpeedsY[ i ];\n        }\n        speedX = this._savedSpeedsX.length ? speedX / this._savedSpeedsX.length : 0;\n        speedY = this._savedSpeedsX.length ? speedY / this._savedSpeedsY.length : 0;\n\n         // Use the lastMovedX and lastMovedY to determine if the swipe stops without lifting the finger so we don't start inertia\n        if ((Math.abs(speedX) > 0.1 || Math.abs(speedY) > 0.1) &&\n                        (Math.abs(this._lastMovedX) > 2 || Math.abs(this._lastMovedY) > 2)) {\n                    this._inertiaInit(speedX, speedY);\n        }\n        if (this.IgxScrollInertiaDirection === 'vertical') {\n            this.preventParentScroll(event, false);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to detect touch starting on a touch device on IE/Edge\n     */\n    protected onPointerDown(event) {\n        if (!event || (event.pointerType !== 2 && event.pointerType !== 'touch') ||\n            typeof MSGesture !== 'function') {\n            return true;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        // setPointerCaptureFName is the name of the function that is supported\n        event.target[this.setPointerCaptureFName](this._pointer = event.pointerId);\n\n        // create gestureObject only one time to prevent overlapping during intertia\n        if (!this._gestureObject) {\n            this._gestureObject = new MSGesture();\n            this._gestureObject.target = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n        }\n        this._gestureObject.addPointer(this._pointer);\n    }\n\n    /**\n     * @hidden\n     * Function that is called when we need to detect touch ending on a touch device on IE/Edge\n     */\n    protected onPointerUp(event) {\n        if (!this._pointer) {\n            return true;\n        }\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        /* releasePointerCaptureFName is the name of the function that is supported */\n        event.target[ this.releasePointerCaptureFName ](this._pointer);\n\n        delete this._pointer;\n    }\n\n    /**\n     * @hidden\n     *  Function that is called when a gesture begins on IE/Edge\n     */\n    protected onMSGestureStart(event) {\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        this._startX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        this._startY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n\n        this._touchStartX = event.screenX;\n        this._touchStartY = event.screenY;\n\n        // Vars regarding swipe offset\n        this._totalMovedX = 0;\n        this._offsetRecorded = false;\n        this._offsetDirection = 0;\n        return false;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when a we need to scroll based on the gesture performed on IE/Edge\n     */\n    protected onMSGestureChange(event) {\n        if (!this.IgxScrollInertiaScrollContainer) {\n            return;\n        }\n        const touchPos = event,\n            destX = this._startX + this._touchStartX - touchPos.screenX,\n            destY = this._startY + this._touchStartY - touchPos.screenY;\n        /* Logic regarding x tolerance to prevent accidental horizontal scrolling when scrolling vertically */\n        this._totalMovedX = this._touchStartX - touchPos.screenX;\n        if (Math.abs(this._totalMovedX) < this.swipeToleranceX && !this._offsetRecorded) {\n            /* Do not scroll horizontally yet while in the tolerance range */\n            this._scrollToY(destY);\n        } else {\n            if (!this._offsetRecorded) {\n                this._offsetDirection = Math.sign(destX - this._startX);\n                this._offsetRecorded = true;\n            }\n            /* Once the tolerance is exceeded it can be scrolled horizontally */\n            this._scrollTo(destX - this._offsetDirection * this.swipeToleranceX, destY);\n        }\n\n        return false;\n    }\n\n    private calcAxisCoords(target, min, max) {\n        if (target === undefined || target < min) {\n            target = min;\n        } else if (target > max) {\n            target = max;\n        }\n\n        return target;\n    }\n\n    private _scrollTo(destX, destY) {\n        const curPosX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n        const curPosY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n         // TODO Trigger scrolling event?\n        const scrolledX = this._scrollToX(destX);\n        const scrolledY = this._scrollToY(destY);\n\n        return { x: scrolledX, y: scrolledY };\n    }\n    private _scrollToX(dest) {\n        this.IgxScrollInertiaScrollContainer.scrollLeft = dest;\n    }\n    private _scrollToY(dest) {\n        this.IgxScrollInertiaScrollContainer.scrollTop = dest;\n    }\n\n   protected _inertiaInit(speedX, speedY) {\n    const stepModifer = this.inertiaStep,\n        inertiaDuration = this.inertiaDuration;\n    let x = 0;\n    this._nextX = this.IgxScrollInertiaScrollContainer.scrollLeft;\n    this._nextY = this.IgxScrollInertiaScrollContainer.scrollTop;\n\n    // Sets timeout until executing next movement iteration of the inertia\n    const inertiaStep = () => {\n        if (x > 6) {\n            cancelAnimationFrame(this._touchInertiaAnimID);\n            return;\n        }\n\n        if (Math.abs(speedX) > Math.abs(speedY)) {\n            x += 0.05 / (1 * inertiaDuration);\n        } else {\n            x += 0.05 / (1 * inertiaDuration);\n        }\n\n        if (x <= 1) {\n            // We use constant quation to determine the offset without speed falloff befor x reaches 1\n            if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {\n                this._nextX += 1 * speedX * 15 * stepModifer;\n            }\n            if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {\n                this._nextY += 1 * speedY * 15 * stepModifer;\n            }\n        } else {\n            // We use the quation \"y = 2 / (x + 0.55) - 0.3\" to determine the offset\n            if (Math.abs(speedY) <= Math.abs(speedX) * this.inertiaDeltaY) {\n                this._nextX += Math.abs(2 / (x + 0.55) - 0.3) * speedX * 15 * stepModifer;\n            }\n            if (Math.abs(speedY) >= Math.abs(speedX) * this.inertiaDeltaX) {\n                this._nextY += Math.abs(2 / (x + 0.55) - 0.3) * speedY * 15 * stepModifer;\n            }\n        }\n\n        // If we have mixed environment we use the default behaviour. i.e. touchscreen + mouse\n        this._scrollTo(this._nextX, this._nextY);\n\n        this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);\n    };\n\n    // Start inertia and continue it recursively\n    this._touchInertiaAnimID = requestAnimationFrame(inertiaStep);\n   }\n\n    ngOnDestroy() {\n        this._zone.runOutsideAngular(() => {\n            const targetElem = this.element.nativeElement.parentElement || this.element.nativeElement.parentNode;\n            targetElem.removeEventListener('wheel',\n                (evt) => { this.onWheel(evt); });\n            targetElem.removeEventListener('touchstart',\n                (evt) => { this.onTouchStart(evt); });\n            targetElem.removeEventListener('touchmove',\n                (evt) => { this.onTouchMove(evt); });\n            targetElem.removeEventListener('touchend',\n                (evt) => { this.onTouchEnd(evt); });\n            targetElem.removeEventListener('pointerdown',\n                (evt) => { this.onPointerDown(evt); });\n            targetElem.removeEventListener('pointerup',\n                (evt) => { this.onPointerUp(evt); });\n            targetElem.removeEventListener('MSGestureStart',\n                (evt) => { this.onMSGestureStart(evt); });\n            targetElem.removeEventListener('MSGestureChange',\n                (evt) => { this.onMSGestureChange(evt); });\n        });\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxScrollInertiaDirective],\n    exports: [IgxScrollInertiaDirective],\n    imports: [CommonModule]\n})\n\nexport class IgxScrollInertiaModule {\n}\n\n","import { Injectable } from '@angular/core';\nimport { IgxGridForOfDirective } from './for_of.directive';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxForOfSyncService {\n\n    private _master: Map<string, IgxGridForOfDirective<any>> = new Map<string, IgxGridForOfDirective<any>>();\n\n    /**\n     * @hidden\n     */\n    public isMaster(directive: IgxGridForOfDirective<any>): boolean {\n        return this._master.get(directive.igxForScrollOrientation) === directive;\n    }\n\n    /**\n     * @hidden\n     */\n    public setMaster(directive: IgxGridForOfDirective<any>, forced = false) {\n        const orientation = directive.igxForScrollOrientation;\n        if (orientation && (forced || !this._master.has(orientation))) {\n            this._master.set(orientation, directive);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public resetMaster() {\n        this._master.clear();\n    }\n\n    /**\n     * @hidden\n     */\n    public sizesCache(dir: string): number[] {\n        return this._master.get(dir).sizesCache;\n    }\n\n    /**\n     * @hidden\n     */\n    public chunkSize(dir: string): number {\n        return this._master.get(dir).state.chunkSize;\n    }\n}\n","import { CommonModule, NgForOfContext } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ComponentRef,\n    Directive,\n    DoCheck,\n    EmbeddedViewRef,\n    EventEmitter,\n    Input,\n    IterableChanges,\n    IterableDiffer,\n    IterableDiffers,\n    NgModule,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    TrackByFunction,\n    ViewContainerRef,\n    ViewRef\n} from '@angular/core';\n\nimport { DisplayContainerComponent } from './display.container';\nimport { HVirtualHelperComponent } from './horizontal.virtual.helper.component';\nimport { VirtualHelperComponent } from './virtual.helper.component';\nimport { IgxScrollInertiaModule } from './../scroll-inertia/scroll_inertia.directive';\nimport { IgxForOfSyncService } from './for_of.sync.service';\n\n/**\n *  @publicApi\n */\nexport class IgxForOfContext<T> {\n    constructor(\n       public $implicit: T,\n       public index: number,\n       public count: number\n    ) {}\n\n    /**\n     * A function that returns whether the element is the first or not\n     */\n    get first(): boolean { return this.index === 0; }\n\n    /**\n     * A function that returns whether the element is the last or not\n     */\n    get last(): boolean { return this.index === this.count - 1; }\n\n    /**\n     * A function that returns whether the element is even or not\n     */\n    get even(): boolean { return this.index % 2 === 0; }\n\n    /**\n     * A function that returns whether the element is odd or not\n     */\n    get odd(): boolean { return !this.even; }\n\n}\n\n@Directive({ selector: '[igxFor][igxForOf]' })\nexport class IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck, OnDestroy {\n\n    /**\n     * An @Input property that sets the data to be rendered.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForOf: any[];\n\n    /**\n     * An @Input property that sets the property name from which to read the size in the data object.\n     */\n    @Input()\n    public igxForSizePropName;\n\n    /**\n     * An @Input property that specifies the scroll orientation.\n     * Scroll orientation can be \"vertical\" or \"horizontal\".\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForScrollOrientation: string;\n\n    /**\n     * Optionally pass the parent `igxFor` instance to create a virtual template scrolling both horizontally and vertically.\n     * ```html\n     * <ng-template #scrollContainer igxFor let-rowData [igxForOf]=\"data\"\n     *       [igxForScrollOrientation]=\"'vertical'\"\n     *       [igxForContainerSize]=\"'500px'\"\n     *       [igxForItemSize]=\"'50px'\"\n     *       let-rowIndex=\"index\">\n     *       <div [style.display]=\"'flex'\" [style.height]=\"'50px'\">\n     *           <ng-template #childContainer igxFor let-item [igxForOf]=\"data\"\n     *               [igxForScrollOrientation]=\"'horizontal'\"\n     *               [igxForScrollContainer]=\"parentVirtDir\"\n     *               [igxForContainerSize]=\"'500px'\">\n     *                   <div [style.min-width]=\"'50px'\">{{rowIndex}} : {{item.text}}</div>\n     *           </ng-template>\n     *       </div>\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public igxForScrollContainer: any;\n\n    /**\n     * An @Input property that sets the px-affixed size of the container along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the container and for \"vertical\" is the height.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForContainerSize]=\"'500px'\"\n     *      [igxForScrollOrientation]=\"'horizontal'\">\n     * </ng-template>\n     * ```\n     */\n    @Input()\n    public igxForContainerSize: any;\n\n    /**\n     * An @Input property that sets the px-affixed size of the item along the axis of scrolling.\n     * For \"horizontal\" orientation this value is the width of the column and for \"vertical\" is the height or the row.\n     * ```html\n     * <ng-template igxFor let-item [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" [igxForItemSize]=\"'50px'\"></ng-template>\n     * ```\n     */\n    @Input()\n    public igxForItemSize: any;\n\n    /**\n     * @hidden\n     */\n    public dc: ComponentRef<DisplayContainerComponent>;\n\n    /**\n     * The current state of the directive. It contains `startIndex` and `chunkSize`.\n     * state.startIndex - The index of the item at which the current visible chunk begins.\n     * state.chunkSize - The number of items the current visible chunk holds.\n     * These options can be used when implementing remote virtualization as they provide the necessary state information.\n     * ```typescript\n     * const gridState = this.parentVirtDir.state;\n     * ```\n     */\n    public state: IForOfState = {\n        startIndex: 0,\n        chunkSize: 0\n    };\n    /**\n     * The total count of the virtual data items, when using remote service.\n     * ```typescript\n     * this.parentVirtDir.totalItemCount = data.Count;\n     * ```\n     */\n    public totalItemCount: number = null;\n\n    /**\n     * An event that is emitted after a new chunk has been loaded.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkLoad)=\"chunkLoad($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkLoad(e){\n     * alert(\"chunk loaded!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onChunkLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * An event that is emitted after data has been changed.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onDataChanged)=\"dataChanged($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * dataChanged(e){\n     * alert(\"data changed!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onDataChanged = new EventEmitter<any>();\n\n    @Output()\n    public onBeforeViewDestroyed = new EventEmitter<EmbeddedViewRef<any>>();\n\n    /**\n     * An event that is emitted on chunk loading to emit the current state information - startIndex, endIndex, totalCount.\n     * Can be used for implementing remote load on demand for the igxFor data.\n     * ```html\n     * <ng-template igxFor [igxForOf]=\"data\" [igxForScrollOrientation]=\"'horizontal'\" (onChunkPreload)=\"chunkPreload($event)\"></ng-template>\n     * ```\n     * ```typescript\n     * chunkPreload(e){\n     * alert(\"chunk is loading!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onChunkPreload = new EventEmitter<IForOfState>();\n\n    protected hScroll;\n    protected func;\n    protected _sizesCache: number[] = [];\n    protected vh: ComponentRef<VirtualHelperComponent>;\n    protected hvh: ComponentRef<HVirtualHelperComponent>;\n    protected _differ: IterableDiffer<T> | null = null;\n    protected _trackByFn: TrackByFunction<T>;\n    protected heightCache = [];\n    private _adjustToIndex;\n    private MAX_PERF_SCROLL_DIFF = 4;\n\n    protected get sizesCache(): number[] {\n        return this._sizesCache;\n    }\n    protected set sizesCache(value: number[]) {\n        this._sizesCache = value;\n    }\n\n    private get _isScrolledToBottom() {\n        if (!this.getVerticalScroll()) {\n            return true;\n        }\n        const scrollHeight = this.getVerticalScroll().scrollHeight;\n        // Use === and not >= because `scrollTop + container size` can't be bigger than `scrollHeight`, unless something isn't updated.\n        // Also use Math.round because Chrome has some inconsistencies and `scrollTop + container` can be float when zooming the page.\n        return Math.round(this.scrollPosition + this.igxForContainerSize) === scrollHeight;\n    }\n\n    private get _isAtBottomIndex() {\n        return this.igxForOf && this.state.startIndex + this.state.chunkSize > this.igxForOf.length;\n    }\n\n    // Start properties related to virtual height handling due to browser limitation\n    /** Maximum height for an element of the browser. */\n    private _maxHeight;\n\n    /** Height that is being virtualized. */\n    protected _virtHeight = 0;\n\n    /**\n     * Ratio for height that's being virtualizaed and the one visible\n     * If _virtHeightRatio = 1, the visible height and the virtualized are the same, also _maxHeight > _virtHeight.\n     */\n    private _virtHeightRatio = 1;\n\n    /** Internal track for scroll top that is being virtualized */\n    protected _virtScrollTop = 0;\n\n    /** If the next onScroll event is triggered due to internal setting of scrollTop */\n    protected _bScrollInternal = false;\n    // End properties related to virtual height handling\n\n    /** caching scroll position reduces reflows */\n    protected _scrollPosition = 0;\n\n    protected _embeddedViews: Array<EmbeddedViewRef<any>> = [];\n\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        protected _template: TemplateRef<NgForOfContext<T>>,\n        protected _differs: IterableDiffers,\n        private resolver: ComponentFactoryResolver,\n        public cdr: ChangeDetectorRef,\n        protected _zone: NgZone) { }\n\n    /**\n     * @hidden\n     */\n    protected get isRemote(): boolean {\n        return this.totalItemCount !== null;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get scrollPosition(): number {\n        return this._scrollPosition;\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public set scrollPosition(val: number) {\n        this._scrollPosition = val;\n        if (this.igxForScrollOrientation === 'horizontal' && this.hScroll) {\n            this.hScroll.scrollLeft = val;\n        } else if (this.vh) {\n            this.vh.instance.elementRef.nativeElement.scrollTop = val;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected removeScrollEventListeners() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this._zone.runOutsideAngular(() =>\n                this.getHorizontalScroll().removeEventListener('scroll', this.func)\n            );\n        } else {\n            const vertical = this.getVerticalScroll();\n            if (vertical) {\n                this._zone.runOutsideAngular(() =>\n                    vertical.removeEventListener('scroll', this.verticalScrollHandler)\n                );\n            }\n        }\n    }\n\n    public verticalScrollHandler(event) {\n        this.onScroll(event);\n    }\n\n    public isScrollable() {\n        return this.vh.instance.height > parseInt(this.igxForContainerSize, 10);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        let totalSize = 0;\n        const vc = this.igxForScrollContainer ? this.igxForScrollContainer._viewContainer : this._viewContainer;\n        this.igxForSizePropName = this.igxForSizePropName || 'width';\n\n        const dcFactory: ComponentFactory<DisplayContainerComponent> = this.resolver.resolveComponentFactory(DisplayContainerComponent);\n        this.dc = this._viewContainer.createComponent(dcFactory, 0);\n        this.dc.instance.scrollDirection = this.igxForScrollOrientation;\n        if (typeof MSGesture === 'function') {\n            // On Edge and IE when scrolling on touch the page scroll instead of the grid.\n            this.dc.instance._viewContainer.element.nativeElement.style.touchAction = 'none';\n        }\n        if (this.igxForOf && this.igxForOf.length) {\n            totalSize = this.initSizesCache(this.igxForOf);\n            this.hScroll = this.getElement(vc, 'igx-horizontal-virtual-helper');\n            this.state.chunkSize = this._calculateChunkSize();\n            this.dc.instance.notVirtual = !(this.igxForContainerSize && this.state.chunkSize < this.igxForOf.length);\n            if (this.hScroll) {\n                this._scrollPosition = this.hScroll.scrollLeft;\n                this.state.startIndex = Math.min(this.getIndexAt(this.scrollPosition, this.sizesCache, 0),\n                    this.igxForOf.length - this.state.chunkSize);\n            }\n            for (let i = this.state.startIndex; i < this.state.startIndex + this.state.chunkSize &&\n                    this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n                    this._template,\n                    new IgxForOfContext<T>(input, this.getContextIndex(input), this.igxForOf.length)\n                );\n                this._embeddedViews.push(embeddedView);\n            }\n        }\n\n        if (this.igxForScrollOrientation === 'vertical') {\n            this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';\n            const factory: ComponentFactory<VirtualHelperComponent> = this.resolver.resolveComponentFactory(VirtualHelperComponent);\n            this.vh = vc.createComponent(factory);\n\n            this._maxHeight = this._calcMaxBrowserHeight();\n            this.vh.instance.height = this.igxForOf ? this._calcHeight() : 0;\n            this._zone.runOutsideAngular(() => {\n                this.verticalScrollHandler = this.verticalScrollHandler.bind(this);\n                this.vh.instance.elementRef.nativeElement.addEventListener('scroll', this.verticalScrollHandler);\n                this.dc.instance.scrollContainer = this.vh.instance.elementRef.nativeElement;\n            });\n        }\n\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.func = (evt) => { this.onHScroll(evt); };\n            this.hScroll = this.getElement(vc, 'igx-horizontal-virtual-helper');\n            if (!this.hScroll) {\n                const hvFactory: ComponentFactory<HVirtualHelperComponent> =\n                    this.resolver.resolveComponentFactory(HVirtualHelperComponent);\n                this.hvh = vc.createComponent(hvFactory);\n                this.hvh.instance.width = totalSize;\n                this.hScroll = this.hvh.instance.elementRef.nativeElement;\n                this._zone.runOutsideAngular(() => {\n                    this.hvh.instance.elementRef.nativeElement.addEventListener('scroll', this.func);\n                    this.dc.instance.scrollContainer = this.hScroll;\n                });\n            } else {\n                this._zone.runOutsideAngular(() => {\n                    this.hScroll.addEventListener('scroll', this.func);\n                    this.dc.instance.scrollContainer = this.hScroll;\n                });\n            }\n            this._updateHScrollOffset();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.removeScrollEventListeners();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        const forOf = 'igxForOf';\n        if (forOf in changes) {\n            const value = changes[forOf].currentValue;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.igxForTrackBy);\n                } catch (e) {\n                    throw new Error(\n                        `Cannot find a differ supporting object \"${value}\" of type \"${getTypeNameForDebugging(value)}\".\n                     NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        const defaultItemSize = 'igxForItemSize';\n        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange && this.igxForScrollOrientation === 'vertical') {\n            // handle default item size changed.\n            this.initSizesCache(this.igxForOf);\n            this._applyChanges();\n        }\n        const containerSize = 'igxForContainerSize';\n        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {\n            this._recalcOnContainerChange(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.igxForOf);\n            if (changes) {\n                //  re-init cache.\n                if (!this.igxForOf) {\n                    return;\n                }\n                this._updateSizeCache();\n                this._zone.run(() => {\n                    this._applyChanges();\n                    this.cdr.markForCheck();\n                    this._updateScrollOffset();\n                    this.onDataChanged.emit();\n                });\n            }\n        }\n    }\n\n    /**\n     * Shifts the scroll thumb position.\n     * ```typescript\n     * this.parentVirtDir.addScrollTop(5);\n     * ```\n     * @param addTop negative value to scroll up and positive to scroll down;\n     */\n    public addScrollTop(addTop: number): boolean {\n        if (addTop === 0 && this.igxForScrollOrientation === 'horizontal') {\n            return false;\n        }\n        const originalVirtScrollTop = this._virtScrollTop;\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxVirtScrollTop = this._virtHeight - containerSize;\n\n        this._bScrollInternal = true;\n        this._virtScrollTop += addTop;\n        this._virtScrollTop = this._virtScrollTop > 0 ?\n            (this._virtScrollTop < maxVirtScrollTop ? this._virtScrollTop : maxVirtScrollTop) :\n            0;\n\n        this.scrollPosition += addTop / this._virtHeightRatio;\n        if (Math.abs(addTop / this._virtHeightRatio) < 1) {\n            // Actual scroll delta that was added is smaller than 1 and onScroll handler doesn't trigger when scrolling < 1px\n            const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n            // scrollOffset = scrollOffset !== parseInt(this.igxForItemSize, 10) ? scrollOffset : 0;\n            this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n        }\n\n        const maxRealScrollTop = this.vh.instance.elementRef.nativeElement.scrollHeight - containerSize;\n        if ((this._virtScrollTop > 0 && this.scrollPosition === 0) ||\n            (this._virtScrollTop < maxVirtScrollTop && this.scrollPosition === maxRealScrollTop)) {\n            // Actual scroll position is at the top or bottom, but virtual one is not at the top or bottom (there's more to scroll)\n            // Recalculate actual scroll position based on the virtual scroll.\n            this.scrollPosition = this._virtScrollTop / this._virtHeightRatio;\n        } else if (this._virtScrollTop === 0 && this.scrollPosition > 0) {\n            // Actual scroll position is not at the top, but virtual scroll is. Just update the actual scroll\n            this.scrollPosition = 0;\n        } else if (this._virtScrollTop === maxVirtScrollTop && this.scrollPosition < maxRealScrollTop) {\n            // Actual scroll position is not at the bottom, but virtual scroll is. Just update the acual scroll\n            this.scrollPosition = maxRealScrollTop;\n        }\n        return this._virtScrollTop !== originalVirtScrollTop;\n    }\n\n    /**\n     * Scrolls to the specified index.\n     * ```typescript\n     * this.parentVirtDir.scrollTo(5);\n     * ```\n     * @param index\n     */\n    public scrollTo(index) {\n        if (index < 0 || index > (this.isRemote ? this.totalItemCount : this.igxForOf.length) - 1) {\n            return;\n        }\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const isPrevItem = index < this.state.startIndex || this.scrollPosition > this.sizesCache[index];\n        let nextScroll = isPrevItem ? this.sizesCache[index] : this.sizesCache[index + 1] - containerSize;\n        if (nextScroll < 0) {\n            return;\n        }\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.scrollPosition = nextScroll;\n        } else {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            if (nextScroll > maxVirtScrollTop) {\n                nextScroll = maxVirtScrollTop;\n            }\n            this._bScrollInternal = true;\n            this._virtScrollTop = nextScroll;\n            this.scrollPosition = this._virtScrollTop / this._virtHeightRatio;\n            this._adjustToIndex = !isPrevItem ? index : null;\n        }\n    }\n\n    /**\n     * Scrolls by one item into the appropriate next direction.\n     * For \"horizontal\" orientation that will be the right column and for \"vertical\" that is the lower row.\n     * ```typescript\n     * this.parentVirtDir.scrollNext();\n     * ```\n     */\n    public scrollNext() {\n        const scr = Math.ceil(this.scrollPosition);\n        const endIndex = this.getIndexAt(\n            scr + parseInt(this.igxForContainerSize, 10),\n            this.sizesCache,\n            0\n        );\n        this.scrollTo(endIndex);\n    }\n\n    /**\n     * Scrolls by one item into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be the left column and for \"vertical\" that is the upper row.\n     * ```typescript\n     * this.parentVirtDir.scrollPrev();\n     * ```\n     */\n    public scrollPrev() {\n        this.scrollTo(this.state.startIndex - 1);\n    }\n\n    /**\n     * Scrolls by one page into the appropriate next direction.\n     * For \"horizontal\" orientation that will be one view to the right and for \"vertical\" that is one view to the bottom.\n     * ```typescript\n     * this.parentVirtDir.scrollNextPage();\n     * ```\n     */\n    public scrollNextPage() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.scrollPosition += parseInt(this.igxForContainerSize, 10);\n        } else {\n            this.addScrollTop(parseInt(this.igxForContainerSize, 10));\n        }\n    }\n\n    /**\n     * Scrolls by one page into the appropriate previous direction.\n     * For \"horizontal\" orientation that will be one view to the left and for \"vertical\" that is one view to the top.\n     * ```typescript\n     * this.parentVirtDir.scrollPrevPage();\n     * ```\n     */\n    public scrollPrevPage() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.scrollPosition -= parseInt(this.igxForContainerSize, 10);\n        } else {\n            const containerSize = (parseInt(this.igxForContainerSize, 10));\n            this.addScrollTop(-containerSize);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getColumnScrollLeft(colIndex) {\n        return this.sizesCache[colIndex];\n    }\n\n    /**\n     * Returns a reference to the vertical scrollbar DOM element.\n     * ```typescript\n     * this.parentVirtDir.getVerticalScroll();\n     * ```\n     */\n    public getVerticalScroll() {\n        if (this.vh) {\n            return this.vh.instance.elementRef.nativeElement;\n        }\n        return null;\n    }\n\n    /**\n     * Returns the total number of items that are fully visible.\n     * ```typescript\n     * this.parentVirtDir.getItemCountInView();\n     * ```\n     */\n    public getItemCountInView() {\n        let startIndex = this.getIndexAt(\n            this.scrollPosition,\n            this.sizesCache,\n            0\n        );\n        if (this.scrollPosition - this.sizesCache[startIndex] > 0) {\n            // fisrt item is not fully in view\n            startIndex++;\n        }\n        const endIndex = this.getIndexAt(\n            this.scrollPosition + parseInt(this.igxForContainerSize, 10),\n            this.sizesCache,\n            0\n        );\n        return endIndex - startIndex;\n    }\n\n    /**\n     * Returns a reference to the horizontal scrollbar DOM element.\n     * ```typescript\n     * this.parentVirtDir.getHorizontalScroll();\n     * ```\n     */\n    public getHorizontalScroll() {\n        return this.getElement(this._viewContainer, 'igx-horizontal-virtual-helper') || this.hScroll;\n    }\n\n    /**\n     * Returns the size of the element at the specified index.\n     * ```typescript\n     * this.parentVirtDir.getSizeAt(1);\n     * ```\n     */\n    public getSizeAt(index: number) {\n        return this.sizesCache[index + 1] - this.sizesCache[index];\n    }\n\n    /**\n     * Returns the scroll offset of the element at the specified index.\n     * ```typescript\n     * this.parentVirtDir.getScrollForIndex(1);\n     * ```\n     */\n    public getScrollForIndex(index: number, bottom?: boolean) {\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const scroll = bottom ? Math.max(0, this.sizesCache[index + 1] - containerSize) : this.sizesCache[index];\n        return scroll;\n    }\n\n    /**\n     * @hidden\n     * Function that is called when scrolling vertically\n     */\n    protected onScroll(event) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!parseInt(this.vh.instance.elementRef.nativeElement.style.height, 10)) {\n            return;\n        }\n\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxRealScrollTop = event.target.children[0].scrollHeight - containerSize;\n        const realPercentScrolled = event.target.scrollTop / maxRealScrollTop;\n        if (!this._bScrollInternal) {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            this._virtScrollTop = realPercentScrolled * maxVirtScrollTop;\n        } else {\n            this._bScrollInternal = false;\n        }\n        this._scrollPosition = this._virtScrollTop;\n        const prevStartIndex = this.state.startIndex;\n        const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n\n        requestAnimationFrame(() => {\n            // check if height/width has changes in views.\n            this.recalcUpdateSizes();\n        });\n        this.dc.changeDetectorRef.detectChanges();\n        if (prevStartIndex !== this.state.startIndex) {\n            this.onChunkLoad.emit(this.state);\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that recaculates and updates cache sizes.\n     */\n    public recalcUpdateSizes() {\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        const diffs = [];\n        let totalDiff = 0;\n        for (let i = 0; i < this._embeddedViews.length; i++) {\n            const view = this._embeddedViews[i];\n            const rNode = view.rootNodes.find((node) => node.nodeType === Node.ELEMENT_NODE);\n            if (rNode) {\n                const h = rNode.offsetHeight ? rNode.offsetHeight : parseInt(this.igxForItemSize, 10);\n                const index = this.state.startIndex + i;\n                if (!this.isRemote && !this.igxForOf[index]) {\n                    continue;\n                }\n                const oldVal = dimension === 'height' ? this.heightCache[index] : this.igxForOf[index][dimension];\n                const newVal = dimension === 'height' ? h : rNode.clientWidth;\n                if (dimension === 'height') {\n                    this.heightCache[index] = newVal;\n                } else {\n                    this.igxForOf[index][dimension] = newVal;\n                }\n                const currDiff = newVal - oldVal;\n                diffs.push(currDiff);\n                totalDiff += currDiff;\n                this.sizesCache[index + 1] += totalDiff;\n            }\n        }\n        // update cache\n        if (Math.abs(totalDiff) > 0) {\n            for (let j = this.state.startIndex + this.state.chunkSize + 1; j < this.sizesCache.length; j++) {\n                this.sizesCache[j] += totalDiff;\n            }\n\n            // update scrBar heights/widths\n            if (this.igxForScrollOrientation === 'horizontal') {\n                const totalWidth = parseInt(this.hScroll.children[0].style.width, 10) + totalDiff;\n                this.hScroll.children[0].style.width = totalWidth + 'px';\n            }\n            const reducer = (acc, val) => acc + val;\n            if (this.igxForScrollOrientation === 'vertical') {\n                const scrToBottom = this._isScrolledToBottom && !this.dc.instance.notVirtual;\n                const hSum = this.heightCache.reduce(reducer);\n                if (hSum > this._maxHeight) {\n                    this._virtHeightRatio = hSum / this._maxHeight;\n                }\n                this.vh.instance.height = Math.min(this.vh.instance.height + totalDiff, this._maxHeight);\n                this._virtHeight = hSum;\n                if (!this.vh.instance.destroyed) {\n                    this.vh.instance.cdr.detectChanges();\n                }\n                if (scrToBottom && !this._isAtBottomIndex) {\n                    const containerSize = parseInt(this.igxForContainerSize, 10);\n                    const maxVirtScrollTop = this._virtHeight - containerSize;\n                    this._bScrollInternal = true;\n                    this._virtScrollTop = maxVirtScrollTop;\n                    this.scrollPosition = maxVirtScrollTop;\n                    return;\n                }\n                if (this._adjustToIndex) {\n                    // in case scrolled to specific index where after scroll heights are changed\n                    // need to adjust the offsets so that item is last in view.\n                    const updatesToIndex = this._adjustToIndex - this.state.startIndex + 1;\n                    const sumDiffs = diffs.slice(0, updatesToIndex).reduce(reducer);\n                    const currOffset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n                    this.dc.instance._viewContainer.element.nativeElement.style.top = (currOffset - sumDiffs) + 'px';\n                    this._adjustToIndex = null;\n                }\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected fixedUpdateAllElements(inScrollTop: number): number {\n        const count = this.isRemote ? this.totalItemCount : this.igxForOf.length;\n        let newStart = this.getIndexAt(\n            inScrollTop,\n            this.sizesCache,\n            0\n        );\n        if (newStart + this.state.chunkSize > count) {\n            newStart = count - this.state.chunkSize;\n        }\n        const prevStart = this.state.startIndex;\n        const diff = newStart - this.state.startIndex;\n        this.state.startIndex = newStart;\n        if (diff) {\n            this.onChunkPreload.emit(this.state);\n            if (!this.isRemote) {\n                /*recalculate and apply page size.*/\n                if (diff > 0 && diff <= this.MAX_PERF_SCROLL_DIFF) {\n                    this.moveApplyScrollNext(prevStart);\n                } else if (diff < 0 && Math.abs(diff) <= this.MAX_PERF_SCROLL_DIFF) {\n                    this.moveApplyScrollPrev(prevStart);\n                } else {\n                    this.fixedApplyScroll();\n                }\n            }\n        }\n        return inScrollTop - this.sizesCache[this.state.startIndex];\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change for scrolling down/right employing context change with view rearrangement\n     */\n    protected moveApplyScrollNext(prevIndex: number): void {\n        const start = prevIndex + this.state.chunkSize;\n        for (let i = start; i < start + this.state.startIndex - prevIndex && this.igxForOf[i] !== undefined; i++) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews.shift();\n            const cntx = embView.context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n            cntx.count = this.igxForOf.length;\n            const view: ViewRef = this.dc.instance._vcr.detach(0);\n            this.dc.instance._vcr.insert(view);\n            this._embeddedViews.push(embView);\n        }\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change for scrolling up/left employing context change with view rearrangement\n     */\n    protected moveApplyScrollPrev(prevIndex: number): void {\n        for (let i = prevIndex - 1; i >= this.state.startIndex && this.igxForOf[i] !== undefined; i--) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews.pop();\n            const cntx = embView.context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n            const view: ViewRef = this.dc.instance._vcr.detach(this.dc.instance._vcr.length - 1);\n            this.dc.instance._vcr.insert(view, 0);\n            this._embeddedViews.unshift(embView);\n        }\n    }\n\n    /**\n     * @hidden\n    */\n    protected getContextIndex(input) {\n        return this.isRemote ? this.state.startIndex + this.igxForOf.indexOf(input) : this.igxForOf.indexOf(input);\n    }\n\n    /**\n     * @hidden\n     * The function applies an optimized state change through context change for each view\n     */\n    protected fixedApplyScroll(): void {\n        let j = 0;\n        const endIndex = this.state.startIndex + this.state.chunkSize;\n        for (let i = this.state.startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n            const input = this.igxForOf[i];\n            const embView = this._embeddedViews[j++];\n            const cntx = (embView as EmbeddedViewRef<any>).context;\n            cntx.$implicit = input;\n            cntx.index = this.getContextIndex(input);\n            cntx.count = this.igxForOf.length;\n        }\n    }\n\n    /**\n     * @hidden\n     * Function that is called when scrolling horizontally\n     */\n    protected onHScroll(event) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!parseInt(this.hScroll.children[0].style.width, 10)) {\n            return;\n        }\n        this._scrollPosition = event.target.scrollLeft;\n        const prevStartIndex = this.state.startIndex;\n        // Updating horizontal chunks\n        const scrollOffset = this.fixedUpdateAllElements(this._scrollPosition);\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n\n        this.dc.changeDetectorRef.detectChanges();\n        if (prevStartIndex !== this.state.startIndex) {\n            this.onChunkLoad.emit(this.state);\n        }\n    }\n\n    /**\n     * Gets the function used to track changes in the items collection.\n     * By default the object references are compared. However this can be optimized if you have unique identifier\n     * value that can be used for the comparison instead of the object ref or if you have some other property values\n     * in the item object that should be tracked for changes.\n     * This option is similar to ngForTrackBy.\n     * ```typescript\n     * const trackFunc = this.parentVirtDir.igxForTrackBy;\n     * ```\n     */\n    @Input()\n    get igxForTrackBy(): TrackByFunction<T> { return this._trackByFn; }\n\n    /**\n     * Sets the function used to track changes in the items collection.\n     * This function can be set in scenarios where you want to optimize or\n     * customize the tracking of changes for the items in the collection.\n     * The igxForTrackBy function takes the index and the current item as arguments and needs to return the unique identifier for this item.\n     * ```typescript\n     * this.parentVirtDir.igxForTrackBy = (index, item) => {\n     *      return item.id + item.width;\n     * };\n     * ```\n     */\n    set igxForTrackBy(fn: TrackByFunction<T>) { this._trackByFn = fn; }\n\n    /**\n     * @hidden\n     */\n    protected _applyChanges() {\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (this.igxForOf && this.igxForOf.length && this.dc) {\n            const embeddedViewCopy = Object.assign([], this._embeddedViews);\n            let startIndex = this.state.startIndex;\n            let endIndex = this.state.chunkSize + this.state.startIndex;\n            if (this.isRemote) {\n                startIndex = 0;\n                endIndex = this.igxForOf.length;\n            }\n            for (let i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embView = embeddedViewCopy.shift();\n                const cntx = (embView as EmbeddedViewRef<any>).context;\n                cntx.$implicit = input;\n                cntx.index = this.getContextIndex(input);\n                cntx.count = this.igxForOf.length;\n            }\n            this.dc.changeDetectorRef.detectChanges();\n            if (prevChunkSize !== this.state.chunkSize) {\n                this.onChunkLoad.emit(this.state);\n            }\n            if (this.igxForScrollOrientation === 'vertical') {\n                this.recalcUpdateSizes();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxBrowserHeight(): number {\n        const div = document.createElement('div');\n        const style = div.style;\n        style.position = 'absolute';\n        style.top = '9999999999999999px';\n        document.body.appendChild(div);\n        const size = Math.abs(div.getBoundingClientRect()['top']);\n        document.body.removeChild(div);\n        return size;\n    }\n\n    /**\n     * @hidden\n     * Recalculates the chunkSize based on current startIndex and returns the new size.\n     * This should be called after this.state.startIndex is updated, not before.\n     */\n    protected _calculateChunkSize(): number {\n        let chunkSize = 0;\n        if (this.igxForContainerSize !== null && this.igxForContainerSize !== undefined) {\n            if (!this.sizesCache) {\n                this.initSizesCache(this.igxForOf);\n            }\n            chunkSize = this._calcMaxChunkSize();\n            if (this.igxForOf && chunkSize > this.igxForOf.length) {\n                chunkSize = this.igxForOf.length;\n            }\n        } else {\n            if (this.igxForOf) {\n                chunkSize = this.igxForOf.length;\n            }\n        }\n        return chunkSize;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getElement(viewref, nodeName) {\n        const elem = viewref.element.nativeElement.parentNode.getElementsByTagName(nodeName);\n        return elem.length > 0 ? elem[0] : null;\n    }\n\n    /**\n     * @hidden\n     */\n    protected initSizesCache(items: any[]): number {\n        let totalSize = 0;\n        let size = 0;\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        let i = 0;\n        this.sizesCache = [];\n        this.heightCache = [];\n        this.sizesCache.push(0);\n        const count = this.isRemote ? this.totalItemCount : items.length;\n        for (i; i < count; i++) {\n            if (dimension === 'height') {\n                // cols[i][dimension] = parseInt(this.igxForItemSize, 10) || 0;\n                size = parseInt(this.igxForItemSize, 10) || 0;\n                this.heightCache.push(size);\n            } else {\n                size = this._getItemSize(items[i], dimension);\n            }\n            totalSize += size;\n            this.sizesCache.push(totalSize);\n        }\n        return totalSize;\n    }\n\n    protected _updateSizeCache() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.initSizesCache(this.igxForOf);\n            return;\n        }\n        const oldHeight = this.heightCache.length > 0 ? this.heightCache.reduce((acc, val) => acc + val) : 0;\n        const newHeight = this.initSizesCache(this.igxForOf);\n\n        const diff = oldHeight - newHeight;\n\n        // if data has been changed while container is scrolled\n        // should update scroll top/left according to change so that same startIndex is in view\n        if (Math.abs(diff) > 0 && this.scrollPosition > 0) {\n            this.recalcUpdateSizes();\n            const offset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n            this.scrollPosition = this.sizesCache[this.state.startIndex] - offset;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxChunkSize(): number {\n        let i = 0;\n        let length = 0;\n        let maxLength = 0;\n        const arr = [];\n        let sum = 0;\n        const availableSize = parseInt(this.igxForContainerSize, 10);\n        if (!availableSize) {\n            return 0;\n        }\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        const reducer = (accumulator, currentItem) => accumulator + this._getItemSize(currentItem, dimension);\n        for (i; i < this.igxForOf.length; i++) {\n            let item = this.igxForOf[i];\n            if (dimension === 'height') {\n                item = { value: this.igxForOf[i], height: this.heightCache[i] };\n            }\n            const size = dimension === 'height' ?\n                this.heightCache[i] :\n                this._getItemSize(item, dimension);\n            sum = arr.reduce(reducer, size);\n            if (sum < availableSize) {\n                arr.push(item);\n                length = arr.length;\n                if (i === this.igxForOf.length - 1) {\n                    // reached end without exceeding\n                    // include prev items until size is filled or first item is reached.\n                    let curItem = dimension === 'height' ? arr[0].value : arr[0];\n                    let prevIndex = this.igxForOf.indexOf(curItem) - 1;\n                    while (prevIndex >= 0 && sum <= availableSize) {\n                        curItem = dimension === 'height' ? arr[0].value : arr[0];\n                        prevIndex = this.igxForOf.indexOf(curItem) - 1;\n                        const prevItem = this.igxForOf[prevIndex];\n                        const prevSize = dimension === 'height' ?\n                            this.heightCache[prevIndex] :\n                            parseInt(prevItem[dimension], 10);\n                        sum = arr.reduce(reducer, prevSize);\n                        arr.unshift(prevItem);\n                        length = arr.length;\n                    }\n                }\n            } else {\n                arr.push(item);\n                length = arr.length + 1;\n                arr.shift();\n            }\n            if (length > maxLength) {\n                maxLength = length;\n            }\n        }\n        return maxLength;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getIndexAt(left, set, index) {\n        let start = 0;\n        let end = set.length - 1;\n        if (left === 0) {\n            return 0;\n        }\n        while (start <= end) {\n            const midIdx = Math.floor((start + end) / 2);\n            const midLeft = set[midIdx];\n            const cmp = left - midLeft;\n            if (cmp > 0) {\n                start = midIdx + 1;\n            } else if (cmp < 0) {\n                end = midIdx - 1;\n            } else {\n                return midIdx;\n            }\n        }\n        return end;\n    }\n\n    protected _recalcScrollBarSize() {\n        const count = this.isRemote ? this.totalItemCount : (this.igxForOf ? this.igxForOf.length : 0);\n        this.dc.instance.notVirtual = !(this.igxForContainerSize && this.dc && this.state.chunkSize < count);\n        if (this.igxForScrollOrientation === 'horizontal') {\n            const totalWidth = this.igxForContainerSize ? this.initSizesCache(this.igxForOf) : 0;\n            this.hScroll.style.width = this.igxForContainerSize + 'px';\n            this.hScroll.children[0].style.width = totalWidth + 'px';\n            if (totalWidth <= parseInt(this.igxForContainerSize, 10)) {\n                this.scrollPosition = 0;\n            }\n        }\n        if (this.igxForScrollOrientation === 'vertical') {\n            this.vh.instance.elementRef.nativeElement.style.height = parseInt(this.igxForContainerSize, 10) + 'px';\n            this.vh.instance.height = this._calcHeight();\n            if (this.vh.instance.height <= parseInt(this.igxForContainerSize, 10)) {\n                this.scrollPosition = 0;\n            }\n        }\n    }\n\n    protected _calcHeight(): number {\n        let height;\n        if (this.heightCache) {\n            height = this.heightCache.reduce((acc, val) => acc + val, 0);\n        } else {\n            height = this.initSizesCache(this.igxForOf);\n        }\n        this._virtHeight = height;\n        if (height > this._maxHeight) {\n            this._virtHeightRatio = height / this._maxHeight;\n            height = this._maxHeight;\n        }\n        return height;\n    }\n\n    protected _recalcOnContainerChange(changes: SimpleChanges) {\n        this.dc.instance._viewContainer.element.nativeElement.style.top = '0px';\n        this.dc.instance._viewContainer.element.nativeElement.style.left = '0px';\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        if (prevChunkSize !== this.state.chunkSize) {\n            this.onChunkLoad.emit(this.state);\n        }\n        if (this.sizesCache && this.hScroll) {\n            // Updating horizontal chunks and offsets based on the new scrollLeft\n            const scrollOffset = this.fixedUpdateAllElements(this.scrollPosition);\n            this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n        }\n    }\n\n    /**\n     * @hidden\n     * Removes an elemenet from the embedded views and updates chunkSize.\n     */\n    protected removeLastElem() {\n        const oldElem = this._embeddedViews.pop();\n        this.onBeforeViewDestroyed.emit(oldElem);\n        oldElem.destroy();\n\n        this.state.chunkSize--;\n    }\n\n    /**\n     * @hidden\n     * If there exists an element that we can create embedded view for creates it, appends it and updates chunkSize\n     */\n    protected addLastElem() {\n        let elemIndex = this.state.startIndex + this.state.chunkSize;\n        if (!this.isRemote && !this.igxForOf) {\n            return;\n        }\n\n        if (elemIndex >= this.igxForOf.length) {\n            elemIndex = this.igxForOf.length - this.state.chunkSize;\n        }\n        const input = this.igxForOf[elemIndex];\n        const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n            this._template,\n            new IgxForOfContext<T>(input, this.getContextIndex(input), this.igxForOf.length)\n        );\n\n        this._embeddedViews.push(embeddedView);\n        this.state.chunkSize++;\n\n        this._zone.run(() => {\n            this.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * Recalculates chunkSize and adds/removes elements if need due to the change.\n     * this.state.chunkSize is updated in @addLastElem() or @removeLastElem()\n     */\n    protected applyChunkSizeChange() {\n        const chunkSize = this.isRemote ? (this.igxForOf ? this.igxForOf.length : 0) : this._calculateChunkSize();\n        if (chunkSize > this.state.chunkSize) {\n            const diff = chunkSize - this.state.chunkSize;\n            for (let i = 0; i < diff; i++) {\n                this.addLastElem();\n            }\n        } else if (chunkSize < this.state.chunkSize) {\n            const diff = this.state.chunkSize - chunkSize;\n            for (let i = 0; i < diff; i++) {\n                this.removeLastElem();\n            }\n        }\n    }\n\n    protected _updateScrollOffset() {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this._updateHScrollOffset();\n        } else {\n            this._updateVScrollOffset();\n        }\n    }\n    private _updateVScrollOffset() {\n        let scrollOffset = 0;\n        const vScroll = this.vh.instance.elementRef.nativeElement;\n        scrollOffset = vScroll && parseInt(vScroll.style.height, 10) ?\n            this.scrollPosition - this.sizesCache[this.state.startIndex] : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n    }\n    private _updateHScrollOffset() {\n        let scrollOffset = 0;\n        scrollOffset = this.hScroll && parseInt(this.hScroll.children[0].style.width, 10) ?\n            this.scrollPosition - this.sizesCache[this.state.startIndex] : 0;\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n    }\n\n    private _getItemSize(item, dimension: string): number {\n        const dim = item[dimension];\n        return typeof dim === 'number' ? dim : parseInt(this.igxForItemSize, 10) || 0;\n    }\n}\n\nexport function getTypeNameForDebugging(type: any): string {\n    const name = 'name';\n    return type[name] || typeof type;\n}\n\nexport interface IForOfState {\n    startIndex?: number;\n    chunkSize?: number;\n}\n\nexport interface IForOfDataChangingEventArgs {\n    containerSize: number;\n}\n\n@Directive({\n    selector: '[igxGridFor][igxGridForOf]'\n})\nexport class IgxGridForOfDirective<T> extends IgxForOfDirective<T> implements OnInit, OnChanges, DoCheck {\n\n    constructor(\n        _viewContainer: ViewContainerRef,\n        _template: TemplateRef<NgForOfContext<T>>,\n        _differs: IterableDiffers,\n        resolver: ComponentFactoryResolver,\n        cdr: ChangeDetectorRef,\n        _zone: NgZone,\n        protected syncService: IgxForOfSyncService) {\n        super(_viewContainer, _template, _differs, resolver, cdr, _zone);\n    }\n\n    @Input()\n    set igxGridForOf(value) {\n        this.igxForOf = value;\n    }\n\n    get igxGridForOf() {\n        return this.igxForOf;\n    }\n\n    /**\n     * @hidden @internal\n     * An event that is emitted after data has been changed but before the view is refreshed\n     */\n    @Output()\n    public onDataChanging = new EventEmitter<IForOfDataChangingEventArgs>();\n\n    ngOnInit() {\n        this.syncService.setMaster(this);\n        super.ngOnInit();\n        this.removeScrollEventListeners();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const forOf = 'igxGridForOf';\n        this.syncService.setMaster(this);\n        if (forOf in changes) {\n            const value = changes[forOf].currentValue;\n            if (!this._differ && value) {\n                try {\n                    this._differ = this._differs.find(value).create(this.igxForTrackBy);\n                } catch (e) {\n                    throw new Error(\n                        `Cannot find a differ supporting object \"${value}\" of type \"${getTypeNameForDebugging(value)}\".\n                     NgFor only supports binding to Iterables such as Arrays.`);\n                }\n            }\n        }\n        const defaultItemSize = 'igxForItemSize';\n        if (defaultItemSize in changes && !changes[defaultItemSize].firstChange && this.igxForScrollOrientation === 'vertical') {\n            // handle default item size changed.\n            this.initSizesCache(this.igxForOf);\n        }\n        const containerSize = 'igxForContainerSize';\n        if (containerSize in changes && !changes[containerSize].firstChange && this.igxForOf) {\n            this._recalcOnContainerChange(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get sizesCache(): number[] {\n        if (this.syncService.isMaster(this)) {\n            return this._sizesCache;\n        }\n        return this.syncService.sizesCache(this.igxForScrollOrientation);\n    }\n    /**\n     * @hidden\n     * @internal\n     */\n    public set sizesCache(value: number[]) {\n        this._sizesCache = value;\n    }\n\n    protected get itemsDimension() {\n        return this.igxForScrollOrientation === 'horizontal' ? this.igxForSizePropName : 'height';\n    }\n\n    protected getItemSize(item) {\n        let size = 0;\n        const dimension = this.igxForScrollOrientation === 'horizontal' ?\n            this.igxForSizePropName : 'height';\n        if (dimension === 'height') {\n            size = parseInt(this.igxForItemSize, 10) || 0;\n            if (item && item.summaries) {\n                size = item.max;\n            } else if (item && item.groups && item.height) {\n                size = item.height;\n            }\n        } else {\n            size = parseInt(item[dimension], 10) || 0;\n        }\n        return size;\n    }\n\n    protected initSizesCache(items: any[]): number {\n        if (!this.syncService.isMaster(this)) {\n            const masterSizesCache = this.syncService.sizesCache(this.igxForScrollOrientation);\n            return masterSizesCache[masterSizesCache.length - 1];\n        }\n        let totalSize = 0;\n        let size = 0;\n        let i = 0;\n        this.sizesCache = [];\n        this.heightCache = [];\n        this.sizesCache.push(0);\n        const count = this.isRemote ? this.totalItemCount : items.length;\n        for (i; i < count; i++) {\n            size = this.getItemSize(items[i]);\n            if (this.itemsDimension === 'height') {\n                this.heightCache.push(size);\n            }\n            totalSize += size;\n            this.sizesCache.push(totalSize);\n        }\n        return totalSize;\n    }\n\n    protected _updateSizeCache(changes: IterableChanges<T> = null) {\n        if (this.igxForScrollOrientation === 'horizontal') {\n            this.initSizesCache(this.igxForOf);\n            return;\n        }\n\n        const oldHeight = this.heightCache.length > 0 ? this.heightCache.reduce((acc, val) => acc + val) : 0;\n        let newHeight = oldHeight;\n        if (changes && !this.isRemote) {\n            newHeight = this.handleCacheChanges(changes);\n        } else {\n            newHeight = this.initSizesCache(this.igxForOf);\n        }\n\n        const diff = oldHeight - newHeight;\n\n        // if data has been changed while container is scrolled\n        // should update scroll top/left according to change so that same startIndex is in view\n        if (Math.abs(diff) > 0) {\n            requestAnimationFrame(() => {\n                this.recalcUpdateSizes();\n                const offset = parseInt(this.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n                if (this.scrollPosition !== 0) {\n                    this.scrollPosition = this.sizesCache[this.state.startIndex] - offset;\n                } else {\n                    this._updateScrollOffset();\n                }\n            });\n        }\n    }\n\n    protected handleCacheChanges(changes: IterableChanges<T>) {\n        const identityChanges = [];\n        const newHeightCache = [];\n        const newSizesCache = [];\n        newSizesCache.push(0);\n        let newHeight = 0;\n\n        // When there are more than one removed items the changes are not reliable so those with identity change should be default size.\n        let numRemovedItems = 0;\n        changes.forEachRemovedItem(() => numRemovedItems++);\n\n        // Get the identity changes to determine later if those that have changed their indexes should be assigned default item size.\n        changes.forEachIdentityChange((item) => {\n            if (item.currentIndex !== item.previousIndex) {\n                // Filter out ones that have not changed their index.\n                identityChanges[item.currentIndex] = item;\n            }\n        });\n\n        // Processing each item that is passed to the igxForOf so far seem to be most reliable. We parse the updated list of items.\n        changes.forEachItem((item) => {\n            if (item.previousIndex !== null &&\n                (numRemovedItems < 2 || !identityChanges.length || identityChanges[item.currentIndex])) {\n                // Reuse cache on those who have previousIndex.\n                // When there are more than one removed items currently the changes are not readable so ones with identity change\n                // should be racalculated.\n                newHeightCache[item.currentIndex] = this.heightCache[item.previousIndex];\n            } else {\n                // Assign default item size.\n                newHeightCache[item.currentIndex] = this.getItemSize(item.item);\n            }\n            newSizesCache[item.currentIndex + 1] = newSizesCache[item.currentIndex] + newHeightCache[item.currentIndex];\n            newHeight += newHeightCache[item.currentIndex];\n        });\n        this.heightCache = newHeightCache;\n        this.sizesCache = newSizesCache;\n        return newHeight;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public assumeMaster(): void {\n        this._sizesCache = this.syncService.sizesCache(this.igxForScrollOrientation);\n        this.syncService.setMaster(this, true);\n    }\n\n    ngDoCheck() {\n        if (this._differ) {\n            const changes = this._differ.diff(this.igxForOf);\n            if (changes) {\n                const args: IForOfDataChangingEventArgs = {\n                    containerSize: this.igxForContainerSize\n                };\n                this.onDataChanging.emit(args);\n                //  re-init cache.\n                if (!this.igxForOf) {\n                    return;\n                }\n                /* we need to reset the master dir if all rows are removed\n                (e.g. because of filtering); if all columns are hidden, rows are\n                still rendered empty, so we should not reset master */\n                if (!this.igxForOf.length &&\n                    this.igxForScrollOrientation === 'vertical') {\n                    this.syncService.resetMaster();\n                }\n                this.syncService.setMaster(this);\n                this.igxForContainerSize = args.containerSize;\n                this._updateSizeCache(changes);\n                this._applyChanges();\n                this._updateScrollOffset();\n                this.onDataChanged.emit();\n            }\n        }\n    }\n\n    onScroll(event) {\n        if (!parseInt(this.vh.instance.elementRef.nativeElement.style.height, 10)) {\n            return;\n        }\n\n        const containerSize = parseInt(this.igxForContainerSize, 10);\n        const maxRealScrollTop = event.target.children[0].scrollHeight - containerSize;\n        const realPercentScrolled = event.target.scrollTop / maxRealScrollTop;\n        if (!this._bScrollInternal) {\n            const maxVirtScrollTop = this._virtHeight - containerSize;\n            this._virtScrollTop = realPercentScrolled * maxVirtScrollTop;\n        } else {\n            this._bScrollInternal = false;\n        }\n        this._scrollPosition = this._virtScrollTop;\n        const scrollOffset = this.fixedUpdateAllElements(this._virtScrollTop);\n\n        this.dc.instance._viewContainer.element.nativeElement.style.top = -(scrollOffset) + 'px';\n        requestAnimationFrame(() => {\n            this.recalcUpdateSizes();\n        });\n    }\n\n    onHScroll(scrollAmount) {\n        /* in certain situations this may be called when no scrollbar is visible */\n        if (!this.hScroll || !parseInt(this.hScroll.children[0].style.width, 10)) {\n            return;\n        }\n        this._scrollPosition = scrollAmount;\n        // Updating horizontal chunks\n        const scrollOffset = this.fixedUpdateAllElements(scrollAmount);\n        this.dc.instance._viewContainer.element.nativeElement.style.left = -scrollOffset + 'px';\n    }\n\n    protected addLastElem() {\n        let elemIndex = this.state.startIndex + this.state.chunkSize;\n        if (!this.isRemote && !this.igxForOf) {\n            return;\n        }\n\n        if (elemIndex >= this.igxForOf.length) {\n            elemIndex = this.igxForOf.length - this.state.chunkSize;\n        }\n        const input = this.igxForOf[elemIndex];\n        const embeddedView = this.dc.instance._vcr.createEmbeddedView(\n            this._template,\n            new IgxForOfContext<T>(input, this.getContextIndex(input), this.igxForOf.length)\n        );\n\n        this._embeddedViews.push(embeddedView);\n        this.state.chunkSize++;\n    }\n\n    protected _updateViews(prevChunkSize) {\n        if (this.igxForOf && this.igxForOf.length && this.dc) {\n            const embeddedViewCopy = Object.assign([], this._embeddedViews);\n            let startIndex;\n            let endIndex;\n            if (this.isRemote) {\n                startIndex = 0;\n                endIndex = this.igxForOf.length;\n            } else {\n                startIndex = this.getIndexAt(\n                    this.scrollPosition,\n                    this.sizesCache,\n                    0\n                );\n                if (startIndex + this.state.chunkSize > this.igxForOf.length) {\n                    startIndex = this.igxForOf.length - this.state.chunkSize;\n                }\n                this.state.startIndex = startIndex;\n                endIndex = this.state.chunkSize + this.state.startIndex;\n            }\n\n            for (let i = startIndex; i < endIndex && this.igxForOf[i] !== undefined; i++) {\n                const input = this.igxForOf[i];\n                const embView = embeddedViewCopy.shift();\n                const cntx = (embView as EmbeddedViewRef<any>).context;\n                cntx.$implicit = input;\n                cntx.index = this.getContextIndex(input);\n                cntx.count = this.igxForOf.length;\n            }\n            if (prevChunkSize !== this.state.chunkSize) {\n                this.onChunkLoad.emit(this.state);\n            }\n            if (this.igxForScrollOrientation === 'vertical') {\n                requestAnimationFrame(() => {\n                    this.recalcUpdateSizes();\n                });\n            }\n        }\n    }\n    protected _applyChanges() {\n        const prevChunkSize = this.state.chunkSize;\n        this.applyChunkSizeChange();\n        this._recalcScrollBarSize();\n        this._updateViews(prevChunkSize);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calcMaxChunkSize(): number {\n        if (this.syncService.isMaster(this)) {\n            return super._calcMaxChunkSize();\n        }\n        return this.syncService.chunkSize(this.igxForScrollOrientation);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxForOfDirective, IgxGridForOfDirective, DisplayContainerComponent, VirtualHelperComponent, HVirtualHelperComponent],\n    entryComponents: [DisplayContainerComponent, VirtualHelperComponent, HVirtualHelperComponent],\n    exports: [IgxForOfDirective, IgxGridForOfDirective],\n    imports: [IgxScrollInertiaModule, CommonModule]\n})\n\nexport class IgxForOfModule {\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    forwardRef,\n    QueryList,\n    OnInit,\n    Input,\n    OnDestroy,\n    ViewChild,\n    ContentChild,\n    AfterViewInit,\n    Output,\n    EventEmitter,\n    Optional,\n    Inject\n} from '@angular/core';\nimport { IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { IgxDropDownItemComponent } from './drop-down-item.component';\nimport { IgxDropDownBase } from './drop-down.base';\nimport { DropDownActionKey, Navigate } from './drop-down.common';\nimport { IGX_DROPDOWN_BASE, IDropDownBase } from './drop-down.common';\nimport { ISelectionEventArgs } from './drop-down.common';\nimport { CancelableEventArgs, CancelableBrowserEventArgs, isIE } from '../core/utils';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { Subject } from 'rxjs';\nimport { IgxDropDownItemBase } from './drop-down-item.base';\nimport { OverlaySettings } from '../services';\nimport { IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { take } from 'rxjs/operators';\nimport { DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\n/**\n * **Ignite UI for Angular DropDown** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/drop_down.html)\n *\n * The Ignite UI for Angular Drop Down displays a scrollable list of items which may be visually grouped and\n * supports selection of a single item. Clicking or tapping an item selects it and closes the Drop Down\n *\n * Example:\n * ```html\n * <igx-drop-down>\n *   <igx-drop-down-item *ngFor=\"let item of items\" disabled={{item.disabled}} isHeader={{item.header}}>\n *     {{ item.value }}\n *   </igx-drop-down-item>\n * </igx-drop-down>\n * ```\n */\n@Component({\n    selector: 'igx-drop-down',\n    templateUrl: './drop-down.component.html',\n    providers: [{ provide: IGX_DROPDOWN_BASE, useExisting: IgxDropDownComponent }]\n})\nexport class IgxDropDownComponent extends IgxDropDownBase implements IDropDownBase, OnInit, OnDestroy, AfterViewInit {\n    protected destroy$ = new Subject<boolean>();\n    protected _scrollPosition: number;\n\n    @ContentChild(IgxForOfDirective, { read: IgxForOfDirective, static: false })\n    protected virtDir: IgxForOfDirective<any>;\n\n    @ViewChild(IgxToggleDirective, { static: true })\n    protected toggleDirective: IgxToggleDirective;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(forwardRef(() => IgxDropDownItemComponent), { descendants: true })\n    public children: QueryList<IgxDropDownItemBase>;\n\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpening)='handleOpening()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs>();\n\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-drop-down (onOpened)='handleOpened()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<void>();\n\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosing)='handleClosing()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs>();\n\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-drop-down (onClosed)='handleClosed()'></igx-drop-down>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<void>();\n\n    /**\n     * Gets/sets whether items take focus. Disabled by default.\n     * When enabled, drop down items gain tab index and are focused when active -\n     * this includes activating the selected item when opening the drop down and moving with keyboard navigation.\n     *\n     * Note: Keep that focus shift in mind when using the igxDropDownItemNavigation directive\n     * and ensure it's placed either on each focusable item or a common ancestor to allow it to handle keyboard events.\n     *\n     * ```typescript\n     * // get\n     * let dropDownAllowsItemFocus = this.dropdown.allowItemsFocus;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-drop-down [allowItemsFocus]='true'></igx-drop-down>\n     * ```\n     */\n    @Input()\n    public allowItemsFocus = false;\n\n    /**\n     * @hidden @internal\n     */\n    public get focusedItem(): IgxDropDownItemBase {\n        if (this.virtDir) {\n            return this._focusedItem && this._focusedItem.index !== -1 ?\n            (this.children.find(e => e.index === this._focusedItem.index) || null) :\n            null;\n        }\n        return this._focusedItem;\n    }\n\n    public set focusedItem(value: IgxDropDownItemBase) {\n        if (!value) {\n            this.selection.clear(`${this.id}-active`);\n            this._focusedItem = null;\n            return;\n        }\n        this._focusedItem = value;\n        if (this.virtDir) {\n            this._focusedItem = {\n                value: value.value,\n                index: value.index\n            } as IgxDropDownItemBase;\n        }\n        this.selection.set(`${this.id}-active`, new Set([this._focusedItem]));\n    }\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n    set id(value: string) {\n        this.toggleDirective.id = value;\n        this.selection.set(value, this.selection.get(this.id));\n        this.selection.clear(this.id);\n        this.selection.set(value, this.selection.get(`${this.id}-active`));\n        this.selection.clear(`${this.id}-active`);\n        this._id = value;\n    }\n\n    /** Id of the internal listbox of the drop down */\n    public get listId() {\n        return this.id + '-list';\n    }\n\n    /**\n     * Get currently selected item\n     *\n     * ```typescript\n     * let currentItem = this.dropdown.selectedItem;\n     * ```\n     */\n    public get selectedItem(): IgxDropDownItemBase {\n        const selectedItem = this.selection.first_item(this.id);\n        if (selectedItem) {\n            return selectedItem;\n        }\n        return null;\n    }\n\n    /**\n     * Gets if the dropdown is collapsed\n     *\n     * ```typescript\n     * let isCollapsed = this.dropdown.collapsed;\n     * ```\n     */\n    public get collapsed(): boolean {\n        return this.toggleDirective.collapsed;\n    }\n\n    protected get scrollContainer() {\n        return this.toggleDirective.element;\n    }\n\n    protected get collectionLength() {\n        if (this.virtDir) {\n            return this.virtDir.totalItemCount || this.virtDir.igxForOf.length;\n        }\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(elementRef, cdr, _displayDensityOptions);\n    }\n\n    /**\n     * Opens the dropdown\n     *\n     * ```typescript\n     * this.dropdown.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        this.toggleDirective.open(overlaySettings);\n        this.updateScrollPosition();\n    }\n\n    /**\n     * Closes the dropdown\n     *\n     * ```typescript\n     * this.dropdown.close();\n     * ```\n     */\n    public close() {\n        this.toggleDirective.close();\n    }\n\n    /**\n     * Toggles the dropdown\n     *\n     * ```typescript\n     * this.dropdown.toggle();\n     * ```\n     */\n    public toggle(overlaySettings?: OverlaySettings) {\n        if (this.collapsed || this.toggleDirective.isClosing) {\n            this.open(overlaySettings);\n        } else {\n            this.close();\n        }\n    }\n\n    /**\n     * Select an item by index\n     * @param index of the item to select; If the drop down uses *igxFor, pass the index in data\n     */\n    public setSelectedItem(index: number) {\n        if (index < 0 || index >= this.items.length) {\n            return;\n        }\n        let newSelection: IgxDropDownItemBase;\n        if (this.virtDir) {\n            newSelection = {\n                value: this.virtDir.igxForOf[index],\n                index\n            } as IgxDropDownItemBase;\n        } else {\n            newSelection = this.items[index];\n        }\n        this.selectItem(newSelection);\n    }\n\n    /**\n     * Navigates to the item on the specified index\n     * If the data in the drop-down is virtualized, pass the index of the item in the virtualized data.\n     * @param newIndex number\n     */\n    public navigateItem(index: number) {\n        if (this.virtDir) {\n            if (index === -1 || index >= this.collectionLength) {\n                return;\n            }\n            const direction = index > (this.focusedItem ? this.focusedItem.index : -1) ? Navigate.Down : Navigate.Up;\n            const subRequired = this.isIndexOutOfBounds(index, direction);\n            this.focusedItem = {\n                value: this.virtDir.igxForOf[index],\n                index: index\n            } as IgxDropDownItemBase;\n            if (subRequired) {\n                this.virtDir.scrollTo(index);\n            }\n            if (subRequired) {\n                this.virtDir.onChunkLoad.pipe(take(1)).subscribe(() => {\n                    this.skipHeader(direction);\n                });\n            } else {\n                this.skipHeader(direction);\n            }\n        } else {\n            super.navigateItem(index);\n        }\n        if (this.allowItemsFocus && this.focusedItem) {\n            this.focusedItem.element.nativeElement.focus();\n            this.cdr.markForCheck();\n        }\n    }\n\n    private isIndexOutOfBounds(index: number, direction: Navigate) {\n        const virtState = this.virtDir.state;\n        const currentPosition = this.virtDir.getVerticalScroll().scrollTop;\n        const itemPosition = this.virtDir.getScrollForIndex(index, direction === Navigate.Down);\n        const indexOutOfChunk = index < virtState.startIndex || index > virtState.chunkSize + virtState.startIndex;\n        const scrollNeeded = direction === Navigate.Down ? currentPosition < itemPosition : currentPosition > itemPosition;\n        const subRequired = indexOutOfChunk || scrollNeeded;\n        return subRequired;\n    }\n\n    protected skipHeader(direction: Navigate) {\n        if (!this.focusedItem) {\n            return;\n        }\n        if (this.focusedItem.isHeader || this.focusedItem.disabled) {\n            if (direction === Navigate.Up) {\n                this.navigatePrev();\n            } else {\n                this.navigateNext();\n            }\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    updateScrollPosition() {\n        if (!this.virtDir) {\n            return;\n        }\n        if (!this.selectedItem) {\n            this.virtDir.scrollTo(0);\n            return;\n        }\n        let targetScroll = this.virtDir.getScrollForIndex(this.selectedItem.index);\n        const itemsInView = this.virtDir.igxForContainerSize / this.virtDir.igxForItemSize;\n        targetScroll -= (itemsInView / 2 - 1) * this.virtDir.igxForItemSize;\n        this.virtDir.getVerticalScroll().scrollTop = targetScroll;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpening(e: CancelableEventArgs) {\n        this.onOpening.emit(e);\n        if (e.cancel) {\n            return;\n        }\n        if (!this.virtDir && this.selectedItem) {\n            this.scrollToItem(this.selectedItem);\n        }\n        if (this.virtDir) {\n            this.virtDir.getVerticalScroll().scrollTop = this._scrollPosition;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpened() {\n        if (this.selectedItem) {\n            this.focusedItem = this.selectedItem;\n            this._focusedItem.focused = true;\n        } else if (this.allowItemsFocus) {\n            this.navigateFirst();\n        }\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleClosing(e: CancelableBrowserEventArgs) {\n        this.onClosing.emit(e);\n        if (this.virtDir) {\n            this._scrollPosition = this.virtDir.getVerticalScroll().scrollTop;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleClosed() {\n        if (this._focusedItem) {\n            this._focusedItem.focused = false;\n        }\n        this.onClosed.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this.selection.clear(this.id);\n        this.selection.clear(`${this.id}-active`);\n    }\n\n    protected scrollToItem(item: IgxDropDownItemBase) {\n        const itemPosition = this.calculateScrollPosition(item);\n\n        //  in IE11 setting sctrollTop is somehow slow and forces dropdown\n        //  to appear on screen before animation start. As a result dropdown\n        //  flickers badly. This is why we set scrollTop just a little later\n        //  allowing animation to start and prevent dropdown flickering\n        if (isIE()) {\n            setTimeout(() => {\n                this.scrollContainer.scrollTop = (itemPosition);\n            }, 1);\n        } else {\n            this.scrollContainer.scrollTop = (itemPosition);\n        }\n    }\n\n    /** @hidden @internal */\n    public calculateScrollPosition(item: IgxDropDownItemBase): number {\n        if (!item) {\n            return 0;\n        }\n\n        const elementRect = item.element.nativeElement.getBoundingClientRect();\n        const parentRect = this.scrollContainer.getBoundingClientRect();\n        const scrollDelta = parentRect.top - elementRect.top;\n        let scrollPosition = this.scrollContainer.scrollTop - scrollDelta;\n\n        const dropDownHeight = this.scrollContainer.clientHeight;\n        scrollPosition -= dropDownHeight / 2;\n        scrollPosition += item.elementHeight / 2;\n\n        return Math.floor(scrollPosition);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    ngOnInit() {\n        this.toggleDirective.id = this.id;\n    }\n\n    ngAfterViewInit() {\n        if (this.virtDir) {\n            this.virtDir.igxForItemSize = 28;\n        }\n    }\n\n    /** Keydown Handler */\n    public onItemActionKey(key: DropDownActionKey, event?: Event) {\n        super.onItemActionKey(key, event);\n        this.close();\n    }\n\n    /**\n     * Virtual scroll implementation\n     * @hidden @internal\n     */\n    public navigateFirst() {\n        if (this.virtDir) {\n            this.navigateItem(0);\n        } else {\n            super.navigateFirst();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateLast() {\n        if (this.virtDir) {\n            this.navigateItem(this.virtDir.totalItemCount ? this.virtDir.totalItemCount - 1 : this.virtDir.igxForOf.length - 1);\n        } else {\n            super.navigateLast();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigateNext() {\n        if (this.virtDir) {\n            this.navigateItem(this._focusedItem ? this._focusedItem.index + 1 : 0);\n        } else {\n            super.navigateNext();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public navigatePrev() {\n        if (this.virtDir) {\n            this.navigateItem(this._focusedItem ? this._focusedItem.index - 1 : 0);\n        } else {\n            super.navigatePrev();\n        }\n    }\n\n    /**\n     * Handles the `onSelection` emit and the drop down toggle when selection changes\n     * @hidden\n     * @internal\n     * @param newSelection\n     * @param event\n     */\n    public selectItem(newSelection?: IgxDropDownItemBase, event?: Event) {\n        const oldSelection = this.selectedItem;\n        if (!newSelection) {\n            newSelection = this.focusedItem;\n        }\n        if (newSelection === null) {\n            return;\n        }\n        if (newSelection instanceof IgxDropDownItemBase && newSelection.isHeader) {\n            return;\n        }\n        if (this.virtDir) {\n            newSelection = {\n                value: newSelection.value,\n                index: newSelection.index\n            } as IgxDropDownItemBase;\n        }\n        const args: ISelectionEventArgs = { oldSelection, newSelection, cancel: false };\n        this.onSelection.emit(args);\n\n        if (!args.cancel) {\n            this.selection.set(this.id, new Set([newSelection]));\n            if (!this.virtDir) {\n                if (oldSelection) {\n                    oldSelection.selected = false;\n                }\n                if (newSelection) {\n                    newSelection.selected = true;\n                }\n            }\n            if (event) {\n                this.toggleDirective.close();\n            }\n        }\n    }\n}\n\n","import { Directive, Optional, Self, Input, HostListener, Inject } from '@angular/core';\nimport { IGX_DROPDOWN_BASE } from './drop-down.common';\nimport { IDropDownNavigationDirective } from './drop-down.common';\nimport { IgxDropDownBase } from './drop-down.base';\nimport { DropDownActionKey } from './drop-down.common';\n\n/**\n * Navigation Directive that handles keyboard events on its host and controls a targeted IgxDropDownBase component\n */\n@Directive({\n    selector: '[igxDropDownItemNavigation]'\n})\nexport class IgxDropDownItemNavigationDirective implements IDropDownNavigationDirective {\n\n    protected _target: IgxDropDownBase = null;\n\n    constructor(@Self() @Optional() @Inject(IGX_DROPDOWN_BASE) public dropdown: IgxDropDownBase) { }\n\n    /**\n     * Gets the target of the navigation directive;\n     *\n     * ```typescript\n     * // Get\n     * export class MyComponent {\n     *  ...\n     *  @ContentChild(IgxDropDownNavigationDirective)\n     *  navDirective: IgxDropDownNavigationDirective = null\n     *  ...\n     *  const navTarget: IgxDropDownBase = navDirective.navTarget\n     * }\n     * ```\n     */\n    get target(): IgxDropDownBase {\n        return this._target;\n    }\n\n    /**\n     * Sets the target of the navigation directive;\n     * If no valid target is passed, it falls back to the drop down context\n     *\n     * ```html\n     * <!-- Set -->\n     * <input [igxDropDownItemNavigation]=\"dropdown\" />\n     * ...\n     * <igx-drop-down #dropdown>\n     * ...\n     * </igx-drop-down>\n     * ```\n     */\n    @Input('igxDropDownItemNavigation')\n    set target(target: IgxDropDownBase) {\n        this._target = target ? target : this.dropdown;\n    }\n\n    /**\n     * Captures keydown events and calls the appropriate handlers on the target component\n     */\n    @HostListener('keydown', ['$event'])\n    handleKeyDown(event: KeyboardEvent) {\n        if (event) {\n            const key = event.key.toLowerCase();\n            if (!this.target.collapsed) { // If dropdown is opened\n                const navKeys = ['esc', 'escape', 'enter', 'space', 'spacebar', ' ',\n            'arrowup', 'up', 'arrowdown', 'down', 'home', 'end'];\n                if (navKeys.indexOf(key) === -1) { // If key has appropriate function in DD\n                    return;\n                }\n                event.preventDefault();\n                event.stopPropagation();\n            } else { // If dropdown is closed, do nothing\n                return;\n            }\n            switch (key) {\n                case 'esc':\n                case 'escape':\n                    this.target.onItemActionKey(DropDownActionKey.ESCAPE, event);\n                    break;\n                case 'enter':\n                    this.target.onItemActionKey(DropDownActionKey.ENTER, event);\n                    break;\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                    this.target.onItemActionKey(DropDownActionKey.SPACE, event);\n                    break;\n                case 'arrowup':\n                case 'up':\n                    this.onArrowUpKeyDown();\n                    break;\n                case 'arrowdown':\n                case 'down':\n                    this.onArrowDownKeyDown();\n                    break;\n                case 'home':\n                    this.onHomeKeyDown();\n                    break;\n                case 'end':\n                    this.onEndKeyDown();\n                    break;\n                default:\n                    return;\n            }\n        }\n    }\n\n    /**\n     * Navigates to previous item\n     */\n    onArrowDownKeyDown() {\n        this.target.navigateNext();\n    }\n\n    /**\n     * Navigates to previous item\n     */\n    onArrowUpKeyDown() {\n        this.target.navigatePrev();\n    }\n\n    /**\n     * Navigates to target's last item\n     */\n    onEndKeyDown() {\n        this.target.navigateLast();\n    }\n\n    /**\n     * Navigates to target's first item\n     */\n    onHomeKeyDown() {\n        this.target.navigateFirst();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { IgxDropDownComponent } from './drop-down.component';\nimport { IgxDropDownItemComponent } from './drop-down-item.component';\nimport { IgxDropDownItemNavigationDirective } from './drop-down-navigation.directive';\nimport { CommonModule } from '@angular/common';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxDropDownGroupComponent } from './drop-down-group.component';\n\nexport * from './drop-down.component';\nexport * from './drop-down-item.component';\nexport { ISelectionEventArgs, IDropDownNavigationDirective,  } from './drop-down.common';\nexport * from './drop-down-navigation.directive';\nexport * from './drop-down.base';\nexport * from './drop-down-item.base';\nexport * from './drop-down-group.component';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDropDownComponent, IgxDropDownItemComponent, IgxDropDownGroupComponent,\n        IgxDropDownItemNavigationDirective],\n    exports: [IgxDropDownComponent, IgxDropDownItemComponent, IgxDropDownGroupComponent,\n        IgxDropDownItemNavigationDirective],\n    imports: [CommonModule, IgxToggleModule],\n    providers: [IgxSelectionAPIService]\n})\nexport class IgxDropDownModule { }\n","import { Directive, ElementRef, HostBinding, Input, OnInit } from '@angular/core';\n\nenum IgxHintPosition {\n    START,\n    END\n}\n\n@Directive({\n    selector: 'igx-hint,[igxHint]'\n})\nexport class IgxHintDirective implements OnInit {\n    private _position: IgxHintPosition = IgxHintPosition.START;\n    /**\n     * Sets/gets whether the hint position is at the start.\n     * Default value is `false`.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * this.igxHint.isPositionStart = true;\n     * ```\n     * ```typescript\n     * let isHintPositionStart = this.igxHint.isPositionStart;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @HostBinding('class.igx-input-group__hint-item--start')\n    public isPositionStart = false;\n    /**\n     * Sets/gets whether the hint position is at the end.\n     * Default value is `false`.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * this.igxHint.isPositionEnd = true;\n     * ```\n     * ```typescript\n     * let isHintPositionEnd = this.igxHint.isPositionEnd;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @HostBinding('class.igx-input-group__hint-item--end')\n    public isPositionEnd = false;\n\n    constructor(private _element: ElementRef) {\n    }\n    /**\n     * Sets the position of the hint.\n     * ```html\n     * <igx-input-group>\n     *  <input igxInput type=\"text\"/>\n     *  <igx-hint #hint [position]=\"'start'\">IgxHint displayed at the start</igx-hint>\n     * </igx-input-group>\n     * ```\n     * @memberof IgxHintDirective\n     */\n    @Input('position')\n    set position(value: string) {\n        const position: IgxHintPosition = (IgxHintPosition as any)[value.toUpperCase()];\n        if (position !== undefined) {\n            this._position = position;\n            this._applyPosition(this._position);\n        }\n    }\n    /**\n     * Gets the position of the hint.\n     * ```typescript\n     * @ViewChild('hint', {read: IgxHintDirective})\n     * public igxHint: IgxHintDirective;\n     * let hintPosition =  this.igxHint.position;\n     * ```\n     * @memberof IgxHintDirective\n     */\n    get position() {\n        return this._position.toString();\n    }\n    /**\n     *@hidden\n     */\n    ngOnInit() {\n        this._applyPosition(this._position);\n    }\n\n    private _applyPosition(position: IgxHintPosition) {\n        this.isPositionStart = this.isPositionEnd = false;\n        switch (position) {\n            case IgxHintPosition.START:\n                this.isPositionStart = true;\n                break;\n            case IgxHintPosition.END:\n                this.isPositionEnd = true;\n                break;\n            default: break;\n        }\n    }\n}\n","/** @hidden */\nexport abstract class IgxInputGroupBase {\n    disabled: boolean;\n    isFocused: boolean;\n    isRequired: boolean;\n    hasPlaceholder: boolean;\n}\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Self\n} from '@angular/core';\nimport { AbstractControl, FormControlName, NgControl, NgModel } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { IgxInputGroupBase } from '../../input-group/input-group.common';\n\nconst nativeValidationAttributes = ['required', 'pattern', 'minlength', 'maxlength', 'min', 'max', 'step'];\n\nexport enum IgxInputState {\n    INITIAL,\n    VALID,\n    INVALID\n}\n\n@Directive({\n    selector: '[igxInput]',\n    exportAs: 'igxInput'\n})\nexport class IgxInputDirective implements AfterViewInit, OnDestroy {\n    private _valid = IgxInputState.INITIAL;\n    private _statusChanges$: Subscription;\n\n    constructor(\n        public inputGroup: IgxInputGroupBase,\n        @Optional() @Self() @Inject(NgModel) protected ngModel: NgModel,\n        @Optional() @Self() @Inject(FormControlName) protected formControl: FormControlName,\n        protected element: ElementRef,\n        protected cdr: ChangeDetectorRef) { }\n\n    private get ngControl(): NgControl {\n        return this.ngModel ? this.ngModel : this.formControl;\n    }\n    /**\n     * Sets the `value` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [value]=\"'IgxInput Value'\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input('value')\n    set value(value: any) {\n        this.nativeElement.value = value;\n        this.checkValidity();\n    }\n    /**\n     * Gets the `value` propery.\n     * ```typescript\n     * @ViewChild('igxInput', {read: IgxInputDirective})\n     *  public igxInput: IgxInputDirective;\n     * let inputValue = this.igxInput.value;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    get value() {\n        return this.nativeElement.value;\n    }\n    /**\n     * Sets the `disabled` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [disabled]=\"true\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input()\n    public set disabled(value: boolean) {\n        this.nativeElement.disabled = value;\n        this.inputGroup.disabled = value;\n    }\n    /**\n     * Gets the `disabled` property\n     * ```typescript\n     * @ViewChild('igxInput', {read: IgxInputDirective})\n     *  public igxInput: IgxInputDirective;\n     * let isDisabled = this.igxInput.disabled;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get disabled() {\n        return this.nativeElement.hasAttribute('disabled');\n    }\n\n    /**\n     * Sets the `required` property.\n     * ```html\n     * <input-group>\n     *  <input igxInput #igxInput [required]=\"true\">\n     * </input-group>\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @Input()\n    public set required(value: boolean) {\n        if (typeof value === 'boolean') {\n            this.nativeElement.required = this.inputGroup.isRequired = value;\n\n            if (value && !this.nativeElement.checkValidity()) {\n                this._valid = IgxInputState.INVALID;\n            } else {\n                this._valid = IgxInputState.INITIAL;\n            }\n        }\n    }\n\n    /**\n     * Gets whether the igxInput is required.\n     * ```typescript\n     * let isRequired = this.igxInput.required;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get required() {\n        return this.nativeElement.hasAttribute('required');\n    }\n\n    /**\n     * Sets/gets whether the `\"igx-input-group__input\"` class is added to the host element.\n     * Default value is `false`.\n     * ```typescript\n     * this.igxInput.isInput = true;\n     * ```\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isInput;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @HostBinding('class.igx-input-group__input')\n    public isInput = false;\n    /**\n     * Sets/gets whether the `\"class.igx-input-group__textarea\"` class is added to the host element.\n     * Default value is `false`.\n     * ```typescript\n     * this.igxInput.isTextArea = true;\n     * ```\n     * ```typescript\n     * let isCLassAdded = this.igxInput.isTextArea;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    @HostBinding('class.igx-input-group__textarea')\n    public isTextArea = false;\n    /**\n     *@hidden\n     */\n    @HostListener('focus', ['$event'])\n    public onFocus(event) {\n        this.inputGroup.isFocused = true;\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('blur', ['$event'])\n    public onBlur(event) {\n        this.inputGroup.isFocused = false;\n        this._valid = IgxInputState.INITIAL;\n        if (this.ngControl) {\n            if (!this.ngControl.valid) {\n                this._valid = IgxInputState.INVALID;\n            }\n        } else if (this._hasValidators() && !this.nativeElement.checkValidity()) {\n            this._valid = IgxInputState.INVALID;\n        }\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('input')\n    public onInput() {\n        this.checkValidity();\n    }\n    /**\n     *@hidden\n     */\n    ngAfterViewInit() {\n        this.inputGroup.hasPlaceholder = this.nativeElement.hasAttribute('placeholder');\n        this.inputGroup.disabled = this.inputGroup.disabled || this.nativeElement.hasAttribute('disabled');\n        this.inputGroup.isRequired = this.nativeElement.hasAttribute('required');\n\n        // Make sure we do not invalidate the input on init\n        if (!this.ngControl) {\n            this._valid = IgxInputState.INITIAL;\n        }\n        // Also check the control's validators for required\n        if (!this.inputGroup.isRequired && this.ngControl && this.ngControl.control.validator) {\n            const validation = this.ngControl.control.validator({} as AbstractControl);\n            this.inputGroup.isRequired = validation && validation.required;\n        }\n\n\n        const elTag = this.nativeElement.tagName.toLowerCase();\n        if (elTag === 'textarea') {\n            this.isTextArea = true;\n        } else {\n            this.isInput = true;\n        }\n\n        if (this.ngControl) {\n            this._statusChanges$ = this.ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n        }\n\n        this.cdr.detectChanges();\n    }\n    /**\n     *@hidden\n     */\n    ngOnDestroy() {\n        if (this._statusChanges$) {\n            this._statusChanges$.unsubscribe();\n        }\n    }\n    /**\n     * Sets a focus on the igxInput.\n     * ```typescript\n     * this.igxInput.focus();\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public focus() {\n        this.nativeElement.focus();\n    }\n    /**\n     * Gets the `nativeElement` of the igxInput.\n     * ```typescript\n     * let igxInputNativeElement = this.igxInput.nativeElement;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    protected onStatusChanged() {\n        if (this.ngControl.control.validator || this.ngControl.control.asyncValidator) {\n            if (this.ngControl.control.touched || this.ngControl.control.dirty) {\n                if (this.inputGroup.isFocused) {\n                    // the user is still typing in the control\n                    this._valid = this.ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n                } else {\n                    // the user had touched the control previosly but now the value is changing due to changes in the form\n                    this._valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n                }\n            } else if (this._valid !== IgxInputState.INITIAL) {\n                this._valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n            } else if (this._valid === IgxInputState.INITIAL && this.ngControl.value !== undefined && this.ngControl.invalid) {\n                this._valid = IgxInputState.INVALID;\n            }\n        }\n    }\n    /**\n     * Gets whether the igxInput has a placeholder.\n     * ```typescript\n     * let hasPlaceholder = this.igxInput.hasPlaceholder;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get hasPlaceholder() {\n        return this.nativeElement.hasAttribute('placeholder');\n    }\n    /**\n     * Gets the placeholder element of the igxInput.\n     * ```typescript\n     * let igxInputPlaceholder = this.igxInput.placeholder;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get placeholder() {\n        return this.nativeElement.placeholder;\n    }\n\n    private _hasValidators(): boolean {\n        for (const nativeValidationAttribute of nativeValidationAttributes) {\n            if (this.nativeElement.hasAttribute(nativeValidationAttribute)) {\n                return true;\n            }\n        }\n\n        return !!this.ngControl && (!!this.ngControl.control.validator || !!this.ngControl.control.asyncValidator);\n    }\n    /**\n     * Gets whether the igxInput is focused.\n     * ```typescript\n     * let isFocused = this.igxInput.focused;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get focused() {\n        return this.inputGroup.isFocused;\n    }\n    /**\n     * Gets the state of the igxInput.\n     * ```typescript\n     * let igxInputState = this.igxInput.valid;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get valid(): IgxInputState {\n        return this._valid;\n    }\n\n    /**\n     * Gets whether the igxInput is valid.\n     * ```typescript\n     * let valid = this.igxInput.isValid;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public get isValid(): boolean {\n        return this.valid !== IgxInputState.INVALID;\n    }\n\n    /**\n     * Sets the state of the igxInput.\n     * ```typescript\n     * this.igxInput.valid = IgxInputState.INVALID;\n     * ```\n     * @memberof IgxInputDirective\n     */\n    public set valid(value: IgxInputState) {\n        this._valid = value;\n    }\n\n    private checkValidity() {\n        if (!this.ngControl && this._hasValidators()) {\n            this._valid = this.nativeElement.checkValidity() ? IgxInputState.VALID : IgxInputState.INVALID;\n        }\n    }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\n\nlet NEXT_ID = 0;\n\n@Directive({\n    selector: '[igxLabel]'\n})\nexport class IgxLabelDirective {\n    @HostBinding('class.igx-input-group__label')\n    public defaultClass = true;\n\n/**\n * @hidden\n */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-label-${NEXT_ID++}`;\n}\n","import { NgModule, Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-prefix,[igxPrefix]'\n})\nexport class IgxPrefixDirective { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxPrefixDirective],\n    exports: [IgxPrefixDirective]\n})\nexport class IgxPrefixModule { }\n","import { NgModule, Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-suffix,[igxSuffix]'\n})\nexport class IgxSuffixDirective { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSuffixDirective],\n    exports: [IgxSuffixDirective]\n})\nexport class IgxSuffixModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    QueryList,\n    Inject,\n    Optional\n} from '@angular/core';\nimport { IgxHintDirective } from '../directives/hint/hint.directive';\nimport { IgxInputDirective, IgxInputState } from '../directives/input/input.directive';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\nimport { IgxPrefixDirective, IgxPrefixModule} from '../directives/prefix/prefix.directive';\nimport { IgxSuffixDirective, IgxSuffixModule } from '../directives/suffix/suffix.directive';\nimport { DisplayDensity, IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport { IgxInputGroupBase } from './input-group.common';\n\nlet NEXT_ID = 0;\n\nenum IgxInputGroupType {\n    LINE,\n    BOX,\n    BORDER,\n    SEARCH\n}\n\n@Component({\n    selector: 'igx-input-group',\n    templateUrl: 'input-group.component.html',\n    providers: [{ provide: IgxInputGroupBase, useExisting: IgxInputGroupComponent }]\n})\nexport class IgxInputGroupComponent extends DisplayDensityBase implements IgxInputGroupBase {\n    private _type = IgxInputGroupType.LINE;\n    private _filled = false;\n    private _supressInputAutofocus = false;\n\n    /**\n     * An ElementRef property of the `IgxInputGroupComponent`.\n     */\n    public element: ElementRef;\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-input-group [id]=\"'igx-input-group-55'\"></igx-input-group>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-input-group-${NEXT_ID++}`;\n\n    /**\n     * Property that enables/disables the autogenerated class of the `IgxInputGroupComponent`.\n     * By default applied the class is applied.\n     *```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *this.inputGroup.defaultClass = false;\n     *```\n     *}\n     */\n    @HostBinding('class.igx-input-group')\n    public defaultClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--placeholder')\n    public hasPlaceholder = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--required')\n    public isRequired = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--focused')\n    public isFocused = false;\n\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--box')\n    public isBox = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--border')\n    public isBorder = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--search')\n    public isSearch = false;\n\n    /**\n     * An @Input property that disables the `IgxInputGroupComponent`.\n     * ```html\n     * <igx-input-group [disabled]=\"'true'\"></igx-input-group>\n     * ```\n     */\n    @HostBinding('class.igx-input-group--disabled')\n    @Input()\n    public disabled = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--valid')\n    public get validClass(): boolean {\n        return this.input.valid === IgxInputState.VALID;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--invalid')\n    public get invalidClass(): boolean {\n        return this.input.valid === IgxInputState.INVALID;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-input-group--warning')\n    public hasWarning = false;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxHintDirective, { read: IgxHintDirective })\n    protected hints: QueryList<IgxHintDirective>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxInputDirective, { read: IgxInputDirective, static: true })\n    protected input: IgxInputDirective;\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (!this._supressInputAutofocus) {\n            this.input.focus();\n        }\n    }\n\n    /**\n     * An @Input property that sets how the input will be styled.\n     * The allowed values are `line`, `box`, `border` and `search`. The default is `line`.\n     * ```html\n     *<igx-input-group [type]=\"'search'\">\n     * ```\n     */\n    @Input('type')\n    set type(value: string) {\n        const type: IgxInputGroupType = (IgxInputGroupType as any)[value.toUpperCase()];\n        if (type !== undefined) {\n            this.isBox = this.isBorder = this.isSearch = false;\n            switch (type) {\n                case IgxInputGroupType.BOX:\n                    this.isBox = true;\n                    break;\n                case IgxInputGroupType.BORDER:\n                    this.isBorder = true;\n                    break;\n                case IgxInputGroupType.SEARCH:\n                    this.isSearch = true;\n                    break;\n                default: break;\n            }\n\n            this._type = type;\n        }\n    }\n\n    /**\n     * Returns whether the input element of the input group will be automatically focused on click.\n     * ```typescript\n     * let supressInputAutofocus = this.inputGroup.supressInputAutofocus;\n     * ```\n     */\n    @Input()\n    public get supressInputAutofocus(): boolean {\n        return this._supressInputAutofocus;\n    }\n\n    /**\n     * Sets whether the input element of the input group will be automatically focused on click.\n     * ```html\n     * <igx-input-group [supressInputAutofocus]=\"true\"></igx-input-group>\n     * ```\n     */\n    public set supressInputAutofocus(value: boolean) {\n        this._supressInputAutofocus = value;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--filled')\n    get isFilled() {\n        return this._filled || (this.input && this.input.value);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--cosy')\n    get isDisplayDensityCosy() {\n        return this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--comfortable')\n    get isDisplayDensityComfortable() {\n        return this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-input-group--compact')\n    get isDisplayDensityCompact() {\n        return this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * Returns the type of the `IgxInputGroupComponent`. How the input is styled.\n     * Values are `line` - 0, `box` - 1, `border` - 2  and `search` - 3. The default is `line`.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputType = this.inputGroup.type;\n     *}\n     * ```\n     */\n    get type() {\n        return this._type.toString();\n    }\n\n    constructor(private _element: ElementRef,\n        @Optional() @Inject(DisplayDensityToken) private _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n        this.element = _element;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` has hints.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputHints = this.inputGroup.hasHints;\n     *}\n     * ```\n     */\n    get hasHints() {\n        return this.hints.length > 0;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` has border.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let inputBroder = this.inputGroup.hasBorder;\n     *}\n     * ```\n     */\n    get hasBorder() {\n        return this._type === IgxInputGroupType.LINE ||\n            this._type === IgxInputGroupType.BOX;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is line.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeLine = this.inputGroup.isTypeLine;\n     *}\n     * ```\n     */\n    public get isTypeLine(): boolean {\n        return  this._type === IgxInputGroupType.LINE;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is box.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeBox = this.inputGroup.isTypeBox;\n     *}\n     *```\n     */\n    get isTypeBox() {\n        return this._type === IgxInputGroupType.BOX;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is border.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeBorder = this.inputGroup.isTypeBorder;\n     *}\n     * ```\n     */\n    get isTypeBorder() {\n        return this._type === IgxInputGroupType.BORDER;\n    }\n\n    /**\n     * Returns whether the `IgxInputGroupComponent` type is search.\n     * ```typescript\n     *@ViewChild(\"MyInputGroup1\")\n     *public inputGroup: IgxInputGroupComponent;\n     *ngAfterViewInit(){\n     *    let isTypeSearch = this.inputGroup.isTypeSearch;\n     *}\n     * ```\n     */\n    get isTypeSearch() {\n        return  this._type === IgxInputGroupType.SEARCH;\n    }\n\n    get filled() {\n        return this._filled;\n    }\n\n    set filled(val) {\n        this._filled = val;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxInputGroupComponent, IgxHintDirective, IgxInputDirective, IgxLabelDirective],\n    exports: [IgxInputGroupComponent,  IgxHintDirective, IgxInputDirective, IgxLabelDirective, IgxPrefixDirective, IgxSuffixDirective],\n    imports: [CommonModule, IgxPrefixModule, IgxSuffixModule]\n})\nexport class IgxInputGroupModule { }\n","import {\n    Directive, Input, Self, Optional, Inject, HostBinding, Output, EventEmitter,\n    NgModule, ElementRef, HostListener, ChangeDetectorRef, OnDestroy } from '@angular/core';\nimport { NgModel, FormControlName } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { first, takeUntil } from 'rxjs/operators';\nimport { CancelableEventArgs } from '../../core/utils';\nimport { OverlaySettings, AbsoluteScrollStrategy, IScrollStrategy, IPositionStrategy, AutoPositionStrategy } from '../../services/index';\nimport { IgxDropDownModule, IgxDropDownComponent, ISelectionEventArgs, IgxDropDownItemNavigationDirective } from '../../drop-down/index';\nimport { IgxInputGroupComponent } from '../../input-group/index';\nimport { IgxOverlayOutletDirective } from '../toggle/toggle.directive';\n\n/**\n * Interface that encapsulates onItemSelection event arguments - new value and cancel selection.\n * @export\n */\nexport interface AutocompleteItemSelectionEventArgs extends CancelableEventArgs {\n    /**\n     * New value selected from the drop down\n     */\n    value: string;\n}\n\nexport interface AutocompleteOverlaySettings {\n    /** Position strategy to use with this settings */\n    positionStrategy?: IPositionStrategy;\n    /** Scroll strategy to use with this settings */\n    scrollStrategy?: IScrollStrategy;\n    /** Set the outlet container to attach the overlay to */\n    outlet?: IgxOverlayOutletDirective | ElementRef;\n}\n\n/**\n * **Ignite UI for Angular Autocomplete** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/autocomplete.html)\n *\n * The igxAutocomplete directive provides a way to enhance a text input\n * by showing a drop down of suggested options, provided by the developer.\n *\n * Example:\n * ```html\n * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" />\n * <igx-drop-down #townsPanel>\n *     <igx-drop-down-item *ngFor=\"let town of towns | startsWith:townSelected\" [value]=\"town\">\n *         {{town}}\n *     </igx-drop-down-item>\n * </igx-drop-down>\n * ```\n */\n@Directive({\n    selector: '[igxAutocomplete]'\n})\nexport class IgxAutocompleteDirective extends IgxDropDownItemNavigationDirective implements OnDestroy {\n\n    constructor(@Self() @Optional() @Inject(NgModel) protected ngModel: NgModel,\n                @Self() @Optional() @Inject(FormControlName) protected formControl: FormControlName,\n                @Optional() protected group: IgxInputGroupComponent,\n                protected elementRef: ElementRef,\n                protected cdr: ChangeDetectorRef) {\n        super(null);\n    }\n\n    private defaultSettings: OverlaySettings = {\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new AutoPositionStrategy({ target: this.parentElement }),\n        excludePositionTarget: true\n    };\n\n    protected id: string;\n    protected dropDownOpened$ = new Subject<boolean>();\n    protected get model() {\n        return this.ngModel || this.formControl;\n    }\n\n    /** @hidden @internal */\n    get nativeElement(): HTMLInputElement {\n        return this.elementRef.nativeElement;\n    }\n\n    /** @hidden @internal */\n    get parentElement(): HTMLElement {\n        return this.group ? this.group.element.nativeElement : this.nativeElement;\n    }\n\n    private get settings(): OverlaySettings {\n        const settings = Object.assign({}, this.defaultSettings, this.autocompleteSettings);\n        if (!settings.positionStrategy.settings.target) {\n            const positionStrategyClone: IPositionStrategy = settings.positionStrategy.clone();\n            positionStrategyClone.settings.target = this.parentElement;\n            settings.positionStrategy = positionStrategyClone;\n        }\n        return settings;\n    }\n\n    /**\n     * Sets the target of the autocomplete directive\n     *\n     * ```html\n     * <!-- Set -->\n     * <input [igxAutocomplete]=\"dropdown\" />\n     * ...\n     * <igx-drop-down #dropdown>\n     * ...\n     * </igx-drop-down>\n     * ```\n     */\n    @Input('igxAutocomplete')\n    public target: IgxDropDownComponent;\n\n    /**\n     * Enables/disables autocomplete component\n     *\n     * ```typescript\n     * // get\n     * let disabled = this.autocomplete.disabled;\n     * ```\n     * ```html\n     * <!--set-->\n     * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" [igxAutocompleteDisabled]=\"disabled\"/>\n     * ```\n     * ```typescript\n     * // set\n     * public disabled = true;\n     * ```\n     */\n    @Input('igxAutocompleteDisabled')\n    public disabled = false;\n\n    /**\n     * Provide overlay settings for the autocomplete drop down\n     *\n     * ```typescript\n     * // get\n     * let settings = this.autocomplete.autocompleteSettings;\n     * ```\n     * ```html\n     * <!--set-->\n     * <input type=\"text\" [igxAutocomplete]=\"townsPanel\" [igxAutocompleteSettings]=\"settings\"/>\n     * ```\n     * ```typescript\n     * // set\n     * this.settings = {\n     *  positionStrategy: new ConnectedPositioningStrategy({\n     *      closeAnimation: null,\n     *      openAnimation: null\n     *  })\n     * };\n     * ```\n     */\n    @Input('igxAutocompleteSettings')\n    autocompleteSettings: AutocompleteOverlaySettings;\n\n    /**\n     * Emitted after item from the drop down is selected\n     *\n     * ```html\n     * <input igxInput [igxAutocomplete]=\"townsPanel\" (onItemSelected)='itemSelected($event)' />\n     * ```\n     */\n    @Output()\n    onItemSelected = new EventEmitter<AutocompleteItemSelectionEventArgs>();\n\n    /** @hidden @internal */\n    @HostBinding('attr.autocomplete')\n    public autofill = 'off';\n\n    /** @hidden  @internal */\n    @HostBinding('attr.role')\n    public role = 'combobox';\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-expanded')\n    public get ariaExpanded() {\n        return !this.collapsed;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-haspopup')\n    public get hasPopUp() {\n        return 'listbox';\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-owns')\n    public get ariaOwns() {\n        return this.target.listId;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-activedescendant')\n    public get ariaActiveDescendant() {\n        return !this.target.collapsed && this.target.focusedItem ? this.target.focusedItem.id : null;\n    }\n\n    /** @hidden  @internal */\n    @HostBinding('attr.aria-autocomplete')\n    public get ariaAutocomplete() {\n        return 'list';\n    }\n\n    /** @hidden  @internal */\n    @HostListener('input', ['$event'])\n    onInput() {\n        this.open();\n    }\n\n    /** @hidden  @internal */\n    @HostListener('keydown.ArrowDown', ['$event'])\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    @HostListener('keydown.ArrowUp', ['$event'])\n    @HostListener('keydown.Alt.ArrowUp', ['$event'])\n    onArrowDown(event: Event) {\n        event.preventDefault();\n        this.open();\n    }\n\n    /** @hidden  @internal */\n    @HostListener('keydown.Tab', ['$event'])\n    @HostListener('keydown.Shift.Tab', [`$event`])\n    onTab() {\n        this.close();\n    }\n\n    /** @hidden  @internal */\n    handleKeyDown(event) {\n        if (!this.collapsed) {\n            switch (event.key.toLowerCase()) {\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                case 'home':\n                case 'end':\n                    return;\n                default:\n                    super.handleKeyDown(event);\n            }\n        }\n    }\n\n    /** @hidden  @internal */\n    onArrowDownKeyDown() {\n        super.onArrowDownKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onArrowUpKeyDown() {\n        super.onArrowUpKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onEndKeyDown() {\n        super.onEndKeyDown();\n    }\n\n    /** @hidden  @internal */\n    onHomeKeyDown() {\n        super.onHomeKeyDown();\n    }\n\n    /**\n     * Closes autocomplete drop down\n     */\n    public close() {\n        if (this.collapsed) {\n            return;\n        }\n        this.target.close();\n        this.dropDownOpened$.next();\n    }\n\n    /**\n     * Opens autocomplete drop down\n     */\n    public open() {\n        if (this.disabled || !this.collapsed) {\n            return;\n        }\n        this.target.width = this.parentElement.clientWidth + 'px';\n        this.target.open(this.settings);\n        this.target.onSelection.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.select);\n        this.target.onOpened.pipe(first()).subscribe(this.highlightFirstItem);\n        this.target.children.changes.pipe(takeUntil(this.dropDownOpened$)).subscribe(this.highlightFirstItem);\n    }\n\n    private get collapsed(): boolean {\n        return this.target ? this.target.collapsed : true;\n    }\n\n    private select = (value: ISelectionEventArgs) => {\n        if (!value.newSelection) {\n            return;\n        }\n        value.cancel = true; // Disable selection in the drop down, because in autocomplete we do not save selection.\n        const newValue = value.newSelection.value;\n        const args: AutocompleteItemSelectionEventArgs = { value: newValue, cancel: false };\n        this.onItemSelected.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        this.close();\n        this.nativeElement.focus();\n\n        // Update model after the input is re-focused, in order to have proper valid styling.\n        // Otherwise when item is selected using mouse (and input is blurred), then valid style will be removed.\n        this.model ? this.model.control.setValue(newValue) : this.nativeElement.value = newValue;\n    }\n\n    private highlightFirstItem = () => {\n        if (this.target.focusedItem) {\n            this.target.focusedItem.focused = false;\n            this.target.focusedItem = null;\n        }\n        this.target.navigateFirst();\n        this.cdr.detectChanges();\n    }\n\n    /** @hidden */\n    public ngOnDestroy() {\n        this.dropDownOpened$.complete();\n    }\n}\n\n/** @hidden */\n@NgModule({\n    imports: [IgxDropDownModule, CommonModule],\n    declarations: [IgxAutocompleteDirective],\n    exports: [IgxAutocompleteDirective]\n})\nexport class IgxAutocompleteModule { }\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    NgModule,\n    Renderer2,\n    HostListener,\n    Optional,\n    Inject\n} from '@angular/core';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions, DisplayDensity } from '../../core/density';\n\n@Directive({\n    selector: '[igxButton]'\n})\nexport class IgxButtonDirective extends DisplayDensityBase {\n    /**\n     *@hidden\n     */\n    private _type = 'flat';\n    /**\n     *@hidden\n     */\n    private _cssClass = 'igx-button';\n    /**\n     *@hidden\n     */\n    private _color: string;\n    /**\n     *@hidden\n     */\n    private _label: string;\n    /**\n     *@hidden\n     */\n    private _backgroundColor: string;\n\n    constructor(public element: ElementRef, private _renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n        }\n\n    /**\n     * Returns the underlying DOM element\n     */\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Called when the button is clicked\n     */\n    @Output()\n    public buttonClick = new EventEmitter<any>();\n\n    /**\n     * Sets/gets the `role` attribute.\n     * ```typescript\n     * this.button.role = 'navbutton';\n     * ```\n     * ```typescript\n     * let buttonRole =  this.button.role;\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @HostBinding('attr.role') public role = 'button';\n    /**\n     * Sets the type of the button.\n     * ```html\n     * <button  igxButton= \"icon\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButton') set type(value: string) {\n        this._type = value || this._type;\n        this._renderer.addClass(this.nativeElement, `${this._cssClass}--${this._type}`);\n    }\n    /**\n     * Sets the button text color.\n     * ```html\n     * <button igxButton=\"gradient\" igxButtonColor=\"blue\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButtonColor') set color(value: string) {\n        this._color = value || this.nativeElement.style.color;\n        this._renderer.setStyle(this.nativeElement, 'color', this._color);\n    }\n    /**\n     * Sets the background color of the button.\n     * ```html\n     * <button igxButton=\"raised\" igxButtonBackground=\"red\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxButtonBackground') set background(value: string) {\n        this._backgroundColor = value || this._backgroundColor;\n        this._renderer.setStyle(this.nativeElement, 'background', this._backgroundColor);\n    }\n    /**\n     * Sets the `aria-label` attribute.\n     * ```html\n     * <button igxButton= \"flat\" igxLabel=\"Label\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input('igxLabel') set label(value: string) {\n        this._label = value || this._label;\n        this._renderer.setAttribute(this.nativeElement, `aria-label`, this._label);\n    }\n    /**\n     * Enables/disables the button.\n     *  ```html\n     * <button igxButton= \"fab\" [disabled]=\"true\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input() set disabled(val) {\n        val = !!val;\n        if (val) {\n            this._renderer.addClass(this.nativeElement, `${this._cssClass}--disabled`);\n        } else {\n            this._renderer.removeClass(this.nativeElement, `${this._cssClass}--disabled`);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--cosy')\n    public get cssClassCosy(): boolean {\n        return (this._type === 'flat' || this._type === 'raised' || this._type === 'outlined') &&\n            this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--compact')\n    public get cssClassCompact(): boolean {\n        return (this._type === 'flat' || this._type === 'raised' || this._type === 'outlined') &&\n            this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--fab-cosy')\n    public get cssClassCosyFab(): boolean {\n        return this._type === 'fab' && this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-button--fab-compact')\n    public get cssClassCompactFab(): boolean {\n        return this._type === 'fab' && this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * Gets or sets whether the button is selected.\n     * Mainly used in the IgxButtonGroup component and it will have no effect if set separately.\n     * ```html\n     * <button igxButton=\"flat\" [selected]=\"button.selected\"></button>\n     * ```\n     * @memberof IgxButtonDirective\n     */\n    @Input() public selected = false;\n\n    /**\n     *@hidden\n     */\n    @HostListener('click',  ['$event'])\n    public onClick(ev) {\n        this.buttonClick.emit(ev);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxButtonDirective],\n    exports: [IgxButtonDirective]\n})\nexport class IgxButtonModule { }\n","import { Directive, HostBinding, NgModule, Input } from '@angular/core';\n\nexport enum IgxDividerType {\n    DEFAULT = 'default',\n    DASHED = 'dashed'\n}\n\nlet NEXT_ID = 0;\n\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-divider'\n})\nexport class IgxDividerDirective {\n    /**\n     * Sets/gets the `id` of the divider.\n     * If not set, `id` will have value `\"igx-divider-0\"`;\n     * ```html\n     * <igx-divider id=\"my-divider\"></igx-divider>\n     * ```\n     * ```typescript\n     * let dividerId =  this.divider.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-divider-${NEXT_ID++}`;\n\n\n    /**\n     * An @Input property that sets the value of the `inset` attribute.\n     * If not provided it will be set to `'0'`.\n     * ```html\n     * <igx-divider inset=\"16px\"></igx-divider>\n     * ```\n     */\n    @Input('inset')\n    private _inset = '0';\n\n    /**\n     * An @Input property that sets the value of `role` attribute.\n     * If not the default value of `separator` will be used.\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'separator';\n\n    /**\n     * Sets the type of the divider. The default value\n     * is `default`. The divider can also be `dashed`;\n     * ```html\n     * <igx-divider type=\"dashed\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider')\n    @Input()\n    public type: IgxDividerType | string = IgxDividerType.DEFAULT;\n\n    @HostBinding('class.igx-divider--dashed')\n    get isDashed() {\n        return this.type === IgxDividerType.DASHED;\n    }\n\n    /**\n     * An @Input that sets the `middle` attribute of the divider.\n     * If set to `true` and an `inset` value has been provided,\n     * the divider will start shrinking from both ends.\n     * ```html\n     * <igx-divider [middle]=\"true\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider--inset')\n    @Input()\n    public middle = false;\n\n    /**\n     * A getter that returns `true` if the type of the divider is `default`;\n     * ```typescript\n     * const isDefault = this.divider.isDefault;\n     * ```\n     */\n    get isDefault() {\n        return this.type === IgxDividerType.DEFAULT;\n    }\n\n    /**\n     * An @Input that sets the vertical attribute of the divider.\n     * ```html\n     * <igx-divider [vertical]=\"true\"></igx-divider>\n     * ```\n     */\n    @HostBinding('class.igx-divider--vertical')\n    @Input()\n    public vertical = false;\n\n    /**\n     * Sets the inset of the divider from the side(s).\n     * If the divider attribute `middle` is set to `true`,\n     * it will inset the divider on both sides.\n     * ```typescript\n     * this.divider.inset = '32px';\n     * ```\n     */\n    @HostBinding('style.margin')\n    set inset(value: string) {\n        this._inset = value;\n    }\n\n    /**\n     * Gets the current divider inset in terms of\n     * margin representation as applied to the divider.\n     * ```typescript\n     * const inset = this.divider.inset;\n     * ```\n     */\n    get inset() {\n        const baseMargin = '0';\n\n        if (this.middle) {\n            if (this.vertical) {\n                return `${this._inset} ${baseMargin}`;\n            }\n            return `${baseMargin} ${this._inset}`;\n        } else {\n            if (this.vertical) {\n                return `${this._inset} ${baseMargin} 0 ${baseMargin}`;\n            }\n            return `${baseMargin} 0 ${baseMargin} ${this._inset}`;\n        }\n    }\n}\n\n@NgModule({\n    declarations: [IgxDividerDirective],\n    exports: [IgxDividerDirective]\n})\nexport class IgxDividerModule { }\n","import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    ChangeDetectorRef\n} from '@angular/core';\nimport { animationFrameScheduler, fromEvent, interval, Subject } from 'rxjs';\nimport { takeUntil, throttle } from 'rxjs/operators';\n\nexport enum RestrictDrag {\n    VERTICALLY,\n    HORIZONTALLY,\n    NONE\n}\n\nexport interface IgxDragCustomEventDetails {\n    startX: number;\n    startY: number;\n    pageX: number;\n    pageY: number;\n    owner: IgxDragDirective;\n    originalEvent: any;\n}\n\nexport interface IgxDropEnterEventArgs {\n        /**\n     * Reference to the original event that caused the draggable element to enter the igxDrop element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: any;\n    /** The owner igxDrop directive that triggered this event. */\n    owner: IgxDropDirective;\n    /** The igxDrag directive instanced on an element that entered the area of the igxDrop element */\n    drag: IgxDragDirective;\n    /** The data contained for the draggable element in igxDrag directive. */\n    dragData: any;\n    /** The initial position of the pointer on X axis when the dragged element began moving */\n    startX: number;\n    /** The initial position of the pointer on Y axis when the dragged element began moving */\n    startY: number;\n    /**\n     * The current position of the pointer on X axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageX: number;\n    /**\n     * The current position of the pointer on Y axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageY: number;\n    /**\n     * The current position of the pointer on X axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetX: number;\n    /**\n     * The current position of the pointer on Y axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetY: number;\n}\n\nexport interface IgxDropLeaveEventArgs {\n    /**\n     * Reference to the original event that caused the draggable element to enter the igxDrop element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: any;\n    /** The owner igxDrop directive that triggered this event. */\n    owner: IgxDropDirective;\n    /** The igxDrag directive instanced on an element that entered the area of the igxDrop element */\n    drag: IgxDragDirective;\n    /** The data contained for the draggable element in igxDrag directive. */\n    dragData: any;\n    /** The initial position of the pointer on X axis when the dragged element began moving */\n    startX: number;\n    /** The initial position of the pointer on Y axis when the dragged element began moving */\n    startY: number;\n    /**\n     * The current position of the pointer on X axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageX: number;\n        /**\n     * The current position of the pointer on Y axis when the event was triggered.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    pageY: number;\n    /**\n     * The current position of the pointer on X axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetX: number;\n    /**\n     * The current position of the pointer on Y axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetY: number;\n}\n\nexport interface IgxDropEventArgs {\n    /**\n     * Reference to the original event that caused the draggable element to enter the igxDrop element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: any;\n    /** The owner igxDrop directive that triggered this event. */\n    owner: IgxDropDirective;\n    /** The igxDrag directive instanced on an element that entered the area of the igxDrop element */\n    drag: IgxDragDirective;\n    /** The data contained for the draggable element in igxDrag directive. */\n    dragData: any;\n    /**\n     * The current position of the pointer on X axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetX: number;\n    /**\n     * The current position of the pointer on Y axis relative to the container that initializes the igxDrop.\n     * Note: The browser might trigger the event with some delay and pointer would be already inside the igxDrop.\n     */\n    offsetY: number;\n    /**\n     * Whether the default drop behavior of the igxDrop directive should be canceled.\n     * Note: If you implement custom behavior and you use `animateOnRelease` for the igxDrag make sure to call 'event.drag.dropFinished();'\n     * to notify the igxDrag directive that it has been dropped so it animates properly.\n     */\n    cancel: boolean;\n}\n\nexport interface IDragBaseEventArgs {\n    /**\n     * Reference to the original event that caused the interaction with the element.\n     * Can be PointerEvent, TouchEvent or MouseEvent.\n     */\n    originalEvent: PointerEvent | MouseEvent | TouchEvent;\n    /** The owner igxDrag directive that triggered this event. */\n    owner: IgxDragDirective;\n}\nexport interface IDragStartEventArgs extends IDragBaseEventArgs {\n    /** Set if the the dragging should be canceled. */\n    cancel: boolean;\n}\n\n@Directive({\n    selector: '[igxDrag]'\n})\nexport class IgxDragDirective implements OnInit, OnDestroy {\n\n    /**\n     * - Save data inside the `igxDrag` directive. This can be set when instancing `igxDrag` on an element.\n     * ```html\n     * <div [igxDrag]=\"{ source: myElement }\"></div>\n     * ```\n     */\n    @Input('igxDrag')\n    public data: any;\n\n    /**\n     * An @Input property that indicates when the drag should start\n     * By default the drag starts after the draggable element is moved by 5px\n     * ```html\n     * <div igxDrag [dragTolerance]=\"100\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public dragTolerance = 5;\n\n    /**\n     * Sets a custom class that will be added to the `dragGhost` element.\n     * ```html\n     * <div igxDrag [ghostImageClass]=\"'dragGhost'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public ghostImageClass = '';\n\n    /**\n     * An @Input property that hides the draggable element.\n     * By default it's set to false.\n     * ```html\n     * <div igxDrag [dragTolerance]=\"100\" [hideBaseOnDrag]=\"'true'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public hideBaseOnDrag = false;\n\n    /**\n     * An @Input property that enables/disables the draggable element animation\n     * when the element is released.\n     * By default it's set to false.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public animateOnRelease = false;\n\n    /**\n     * An @Input property that sets the element to which the dragged element will be appended.\n     * By default it's set to null and the dragged element is appended to the body.\n     * ```html\n     * <div #hostDiv></div>\n     * <div igxDrag [dragGhostHost]=\"hostDiv\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     */\n    @Input()\n    public dragGhostHost = null;\n\n    /**\n     * Event triggered when the draggable element drag starts.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (dragStart)=\"onDragStart()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragStart(){\n     *      alert(\"The drag has stared!\");\n     * }\n     * ```\n     */\n    @Output()\n    public dragStart = new EventEmitter<IDragStartEventArgs>();\n\n    /**\n     * Event triggered when the draggable element is released.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (dragEnd)=\"onDragEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onDragEnd(){\n     *      alert(\"The drag has ended!\");\n     * }\n     * ```\n     */\n    @Output()\n    public dragEnd = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * Event triggered after the draggable element is released and after its animation has finished.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (returnMoveEnd)=\"onMoveEnd()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public onMoveEnd(){\n     *      alert(\"The move has ended!\");\n     * }\n     * ```\n     */\n    @Output()\n    public returnMoveEnd = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * Event triggered when the draggable element is clicked.\n     * ```html\n     * <div igxDrag [animateOnRelease]=\"'true'\" (dragClicked)=\"dragClicked()\">\n     *         <span>Drag Me!</span>\n     * </div>\n     * ```\n     * ```typescript\n     * public dragClicked(){\n     *      alert(\"The elemented has been clicked!\");\n     * }\n     * ```\n     */\n    @Output()\n    public dragClicked = new EventEmitter<IDragBaseEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.touchAction')\n    public touch = 'none';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.transitionProperty')\n    public transitionProperty = 'top, left';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.visibility')\n    public _visibility = 'visible';\n\n    /**\n     * Sets the visibility of the draggable element.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     this.myDrag.visible = false;\n     * }\n     * ```\n     */\n    public set visible(bVisible) {\n        this._visibility = bVisible ? 'visible' : 'hidden';\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Returns the visibility state of the draggable element.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     let dragVisibilty = this.myDrag.visible;\n     * }\n     * ```\n     */\n    public get visible() {\n        return this._visibility === 'visible';\n    }\n\n    /**\n     * @hidden\n     */\n    public set left(val: number) {\n        requestAnimationFrame(() => {\n            if (this.dragGhost) {\n                this.dragGhost.style.left = val + 'px';\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public get left() {\n        return parseInt(this.dragGhost.style.left, 10);\n    }\n\n    /**\n     * @hidden\n     */\n    public set top(val: number) {\n        requestAnimationFrame(() => {\n            if (this.dragGhost) {\n                this.dragGhost.style.top = val + 'px';\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public get top() {\n        return parseInt(this.dragGhost.style.top, 10);\n    }\n\n    /**\n     * Returns if the browser supports pointer events.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     let pointerEvents = this.myDrag.pointerEventsEnabled;\n     * }\n     * ```\n     */\n    public get pointerEventsEnabled() {\n        return typeof PointerEvent !== 'undefined';\n    }\n\n    /**\n     * Returns if the browser supports touch events.\n     * ```typescript\n     * @ViewChild(\"myDrag\" ,{read: IgxDragDirective})\n     * public myDrag: IgxDragDirective;\n     * ngAfterViewInit(){\n     *     let touchEvents = this.myDrag.pointerEventsEnabled;\n     * }\n     * ```\n     */\n    public get touchEventsEnabled() {\n        return 'ontouchstart' in window;\n    }\n\n    /**\n     * @hidden\n     */\n    public defaultReturnDuration = '0.5s';\n\n    /**\n     * @hidden\n     */\n    protected _startX = 0;\n    /**\n     * @hidden\n     */\n    protected _startY = 0;\n\n    /**\n     * @hidden\n     */\n    protected dragGhost;\n    /**\n     * @hidden\n     */\n    protected _dragStarted = false;\n    /**\n     * @hidden\n     */\n    protected _dragOffsetX;\n    /**\n     * @hidden\n     */\n    protected _dragOffsetY;\n    /**\n     * @hidden\n     */\n    protected _dragStartX;\n    /**\n     * @hidden\n     */\n    protected _dragStartY;\n    /**\n     * @hidden\n     */\n    protected _pointerDownId = null;\n\n    /**\n     * @hidden\n     */\n    protected _clicked = false;\n    /**\n     * @hidden\n     */\n    protected _lastDropArea = null;\n\n    /**\n     * @hidden\n     */\n    protected _destroy = new Subject<boolean>();\n\n    /**\n     * @hidden\n     */\n    protected _removeOnDestroy = true;\n\n    constructor(public cdr: ChangeDetectorRef, public element: ElementRef, public zone: NgZone, public renderer: Renderer2) {\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            if (this.pointerEventsEnabled) {\n                fromEvent(this.element.nativeElement, 'pointerdown').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onPointerDown(res));\n\n                fromEvent(this.element.nativeElement, 'pointermove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(this.element.nativeElement, 'pointerup').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            } else if (this.touchEventsEnabled) {\n                fromEvent(this.element.nativeElement, 'touchstart').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onPointerDown(res));\n\n                fromEvent(document.defaultView, 'touchmove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(document.defaultView, 'touchend').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            } else {\n                // We don't have pointer events and touch events. Use then mouse events.\n                fromEvent(this.element.nativeElement, 'mousedown').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onPointerDown(res));\n\n                fromEvent(document.defaultView, 'mousemove').pipe(\n                    throttle(() => interval(0, animationFrameScheduler)),\n                    takeUntil(this._destroy)\n                ).subscribe((res) => this.onPointerMove(res));\n\n                fromEvent(document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))\n                    .subscribe((res) => this.onPointerUp(res));\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n\n        if (this.dragGhost && this._removeOnDestroy) {\n            this.dragGhost.parentNode.removeChild(this.dragGhost);\n            this.dragGhost = null;\n        }\n    }\n\n    /**\n     * @hidden\n     * Method bound to the PointerDown event of the base element igxDrag is initialized.\n     * @param event PointerDown event captured\n     */\n    public onPointerDown(event) {\n        this._clicked = true;\n        this._pointerDownId = event.pointerId;\n\n        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n            // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n            this._startX = event.pageX;\n            this._startY = event.pageY;\n        } else if (this.touchEventsEnabled) {\n            this._startX = event.touches[0].pageX;\n            this._startY = event.touches[0].pageY;\n        }\n\n        // Take margins because getBoundingClientRect() doesn't include margins of the element\n        const marginTop = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-top'], 10);\n        const marginLeft = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-left'], 10);\n\n        this._dragOffsetX =\n            (this._startX - this.element.nativeElement.getBoundingClientRect().left - this.getWindowScrollLeft()) + marginLeft;\n        this._dragOffsetY =\n            (this._startY - this.element.nativeElement.getBoundingClientRect().top - this.getWindowScrollTop()) + marginTop;\n        this._dragStartX = this._startX - this._dragOffsetX;\n        this._dragStartY = this._startY - this._dragOffsetY;\n\n        // Set pointer capture so we detect pointermove even if mouse is out of bounds until dragGhost is created.\n        if (this.pointerEventsEnabled) {\n            this.element.nativeElement.setPointerCapture(this._pointerDownId);\n        } else {\n            this.element.nativeElement.focus();\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * @hidden\n     * Perfmorm drag move logic when dragging and dispatching events if there is igxDrop under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the dragGhost is rendered the pointerId is reassigned to the dragGhost. Then this method is bound to it.\n     * @param event PointerMove event captured\n     */\n    public onPointerMove(event) {\n        if (this._clicked) {\n            const dragStartArgs: IDragStartEventArgs = {\n                originalEvent: event,\n                owner: this,\n                cancel: false\n            };\n            let pageX, pageY;\n            if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n                // Check first for pointer events or non touch, because we can have pointer events and touch events at once.\n                pageX = event.pageX;\n                pageY = event.pageY;\n            } else if (this.touchEventsEnabled) {\n                pageX = event.touches[0].pageX;\n                pageY = event.touches[0].pageY;\n\n                // Prevent scrolling on touch while dragging\n                event.preventDefault();\n            }\n\n            const totalMovedX = pageX - this._startX;\n            const totalMovedY = pageY - this._startY;\n            if (!this._dragStarted &&\n                (Math.abs(totalMovedX) > this.dragTolerance || Math.abs(totalMovedY) > this.dragTolerance)) {\n                this.zone.run(() => {\n                    this.dragStart.emit(dragStartArgs);\n                });\n\n                if (!dragStartArgs.cancel) {\n                    this._dragStarted = true;\n                    // We moved enough so dragGhost can be rendered and actual dragging to start.\n                    this.createDragGhost(event);\n                }\n                return;\n            } else if (!this._dragStarted) {\n                return;\n            }\n\n            this.left = this._dragStartX + totalMovedX;\n            this.top = this._dragStartY + totalMovedY;\n\n            this.dispatchDragEvents(pageX, pageY, event);\n        }\n    }\n\n    /**\n     * @hidden\n     * Perform drag end logic when releasing the dragGhost and dispatching drop event if igxDrop is under the pointer.\n     * This method is bound at first at the base element.\n     * If dragging starts and after the dragGhost is rendered the pointerId is reassigned to the dragGhost. Then this method is bound to it.\n     * @param event PointerUp event captured\n     */\n    public onPointerUp(event) {\n        if (!this._clicked) {\n            return;\n        }\n\n        const eventArgs = {\n            originalEvent: event,\n            owner: this\n        };\n        this._clicked = false;\n        if (this._dragStarted) {\n            if (this._lastDropArea && this._lastDropArea !== this.element.nativeElement) {\n                if (!this.animateOnRelease) {\n                    this.onTransitionEnd(null);\n                }\n\n                // dragging ended over a drop area. Call this after transition because onDrop might remove the element.\n                this.dispatchDropEvent(event.pageX, event.pageY, event);\n                // else the drop directive needs to call the dropFinished() method so the animation can perform\n            } else if (this.animateOnRelease &&\n                    (this.left !== Math.floor(this._dragStartX) || this.top !== Math.floor(this._dragStartY))) {\n                // If the start positions are the same as the current the transition will not execute.\n                // return the ghost to start position before removing it. See onTransitionEnd.\n                this.dragGhost.style.transitionDuration = this.defaultReturnDuration;\n                this.left = this._dragStartX;\n                this.top = this._dragStartY;\n            } else {\n                this.onTransitionEnd(null);\n            }\n\n            this.zone.run(() => {\n                this.dragEnd.emit(eventArgs);\n            });\n        } else {\n            this.zone.run(() => {\n                this.dragClicked.emit(eventArgs);\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     * Create dragGhost element - if a Node object is provided it creates a clone of that node,\n     * otherwise it clones the host element.\n     * Bind all needed events.\n     * @param event Pointer event required when the dragGhost is being initialized.\n     * @param node The Node object to be cloned.\n     */\n    protected createDragGhost(event, node: any = null) {\n        this.dragGhost = node ? node.cloneNode(true) : this.element.nativeElement.cloneNode(true);\n        this.dragGhost.style.transitionDuration = '0.0s';\n        this.dragGhost.style.position = 'absolute';\n        const hostLeft = this.dragGhostHost ? this.dragGhostHost.getBoundingClientRect().left : 0;\n        const hostTop = this.dragGhostHost ? this.dragGhostHost.getBoundingClientRect().top : 0;\n        this.dragGhost.style.top = this._dragStartY - hostTop + 'px';\n        this.dragGhost.style.left = this._dragStartX - hostLeft + 'px';\n\n        if (this.ghostImageClass) {\n            this.renderer.addClass(this.dragGhost, this.ghostImageClass);\n        }\n\n        if (this.dragGhostHost) {\n            this.dragGhostHost.appendChild(this.dragGhost);\n        } else {\n            document.body.appendChild(this.dragGhost);\n        }\n\n        if (this.pointerEventsEnabled) {\n            // The dragGhost takes control for moving and dragging after it has been shown.\n            this.dragGhost.setPointerCapture(this._pointerDownId);\n            this.dragGhost.addEventListener('pointermove', (args) => {\n                this.onPointerMove(args);\n            });\n            this.dragGhost.addEventListener('pointerup', (args) => {\n                this.onPointerUp(args);\n            });\n        }\n\n        if (this.animateOnRelease) {\n            // Transition animation when the dragGhost is released and it returns to it's original position.\n            this.dragGhost.addEventListener('transitionend', (args) => {\n                this.onTransitionEnd(args);\n            });\n        }\n\n        // Hide the base after the dragGhost is created, because otherwise the dragGhost will be not visible.\n        if (this.hideBaseOnDrag) {\n            this.visible = false;\n        }\n    }\n\n    /**\n     * @hidden\n     * Dispatch custom igxDragEnter/igxDragLeave events based on current pointer position and if drop area is under.\n     */\n    protected dispatchDragEvents(pageX: number, pageY: number, originalEvent) {\n        let topDropArea;\n        const eventArgs: IgxDragCustomEventDetails = {\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY,\n            owner: this,\n            originalEvent: originalEvent\n        };\n\n        const elementsFromPoint = this.getElementsAtPoint(pageX, pageY);\n        for (let i = 0; i < elementsFromPoint.length; i++) {\n            if (elementsFromPoint[i].getAttribute('droppable') === 'true' && elementsFromPoint[i] !== this.dragGhost) {\n                topDropArea = elementsFromPoint[i];\n                break;\n            }\n        }\n\n        if (topDropArea) {\n            this.dispatchEvent(topDropArea, 'igxDragOver', eventArgs);\n        }\n\n        if (topDropArea &&\n            (!this._lastDropArea || (this._lastDropArea && this._lastDropArea !== topDropArea))) {\n            if (this._lastDropArea) {\n                this.dispatchEvent(this._lastDropArea, 'igxDragLeave', eventArgs);\n            }\n\n            this._lastDropArea = topDropArea;\n            this.dispatchEvent(this._lastDropArea, 'igxDragEnter', eventArgs);\n        } else if (!topDropArea && this._lastDropArea) {\n            this.dispatchEvent(this._lastDropArea, 'igxDragLeave', eventArgs);\n            this._lastDropArea = null;\n        }\n    }\n\n    /**\n     * @hidden\n     * Dispatch custom igxDrop event based on current pointer position if there is last recorder drop area under the pointer.\n     * Last recorder drop area is updated in @dispatchDragEvents method.\n     */\n    protected dispatchDropEvent(pageX: number, pageY: number, originalEvent) {\n        const eventArgs: IgxDragCustomEventDetails = {\n            startX: this._startX,\n            startY: this._startY,\n            pageX: pageX,\n            pageY: pageY,\n            owner: this,\n            originalEvent: originalEvent\n        };\n\n        this.dispatchEvent(this._lastDropArea, 'igxDrop', eventArgs);\n        this.dispatchEvent(this._lastDropArea, 'igxDragLeave', eventArgs);\n        this._lastDropArea = null;\n    }\n\n    /**\n     * @hidden\n     * Update relative positions\n     */\n    public updateDragRelativePos() {\n        if (!this.dragGhost) {\n            return;\n        }\n\n        // Calculate the new dragGhost position to remain where the mouse is, so it doesn't jump\n        const totalDraggedX = this.left - this._dragStartX;\n        const totalDraggedY = this.top - this._dragStartY;\n        const newPosX = this.element.nativeElement.getBoundingClientRect().left;\n        const newPosY = this.element.nativeElement.getBoundingClientRect().top;\n        const diffStartX = this._dragStartX - newPosX;\n        const diffStartY = this._dragStartY - newPosY;\n        this.top = newPosX + totalDraggedX - diffStartX;\n        this.left = newPosY + totalDraggedY - diffStartY;\n    }\n\n    /**\n     * Informs the `igxDrag` directive that it has been dropped/released.\n     * This should usully be called when `animateOnRelease` is set to `true`.\n     * When canceling or defining custom drop logic this tells the igxDrag to update it's positions and\n     * animate correctly to the new position.\n     * ```typescript\n     * public onDropElem(event) {\n     *     // Function bound to the igxDrop directive event `onDrop`\n     *     // This cancels the default drop logic of the `igxDrop`\n     *     event.cancel = true;\n     *     event.drag.dropFinished();\n     * }\n     * ```\n     */\n    public dropFinished() {\n        if (this.animateOnRelease && this.dragGhost) {\n            this.updateDragRelativePos();\n\n            // Return the dragged element to the start. See onTransitionEnd next.\n            // Take margins becuase getBoundingClientRect() doesn't include margins\n            const marginTop = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-top'], 10);\n            const marginLeft = parseInt(document.defaultView.getComputedStyle(this.element.nativeElement)['margin-left'], 10);\n            const newPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n            const newPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n\n            this.dragGhost.style.transitionDuration = this.defaultReturnDuration;\n            this.left = newPosX - marginLeft;\n            this.top = newPosY - marginTop;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onTransitionEnd(event) {\n        if (this._dragStarted && !this._clicked) {\n            if (this.hideBaseOnDrag) {\n                this.visible = true;\n            }\n            this.dragGhost.parentNode.removeChild(this.dragGhost);\n            this.dragGhost = null;\n\n            this.element.nativeElement.style.transitionDuration = '0.0s';\n            this._dragStarted = false;\n            this.zone.run(() => {\n                this.returnMoveEnd.emit({\n                    originalEvent: event,\n                    owner: this\n                });\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getElementsAtPoint(pageX: number, pageY: number) {\n        // correct the coordinates with the current scroll position, because\n        // document.elementsFromPoint conider position within the current viewport\n        // window.pageXOffset == window.scrollX; // always true\n        // using window.pageXOffset for IE9 compatibility\n        const viewPortX = pageX - window.pageXOffset;\n        const viewPortY = pageY - window.pageYOffset;\n        if (document['msElementsFromPoint']) {\n            // Edge and IE special snowflakes\n            return document['msElementsFromPoint'](viewPortX, viewPortY);\n        } else {\n            // Other browsers like Chrome, Firefox, Opera\n            return document.elementsFromPoint(viewPortX, viewPortY);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected dispatchEvent(target, eventName: string, eventArgs: IgxDragCustomEventDetails) {\n        // This way is IE11 compatible.\n        const dragLeaveEvent = document.createEvent('CustomEvent');\n        dragLeaveEvent.initCustomEvent(eventName, false, false, eventArgs);\n        target.dispatchEvent(dragLeaveEvent);\n        // Othersie can be used `target.dispatchEvent(new CustomEvent(eventName, eventArgs));`\n    }\n\n    protected getWindowScrollTop() {\n        return window.scrollY ? window.scrollY : (window.pageYOffset ? window.pageYOffset : 0);\n    }\n\n    protected getWindowScrollLeft() {\n        return window.scrollX ? window.scrollX : (window.pageXOffset ? window.pageXOffset : 0);\n    }\n}\n\n@Directive({\n    selector: '[igxDrop]'\n})\nexport class IgxDropDirective implements OnInit, OnDestroy {\n\n    /**\n     * - Save data inside the `igxDrop` directive. This can be set when instancing `igxDrop` on an element.\n     * ```html\n     * <div [igxDrop]=\"{ source: myElement }\"></div>\n     * ```\n     */\n    @Input('igxDrop')\n    public data: any;\n\n    /** Event triggered when dragged element enters the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (onEnter)=\"dragEnter()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragEnter(){\n     *     alert(\"A draggable elemente has entered the chip area!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onEnter = new EventEmitter<IgxDropEnterEventArgs>();\n\n    /** Event triggered when dragged element leaves the area of the element.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (onLeave)=\"dragLeave()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragLeave(){\n     *     alert(\"A draggable elemente has left the chip area!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onLeave = new EventEmitter<IgxDropLeaveEventArgs>();\n\n    /** Event triggered when dragged element is dropped in the area of the element.\n     * Since the `igxDrop` has default logic that appends the dropped element as a child, it can be canceled here.\n     * To cancel the default logic the `cancel` property of the event needs to be set to true.\n     * ```html\n     * <div class=\"cageArea\" igxDrop (onDrop)=\"dragDrop()\" (igxDragEnter)=\"onDragCageEnter()\" (igxDragLeave)=\"onDragCageLeave()\">\n     * </div>\n     * ```\n     * ```typescript\n     * public dragDrop(){\n     *     alert(\"A draggable elemente has been dropped in the chip area!\");\n     * }\n     * ```\n     */\n    @Output()\n    public onDrop = new EventEmitter<IgxDropEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.droppable')\n    public droppable = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.dragOver')\n    public dragover = false;\n\n    /**\n     * @hidden\n     */\n    protected _destroy = new Subject<boolean>();\n\n    constructor(public element: ElementRef, private _renderer: Renderer2, private _zone: NgZone) {\n    }\n\n    ngOnInit() {\n        this._zone.runOutsideAngular(() => {\n            fromEvent(this.element.nativeElement, 'igxDragEnter').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onDragEnter(res as CustomEvent<IgxDragCustomEventDetails>));\n\n            fromEvent(this.element.nativeElement, 'igxDragLeave').pipe(takeUntil(this._destroy)).subscribe((res) => this.onDragLeave(res));\n            fromEvent(this.element.nativeElement, 'igxDragOver').pipe(takeUntil(this._destroy)).subscribe((res) => this.onDragOver(res));\n        });\n    }\n\n    ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public onDragOver(event) { }\n\n    /**\n     * @hidden\n     */\n    public onDragEnter(event: CustomEvent<IgxDragCustomEventDetails>) {\n        this.dragover = true;\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IgxDropEnterEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n        this._zone.run(() => {\n            this.onEnter.emit(eventArgs);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public onDragLeave(event) {\n        this.dragover = false;\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const eventArgs: IgxDropLeaveEventArgs = {\n            originalEvent: event.detail.originalEvent,\n            owner: this,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            startX: event.detail.startX,\n            startY: event.detail.startY,\n            pageX: event.detail.pageX,\n            pageY: event.detail.pageY,\n            offsetX: offsetX,\n            offsetY: offsetY\n        };\n        this._zone.run(() => {\n            this.onLeave.emit(eventArgs);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('igxDrop', ['$event'])\n    public onDragDrop(event) {\n        const elementPosX = this.element.nativeElement.getBoundingClientRect().left + this.getWindowScrollLeft();\n        const elementPosY = this.element.nativeElement.getBoundingClientRect().top + this.getWindowScrollTop();\n        const offsetX = event.detail.pageX - elementPosX;\n        const offsetY = event.detail.pageY - elementPosY;\n        const args: IgxDropEventArgs = {\n            owner: this,\n            originalEvent: event.detail.originalEvent,\n            drag: event.detail.owner,\n            dragData: event.detail.owner.data,\n            offsetX: offsetX,\n            offsetY: offsetY,\n            cancel: false\n        };\n        this._zone.run(() => {\n            this.onDrop.emit(args);\n        });\n\n        if (!args.cancel) {\n            // To do for generic scenario\n            this._renderer.removeChild(event.detail.owner.element.nativeElement.parentNode, event.detail.owner.element.nativeElement);\n            this._renderer.appendChild(this.element.nativeElement, event.detail.owner.element.nativeElement);\n\n            setTimeout(() => {\n                event.detail.owner.dropFinished();\n            }, 0);\n        }\n    }\n\n    protected getWindowScrollTop() {\n        return window.scrollY ? window.scrollY : (window.pageYOffset ? window.pageYOffset : 0);\n    }\n\n    protected getWindowScrollLeft() {\n        return window.scrollX ? window.scrollX : (window.pageXOffset ? window.pageXOffset : 0);\n    }\n}\n\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDragDirective, IgxDropDirective],\n    exports: [IgxDragDirective, IgxDropDirective]\n})\nexport class IgxDragDropModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    OnChanges,\n    Output,\n    Pipe,\n    PipeTransform,\n    Renderer2,\n    SimpleChanges\n} from '@angular/core';\n\nexport class IgxFilterOptions {\n    // Input text value that will be used as a filtering pattern (matching condition is based on it)\n    public inputValue = '';\n\n    // Item property, which value should be used for filtering\n    public key: string;\n\n    // Represent items of the list. It should be used to handle decalaratevely defined widgets\n    public items: any[];\n\n    // Function - get value to be tested from the item\n    // item - single item of the list to be filtered\n    // key - property name of item, which value should be tested\n    // Default behavior - returns \"key\"- named property value of item if key si provided,\n    // otherwise textContent of the item's html element\n    public get_value(item: any, key: string): string {\n        let result = '';\n\n        if (key && item[key]) {\n            result = item[key].toString();\n        } else if (item.element) {\n            if (item.element.nativeElement) {\n                result = item.element.nativeElement.textContent.trim();\n            // Check if element doesn't return the DOM element directly\n            } else if (item.element.textContent) {\n                result = item.element.textContent.trim();\n            }\n        }\n\n        return result;\n    }\n\n    // Function - formats the original text before matching process\n    // Default behavior - returns text to lower case\n    public formatter(valueToTest: string): string {\n        return valueToTest.toLowerCase();\n    }\n\n    // Function - determines whether the item met the condition\n    // valueToTest - text value that should be tested\n    // inputValue - text value from input that condition is based on\n    // Default behavior - \"contains\"\n    public matchFn(valueToTest: string, inputValue: string): boolean {\n        return valueToTest.indexOf(inputValue && inputValue.toLowerCase() || '') > -1;\n    }\n\n    // Function - executed after matching test for every matched item\n    // Default behavior - shows the item\n    public metConditionFn(item: any) {\n        if (item.hasOwnProperty('hidden')) {\n            item.hidden = false;\n        }\n    }\n\n    // Function - executed for every NOT matched item after matching test\n    // Default behavior - hides the item\n    public overdueConditionFn(item: any) {\n        if (item.hasOwnProperty('hidden')) {\n            item.hidden = true;\n        }\n    }\n}\n\n\n@Directive({\n    selector: '[igxFilter]'\n})\nexport class IgxFilterDirective implements OnChanges {\n    @Output() public filtering = new EventEmitter(false); // synchronous event emitter\n    @Output() public filtered = new EventEmitter();\n\n    @Input('igxFilter') public filterOptions: IgxFilterOptions;\n\n    constructor(private element: ElementRef, renderer: Renderer2) {\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        // Detect only changes of input value\n        if (changes.filterOptions &&\n            changes.filterOptions.currentValue &&\n            changes.filterOptions.currentValue.inputValue !== undefined &&\n            changes.filterOptions.previousValue &&\n            changes.filterOptions.currentValue.inputValue !== changes.filterOptions.previousValue.inputValue) {\n            this.filter();\n        }\n    }\n\n    private filter() {\n        if (!this.filterOptions.items) {\n            return;\n        }\n\n        const args = { cancel: false, items: this.filterOptions.items };\n        this.filtering.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n\n        const pipe = new IgxFilterPipe();\n\n        const filtered = pipe.transform(this.filterOptions.items, this.filterOptions);\n        this.filtered.emit({ filteredItems: filtered });\n    }\n}\n\n@Pipe({\n    name: 'igxFilter',\n    pure: false\n})\n\nexport class IgxFilterPipe implements PipeTransform {\n    public transform(items: any[],\n                     // options - initial settings of filter functionality\n                     options: IgxFilterOptions) {\n\n        let result = [];\n\n        if (!items || !items.length || !options) {\n            return;\n        }\n\n        if (options.items) {\n            items = options.items;\n        }\n\n        result = items.filter((item: any) => {\n            const match = options.matchFn(options.formatter(options.get_value(item, options.key)), options.inputValue);\n\n            if (match) {\n                if (options.metConditionFn) {\n                    options.metConditionFn(item);\n                }\n            } else {\n                if (options.overdueConditionFn) {\n                    options.overdueConditionFn(item);\n                }\n            }\n\n            return match;\n        });\n\n        return result;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFilterDirective, IgxFilterPipe],\n    exports: [IgxFilterDirective, IgxFilterPipe],\n    imports: [CommonModule]\n})\nexport class IgxFilterModule {\n}\n","import { Directive, ElementRef, Input, NgModule, Optional, Inject, Self } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { EditorProvider } from '../../core/edit-provider';\n\n@Directive({\n    exportAs: 'igxFocus',\n    selector: '[igxFocus]'\n})\nexport class IgxFocusDirective {\n\n    private focusState = true;\n    /**\n     * Returns the state of the igxFocus.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * let isFocusOn = this.igxFocus.focused;\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    @Input('igxFocus')\n    get focused(): boolean {\n        return this.focusState;\n    }\n    /**\n     * Sets the state of the igxFocus.\n     * ```html\n     * <igx-input-group >\n     *  <input #focusContainer igxInput [igxFocus]=\"true\"/>\n     * </igx-input-group>\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    set focused(val: boolean) {\n        this.focusState = val;\n        this.trigger();\n    }\n    /**\n     * Gets the native element of the igxFocus.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * let igxFocusNativeElement = this.igxFocus.nativeElement;\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    get nativeElement() {\n        if (this.comp && this.comp[0] && this.comp[0].getEditElement) {\n            return (this.comp[0] as EditorProvider).getEditElement();\n        }\n        return this.element.nativeElement;\n    }\n\n    constructor(private element: ElementRef, @Inject(NG_VALUE_ACCESSOR) @Self() @Optional() private comp?: any[]) { }\n    /**\n     * Triggers the igxFocus state.\n     * ```typescript\n     * @ViewChild('focusContainer', {read: IgxFocusDirective})\n     * public igxFocus: IgxFocusDirective;\n     * this.igxFocus.trigger();\n     * ```\n     * @memberof IgxFocusDirective\n     */\n    trigger() {\n        if (this.focusState) {\n            requestAnimationFrame(() => this.nativeElement.focus());\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFocusDirective],\n    exports: [IgxFocusDirective]\n})\nexport class IgxFocusModule { }\n","import { Directive, HostBinding, Input, NgModule } from '@angular/core';\n\n@Directive({\n    selector: '[igxLayout]'\n})\nexport class IgxLayoutDirective {\n    /**\n     * Sets the default flow direction of the container's children.\n     *\n     * Defaults to `rows`.\n     *\n     * ```html\n     *  <div\n     *   igxLayout\n     *   igxLayoutDir=\"row\">\n     *    <div igxFlex>1</div>\n     *    <div igxFlex>2</div>\n     *    <div igxFlex>3</div>\n     *  </div>\n     * ```\n     */\n    @Input('igxLayoutDir') public dir = 'row';\n\n    /**\n     * Defines the direction flex children are placed in the flex container.\n     *\n     * When set to `true`, the `rows` direction goes right to left and `columns` goes bottom to top.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutReverse=\"true\">\n     *    <div igxFlex>1</div>\n     *    <div igxFlex>2</div>\n     *    <div igxFlex>3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutReverse') public reverse = false;\n\n    /**\n     * By default the immediate children will all try to fit onto one line.\n     *\n     * The default value `nowrap` sets this behavior.\n     *\n     * Other accepted values are `wrap` and `wrap-reverse`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"row\"\n     *   igxLayoutWrap=\"wrap\">\n     *    <div igxFlex igxFlexGrow=\"0\">1</div>\n     *    <div igxFlex igxFlexGrow=\"0\">2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutWrap') public wrap = 'nowrap';\n\n    /**\n     * Defines the alignment along the main axis.\n     *\n     * Defaults to `flex-start` which packs the children toward the start line.\n     *\n     * Other possible values are `flex-end`, `center`, `space-between`, `space-around`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"column\"\n     *   igxLayoutJustify=\"space-between\">\n     *    <div>1</div>\n     *    <div>2</div>\n     *    <div>3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutJustify') public justify = 'flex-start';\n\n    /**\n     * Defines the default behavior for how children are laid out along the corss axis of the current line.\n     *\n     * Defaults to `flex-start`.\n     *\n     * Other possible values are `flex-end`, `center`, `baseline`, and `stretch`.\n     *\n     * ```html\n     * <div\n     *   igxLayout\n     *   igxLayoutDir=\"column\"\n     *   igxLayoutItemAlign=\"start\">\n     *    <div igxFlex igxFlexGrow=\"0\">1</div>\n     *    <div igxFlex igxFlexGrow=\"0\">2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxLayoutItemAlign') public itemAlign = 'stretch';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.display') public display = 'flex';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex-wrap') get flexwrap() { return this.wrap; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.justify-content') get justifycontent() { return this.justify; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.align-items') get align() { return this.itemAlign; }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex-direction')\n    get direction() {\n        if (this.reverse) {\n            return (this.dir === 'row') ? 'row-reverse' : 'column-reverse';\n        }\n        return (this.dir === 'row') ? 'row' : 'column';\n    }\n}\n\n@Directive({\n    selector: '[igxFlex]'\n})\nexport class IgxFlexDirective {\n\n    /**\n     * Applies the `grow` attribute to an element that uses the directive.\n     *\n     * Default value is `1`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexGrow=\"0\">Content1</div>\n     *    <div igxFlex igxFlexGrow=\"1\">Content2</div>\n     *    <div igxFlex igxFlexGrow=\"0\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexGrow') public grow = 1;\n\n    /**\n     * Applies the `shrink` attribute to an element that uses the directive.\n     *\n     * Default value is `1`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexShrink=\"1\">Content1</div>\n     *    <div igxFlex igxFlexShrink=\"0\">Content2</div>\n     *    <div igxFlex igxFlexShrink=\"1\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexShrink') public shrink = 1;\n\n    /**\n     * Applies the directive to an element.\n     *\n     * Possible values include `igxFlexGrow`, `igxFlexShrink`, `igxFlexOrder`, `igxFlexBasis`.\n     *\n     * ```html\n     * <div igxFlex>Content</div>\n     * ```\n     */\n    @Input('igxFlex') public flex = '';\n\n    /**\n     * Applies the `order` attribute to an element that uses the directive.\n     *\n     * Default value is `0`.\n     *\n     * ```html\n     * <div>\n     *    <div igxFlex igxFlexOrder=\"1\">Content1</div>\n     *    <div igxFlex igxFlexOrder=\"0\">Content2</div>\n     *    <div igxFlex igxFlexOrder=\"2\">Content3</div>\n     * </div>\n     * ```\n     */\n    @Input('igxFlexOrder') public order = 0;\n\n    /**\n     * Applies the `flex-basis` attribute to an element that uses the directive.\n     *\n     * Default value is `auto`.\n     *\n     * Other possible values include `content`, `max-content`, `min-content`, `fit-content`.\n     *\n     * ```html\n     * <div igxFlex igxFlexBasis=\"fit-content\">Content</div>\n     * ```\n     */\n    @Input('igxFlexBasis') public basis = 'auto';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flex')\n    get style() {\n        if (this.flex) {\n            return `${this.flex}`;\n        }\n        return `${this.grow} ${this.shrink} ${this.basis}`;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.order')\n    get itemorder() {\n        return this.order || 0;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxFlexDirective, IgxLayoutDirective],\n    exports: [IgxFlexDirective, IgxLayoutDirective]\n})\nexport class IgxLayoutModule { }\n","/**\n * @hidden\n */\nexport const MASK_FLAGS = [ 'C', '&', 'a', 'A', '?', 'L', '9', '0', '#' ];\n\n/**\n * @hidden\n */\nexport const KEYS = {\n    Ctrl : 17,\n    Z : 90,\n    Y : 89,\n    X : 88,\n    BACKSPACE : 8,\n    DELETE : 46\n  };\n\n\n/**\n * @hidden\n */\nexport class MaskHelper {\n    private _cursor;\n    public get cursor() {\n        return this._cursor;\n    }\n    public data: boolean;\n\n    public parseValueByMask(value, maskOptions, cursor): string {\n        let inputValue: string = value;\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        if (inputValue.length < mask.length) { // BACKSPACE, DELETE\n            if (inputValue === '' && cursor === -1) {\n                this._cursor = 0;\n                return this.parseValueByMaskOnInit(value, maskOptions);\n            } // workaround for IE 'x' button\n\n            if (nonLiteralIndeces.indexOf(cursor + 1) !== -1) {\n                inputValue = this.insertCharAt(inputValue, cursor + 1, maskOptions.promptChar);\n                this._cursor = cursor + 1;\n            } else {\n                inputValue = this.insertCharAt(inputValue, cursor + 1, mask[cursor + 1]);\n                this._cursor = cursor + 1;\n                for (let i = this._cursor; i < 0; i--) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor--;\n                    } else {\n                        break;\n                    }\n                }\n            }\n        } else {\n            const char = inputValue[cursor];\n            let isCharValid = this.validateCharOnPostion(char, cursor, mask);\n            if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                inputValue = this.replaceCharAt(inputValue, cursor, '');\n                if (isCharValid) {\n                    inputValue = this.replaceCharAt(inputValue, cursor, char);\n                    this._cursor = cursor + 1;\n                } else {\n                    this._cursor = cursor;\n                }\n            } else {\n                inputValue = this.replaceCharAt(inputValue, cursor, '');\n                this._cursor = ++cursor;\n                for (let i = cursor; i < mask.length; i++) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor = ++cursor;\n                    } else {\n                        isCharValid = this.validateCharOnPostion(char, cursor, mask);\n                        if (isCharValid) {\n                            inputValue = this.replaceCharAt(inputValue, cursor, char);\n                            this._cursor = ++cursor;\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    public parseMask(maskOptions): string {\n        let outputVal = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n\n        for (const maskSym of mask) {\n            outputVal += maskOptions.promptChar;\n        }\n\n        literals.forEach((val: string, key: number) => {\n            outputVal = this.replaceCharAt(outputVal, key, val);\n        });\n\n        return outputVal;\n    }\n\n    public parseValueByMaskOnInit(inputVal, maskOptions): string {\n        let outputVal = '';\n        let value = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n        const literalValues: string[] = Array.from(literals.values());\n\n        if (inputVal != null) {\n            value = inputVal.toString();\n        }\n\n        for (const maskSym of mask) {\n            outputVal += maskOptions.promptChar;\n        }\n\n        literals.forEach((val: string, key: number) => {\n            outputVal = this.replaceCharAt(outputVal, key, val);\n        });\n\n        if (!value) {\n            return outputVal;\n        }\n\n        const nonLiteralValues: string[] = this.getNonLiteralValues(value, literalValues);\n\n        for (let i = 0; i < nonLiteralValues.length; i++) {\n            const char = nonLiteralValues[i];\n            const isCharValid = this.validateCharOnPostion(char, nonLiteralIndeces[i], mask);\n\n            if (!isCharValid && char !== maskOptions.promptChar) {\n                nonLiteralValues[i] = maskOptions.promptChar;\n            }\n        }\n\n        if (nonLiteralValues.length > nonLiteralIndeces.length) {\n            nonLiteralValues.splice(nonLiteralIndeces.length);\n        }\n\n        let pos = 0;\n        for (const nonLiteralValue of nonLiteralValues) {\n            const char = nonLiteralValue;\n            outputVal = this.replaceCharAt(outputVal, nonLiteralIndeces[pos++], char);\n        }\n\n        return outputVal;\n    }\n\n    public restoreValueFromMask(value, maskOptions): string {\n        let outputVal = '';\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalValues: string[] = Array.from(literals.values());\n\n        for (const val of value) {\n            if (literalValues.indexOf(val) === -1) {\n                if (val !== maskOptions.promptChar) {\n                    outputVal += val;\n                }\n            }\n        }\n\n        return outputVal;\n    }\n\n    public parseValueByMaskUponSelection(value, maskOptions, cursor, selection): string {\n        let isCharValid: boolean;\n        let inputValue: string = value;\n        const char: string = inputValue[cursor];\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        if (!this.data) {\n            this._cursor = cursor < 0 ? ++cursor : cursor;\n            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {\n                isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                inputValue = isCharValid ? this.replaceCharAt(inputValue, this._cursor++, char) :\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);\n                selection--;\n                if (selection > 0) {\n                    for (let i = 0; i < selection; i++) {\n                        cursor++;\n                        inputValue = nonLiteralIndeces.indexOf(cursor) !== -1 ?\n                            this.insertCharAt(inputValue, cursor, maskOptions.promptChar) :\n                            this.insertCharAt(inputValue, cursor, mask[cursor]);\n                    }\n                }\n            } else {\n                inputValue = this.replaceCharAt(inputValue, this._cursor, mask[this._cursor]);\n                this._cursor++;\n                selection--;\n                let isMarked = false;\n                if (selection > 0) {\n                    cursor = this._cursor;\n                    for (let i = 0; i < selection; i++) {\n                        if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                            isCharValid = this.validateCharOnPostion(char, cursor, mask);\n                            if (isCharValid && !isMarked) {\n                                inputValue = this.insertCharAt(inputValue, cursor, char);\n                                cursor++;\n                                this._cursor++;\n                                isMarked = true;\n                            } else {\n                                inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);\n                                cursor++;\n                            }\n                        } else {\n                            inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);\n                            if (cursor === this._cursor) {\n                                this._cursor++;\n                            }\n                            cursor++;\n                        }\n                    }\n                }\n            }\n        } else {\n            if (inputValue === '' && cursor === -1) {\n                this._cursor = 0;\n                return this.parseValueByMaskOnInit(value, maskOptions);\n            } // workaround for IE 'x' button\n\n            if (this._cursor < 0) {\n                this._cursor++;\n                cursor++;\n            }\n            cursor++;\n            this._cursor = cursor;\n            for (let i = 0; i < selection; i++) {\n                if (nonLiteralIndeces.indexOf(cursor) !== -1) {\n                    inputValue = this.insertCharAt(inputValue, cursor, maskOptions.promptChar);\n                    cursor++;\n                } else {\n                    inputValue = this.insertCharAt(inputValue, cursor, mask[cursor]);\n                    cursor++;\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    public parseValueByMaskUponCopyPaste(value, maskOptions, cursor, clipboardData, selection): string {\n        let inputValue: string = value;\n        const mask: string = maskOptions.format;\n        const literals: Map<number, string> = this.getMaskLiterals(mask);\n        const literalKeys: number[] = Array.from(literals.keys());\n        const nonLiteralIndeces: number[] = this.getNonLiteralIndeces(mask, literalKeys);\n\n        const selectionEnd = cursor + selection;\n\n        this._cursor = cursor;\n        for (const clipboardSym of clipboardData) {\n            const char = clipboardSym;\n\n            if (this._cursor > mask.length) {\n                return inputValue;\n            }\n\n            if (nonLiteralIndeces.indexOf(this._cursor) !== -1) {\n                const isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                if (isCharValid) {\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, char);\n                }\n            } else {\n                for (let i = cursor; i < mask.length; i++) {\n                    if (literalKeys.indexOf(this._cursor) !== -1) {\n                        this._cursor++;\n                    } else {\n                        const isCharValid = this.validateCharOnPostion(char, this._cursor, mask);\n                        if (isCharValid) {\n                            inputValue = this.replaceCharAt(inputValue, this._cursor++, char);\n                        }\n                        break;\n                    }\n                }\n            }\n\n            selection--;\n        }\n\n        if (selection > 0) {\n            for (let i = this._cursor; i < selectionEnd; i++) {\n                if (literalKeys.indexOf(this._cursor) !== -1) {\n                    this._cursor++;\n                } else {\n                    inputValue = this.replaceCharAt(inputValue, this._cursor++, maskOptions.promptChar);\n                }\n            }\n        }\n\n        return inputValue;\n    }\n\n    private validateCharOnPostion(inputChar: string, position: number, mask: string): boolean {\n        let regex: RegExp;\n        let isValid: boolean;\n        const letterOrDigitRegEx = '[\\\\d\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z]';\n        const letterDigitOrSpaceRegEx = '[\\\\d\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z\\\\u0020]';\n        const letterRegEx = '[\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z]';\n        const letteSpaceRegEx = '[\\\\u00C0-\\\\u1FFF\\\\u2C00-\\\\uD7FFa-zA-Z\\\\u0020]';\n        const digitRegEx = '[\\\\d]';\n        const digitSpaceRegEx = '[\\\\d\\\\u0020]';\n        const digitSpecialRegEx = '[\\\\d-\\\\+]';\n\n        switch (mask.charAt(position)) {\n            case 'C':\n                isValid = inputChar !== '';\n                break;\n            case '&':\n                regex = new RegExp('[\\\\u0020]');\n                isValid = !regex.test(inputChar);\n                break;\n            case 'a':\n                regex = new RegExp(letterDigitOrSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case 'A':\n                regex = new RegExp(letterOrDigitRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '?':\n                regex = new RegExp(letteSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case 'L':\n                regex = new RegExp(letterRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '0':\n                regex = new RegExp(digitRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '9':\n                regex = new RegExp(digitSpaceRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            case '#':\n                regex = new RegExp(digitSpecialRegEx);\n                isValid = regex.test(inputChar);\n                break;\n            default: {\n                isValid = null;\n            }\n        }\n\n        return isValid;\n    }\n    private replaceCharAt(strValue: string, index: number, char: string): string {\n        if (strValue !== undefined) {\n            return strValue.substring(0, index) + char + strValue.substring(index + 1);\n        }\n    }\n    private insertCharAt(strValue: string, index: number, char: string): string {\n        if (strValue !== undefined) {\n            return strValue.substring(0, index) + char + strValue.substring(index);\n        }\n    }\n    private getMaskLiterals(mask: string): Map<number, string> {\n        const literals = new Map<number, string>();\n\n        for (let i = 0; i < mask.length; i++) {\n            const char = mask.charAt(i);\n            if (MASK_FLAGS.indexOf(char) === -1) {\n                literals.set(i, char);\n            }\n        }\n\n        return literals;\n    }\n    private getNonLiteralIndeces(mask: string, literalKeys: number[]): number[] {\n        const nonLiteralsIndeces: number[] = new Array();\n\n        for (let i = 0; i < mask.length; i++) {\n            if (literalKeys.indexOf(i) === -1) {\n                nonLiteralsIndeces.push(i);\n            }\n        }\n\n        return nonLiteralsIndeces;\n    }\n    private getNonLiteralValues(value: string, literalValues: string[]): string[] {\n        const nonLiteralValues: string[] = new Array();\n\n        for (const val of value) {\n            if (literalValues.indexOf(val) === -1) {\n                nonLiteralValues.push(val);\n            }\n        }\n\n        return nonLiteralValues;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    NgModule,\n    OnInit,\n    Output,\n    PipeTransform\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { KEYS, MaskHelper } from './mask-helper';\nimport { isIE } from '../../core/utils';\n\nconst noop = () => { };\n\n@Directive({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMaskDirective, multi: true }],\n    selector: '[igxMask]'\n})\nexport class IgxMaskDirective implements OnInit, ControlValueAccessor {\n    /**\n     * Sets the input mask.\n     * ```html\n     * <input [igxMask] = \"'00/00/0000'\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input('igxMask')\n    public mask: string;\n\n    /**\n     * Sets the character representing a fillable spot in the input mask.\n     * Default value is \"'_'\".\n     * ```html\n     * <input [promptChar] = \"'/'\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public promptChar: string;\n\n    /**\n     * Specifies if the bound value includes the formatting symbols.\n     * ```html\n     * <input [includeLiterals] = \"true\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public includeLiterals: boolean;\n\n    /**\n     * Specifies a placeholder.\n     * ```html\n     * <input placeholder = \"enter text...\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public set placeholder(val: string) {\n        this._placeholder = val;\n        this.nativeElement.setAttribute('placeholder', this._placeholder);\n    }\n\n    public get placeholder(): string {\n        return this._placeholder;\n    }\n\n    /**\n     * Specifies a pipe to be used on blur.\n     * ```html\n     * <input [displayValuePipe] = \"displayFormatPipe\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public displayValuePipe: PipeTransform;\n\n    /**\n     * Specifies a pipe to be used on focus.\n     * ```html\n     * <input [focusedValuePipe] = \"inputFormatPipe\">\n     * ```\n     * @memberof IgxMaskDirective\n     */\n    @Input()\n    public focusedValuePipe: PipeTransform;\n\n    /**\n     *@hidden\n     */\n    @Input()\n    private dataValue: string;\n\n    /**\n     * Emits an event each time the value changes.\n     * Provides `rawValue: string` and `formattedValue: string` as event arguments.\n     * ```html\n     * <input (onValueChange) = \"onValueChange(rawValue: string, formattedValue: string)\">\n     * ```\n     */\n    @Output()\n    public onValueChange = new EventEmitter<IMaskEventArgs>();\n\n    /**\n     *@hidden\n     */\n    private get value() {\n        return this.nativeElement.value;\n    }\n\n    /**\n     *@hidden\n     */\n    private set value(val) {\n        this.nativeElement.value = val;\n    }\n\n    /**\n     *@hidden\n     */\n    private get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     *@hidden\n     */\n    private get selectionStart() {\n        return this.nativeElement.selectionStart;\n    }\n\n    /**\n     *@hidden\n     */\n    private get selectionEnd() {\n        return this.nativeElement.selectionEnd;\n    }\n\n    /**\n     *@hidden\n     */\n    private _ctrlDown: boolean;\n\n    /**\n     *@hidden\n     */\n    private _paste: boolean;\n\n    /**\n     *@hidden\n     */\n    private _selection: number;\n\n    /**\n     *@hidden\n     */\n    private _placeholder: string;\n\n    /**\n     *@hidden\n     */\n    private _maskOptions = {\n        format: '',\n        promptChar: ''\n    };\n\n    /**\n     *@hidden\n     */\n    private _key;\n\n    /**\n     *@hidden\n     */\n    private _cursorOnPaste;\n\n    /**\n     *@hidden\n     */\n    private _valOnPaste;\n\n    private _stopPropagation: boolean;\n\n    /**\n     *@hidden\n     */\n    private maskHelper: MaskHelper;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n\n    constructor(private elementRef: ElementRef) {\n        this.maskHelper = new MaskHelper();\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnInit(): void {\n        if (this.promptChar && this.promptChar.length > 1) {\n            this._maskOptions.promptChar = this.promptChar = this.promptChar.substring(0, 1);\n        }\n\n        this._maskOptions.format = this.mask ? this.mask : 'CCCCCCCCCC';\n        this._maskOptions.promptChar = this.promptChar ? this.promptChar : '_';\n        this.nativeElement.setAttribute('placeholder', this.placeholder ? this.placeholder : this._maskOptions.format);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('keydown', ['$event'])\n    public onKeydown(event): void {\n        const key = event.keyCode || event.charCode;\n\n        if (isIE() && this._stopPropagation) {\n            this._stopPropagation = false;\n        }\n\n        if (key === KEYS.Ctrl) {\n            this._ctrlDown = true;\n        }\n\n        if ((this._ctrlDown && key === KEYS.Z) || (this._ctrlDown && key === KEYS.Y)) {\n            event.preventDefault();\n        }\n\n        this._key = key;\n        this._selection = Math.abs(this.selectionEnd - this.selectionStart);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('keyup', ['$event'])\n    public onKeyup(event): void {\n        const key = event.keyCode || event.charCode;\n\n        if (key === KEYS.Ctrl) {\n            this._ctrlDown = false;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('paste', ['$event'])\n    public onPaste(event): void {\n        this._paste = true;\n\n        this._valOnPaste = this.value;\n        this._cursorOnPaste = this.getCursorPosition();\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('input', ['$event'])\n    public onInputChanged(event): void {\n        if (isIE() && this._stopPropagation) {\n            this._stopPropagation = false;\n            return;\n        }\n\n        if (this._paste) {\n            this._paste = false;\n\n            const clipboardData = this.value.substring(this._cursorOnPaste, this.getCursorPosition());\n            this.value = this.maskHelper.parseValueByMaskUponCopyPaste(\n                this._valOnPaste, this._maskOptions, this._cursorOnPaste, clipboardData, this._selection);\n\n            this.setCursorPosition(this.maskHelper.cursor);\n        } else {\n            const currentCursorPos = this.getCursorPosition();\n\n            this.maskHelper.data = (this._key === KEYS.BACKSPACE) || (this._key === KEYS.DELETE);\n\n            this.value = this._selection && this._selection !== 0 ?\n                this.maskHelper.parseValueByMaskUponSelection(this.value, this._maskOptions, currentCursorPos - 1, this._selection) :\n                this.maskHelper.parseValueByMask(this.value, this._maskOptions, currentCursorPos - 1);\n\n            this.setCursorPosition(this.maskHelper.cursor);\n        }\n\n        const rawVal = this.maskHelper.restoreValueFromMask(this.value, this._maskOptions);\n\n        this.dataValue = this.includeLiterals ? this.value : rawVal;\n        this._onChangeCallback(this.dataValue);\n\n        this.onValueChange.emit({ rawValue: rawVal, formattedValue: this.value });\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('focus', ['$event.target.value'])\n    public onFocus(value) {\n        if (this.focusedValuePipe) {\n            if (isIE()) {\n                this._stopPropagation = true;\n            }\n            this.value = this.focusedValuePipe.transform(value);\n        } else {\n            this.value = this.maskHelper.parseValueByMaskOnInit(this.value, this._maskOptions);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('blur', ['$event.target.value'])\n    public onBlur(value) {\n        if (this.displayValuePipe) {\n            this.value = this.displayValuePipe.transform(value);\n        } else if (value === this.maskHelper.parseMask(this._maskOptions)) {\n            this.value = '';\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private getCursorPosition(): number {\n        return this.nativeElement.selectionStart;\n    }\n\n    /**\n     *@hidden\n     */\n    private setCursorPosition(start: number, end: number = start): void {\n        this.nativeElement.setSelectionRange(start, end);\n    }\n\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        if (this.promptChar && this.promptChar.length > 1) {\n            this._maskOptions.promptChar = this.promptChar.substring(0, 1);\n        }\n\n        this.value = value ? this.maskHelper.parseValueByMaskOnInit(value, this._maskOptions) : '';\n        if (this.displayValuePipe) {\n            this.value = this.displayValuePipe.transform(this.value);\n        }\n\n        this.dataValue = this.includeLiterals ? this.value : value;\n        this._onChangeCallback(this.dataValue);\n\n        this.onValueChange.emit({ rawValue: value, formattedValue: this.value });\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n\n/**\n * The IgxMaskModule provides the {@link IgxMaskDirective} inside your application.\n */\nexport interface IMaskEventArgs {\n    rawValue: string;\n    formattedValue: string;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxMaskDirective],\n    exports: [IgxMaskDirective],\n    imports: [CommonModule]\n})\nexport class IgxMaskModule { }\n","import {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { isIE } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport interface IChangeRadioEventArgs {\n    value: any;\n    radio: IgxRadioComponent;\n}\n\nexport enum RadioLabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nlet nextId = 0;\nconst noop = () => { };\n/**\n * **Ignite UI for Angular Radio Button** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_button.html)\n *\n * The Ignite UI Radio Button allows the user to select a single option from an available set of options that are listed side by side.\n *\n * Example:\n * ```html\n * <igx-radio>\n *   Simple radio button\n * </igx-radio>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioComponent, multi: true }],\n    selector: 'igx-radio',\n    templateUrl: 'radio.component.html'\n})\n\nexport class IgxRadioComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     * Returns reference to native radio element.\n     * ```typescript\n     * let radioElement =  this.radio.nativeRadio;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('radio', { static: true }) public nativeRadio: ElementRef;\n    /**\n     * Returns reference to native label element.\n     * ```typescript\n     * let labelElement =  this.radio.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('nativeLabel', { static: true }) public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.radio.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel', { static: true }) public placeholderLabel;\n\n    /**\n     * Sets/gets the `id` of the radio component.\n     * If not set, the `id` of the first radio component will be `\"igx-radio-0\"`.\n     * ```html\n     * <igx-radio id = \"my-first-radio\"></igx-radio>\n     * ```\n     * ```typescript\n     * let radioId =  this.radio.id;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-radio-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element in the radio component.\n     * If not set, the id of the `label` in the first radio component will be `\"igx-radio-0-label\"`.\n     * ```html\n     * <igx-radio labelId = \"Label1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelId =  this.radio.labelId;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the position of the `label` in the radio component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-radio labelPosition = \"before\"></igx-radio>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.radio.labelPosition;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public labelPosition: RadioLabelPosition | string = 'after';\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-radio [value] = \"'radioButtonValue'\"></igx-radio>\n     * ```\n     * ```typescript\n     * let value =  this.radio.value;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute of the radio component.\n     * ```html\n     * <igx-radio name = \"Radio1\"></igx-radio>\n     *  ```\n     * ```typescript\n     * let name =  this.radio.name;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-radio [tabindex] = \"1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.radio.tabindex;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     * Enables/disables the ripple effect on the radio button..\n     * If not set, the `disableRipple` will have value `false`.\n     * ```html\n     * <igx-radio [disableRipple] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabledRipple =  this.radio.disableRipple;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether the radio button is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-radio [required] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isRequired =  this.radio.required;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledby` attribute of the radio component.\n     * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-radio aria-labelledby = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy = this.radio.ariaLabelledBy;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the `aria-label` attribute of the radio component.\n     * ```html\n     * <igx-radio aria-label = \"Radio1\"></igx-radio>\n     * ```\n     * ```typescript\n     * let ariaLabel =  this.radio.ariaLabel;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the radio `value` is changed.\n     * Provides references to the `IgxRadioComponent` and the `value` property as event arguments.\n     * @memberof IgxRadioComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeRadioEventArgs> = new EventEmitter<IChangeRadioEventArgs>();\n    /**\n     * Returns the class of the radio component.\n     * ```typescript\n     * let radioClass = this.radio.cssClass;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio')\n    public cssClass = 'igx-radio';\n    /**\n     * Sets/gets  the `checked` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [checked] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isChecked =  this.radio.checked;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets  the `disabled` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-radio [disabled] = \"true\"></igx-radio>\n     * ```\n     * ```typescript\n     * let isDisabled =  this.radio.disabled;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the radio component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.radio.focus = true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.radio.focused;\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    @HostBinding('class.igx-radio--focused')\n    public focused = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     *@hidden\n     */\n    protected _value: any = null;\n\n    constructor() { }\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     *@hidden\n     */\n    public _onRadioChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onRadioClick(event) {\n        event.stopPropagation();\n        this.select();\n\n        if (isIE()) {\n            this.nativeRadio.nativeElement.blur();\n        }\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick() {\n        this.select();\n    }\n    /**\n     * Selects the current radio button.\n     * ```typescript\n     * this.radio.select();\n     * ```\n     * @memberof IgxRadioComponent\n     */\n    public select() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.checked = true;\n        this.focused = false;\n        this.change.emit({ value: this.value, radio: this });\n        this._onChangeCallback(this.value);\n    }\n    /**\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true`;\n     * ```typescript\n     * this.radio.writeValue('radioButtonValue');\n     * ```\n     */\n    public writeValue(value: any) {\n        this._value = value;\n        this.checked = (this._value === this.value);\n    }\n    /** @hidden */\n    getEditElement() {\n        return this.nativeRadio.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case RadioLabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case RadioLabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n","import { Directive, ElementRef, HostListener, Input, NgModule, NgZone, Renderer2 } from '@angular/core';\nimport { AnimationBuilder, style, animate } from '@angular/animations';\n\n@Directive({\n    selector: '[igxRipple]'\n})\nexport class IgxRippleDirective {\n    /**\n     * Sets/gets the ripple target.\n     * ```html\n     * <div  #rippleContainer class=\"div-1\" igxRipple [igxRippleTarget] = \"'.div-1'\"></div>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleTarget = this.ripple.rippleTarget;\n     * ```\n     * Can set the ripple to activate on a child element inside the parent where igxRipple is defined.\n     * ```html\n     * <div #rippleContainer [igxRippleTarget] = \"'#child\"'>\n     *  <button id=\"child\">Click</button>\n     * </div>\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleTarget')\n    public rippleTarget = '';\n    /**\n     * Sets/gets the ripple color.\n     * ```html\n     * <button #rippleContainer [igxRipple] = \"'red'\" ></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleColor = this.ripple.rippleColor;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRipple')\n    public rippleColor: string;\n    /**\n     * Sets/gets the ripple duration(in milliseconds).\n     * Default value is `600`.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleDuration] = \"800\"></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let rippleDuration = this.ripple.rippleDuration;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleDuration')\n    public rippleDuration = 600;\n    /**\n     * Enables/disables the ripple to be centered.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleCentered] = \"true\"></button>\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleCentered') set centered(value: boolean) {\n        this._centered = value || this.centered;\n    }\n    /**\n     * Sets/gets whether the ripple is disabled.\n     * Default value is `false`.\n     * ```html\n     * <button #rippleContainer igxRipple [igxRippleDisabled] = \"true\"></button>\n     * ```\n     * ```typescript\n     * @ViewChild('rippleContainer', {read: IgxRippleDirective})\n     * public ripple: IgxRippleDirective;\n     * let isRippleDisabled = this.ripple.rippleDisabled;\n     * ```\n     * @memberof IgxRippleDirective\n     */\n    @Input('igxRippleDisabled')\n    public rippleDisabled = false;\n\n    protected get nativeElement(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    private rippleElementClass = 'igx-ripple__inner';\n    private rippleHostClass = 'igx-ripple';\n    private _centered = false;\n    private animationQueue = [];\n\n    constructor(\n        protected builder: AnimationBuilder,\n        protected elementRef: ElementRef,\n        protected renderer: Renderer2,\n        private zone: NgZone) { }\n    /**\n     *@hidden\n     */\n    @HostListener('mousedown', ['$event'])\n    public onMouseDown(event) {\n        this.zone.runOutsideAngular(() => this._ripple(event));\n    }\n\n    private setStyles(rippleElement: HTMLElement, styleParams: any) {\n        this.renderer.addClass(rippleElement, this.rippleElementClass);\n        this.renderer.setStyle(rippleElement, 'width', `${styleParams.radius}px`);\n        this.renderer.setStyle(rippleElement, 'height', `${styleParams.radius}px`);\n        this.renderer.setStyle(rippleElement, 'top', `${styleParams.top}px`);\n        this.renderer.setStyle(rippleElement, 'left', `${styleParams.left}px`);\n        if (this.rippleColor) {\n            this.renderer.setStyle(rippleElement, 'background', this.rippleColor);\n        }\n    }\n\n    private _ripple(event) {\n        if (this.rippleDisabled) {\n            return;\n        }\n\n        const target = (this.rippleTarget ? this.nativeElement.querySelector(this.rippleTarget) || this.nativeElement : this.nativeElement);\n\n        const rectBounds = target.getBoundingClientRect();\n        const radius = Math.max(rectBounds.width, rectBounds.height);\n        let left = event.clientX - rectBounds.left - radius / 2;\n        let top = event.clientY - rectBounds.top - radius / 2;\n\n        if (this._centered) {\n            left = top = 0;\n        }\n\n        const dimensions = {\n            radius,\n            top,\n            left\n        };\n\n        const rippleElement = this.renderer.createElement('span');\n\n        this.setStyles(rippleElement, dimensions);\n        this.renderer.addClass(target, this.rippleHostClass);\n        this.renderer.appendChild(target, rippleElement);\n\n        const animation = this.builder.build([\n            style({ opacity: 0.5, transform: 'scale(.3)' }),\n            animate(this.rippleDuration, style({ opacity: 0, transform: 'scale(2)' }))\n        ]).create(rippleElement);\n\n        this.animationQueue.push(animation);\n\n        animation.onDone(() => {\n            this.animationQueue.splice(this.animationQueue.indexOf(animation), 1);\n            target.removeChild(rippleElement);\n            if (this.animationQueue.length < 1) {\n                this.renderer.removeClass(target, this.rippleHostClass);\n            }\n        });\n\n        animation.play();\n\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxRippleDirective],\n    exports: [IgxRippleDirective]\n})\nexport class IgxRippleModule { }\n","import {\n    Directive,\n    NgModule,\n    Input,\n    QueryList,\n    Output,\n    EventEmitter,\n    AfterContentInit,\n    ContentChildren,\n    OnDestroy,\n    HostBinding\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRadioComponent, RadioLabelPosition, IChangeRadioEventArgs } from '../../radio/radio.component';\nimport { IgxRippleModule } from '../ripple/ripple.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nconst noop = () => { };\nlet nextId = 0;\n\n/**\n * **Ignite UI for Angular Radio Group** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_button.html)\n *\n * The Ignite UI Radio Group allows the user to select a single option from an available set of options that are listed side by side.\n *\n * Example:\n * ```html\n * <igx-radio-group name=\"radioGroup\">\n *   <igx-radio *ngFor=\"let item of ['Foo', 'Bar', 'Baz']\" value=\"{{item}}\">\n *      {{item}}\n *   </igx-radio>\n * </igx-radio-group>\n * ```\n */\n@Directive({\n    selector: 'igx-radio-group, [igxRadioGroup]',\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxRadioGroupDirective, multi: true }]\n})\nexport class IgxRadioGroupDirective implements AfterContentInit, ControlValueAccessor, OnDestroy {\n    /**\n     * Returns reference to the child radio buttons.\n     * ```typescript\n     * let radioButtons =  this.radioGroup.radioButtons;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @ContentChildren(IgxRadioComponent) public radioButtons: QueryList<IgxRadioComponent>;\n\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-radio-group [value] = \"'radioButtonValue'\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let value =  this.radioGroup.value;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            this._value = newValue;\n            this._selectRadioButton();\n        }\n    }\n\n    /**\n     * Sets/gets the `name` attribute of the radio group component. All child radio buttons inherits this name.\n     * ```html\n     * <igx-radio-group name = \"Radio1\"></igx-radio-group>\n     *  ```\n     * ```typescript\n     * let name =  this.radioGroup.name;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get name(): string { return this._name; }\n    set name(newValue: string) {\n        if (this._name !== newValue) {\n            this._name = newValue;\n            this._setRadioButtonNames();\n        }\n    }\n\n    /**\n     * Sets/gets whether the radio group is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-radio-group [required] = \"true\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let isRequired =  this.radioGroup.required;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(newValue: boolean) {\n        if (this._required !== newValue) {\n            this._required = newValue;\n            this._setRadioButtonsRequired();\n        }\n    }\n\n    /**\n     * An @Input property that allows you to disable the radio group. By default it's false.\n     * ```html\n     * <igx-radio-group [disabled]=\"true\"></igx-radio-group>\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(newValue: boolean) {\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this._disableRadioButtons();\n        }\n    }\n\n    /**\n     * Sets/gets the position of the `label` in the child radio buttons.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-radio-group labelPosition = \"before\"></igx-radio-group>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.radioGroup.labelPosition;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get labelPosition(): RadioLabelPosition | string { return this._labelPosition; }\n    set labelPosition(newValue: RadioLabelPosition | string) {\n        if (this._labelPosition !== newValue) {\n            this._labelPosition = newValue === RadioLabelPosition.BEFORE ? RadioLabelPosition.BEFORE : RadioLabelPosition.AFTER;\n            this._setRadioButtonLabelPosition();\n        }\n    }\n\n    /**\n     * Sets/gets the selected child radio button.\n     * ```typescript\n     * let selectedButton = this.radioGroup.selected;\n     * this.radioGroup.selected = selectedButton;\n     * ```\n     * @memberof IgxRadioGroupDirective\n     */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: IgxRadioComponent | null) {\n        if (this._selected !== selected) {\n            this._selected = selected;\n            this.value = selected ? selected.value : null;\n        }\n    }\n\n    /**\n     * An event that is emitted after the radio group `value` is changed.\n     * Provides references to the selected `IgxRadioComponent` and the `value` property as event arguments.\n     * @memberof IgxRadioGroupDirective\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeRadioEventArgs> = new EventEmitter<IChangeRadioEventArgs>();\n\n    /**\n     *@hidden\n     */\n    @HostBinding('class.igx-radio-group')\n    public cssClass = 'igx-radio-group';\n\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     *@hidden\n     */\n    private _name = `igx-radio-group-${nextId++}`;\n    /**\n     *@hidden\n     */\n    private _value: any = null;\n    /**\n     *@hidden\n     */\n    private _selected: IgxRadioComponent | null = null;\n    /**\n     *@hidden\n     */\n    private _isInitialized = false;\n    /**\n     *@hidden\n     */\n    private _labelPosition: RadioLabelPosition | string = 'after';\n    /**\n     *@hidden\n     */\n    private _disabled = false;\n    /**\n     *@hidden\n     */\n    private _required = false;\n    /**\n     *@hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    ngAfterContentInit() {\n        // The initial value can possibly be set by NgModel and it is possible that\n        // the OnInit of the NgModel occurs after the OnInit of this class.\n        this._isInitialized = true;\n\n        setTimeout(() => { this._initRadioButtons(); });\n    }\n\n    /**\n     * Checks whether the provided value is consistent to the current radio button.\n     * If it is, the checked attribute will have value `true` and selected property will contain the selected `IgxRadioComponent`.\n     * ```typescript\n     * this.radioGroup.writeValue('radioButtonValue');\n     * ```\n     */\n    public writeValue(value: any) {\n        this.value = value;\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.registerOnTouched(fn);\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     *@hidden\n     */\n    private _initRadioButtons() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.name = this._name;\n                button.labelPosition = this._labelPosition;\n                button.disabled = this._disabled;\n                button.required = this._required;\n\n                if (this._value && button.value === this._value) {\n                    button.checked = true;\n                    this._selected = button;\n                }\n\n                button.change.pipe(takeUntil(this.destroy$)).subscribe((ev) => this._selectedRadioButtonChanged(ev));\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _selectedRadioButtonChanged(args: IChangeRadioEventArgs) {\n        if (this._selected !== args.radio) {\n            if (this._selected) {\n                this._selected.checked = false;\n            }\n            this._selected = args.radio;\n        }\n\n        this._value = args.value;\n\n        if (this._isInitialized) {\n            this.change.emit(args);\n            this._onChangeCallback(this.value);\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonNames() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.name = this._name;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _selectRadioButton() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                if (!this._value) {\n                    // no value - uncheck all radio buttons\n                    if (button.checked) {\n                        button.checked = false;\n                    }\n                } else {\n                    if (this._value === button.value) {\n                        // selected button\n                        if (this._selected !== button) {\n                            this._selected = button;\n                        }\n\n                        if (!button.checked) {\n                            button.select();\n                        }\n                    } else {\n                        // non-selected button\n                        if (button.checked) {\n                            button.checked = false;\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonLabelPosition() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.labelPosition = this._labelPosition;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _disableRadioButtons() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.disabled = this._disabled;\n            });\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _setRadioButtonsRequired() {\n        if (this.radioButtons) {\n            this.radioButtons.forEach((button) => {\n                button.required = this._required;\n            });\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxRadioGroupDirective, IgxRadioComponent],\n    exports: [IgxRadioGroupDirective, IgxRadioComponent],\n    imports: [IgxRippleModule]\n})\nexport class IgxRadioModule { }\n","import {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgModule,\n    OnChanges,\n    OnDestroy,\n    Renderer2,\n    SimpleChanges,\n    AfterViewChecked\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { DeprecateProperty } from '../../core/deprecateDecorators';\n\ninterface ISearchInfo {\n    searchedText: string;\n    content: string;\n    matchCount: number;\n    caseSensitive: boolean;\n    exactMatch: boolean;\n}\n\n/**\n * An interface describing information for the active highlight.\n */\nexport interface IActiveHighlightInfo {\n    /**\n     * The row index of the highlight. This property is deprecated, use `row` instead.\n     */\n    rowIndex?: number;\n    /**\n     * The column index of the highlight. This property is deprecated, use `column` instead.\n     */\n    columnIndex?: number;\n    /**\n     * The page index of the highlight. This property is deprecated.\n     */\n    page?: number;\n    /**\n     * The row of the highlight.\n     */\n    row?: any;\n    /**\n     * The column of the highlight.\n     */\n    column?: any;\n    /**\n     * The index of the highlight.\n     */\n    index: number;\n}\n\n@Directive({\n    selector: '[igxTextHighlight]'\n})\nexport class IgxTextHighlightDirective implements AfterViewInit, AfterViewChecked, OnDestroy, OnChanges {\n    private static onActiveElementChanged = new EventEmitter<string>();\n    public static highlightGroupsMap = new Map<string, IActiveHighlightInfo>();\n\n    private _lastSearchInfo: ISearchInfo;\n    private _div = null;\n    private _observer: MutationObserver = null;\n    private _nodeWasRemoved = false;\n    private _forceEvaluation = false;\n    private _activeElementIndex = -1;\n    private _valueChanged: boolean;\n\n    /**\n     * Determines the `CSS` class of the highlight elements.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [cssClass]=\"myClass\">\n     * </div>\n     * ```\n     */\n    @Input('cssClass')\n    public cssClass: string;\n\n    /**\n     * Determines the `CSS` class of the active highlight element.\n     * This allows the developer to provide custom `CSS` to customize the highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [activeCssClass]=\"activeHighlightClass\">\n     * </div>\n     * ```\n     */\n    @Input('activeCssClass')\n    public activeCssClass: string;\n\n    /**\n     * @hidden\n     */\n    @Input('containerClass')\n    public containerClass: string;\n\n    /**\n     * Identifies the highlight within a unique group.\n     * This allows it to have several different highlight groups,\n     * with each of them having their own active highlight.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [groupName]=\"myGroupName\">\n     * </div>\n     * ```\n     */\n    @Input('groupName')\n    public groupName = '';\n\n    private _value = '';\n\n    /**\n     * The underlying value of the element that will be highlighted.\n     *\n     * ```typescript\n     * // get\n     * const elementValue = this.textHighlight.value;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <div\n     *   igxTextHighlight\n     *   [value]=\"newValue\">\n     * </div>\n     * ```\n     */\n    @Input('value')\n    public get value(): any {\n        return this._value;\n    }\n    public set value(value: any) {\n        if (value === undefined || value === null) {\n            this._value = '';\n        } else {\n            this._value = value;\n        }\n    }\n\n    /**\n     * The identifier of the row on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [row]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('row')\n    public row: any;\n\n    /**\n     * The identifier of the column on which the directive is currently on.\n     *\n     * ```html\n     * <div\n     *   igxTextHighlight\n     *   [column]=\"0\">\n     * </div>\n     * ```\n     */\n    @Input('column')\n    public column: any;\n\n    @Input('page')\n    @DeprecateProperty(`IgxTextHighlightDirective 'page' input property is deprecated.`)\n    public page: number;\n\n    /**\n     * @hidden\n     */\n    public get lastSearchInfo(): ISearchInfo {\n        return this._lastSearchInfo;\n    }\n\n    /**\n     * @hidden\n     */\n    public parentElement: any;\n\n    private _container: any;\n\n    private destroy$ = new Subject<boolean>();\n\n    /**\n     * Activates the highlight at a given index.\n     * (if such index exists)\n     */\n    public static setActiveHighlight(groupName: string, highlight: IActiveHighlightInfo) {\n        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, highlight);\n        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);\n    }\n\n    /**\n     * Clears any existing highlight.\n     */\n    public static clearActiveHighlight(groupName) {\n        IgxTextHighlightDirective.highlightGroupsMap.set(groupName, {\n            index: -1\n        });\n        IgxTextHighlightDirective.onActiveElementChanged.emit(groupName);\n    }\n\n    constructor(private element: ElementRef, public renderer: Renderer2) {\n        IgxTextHighlightDirective.onActiveElementChanged.pipe(takeUntil(this.destroy$)).subscribe((groupName) => {\n            if (this.groupName === groupName) {\n                if (this._activeElementIndex !== -1) {\n                    this.deactivate();\n                }\n                this.activateIfNecessary();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        this.clearHighlight();\n\n        if (this._observer !== null) {\n            this._observer.disconnect();\n        }\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.value && !changes.value.firstChange) {\n            this._valueChanged = true;\n        } else if ((changes.row !== undefined && !changes.row.firstChange) ||\n            (changes.column !== undefined && !changes.column.firstChange) ||\n            (changes.page !== undefined && !changes.page.firstChange)) {\n            if (this._activeElementIndex !== -1) {\n                this.deactivate();\n            }\n            this.activateIfNecessary();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.parentElement = this.renderer.parentNode(this.element.nativeElement);\n\n        if (IgxTextHighlightDirective.highlightGroupsMap.has(this.groupName) === false) {\n            IgxTextHighlightDirective.highlightGroupsMap.set(this.groupName, {\n                index: -1\n            });\n        }\n\n        this._lastSearchInfo = {\n            searchedText: '',\n            content: this.value,\n            matchCount: 0,\n            caseSensitive: false,\n            exactMatch: false\n        };\n\n        this._container = this.parentElement.firstElementChild;\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewChecked() {\n        if (this._valueChanged) {\n            this.highlight(this._lastSearchInfo.searchedText, this._lastSearchInfo.caseSensitive, this._lastSearchInfo.exactMatch);\n            this.activateIfNecessary();\n            this._valueChanged = false;\n        }\n    }\n\n    /**\n     * Clears the existing highlight and highlights the searched text.\n     * Returns how many times the element contains the searched text.\n     */\n    public highlight(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        const caseSensitiveResolved = caseSensitive ? true : false;\n        const exactMatchResolved = exactMatch ? true : false;\n\n        if (this.searchNeedsEvaluation(text, caseSensitiveResolved, exactMatchResolved)) {\n            this._lastSearchInfo.searchedText = text;\n            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;\n            this._lastSearchInfo.exactMatch = exactMatchResolved;\n            this._lastSearchInfo.content = this.value;\n\n            if (text === '' || text === undefined || text === null) {\n                this.clearHighlight();\n            } else {\n                this.clearChildElements(true);\n                this._lastSearchInfo.matchCount = this.getHighlightedText(text, caseSensitive, exactMatch);\n            }\n        } else if (this._nodeWasRemoved) {\n            this._lastSearchInfo.searchedText = text;\n            this._lastSearchInfo.caseSensitive = caseSensitiveResolved;\n            this._lastSearchInfo.exactMatch = exactMatchResolved;\n        }\n\n        return this._lastSearchInfo.matchCount;\n    }\n\n    /**\n     * Clears any existing highlight.\n     */\n    public clearHighlight(): void {\n        this.clearChildElements(false);\n\n        this._lastSearchInfo.searchedText = '';\n        this._lastSearchInfo.matchCount = 0;\n    }\n\n    /**\n     * Activates the highlight if it is on the currently active row, column and page.\n     */\n    public activateIfNecessary(): void {\n        const group = IgxTextHighlightDirective.highlightGroupsMap.get(this.groupName);\n        const column = group.columnIndex === undefined ? group.column : group.columnIndex;\n        const row = group.rowIndex === undefined ? group.row : group.rowIndex;\n\n        if (column === this.column && row === this.row && group.page === this.page) {\n            this.activate(group.index);\n        }\n    }\n\n    /**\n     * Attaches a MutationObserver to the parentElement and watches for when the container element is removed/readded to the DOM.\n     * Should be used only when necessary as using many observers may lead to performance degradation.\n     */\n    public observe(): void {\n        if (this._observer === null) {\n            const callback = (mutationList) => {\n                mutationList.forEach((mutation) => {\n                    const removedNodes = Array.from(mutation.removedNodes);\n                    removedNodes.forEach((n) => {\n                        if (n === this._container) {\n                            this._nodeWasRemoved = true;\n                            this.clearChildElements(false);\n                        }\n                    });\n\n                    const addedNodes = Array.from(mutation.addedNodes);\n                    addedNodes.forEach((n) => {\n                        if (n === this.parentElement.firstElementChild && this._nodeWasRemoved) {\n                            this._container = this.parentElement.firstElementChild;\n                            this._nodeWasRemoved = false;\n\n                            this._forceEvaluation = true;\n                            this.highlight(this._lastSearchInfo.searchedText,\n                                this._lastSearchInfo.caseSensitive,\n                                this._lastSearchInfo.exactMatch);\n                            this._forceEvaluation = false;\n\n                            this.activateIfNecessary();\n                            this._observer.disconnect();\n                            this._observer = null;\n                        }\n                    });\n                });\n            };\n\n            this._observer = new MutationObserver(callback);\n            this._observer.observe(this.parentElement, {childList: true});\n        }\n    }\n\n    private activate(index: number) {\n        this.deactivate();\n\n        if (this._div !== null) {\n            const spans = this._div.querySelectorAll('span');\n            this._activeElementIndex = index;\n\n            if (spans.length <= index) {\n                return;\n            }\n\n            const elementToActivate = spans[index];\n            this.renderer.addClass(elementToActivate, this.activeCssClass);\n            this.renderer.setAttribute(elementToActivate, 'style', 'background:orange;color:black');\n        }\n    }\n\n    private deactivate() {\n        if (this._activeElementIndex === -1) {\n            return;\n        }\n\n        const spans = this._div.querySelectorAll('span');\n\n        if (spans.length <= this._activeElementIndex) {\n            this._activeElementIndex = -1;\n            return;\n        }\n\n        const elementToDeactivate = spans[this._activeElementIndex];\n        this.renderer.removeClass(elementToDeactivate, this.activeCssClass);\n        this.renderer.setAttribute(elementToDeactivate, 'style', 'background:yellow;color:black');\n        this._activeElementIndex = -1;\n    }\n\n    private clearChildElements(originalContentHidden: boolean): void {\n        this.renderer.setProperty(this.element.nativeElement, 'hidden', originalContentHidden);\n\n        if (this._div !== null) {\n            this.renderer.removeChild(this.parentElement, this._div);\n\n            this._div = null;\n            this._activeElementIndex = -1;\n        }\n    }\n\n    private getHighlightedText(searchText: string, caseSensitive: boolean, exactMatch: boolean) {\n        this.appendDiv();\n\n        const stringValue = String(this.value);\n        const contentStringResolved = !caseSensitive ? stringValue.toLowerCase() : stringValue;\n        const searchTextResolved = !caseSensitive ? searchText.toLowerCase() : searchText;\n\n        let matchCount = 0;\n\n        if (exactMatch) {\n            if (contentStringResolved === searchTextResolved) {\n                // tslint:disable-next-line:max-line-length\n                this.appendSpan(`<span class=\"${this.cssClass}\" style=\"background:yellow;color:black\">${stringValue}</span>`);\n                matchCount++;\n            } else {\n                this.appendText(stringValue);\n            }\n        } else {\n            let foundIndex = contentStringResolved.indexOf(searchTextResolved, 0);\n            let previousMatchEnd = 0;\n\n            while (foundIndex !== -1) {\n                const start = foundIndex;\n                const end = foundIndex + searchTextResolved.length;\n\n                this.appendText(stringValue.substring(previousMatchEnd, start));\n                // tslint:disable-next-line:max-line-length\n                this.appendSpan(`<span class=\"${this.cssClass}\" style=\"background:yellow;color:black\">${stringValue.substring(start, end)}</span>`);\n\n                previousMatchEnd = end;\n                matchCount++;\n\n                foundIndex = contentStringResolved.indexOf(searchTextResolved, end);\n            }\n\n            this.appendText(stringValue.substring(previousMatchEnd, stringValue.length));\n        }\n\n        return matchCount;\n    }\n\n    private appendText(text: string) {\n        const textElement = this.renderer.createText(text);\n        this.renderer.appendChild(this._div, textElement);\n    }\n\n    private appendSpan(outerHTML: string) {\n        const span = this.renderer.createElement('span');\n        this.renderer.appendChild(this._div, span);\n        this.renderer.setProperty(span, 'outerHTML', outerHTML);\n    }\n\n    private appendDiv() {\n        this._div = this.renderer.createElement('div');\n        if ( this.containerClass) {\n            this.renderer.addClass(this._div, this.containerClass);\n        }\n        this.renderer.appendChild(this.parentElement, this._div);\n    }\n\n    private searchNeedsEvaluation(text: string, caseSensitive: boolean, exactMatch: boolean): boolean {\n        const searchedText = this._lastSearchInfo.searchedText;\n\n        return !this._nodeWasRemoved &&\n            (searchedText === null ||\n                searchedText !== text ||\n                this._lastSearchInfo.content !== this.value ||\n                this._lastSearchInfo.caseSensitive !== caseSensitive ||\n                this._lastSearchInfo.exactMatch !== exactMatch ||\n                this._forceEvaluation);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTextHighlightDirective],\n    exports: [IgxTextHighlightDirective]\n})\nexport class IgxTextHighlightModule { }\n","import { Directive, ElementRef, HostListener, Input, NgModule } from '@angular/core';\n\n@Directive({\n    exportAs: 'igxTextSelection',\n    selector: '[igxTextSelection]'\n})\nexport class IgxTextSelectionDirective {\n\n    private selectionState = true;\n\n    /**\n     * Returns whether the input element is selectable through the directive.\n     *\n     * ```typescript\n     * // get\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public firstName: IgxTextSelectionDirective;\n     *\n     * public getFirstNameSelectionStatus() {\n     *  return this.firstName.selected;\n     * }\n     * ```\n     */\n    @Input('igxTextSelection')\n    get selected(): boolean {\n        return this.selectionState;\n    }\n\n    /**\n     *  Determines whether the input element could be selected through the directive.\n     *\n     *```html\n     * <!--set-->\n     * <input\n     *   type=\"text\"\n     *   id=\"firstName\"\n     *   [igxTextSelection]=\"true\">\n     * </input>\n     *\n     * <input\n     *   type=\"text\"\n     *   id=\"lastName\"\n     *   igxTextSelection\n     *   [selected]=\"true\">\n     * </input>\n     * ```\n     */\n    set selected(val: boolean) {\n        this.selectionState = val;\n    }\n\n    /**\n     * Returns the nativeElement of the element where the directive was applied.\n     *\n     * ```html\n     * <input\n     *   type=\"text\"\n    *    id=\"firstName\"\n     *   igxTextSelection>\n     * </input>\n     * ```\n     *\n     * ```typescript\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public inputElement: IgxTextSelectionDirective;\n     *\n     * public getNativeElement() {\n     *  return this.inputElement.nativeElement;\n     * }\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('focus')\n    onFocus() {\n        this.trigger();\n    }\n\n    constructor(private element: ElementRef) { }\n\n    /**\n     * Triggers the selection of the element if it is marked as selectable.\n     *\n     * ```html\n     * <input\n     *   type=\"text\"\n     *   id=\"firstName\"\n     *   igxTextSelection>\n     * </input>\n     * ```\n     *\n     * ```typescript\n     * @ViewChild('firstName',\n     *  {read: IgxTextSelectionDirective})\n     * public inputElement: IgxTextSelectionDirective;\n     *\n     * public triggerElementSelection() {\n     *  this.inputElement.trigger();\n     * }\n     * ```\n     */\n    trigger() {\n        if (this.selected && this.nativeElement.value.length) {\n            requestAnimationFrame(() => this.nativeElement.setSelectionRange(0, this.nativeElement.value.length));\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTextSelectionDirective],\n    exports: [IgxTextSelectionDirective]\n})\nexport class IgxTextSelectionModule { }\n","import {\n    Directive, ElementRef, HostListener, Input, NgModule, ChangeDetectorRef, OnInit,\n    Output, EventEmitter, Optional, HostBinding, OnDestroy, Inject\n} from '@angular/core';\nimport { useAnimation } from '@angular/animations';\nimport { scaleInCenter } from '../../animations/scale/index';\nimport { fadeOut } from '../../animations/fade/index';\nimport { IgxOverlayService } from '../../services/overlay/overlay';\nimport { HorizontalAlignment, AutoPositionStrategy, PositionSettings, OverlaySettings } from '../../services';\nimport { CommonModule } from '@angular/common';\nimport { IgxNavigationService } from '../../core/navigation';\nimport { IgxToggleDirective, IgxToggleActionDirective } from '../toggle/toggle.directive';\nimport { Subscription } from 'rxjs';\n\nexport interface ITooltipShowEventArgs {\n    target: IgxTooltipTargetDirective;\n    tooltip: IgxTooltipDirective;\n    cancel: boolean;\n}\nexport interface ITooltipHideEventArgs {\n    target: IgxTooltipTargetDirective;\n    tooltip: IgxTooltipDirective;\n    cancel: boolean;\n}\n\n/**\n * **Ignite UI for Angular Tooltip Target** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)\n *\n * The Ignite UI for Angular Tooltip Target directive is used to mark an HTML element in the markup as one that has a tooltip.\n * The tooltip target is used in combination with the Ignite UI for Angular Tooltip by assigning the exported tooltip reference to the\n * target's selector property.\n *\n * Example:\n * ```html\n * <button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>\n * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n * ```\n */\n@Directive({\n    exportAs: 'tooltipTarget',\n    selector: '[igxTooltipTarget]'\n})\nexport class IgxTooltipTargetDirective extends IgxToggleActionDirective implements OnInit {\n    /**\n     * Gets/sets the amount of milliseconds that should pass before showing the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipShowDelay = this.tooltipTarget.showDelay;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" showDelay=\"1500\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('showDelay')\n    public showDelay = 500;\n\n    /**\n     * Gets/sets the amount of milliseconds that should pass before hiding the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipHideDelay = this.tooltipTarget.hideDelay;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" hideDelay=\"1500\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('hideDelay')\n    public hideDelay = 500;\n\n    /**\n     * Specifies if the tooltip should not show when hovering its target with the mouse. (defaults to false)\n     * While setting this property to 'true' will disable the user interactions that shows/hides the tooltip,\n     * the developer will still be able to show/hide the tooltip through the API.\n     *\n     * ```typescript\n     * // get\n     * let tooltipDisabledValue = this.tooltipTarget.tooltipDisabled;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <button [igxTooltipTarget]=\"tooltipRef\" [tooltipDisabled]=\"true\">Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Input('tooltipDisabled')\n    public tooltipDisabled = false;\n\n    /**\n     * @hidden\n     */\n    @Input('igxTooltipTarget')\n    set target(target: any) {\n        if (target !== null && target !== '') {\n            this._target = target;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get target(): any {\n        if (typeof this._target === 'string') {\n            return this._navigationService.get(this._target);\n        }\n        return this._target;\n    }\n\n    /**\n     * Gets the respective native element of the directive.\n     *\n     * ```typescript\n     * let tooltipTargetElement = this.tooltipTarget.nativeElement;\n     * ```\n     */\n    public get nativeElement() {\n        return this._element.nativeElement;\n    }\n\n    /**\n     * Indicates if the tooltip that is is associated with this target is currently hidden.\n     *\n     * ```typescript\n     * let tooltipHiddenValue = this.tooltipTarget.tooltipHidden;\n     * ```\n     */\n    public get tooltipHidden(): boolean {\n        return !this.target || this.target.collapsed;\n    }\n\n    /**\n     * Emits an event when the tooltip that is associated with this target starts showing.\n     * This event is fired before the start of the countdown to showing the tooltip.\n     *\n     * ```typescript\n     * tooltipShowing(args: ITooltipShowEventArgs) {\n     *    alert(\"Tooltip started showing!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <button [igxTooltipTarget]=\"tooltipRef\"\n     *         (onTooltipShow)='tooltipShowing($event)'>Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Output()\n    public onTooltipShow = new EventEmitter<ITooltipShowEventArgs>();\n\n    /**\n     * Emits an event when the tooltip that is associated with this target starts hiding.\n     * This event is fired before the start of the countdown to hiding the tooltip.\n     *\n     * ```typescript\n     * tooltipHiding(args: ITooltipHideEventArgs) {\n     *    alert(\"Tooltip started hiding!\");\n     * }\n     * ```\n     *\n     * ```html\n     * <button [igxTooltipTarget]=\"tooltipRef\"\n     *         (onTooltipHide)='tooltipHiding($event)'>Hover me</button>\n     * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n     * ```\n     */\n    @Output()\n    public onTooltipHide = new EventEmitter<ITooltipHideEventArgs>();\n\n    constructor(private _element: ElementRef,\n        @Optional() private _navigationService: IgxNavigationService) {\n        super(_element, _navigationService);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n\n        const positionSettings: PositionSettings = {\n            target: this.nativeElement,\n            horizontalDirection: HorizontalAlignment.Center,\n            horizontalStartPoint: HorizontalAlignment.Center,\n            openAnimation: useAnimation(scaleInCenter, { params: { duration: '150ms' } }),\n            closeAnimation: useAnimation(fadeOut, { params: { duration: '75ms' } })\n        };\n\n        this._overlayDefaults.positionStrategy = new AutoPositionStrategy(positionSettings);\n        this._overlayDefaults.closeOnOutsideClick = false;\n    }\n\n    private checkOutletAndOutsideClick() {\n        if (this.outlet) {\n            this._overlayDefaults.outlet = this.outlet;\n        }\n    }\n\n    private get mergedOverlaySettings() {\n        return Object.assign({}, this._overlayDefaults, this.overlaySettings);\n    }\n\n    // Return true if the execution in onMouseEnter should be terminated after this method\n    private preMouseEnterCheck() {\n        // If tooltip is about to be opened\n        if (this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n            this.target.toBeShown = false;\n        }\n\n        // If Tooltip is opened or about to be hidden\n        if (!this.target.collapsed || this.target.toBeHidden) {\n            clearTimeout(this.target.timeoutId);\n\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return true;\n            }\n\n            //  if close animation has started finish it, or close the tooltip with no animation\n            this.target.forceClose(this.mergedOverlaySettings);\n            this.target.toBeHidden = false;\n        }\n\n        return false;\n    }\n\n    // Return true if the execution in onMouseLeave should be terminated after this method\n    private preMouseLeaveCheck(): boolean {\n        clearTimeout(this.target.timeoutId);\n\n        // If tooltip is about to be opened\n        if (this.target.toBeShown) {\n            this.target.toBeShown = false;\n            this.target.toBeHidden = false;\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:keydown.escape', ['$event'])\n    public onKeydownEscape() {\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.close();\n        this.target.toBeHidden = false;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        if (!this.target.collapsed) {\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return;\n            }\n\n            this.target.forceClose(this.mergedOverlaySettings);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseenter')\n    public onMouseEnter() {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.checkOutletAndOutsideClick();\n        const shouldReturn = this.preMouseEnterCheck();\n        if (shouldReturn) {\n            return;\n        }\n\n        const showingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipShow.emit(showingArgs);\n\n        if (showingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeShown = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.open(this.mergedOverlaySettings); // Call open() of IgxTooltipDirective\n            this.target.toBeShown = false;\n        }, this.showDelay);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseleave')\n    public onMouseLeave() {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        this.checkOutletAndOutsideClick();\n        const shouldReturn = this.preMouseLeaveCheck();\n        if (shouldReturn || this.target.collapsed) {\n            return;\n        }\n\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.close(); // Call close() of IgxTooltipDirective\n            this.target.toBeHidden = false;\n        }, this.hideDelay);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('touchstart', ['$event'])\n    public onTouchStart(event) {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        event.preventDefault();\n        this.showTooltip();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:touchstart', ['$event'])\n    public onDocumentTouchStart(event) {\n        if (this.tooltipDisabled) {\n            return;\n        }\n\n        if (this.nativeElement !== event.target &&\n            !this.nativeElement.contains(event.target)\n        ) {\n            this.hideTooltip();\n        }\n    }\n\n    /**\n     * Shows the tooltip by respecting the 'showDelay' property.\n     *\n     * ```typescript\n     * this.tooltipTarget.showTooltip();\n     * ```\n     */\n    public showTooltip() {\n        clearTimeout(this.target.timeoutId);\n\n        if (!this.target.collapsed) {\n            const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n            this.onTooltipHide.emit(hidingArgs);\n\n            if (hidingArgs.cancel) {\n                return;\n            }\n            //  if close animation has started finish it, or close the tooltip with no animation\n            this.target.forceClose(this.mergedOverlaySettings);\n            this.target.toBeHidden = false;\n        }\n\n        const showingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipShow.emit(showingArgs);\n\n        if (showingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeShown = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.open(this.mergedOverlaySettings); // Call open() of IgxTooltipDirective\n            this.target.toBeShown = false;\n        }, this.showDelay);\n    }\n\n    /**\n     * Hides the tooltip by respecting the 'hideDelay' property.\n     *\n     * ```typescript\n     * this.tooltipTarget.hideTooltip();\n     * ```\n     */\n    public hideTooltip() {\n        if (this.target.collapsed && this.target.toBeShown) {\n            clearTimeout(this.target.timeoutId);\n        }\n\n        if (this.target.collapsed || this.target.toBeHidden) {\n            return;\n        }\n\n        const hidingArgs = { target: this, tooltip: this.target, cancel: false };\n        this.onTooltipHide.emit(hidingArgs);\n\n        if (hidingArgs.cancel) {\n            return;\n        }\n\n        this.target.toBeHidden = true;\n        this.target.timeoutId = setTimeout(() => {\n            this.target.close(); // Call close() of IgxTooltipDirective\n            this.target.toBeHidden = false;\n        }, this.hideDelay);\n    }\n}\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Tooltip** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tooltip.html)\n *\n * The Ignite UI for Angular Tooltip directive is used to mark an HTML element in the markup as one that should behave as a tooltip.\n * The tooltip is used in combination with the Ignite UI for Angular Tooltip Target by assigning the exported tooltip reference to the\n * respective target's selector property.\n *\n * Example:\n * ```html\n * <button [igxTooltipTarget]=\"tooltipRef\">Hover me</button>\n * <span #tooltipRef=\"tooltip\" igxTooltip>Hello there, I am a tooltip!</span>\n * ```\n */\n@Directive({\n    exportAs: 'tooltip',\n    selector: '[igxTooltip]'\n})\nexport class IgxTooltipDirective extends IgxToggleDirective {\n\n    /**\n     * @hidden\n     */\n    public timeoutId;\n\n    /**\n     * @hidden\n     * Returns whether close time out has started\n     */\n    public toBeHidden = false;\n\n    /**\n     * @hidden\n     * Returns whether open time out has started\n     */\n    public toBeShown = false;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tooltip--hidden')\n    public get hiddenClass() {\n        return this.collapsed;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tooltip--desktop')\n    public get defaultClass() {\n        return !this.collapsed;\n    }\n\n    /**\n     * Gets/sets any tooltip related data.\n     * The 'context' can be used for storing any information that is necessary\n     * to access when working with the tooltip.\n     *\n     * ```typescript\n     * // get\n     * let tooltipContext = this.tooltip.context;\n     * ```\n     *\n     * ```typescript\n     * // set\n     * this.tooltip.context = \"Tooltip's context\";\n     * ```\n     */\n    @Input('context')\n    public context;\n\n    /**\n     * Identifier for the tooltip.\n     * If this is property is not explicitly set, it will be automatically generated.\n     *\n     * ```typescript\n     * let tooltipId = this.tooltip.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-tooltip-${NEXT_ID++}`;\n\n    /**\n     * Get the role attribute of the tooltip.\n     *\n     * ```typescript\n     * let tooltipRole = this.tooltip.role;\n     * ```\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return 'tooltip';\n    }\n\n    /** @hidden */\n    constructor(\n        elementRef: ElementRef,\n        cdr: ChangeDetectorRef,\n        @Inject(IgxOverlayService) overlayService: IgxOverlayService,\n        @Optional() navigationService: IgxNavigationService) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(elementRef, cdr, overlayService, navigationService);\n    }\n\n    /**\n     * If there is open animation in progress this method will finish is.\n     * If there is no open animation in progress this method will open the toggle with no animation.\n     * @param overlaySettings setting to use for opening the toggle\n     */\n    protected forceOpen(overlaySettings?: OverlaySettings) {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasOpenAnimation = info ? info.openAnimationPlayer : false;\n        if (hasOpenAnimation) {\n            info.openAnimationPlayer.finish();\n            info.openAnimationPlayer.reset();\n            info.openAnimationPlayer = null;\n        } else if (this.collapsed) {\n            const animation = overlaySettings.positionStrategy.settings.openAnimation;\n            overlaySettings.positionStrategy.settings.openAnimation = null;\n            this.open(overlaySettings);\n            overlaySettings.positionStrategy.settings.openAnimation = animation;\n        }\n    }\n\n    /**\n     * If there is close animation in progress this method will finish is.\n     * If there is no close animation in progress this method will close the toggle with no animation.\n     * @param overlaySettings settings to use for closing the toggle\n     */\n    protected forceClose(overlaySettings?: OverlaySettings) {\n        const info = this.overlayService.getOverlayById(this._overlayId);\n        const hasCloseAnimation = info ? info.closeAnimationPlayer : false;\n\n        if (hasCloseAnimation) {\n            info.closeAnimationPlayer.finish();\n            info.closeAnimationPlayer.reset();\n            info.closeAnimationPlayer = null;\n        } else if (!this.collapsed) {\n            const animation = overlaySettings.positionStrategy.settings.closeAnimation;\n            overlaySettings.positionStrategy.settings.closeAnimation = null;\n            this.close();\n            overlaySettings.positionStrategy.settings.closeAnimation = animation;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTooltipDirective, IgxTooltipTargetDirective],\n    exports: [IgxTooltipDirective, IgxTooltipTargetDirective],\n    imports: [CommonModule],\n    providers: [IgxOverlayService]\n})\nexport class IgxTooltipModule { }\n\n","/**\n * Provides base filtering operations\n * Implementations should be Singleton\n *\n * @export\n */\nexport class IgxFilteringOperand {\n    protected static _instance: IgxFilteringOperand = null;\n    public operations: IFilteringOperation[];\n\n    public constructor() {\n        this.operations = [{\n            name: 'null',\n            isUnary: true,\n            iconName: 'is_null',\n            logic: (target: any) => {\n                return target === null;\n            }\n        }, {\n            name: 'notNull',\n            isUnary: true,\n            iconName: 'is_not_null',\n            logic: (target: any) => {\n                return target !== null;\n            }\n        }, {\n            name: 'in',\n            isUnary: false,\n            iconName: 'is_in',\n            hidden: true,\n            logic: (target: any, searchVal: Set<any>) => {\n                return this.findValueInSet(target, searchVal);\n            }\n        }];\n    }\n\n    public static instance(): IgxFilteringOperand {\n        return this._instance || (this._instance = new this());\n    }\n\n    /**\n     * @hidden\n     */\n    protected findValueInSet(target: any, searchVal: Set<any>) {\n        return searchVal.has(target);\n    }\n\n    /**\n     * Returns an array of names of the conditions which are visible in the UI\n     */\n    public conditionList(): string[] {\n        return this.operations.filter(f => !f.hidden).map((element) => element.name);\n    }\n\n    /**\n     * Returns an instance of the condition with the specified name.\n     * @param name The name of the condition.\n     */\n    public condition(name: string): IFilteringOperation {\n        return this.operations.find((element) => element.name === name);\n    }\n\n    /**\n     * Adds a new condition to the filtering operations.\n     * @param operation The filtering operation.\n     */\n    public append(operation: IFilteringOperation) {\n        this.operations.push(operation);\n    }\n}\n\n/**\n * Provides filtering operations for booleans\n *\n * @export\n */\nexport class IgxBooleanFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'all',\n            isUnary: true,\n            iconName: 'all',\n            logic: (target: boolean) => {\n                return true;\n            }\n        }, {\n            name: 'true',\n            isUnary: true,\n            iconName: 'is_true',\n            logic: (target: boolean) => {\n                return !!(target && target !== null && target !== undefined);\n            }\n        }, {\n            name: 'false',\n            isUnary: true,\n            iconName: 'is_false',\n            logic: (target: boolean) => {\n                return !target && target !== null && target !== undefined;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: boolean) => {\n                return target === null || target === undefined;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: boolean) => {\n                return target !== null && target !== undefined;\n            }\n        }].concat(this.operations);\n    }\n}\n\n/**\n * Provides filtering operations for Dates\n *\n * @export\n */\nexport class IgxDateFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');\n                return targetp.year === searchp.year &&\n                    targetp.month === searchp.month &&\n                    targetp.day === searchp.day;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return true;\n                }\n\n                this.validateInputData(target);\n\n                const targetp = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const searchp = IgxDateFilteringOperand.getDateParts(searchVal, 'yMd');\n                return targetp.year !== searchp.year ||\n                    targetp.month !== searchp.month ||\n                    targetp.day !== searchp.day;\n            }\n        }, {\n            name: 'before',\n            isUnary: false,\n            iconName: 'is_before',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                return target < searchVal;\n            }\n        }, {\n            name: 'after',\n            isUnary: false,\n            iconName: 'is_after',\n            logic: (target: Date, searchVal: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                return target > searchVal;\n            }\n        }, {\n            name: 'today',\n            isUnary: true,\n            iconName: 'today',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yMd');\n                return d.year === now.year &&\n                    d.month === now.month &&\n                    d.day === now.day;\n            }\n        }, {\n            name: 'yesterday',\n            isUnary: true,\n            iconName: 'yesterday',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const td = IgxDateFilteringOperand.getDateParts(target, 'yMd');\n                const y = ((d) => new Date(d.setDate(d.getDate() - 1)))(new Date());\n                const yesterday = IgxDateFilteringOperand.getDateParts(y, 'yMd');\n                return td.year === yesterday.year &&\n                    td.month === yesterday.month &&\n                    td.day === yesterday.day;\n            }\n        }, {\n            name: 'thisMonth',\n            isUnary: true,\n            iconName: 'this_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'lastMonth',\n            isUnary: true,\n            iconName: 'last_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                if (!now.month) {\n                    now.month = 11;\n                    now.year -= 1;\n                } else {\n                    now.month--;\n                }\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'nextMonth',\n            isUnary: true,\n            iconName: 'next_month',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'yM');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'yM');\n                if (now.month === 11) {\n                    now.month = 0;\n                    now.year += 1;\n                } else {\n                    now.month++;\n                }\n                return d.year === now.year &&\n                    d.month === now.month;\n            }\n        }, {\n            name: 'thisYear',\n            isUnary: true,\n            iconName: 'this_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year;\n            }\n        }, {\n            name: 'lastYear',\n            isUnary: true,\n            iconName: 'last_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year - 1;\n            }\n        }, {\n            name: 'nextYear',\n            isUnary: true,\n            iconName: 'next_year',\n            logic: (target: Date) => {\n                if (!target) {\n                    return false;\n                }\n\n                this.validateInputData(target);\n\n                const d = IgxDateFilteringOperand.getDateParts(target, 'y');\n                const now = IgxDateFilteringOperand.getDateParts(new Date(), 'y');\n                return d.year === now.year + 1;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: Date) => {\n                return target === null || target === undefined;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: Date) => {\n                return target !== null && target !== undefined;\n            }\n        }].concat(this.operations);\n    }\n\n    /**\n     * Splits a Date object into parts\n     *\n     * @memberof IgxDateFilteringOperand\n     */\n    public static getDateParts(date: Date, dateFormat?: string): IDateParts {\n        const res = {\n            day: null,\n            hours: null,\n            milliseconds: null,\n            minutes: null,\n            month: null,\n            seconds: null,\n            year: null\n        };\n        if (!date || !dateFormat) {\n            return res;\n        }\n        if (dateFormat.indexOf('y') >= 0) {\n            res.year = date.getFullYear();\n        }\n        if (dateFormat.indexOf('M') >= 0) {\n            res.month = date.getMonth();\n        }\n        if (dateFormat.indexOf('d') >= 0) {\n            res.day = date.getDate();\n        }\n        if (dateFormat.indexOf('h') >= 0) {\n            res.hours = date.getHours();\n        }\n        if (dateFormat.indexOf('m') >= 0) {\n            res.minutes = date.getMinutes();\n        }\n        if (dateFormat.indexOf('s') >= 0) {\n            res.seconds = date.getSeconds();\n        }\n        if (dateFormat.indexOf('f') >= 0) {\n            res.milliseconds = date.getMilliseconds();\n        }\n        return res;\n    }\n\n    private validateInputData(target: Date) {\n        if (!(target instanceof Date)) {\n            throw new Error('Could not perform filtering on \\'date\\' column because the datasource object type is not \\'Date\\'.');\n        }\n    }\n\n    protected findValueInSet(target: any, searchVal: Set<any>) {\n        return searchVal.has(new Date(target.getFullYear(), target.getMonth(), target.getDate()).toISOString());\n    }\n}\n\n/**\n * Provides filtering operations for numbers\n *\n * @export\n */\nexport class IgxNumberFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: number, searchVal: number) => {\n                return target === searchVal;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: number, searchVal: number) => {\n                return target !== searchVal;\n            }\n        }, {\n            name: 'greaterThan',\n            isUnary: false,\n            iconName: 'greater_than',\n            logic: (target: number, searchVal: number) => {\n                return target > searchVal;\n            }\n        }, {\n            name: 'lessThan',\n            isUnary: false,\n            iconName: 'less_than',\n            logic: (target: number, searchVal: number) => {\n                return target < searchVal;\n            }\n        }, {\n            name: 'greaterThanOrEqualTo',\n            isUnary: false,\n            iconName: 'greater_than_or_equal',\n            logic: (target: number, searchVal: number) => {\n                return target >= searchVal;\n            }\n        }, {\n            name: 'lessThanOrEqualTo',\n            isUnary: false,\n            iconName: 'less_than_or_equal',\n            logic: (target: number, searchVal: number) => {\n                return target <= searchVal;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: number) => {\n                return target === null || target === undefined || isNaN(target);\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: number) => {\n                return target !== null && target !== undefined && !isNaN(target);\n            }\n        }].concat(this.operations);\n    }\n}\n\n/**\n * Provides filtering operations for strings\n *\n * @export\n */\nexport class IgxStringFilteringOperand extends IgxFilteringOperand {\n    protected constructor() {\n        super();\n        this.operations = [{\n            name: 'contains',\n            isUnary: false,\n            iconName: 'contains',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.indexOf(search) !== -1;\n            }\n        }, {\n            name: 'doesNotContain',\n            isUnary: false,\n            iconName: 'does_not_contain',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.indexOf(search) === -1;\n            }\n        }, {\n            name: 'startsWith',\n            isUnary: false,\n            iconName: 'starts_with',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.startsWith(search);\n            }\n        }, {\n            name: 'endsWith',\n            isUnary: false,\n            iconName: 'ends_with',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target.endsWith(search);\n            }\n        }, {\n            name: 'equals',\n            isUnary: false,\n            iconName: 'equals',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target === search;\n            }\n        }, {\n            name: 'doesNotEqual',\n            isUnary: false,\n            iconName: 'not_equal',\n            logic: (target: string, searchVal: string, ignoreCase?: boolean) => {\n                const search = IgxStringFilteringOperand.applyIgnoreCase(searchVal, ignoreCase);\n                target = IgxStringFilteringOperand.applyIgnoreCase(target, ignoreCase);\n                return target !== search;\n            }\n        }, {\n            name: 'empty',\n            isUnary: true,\n            iconName: 'empty',\n            logic: (target: string) => {\n                return target === null || target === undefined || target.length === 0;\n            }\n        }, {\n            name: 'notEmpty',\n            isUnary: true,\n            iconName: 'not_empty',\n            logic: (target: string) => {\n                return target !== null && target !== undefined && target.length > 0;\n            }\n        }].concat(this.operations);\n    }\n\n    /**\n     * Applies case sensitivity on strings if provided\n     *\n     * @memberof IgxStringFilteringOperand\n     */\n    public static applyIgnoreCase(a: string, ignoreCase: boolean): string {\n        a = a || '';\n        // bulletproof\n        return ignoreCase ? ('' + a).toLowerCase() : a;\n    }\n}\n\n/**\n * Interface describing filtering operations\n *\n * @export\n */\nexport interface IFilteringOperation {\n    name: string;\n    isUnary: boolean;\n    iconName: string;\n    hidden?: boolean;\n    logic: (value: any, searchVal?: any, ignoreCase?: boolean) => boolean;\n}\n\n/**\n * Interface describing Date object in parts\n *\n * @export\n */\nexport interface IDateParts {\n    year: number;\n    month: number;\n    day: number;\n    hours: number;\n    minutes: number;\n    seconds: number;\n    milliseconds: number;\n}\n","import { IFilteringExpressionsTree } from './filtering-expressions-tree';\nimport { FilteringStrategy, IFilteringStrategy } from './filtering-strategy';\n\nexport const filteringStateDefaults = {\n    strategy: new FilteringStrategy()\n};\n\nexport declare interface IFilteringState {\n    expressionsTree: IFilteringExpressionsTree;\n    strategy?: IFilteringStrategy;\n}\n","import { ISortingExpression } from './sorting-expression.interface';\n\n/**\n * @hidden\n */\nexport class GroupedRecords extends Array<any> {}\n\nexport interface IGroupByRecord {\n    expression: ISortingExpression;\n    level: number;\n    records: GroupedRecords;\n    value: any;\n    groupParent: IGroupByRecord;\n    groups?: IGroupByRecord[];\n    height: number;\n }\n","import { Injectable, SecurityContext, Inject } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * **Ignite UI for Angular Icon Service** -\n *\n * The Ignite UI Icon Service makes it easy for developers to include custom SVG images and use them with IgxIconComponent.\n * In addition it could be used to associate a custom class to be applied on IgxIconComponent according to given fontSet.\n *\n * Example:\n * ```typescript\n * this.iconService.registerFontSetAlias('material', 'material-icons');\n * this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');\n * ```\n */\n\n@Injectable({\n    providedIn: 'root'\n})\n\nexport class IgxIconService {\n    private _fontSet = 'material-icons';\n    private _fontSetAliases = new Map<string, string>();\n    private _svgContainer: HTMLElement;\n    private _cachedSvgIcons: Set<string> = new Set<string>();\n\n    constructor(private _sanitizer: DomSanitizer, @Inject(DOCUMENT) private _document: any) { }\n\n    /**\n     *  Returns the default font set.\n     *```typescript\n     *   const defaultFontSet = this.iconService.defaultFontSet;\n     * ```\n     */\n    get defaultFontSet(): string {\n        return this._fontSet;\n    }\n\n    /**\n     *  Sets the default font set.\n     *```typescript\n     *   this.iconService.defaultFontSet = 'svg-flags';\n     * ```\n     */\n    set defaultFontSet(className: string) {\n        this._fontSet = className;\n    }\n\n    /**\n     *  Registers a custom class to be applied to IgxIconComponent for a given fontSet.\n     *```typescript\n     *   this.iconService.registerFontSetAlias('material', 'material-icons');\n     * ```\n     */\n    public registerFontSetAlias(alias: string, className: string = alias): this {\n        this._fontSetAliases.set(alias, className);\n        return this;\n    }\n\n    /**\n     *  Returns the custom class, if any, associated to a given fontSet.\n     *```typescript\n     *   const fontSetClass = this.iconService.fontSetClassName('material');\n     * ```\n     */\n    public fontSetClassName(alias: string): string {\n        return this._fontSetAliases.get(alias) || alias;\n    }\n\n    /**\n     *  Adds an SVG image to the cache. SVG source is an url.\n     *```typescript\n     *   this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');\n     * ```\n     */\n    public addSvgIcon(iconName: string, url: string, fontSet: string = '') {\n        if (iconName && url) {\n            const safeUrl = this._sanitizer.bypassSecurityTrustResourceUrl(url);\n            if (!safeUrl) {\n                throw new Error(`The provided URL could not be processed as trusted resource URL by Angular's DomSanitizer: \"${url}\".`);\n            }\n\n            const sanitizedUrl = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n            if (!sanitizedUrl) {\n                throw new Error(`The URL provided was not trusted as a resource URL: \"${url}\".`);\n            }\n\n            this.fetchSvg(iconName, url, fontSet);\n        } else {\n            throw new Error('You should provide at least `iconName` and `url` to register an svg icon.');\n        }\n    }\n\n    /**\n     *  Adds an SVG image to the cache. SVG source is its text.\n     *```typescript\n     *   this.iconService.addSvgIcon('simple', '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 200 200\">\n     *   <path d=\"M74 74h54v54H74\" /></svg>', 'svg-flags');\n     * ```\n     */\n    public addSvgIconFromText(iconName: string, iconText: string, fontSet: string = '') {\n        if (iconName && iconText) {\n            this.cacheSvgIcon(iconName, iconText, fontSet);\n        } else {\n            throw new Error('You should provide at least `iconName` and `iconText` to register an svg icon.');\n        }\n    }\n\n    /**\n     *  Returns whether a given SVG image is present in the cache.\n     *```typescript\n     *   const isSvgCached = this.iconService.isSvgIconCached('aruba', 'svg-flags');\n     * ```\n     */\n    public isSvgIconCached(iconName: string, fontSet: string = ''): boolean {\n        const iconKey = this.getSvgIconKey(iconName, fontSet);\n        return this._cachedSvgIcons.has(iconKey);\n    }\n\n    /**\n     *  Returns the key of a cached SVG image.\n     *```typescript\n     *   const svgIconKey = this.iconService.getSvgIconKey('aruba', 'svg-flags');\n     * ```\n     */\n    public getSvgIconKey(iconName: string, fontSet: string = '') {\n        return fontSet + '_' + iconName;\n    }\n\n    /**\n     * @hidden\n     */\n    private fetchSvg(iconName: string, url: string, fontSet: string = '') {\n        const instance = this;\n        const httpRequest = new XMLHttpRequest();\n        httpRequest.open('GET', url, true);\n        httpRequest.responseType = 'text';\n\n        // load â when the result is ready, that includes HTTP errors like 404.\n        httpRequest.onload = function (event: ProgressEvent) {\n            const request = event.target as XMLHttpRequest;\n            if (request.status === 200) {\n                instance.cacheSvgIcon(iconName, request.responseText, fontSet);\n            } else {\n                throw new Error(`Could not fetch SVG from url: ${url}; error: ${request.status} (${request.statusText})`);\n            }\n        };\n\n        // error â when the request couldnât be made, e.g.network down or invalid URL.\n        httpRequest.onerror = function (event: ProgressEvent) {\n            const request = event.target as XMLHttpRequest;\n            throw new Error(`Could not fetch SVG from url: ${url}; error status code: ${request.status} (${request.statusText})`);\n        };\n\n        httpRequest.send();\n    }\n\n    /**\n     * @hidden\n     */\n    private cacheSvgIcon(iconName: string, value: string, fontSet: string = '') {\n        if (iconName && value) {\n            this.ensureSvgContainerCreated();\n\n            const div = this._document.createElement('DIV');\n            div.innerHTML = value;\n            const svg = div.querySelector('svg') as SVGElement;\n\n            if (svg) {\n                const iconKey = this.getSvgIconKey(iconName, fontSet);\n\n                svg.setAttribute('id', iconKey);\n                svg.setAttribute('fit', '');\n                svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n                svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n\n                if (this._cachedSvgIcons.has(iconKey)) {\n                    const oldChild = this._svgContainer.querySelector(`svg[id='${iconKey}']`);\n                    this._svgContainer.removeChild(oldChild);\n                }\n\n                this._svgContainer.appendChild(svg);\n                this._cachedSvgIcons.add(iconKey);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private ensureSvgContainerCreated() {\n        if (!this._svgContainer) {\n            this._svgContainer = this._document.documentElement.querySelector('.igx-svg-container');\n            if (!this._svgContainer) {\n                this._svgContainer = this._document.createElement('DIV');\n                this._svgContainer.classList.add('igx-svg-container');\n                this._document.documentElement.appendChild(this._svgContainer);\n            }\n        }\n    }\n}\n","import { Component, ElementRef, HostBinding, Input, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { IgxIconService } from './icon.service';\n\n/**\n * **Ignite UI for Angular Icon** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/icon.html)\n *\n * The Ignite UI Icon makes it easy for developers to include material design icons directly in their markup. The icons\n * support custom colors and can be marked as active or disabled using the `isActive` property. This will change the appearance\n * of the icon.\n *\n * Example:\n * ```html\n * <igx-icon color=\"#00ff00\" isActive=\"true\">home</igx-icon>\n * ```\n */\nlet NEXT_ID = 0;\n\n@Component({\n    selector: 'igx-icon',\n    templateUrl: 'icon.component.html'\n})\n\nexport class IgxIconComponent implements OnInit {\n    @ViewChild('noLigature', { read: TemplateRef, static: true })\n    private noLigature: TemplateRef<HTMLElement>;\n\n    @ViewChild('explicitLigature', { read: TemplateRef, static: true })\n    private explicitLigature: TemplateRef<HTMLElement>;\n\n    @ViewChild('svgImage', { read: TemplateRef, static: true })\n    private svgImage: TemplateRef<HTMLElement>;\n\n    /**\n     *  This allows you to change the value of `class.igx-icon`. By default it's `igx-icon`.\n     *```typescript\n     *@ViewChild(\"MyIcon\") public icon: IgxIconComponent;\n     *constructor(private cdRef:ChangeDetectorRef) {}\n     *ngAfterViewInit() {\n     *    this.icon.cssClass = \"\";\n     *    this.cdRef.detectChanges();\n     *}\n     * ```\n     */\n    @HostBinding('class.igx-icon')\n    public cssClass = 'igx-icon';\n\n    /**\n     *  This allows you to disable the `aria-hidden` attribute. By default it's applied.\n     *```typescript\n     *@ViewChild(\"MyIcon\") public icon: IgxIconComponent;\n     *constructor(private cdRef:ChangeDetectorRef) {}\n     *ngAfterViewInit() {\n     *    this.icon.ariaHidden = false;\n     *    this.cdRef.detectChanges();\n     *}\n     * ```\n     */\n    @HostBinding('attr.aria-hidden')\n    public ariaHidden = true;\n\n    /**\n    *  An @Input property that sets the value of the `id` attribute.\n    *```html\n    *<igx-icon id=\"igx-icon-1\" fontSet=\"material\" color=\"blue\" [isActive]=\"false\">settings</igx-icon>\n    *```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-icon-${NEXT_ID++}`;\n\n    /**\n    *  An @Input property that sets the value of the `fontSet`. By default it's \"material\".\n    *```html\n    *<igx-icon fontSet=\"material\" color=\"blue\" [isActive]=\"false\">settings</igx-icon>\n    *```\n    */\n    @Input('fontSet')\n    public font: string;\n\n    /**\n    *  An @Input property that allows you to disable the `active` property. By default it's applied.\n    *```html\n    *<igx-icon [isActive]=\"false\" fontSet=\"material\" color=\"blue\">settings</igx-icon>\n    *```\n    */\n    @Input('isActive')\n    public active = true;\n\n    /**\n    *  An @Input property that allows you to change the `iconColor` of the icon.\n    *```html\n    *<igx-icon color=\"blue\" [isActive]=\"true\" fontSet=\"material\">settings</igx-icon>\n    *```\n    */\n    @Input('color')\n    public iconColor: string;\n\n    /**\n    *  An @Input property that allows you to set the `iconName` of the icon.\n    *  The `iconName` can be set using the `name` property.\n    *```html\n    *<igx-icon color=\"blue\" [isActive]=\"true\" fontSet=\"material\">question_answer</igx-icon>\n    *```\n    */\n    @Input('name')\n    public iconName: string;\n\n    /**\n     * An ElementRef property of the `igx-icon` component.\n     */\n    public el: ElementRef;\n\n    constructor(private _el: ElementRef, private iconService: IgxIconService) {\n        this.el = _el;\n        this.font = this.iconService.defaultFontSet;\n        this.iconService.registerFontSetAlias('material', 'material-icons');\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.updateIconClass();\n    }\n\n    /**\n     *  An accessor that returns the value of the font property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconFont = this.icon.getFontSet;\n     * }\n     * ```\n     */\n    get getFontSet(): string {\n        return this.font;\n    }\n\n    /**\n     *  An accessor that returns the value of the active property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconActive = this.icon.getActive;\n     * }\n     * ```\n     */\n    get getActive(): boolean {\n        return this.active;\n    }\n\n    /**\n     *  An accessor that returns inactive property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconActive = this.icon.getInactive;\n     * }\n     * ```\n     */\n    @HostBinding('class.igx-icon--inactive')\n    get getInactive(): boolean {\n        return !this.active;\n    }\n\n    /**\n     *  An accessor that returns the opposite value of the `iconColor` property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconColor = this.icon.getIconColor;\n     * }\n     * ```\n     */\n    @HostBinding('style.color')\n    get getIconColor(): string {\n        return this.iconColor;\n    }\n\n    /**\n     *  An accessor that returns the value of the iconName property.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconName = this.icon.getIconName;\n     * }\n     * ```\n     */\n    get getIconName(): string {\n        return this.iconName;\n    }\n\n    /**\n     *  An accessor that returns the key of the SVG image.\n     *  The key consists of the fontSet and the iconName separated by underscore.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let svgKey = this.icon.getSvgKey;\n     * }\n     * ```\n     */\n    get getSvgKey(): string {\n        if (this.iconService.isSvgIconCached(this.iconName, this.font)) {\n            return '#' + this.iconService.getSvgIconKey(this.iconName, this.font);\n        }\n\n        return null;\n    }\n\n    /**\n     *   An accessor that returns a TemplateRef to explicit, svg or no ligature.\n     *```typescript\n     *@ViewChild(\"MyIcon\")\n     *public icon: IgxIconComponent;\n     *ngAfterViewInit() {\n     *    let iconTemplate = this.icon.template;\n     * }\n     * ```\n     */\n    get template(): TemplateRef<HTMLElement> {\n        if (this.iconName) {\n            if (this.iconService.isSvgIconCached(this.iconName, this.font)) {\n                return this.svgImage;\n            }\n\n            return this.noLigature;\n        }\n\n        return this.explicitLigature;\n    }\n\n    /**\n     * @hidden\n     */\n    private updateIconClass() {\n        const className = this.iconService.fontSetClassName(this.font);\n        this.el.nativeElement.classList.add(className);\n\n        if (this.iconName && !this.iconService.isSvgIconCached(this.iconName, this.font)) {\n            this.el.nativeElement.classList.add(this.iconName);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { IgxIconComponent } from './icon.component';\nimport { DeprecateMethod } from '../core/deprecateDecorators';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxIconComponent],\n    exports: [IgxIconComponent],\n    imports: [CommonModule]\n})\nexport class IgxIconModule {\n    @DeprecateMethod('IgxIconModule.forRoot method is deprecated. Use IgxIconModule instead.')\n    public static forRoot() {\n        return {\n            ngModule: IgxIconModule\n        };\n    }\n}\n\nexport * from './icon.component';\nexport * from './icon.service';\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    NgModule,\n    OnInit,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum Size {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large'\n}\n\nexport enum AvatarType {\n    DEFAULT = 'default',\n    INITIALS = 'initials',\n    IMAGE = 'image',\n    ICON = 'icon'\n}\n\n/**\n * **Ignite UI for Angular Avatar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/avatar.html)\n *\n * The Ignite UI Avatar provides an easy way to add an avatar icon to your application.  This icon can be an\n * image, someone's initials or a material icon from the google material icon set.\n *\n * Example:\n * ```html\n * <igx-avatar initials=\"MS\" roundShape=\"true\" size=\"large\">\n * </igx-avatar>\n * ```\n */\n@Component({\n    selector: 'igx-avatar',\n    templateUrl: 'avatar.component.html'\n})\nexport class IgxAvatarComponent implements OnInit, AfterViewInit {\n\n    /**\n     * This is a reference to the avatar `image` element in the DOM.\n     *\n     * ```typescript\n     *  let image =  this.avatar.image;\n     * ```\n     * @memberof IgxAvatarComponent\n     */\n    @ViewChild('image', { static: false })\n    public image: ElementRef;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('defaultTemplate', { read: TemplateRef, static: true })\n    protected defaultTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('imageTemplate', { read: TemplateRef, static: true })\n    protected imageTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('initialsTemplate', { read: TemplateRef, static: true })\n    protected initialsTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ViewChild('iconTemplate', { read: TemplateRef, static: true })\n    protected iconTemplate: TemplateRef<any>;\n\n    /**\n     * Returns the `aria-label` of the avatar.\n     *\n     * ```typescript\n     * let ariaLabel = this.avatar.ariaLabel;\n     * ```\n     *\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = 'avatar';\n\n    /**\n     * Returns the `role` attribute of the avatar.\n     *\n     * ```typescript\n     * let avatarRole = this.avatar.role;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'img';\n\n    /**\n     * Returns the class of the avatar.\n     *\n     * ```typescript\n     * let avatarCLass =  this.avatar.cssClass;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('class.igx-avatar')\n    public cssClass = 'igx-avatar';\n\n    /**\n     * Returns the type of the avatar.\n     * The avatar can be: `\"initials type avatar\"`, `\"icon type avatar\"` or `\"image type avatar\"`.\n     *\n     * ```typescript\n     * let avatarDescription = this.avatar.roleDescription;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('attr.aria-roledescription')\n    public roleDescription: string;\n\n    /**\n     * @hidden\n     */\n    private _size: string | Size = 'small';\n\n    /**\n     * Sets the `id` of the avatar. If not set, the first avatar component will have `id` = `\"igx-avatar-0\"`.\n     *\n     * ```html\n     * <igx-avatar id=\"my-first-avatar\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-avatar-${NEXT_ID++}`;\n\n    /**\n     * Sets a round shape to the avatar if `roundShape` is `\"true\"`.\n     * By default the shape of the avatar is a square.\n     *\n     * ```html\n     * <igx-avatar roundShape = \"true\" ></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('class.igx-avatar--rounded')\n    @Input()\n    public roundShape = false;\n\n    /**\n     * Sets the avatar's `initials`/`icon` color.\n     *\n     *```html\n     *<igx-avatar color=\"blue\"></igx-avatar>\n     *```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('style.color')\n    @Input()\n    public color: string;\n\n    /**\n     * Sets the background color of the avatar.\n     *\n     * ```html\n     * <igx-avatar bgColor=\"yellow\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n\n    @HostBinding('style.background')\n    @Input()\n    public bgColor: string;\n\n    /**\n     * Sets `initials` to the avatar.\n     *\n     * ```html\n     * <igx-avatar initials=\"MN\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public initials: string;\n\n    /**\n     * Sets an `icon` to the avatar. All icons from the material icon set are supported.\n     *\n     * ```html\n     * <igx-avatar icon=\"phone\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public icon: string;\n\n    /**\n     * Sets the `image` source of the avatar.\n     *\n     * ```html\n     * <igx-avatar src=\"images/picture.jpg\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public src: string;\n\n    /**\n     * Returns the `size` of the avatar.\n     *\n     * ```typescript\n     *let avatarSize =  this.avatar.size;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    @Input()\n    public get size(): string | Size {\n        return this._size;\n    }\n\n    /**\n     * Sets the `size`  of the avatar.\n     * By default the `size` is `\"small\"`. It can be set to `\"medium\"` or `\"large\"`.\n     *\n     * ```\n     * <igx-avatar size=\"large\"></igx-avatar>\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    public set size(value: string | Size) {\n        switch (value) {\n            case 'small':\n            case 'medium':\n            case 'large':\n                this._size = value;\n                break;\n            default:\n                this._size = 'small';\n        }\n    }\n\n    /**\n     * Returns the type of the avatar.\n     *\n     * ```typescript\n     * let avatarType = this.avatar.type;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    get type(): AvatarType {\n        if (this.src) {\n            return AvatarType.IMAGE;\n        }\n\n        if (this.icon) {\n            return AvatarType.ICON;\n        }\n\n        if (this.initials) {\n            return AvatarType.INITIALS;\n        }\n\n        return AvatarType.DEFAULT;\n    }\n\n    /**\n     * Returns the template of the avatar.\n     *\n     * ```typescript\n     * let template = this.avatar.template;\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    get template(): TemplateRef<any> {\n        switch (this.type) {\n            case AvatarType.IMAGE:\n                return this.imageTemplate;\n            case AvatarType.INITIALS:\n                return this.initialsTemplate;\n            case AvatarType.ICON:\n                return this.iconTemplate;\n            default:\n                return this.defaultTemplate;\n        }\n    }\n\n    constructor(public elementRef: ElementRef) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.roleDescription = this.getRole();\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n        this.elementRef.nativeElement.classList\n            .add(`igx-avatar--${this._size}`, `igx-avatar--${this.type}`);\n    }\n\n    /**\n     * @hidden\n     */\n    private getRole(): string {\n        switch (this.type) {\n            case AvatarType.IMAGE:\n                return 'image avatar';\n            case AvatarType.ICON:\n                return 'icon avatar';\n            case AvatarType.INITIALS:\n                return 'initials avatar';\n            default:\n                return 'custom avatar';\n        }\n    }\n\n    /**\n     * Returns the url of the `image`.\n     *\n     * ```typescript\n     * let imageSourceUrl = this.avatar.getSrcUrl();\n     * ```\n     *\n     * @memberof IgxAvatarComponent\n     */\n    public getSrcUrl() {\n        return `url(${this.src})`;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxAvatarComponent],\n    exports: [IgxAvatarComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxAvatarModule { }\n","import { CommonModule } from '@angular/common';\nimport { Component, HostBinding, Input, NgModule } from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum Type {\n    DEFAULT = 'default',\n    INFO = 'info',\n    SUCCESS = 'success',\n    WARNING = 'warning',\n    ERROR = 'error'\n}\n/**\n * **Ignite UI for Angular Badge** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/badge.html)\n *\n * The Ignite UI Badge is used to decorate avatars, navigation menus, or other components in the\n * application when visual notification is needed. They are usually designed as icons with a predefined\n * style to communicate information, success, warnings, or errors.\n *\n * Example:\n * ```html\n * <igx-avatar icon=\"person\" roundShape=\"true\" size=\"small\">\n *   <igx-badge icon=\"check\" type=\"success\" class=\"badge-style\">\n *   </igx-badge>\n * </igx-avatar>\n * ```\n * The `badge-style` class is used to position the badge:\n * ```css\n * .badge-style {\n *   position: absolute;\n *   bottom: -6px;\n *   right:-50px;\n * }\n * ```\n */\n@Component({\n    selector: 'igx-badge',\n    templateUrl: 'badge.component.html'\n})\nexport class IgxBadgeComponent {\n\n    /**\n    * An @Input property that sets the value of the `id` attribute.\n    * ```html\n    *<igx-badge id=\"igx-badge-2\" icon=\"check\" type=\"success\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-badge-${NEXT_ID++}`;\n\n    /**\n    * An @Input property controlling the type of the badge.\n    * Allowed values are `default`, `info`, `success`, `warning`, `error`.\n    * Providing an invalid value won't display a badge.\n    * ```html\n    *<igx-badge type=\"success\" icon=\"check\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @Input()\n    public type: string | Type = 'default';\n\n    /**\n    * An @Input property that sets the value to be displayed inside the badge.\n    * If an `icon` property is already set the `icon` will be displayed.\n    * If neither a `value` nor an `icon` is set the contentent of the badge will be empty.\n    * ```html\n    *<igx-badge value=\"11\" type=\"success\" class=\"badge-style\"></igx-badge>\n    * ```\n    */\n    @Input()\n    public value = '';\n\n    /**\n     * Set an icon for the badge from the material icons set.\n     * Has priority over the `value` property.\n     * If neither a `value` nor an `icon` is set the content of the badge will be empty.\n     * Providing an invalid value won't display anything.\n     * ```html\n     *<igx-badge icon=\"check\" type=\"success\" class=\"badge-style\" value=\"11\"></igx-badge>\n     * ```\n     */\n    @Input()\n    public icon: string;\n\n    /**\n     * This allows you to set value to role attribute.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.label = \"badge-status\";\n     * ```\n     */\n    @HostBinding('attr.role')\n    public role = 'status';\n\n    /**\n     * This allows you to disable igx-badge class. The default it's applied.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.cssClass = false;\n     * ```\n     */\n    @HostBinding('class.igx-badge')\n    public cssClass = 'igx-badge';\n\n    /**\n     * This allows you to set value to aria-label attribute.\n     *```html\n     *@ViewChild(\"MyBadge\", { read: IgxBadgeComponent })\n     *public badge: IgxBadgeComponent;\n     * //...\n     *badge.label = \"icon-badge\";\n     * ```\n     */\n    @HostBinding('attr.aria-label')\n    public label = 'badge';\n\n    /**\n     * @hidden\n     * Defines a human-readable, accessor, author-localized description for the `type` and the `icon` or `value` of the element.\n     */\n    get roleDescription() {\n        let message;\n\n        // tslint:disable-next-line:prefer-conditional-expression\n        if (this.icon) {\n            message = this.type + ' type badge with icon type ' + this.icon;\n        } else if (this.value) {\n            message = this.type + ' badge type with value ' + this.value;\n        } else {\n            message = this.type + ' badge type without value';\n        }\n\n        return message;\n    }\n\n    /**\n     * @hidden\n     * Method which makes the name of the class more descriptive.\n     * This helps the styling of the badges.\n     */\n    public setClasses() {\n        let classes = {};\n\n        switch (Type[this.type.toUpperCase()]) {\n            case Type.DEFAULT:\n                classes = {\n                    [`${this.cssClass}__circle--default`]: true\n                };\n                break;\n            case Type.INFO:\n                classes = {\n                    [`${this.cssClass}__circle--info`]: true\n                };\n                break;\n            case Type.SUCCESS:\n                classes = {\n                    [`${this.cssClass}__circle--success`]: true\n                };\n                break;\n            case Type.WARNING:\n                classes = {\n                    [`${this.cssClass}__circle--warning`]: true\n                };\n                break;\n            case Type.ERROR:\n                classes = {\n                    [`${this.cssClass}__circle--error`]: true\n                };\n                break;\n        }\n\n        return classes;\n    }\n\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBadgeComponent],\n    exports: [IgxBadgeComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxBadgeModule {\n}\n","import { Component, HostBinding, ElementRef, Input, ChangeDetectorRef, Inject } from '@angular/core';\nimport { IgxExpansionPanelBase, IGX_EXPANSION_PANEL_COMPONENT } from './expansion-panel.common';\n\n@Component({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-body',\n    template: `<ng-content></ng-content>`\n})\nexport class IgxExpansionPanelBodyComponent {\n    private _labelledBy = '';\n    private _label = '';\n    constructor(\n        @Inject(IGX_EXPANSION_PANEL_COMPONENT) public panel: IgxExpansionPanelBase,\n        public element: ElementRef, public cdr: ChangeDetectorRef) {\n    }\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-expansion-panel__body')\n    public cssClass = `igx-expansion-panel__body`;\n\n    /**\n     * Gets the `aria-label` attribute of the panel body\n     * Defaults to the panel id with '-region' in the end;\n     * Get\n     * ```typescript\n     *  const currentLabel = this.panel.body.label;\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-label')\n    public get label(): string {\n        return this._label || this.panel.id + '-region';\n    }\n    /**\n     * Sets the `aria-label` attribute of the panel body\n     * ```typescript\n     *  this.panel.body.label = 'my-custom-label';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [label]=\"'my-custom-label'\"></igx-expansion-panel-body>\n     * ```\n     */\n    public set label(val: string) {\n        this._label = val;\n    }\n\n    /**\n     * Gets the `aria-labelledby` attribute of the panel body\n     * Defaults to the panel header id;\n     * Get\n     * ```typescript\n     *  const currentLabel = this.panel.body.labelledBy;\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-labelledby')\n    public get labelledBy(): string {\n        return this._labelledBy;\n    }\n    /**\n     * Sets the `aria-labelledby` attribute of the panel body\n     * ```typescript\n     *  this.panel.body.labelledBy = 'my-custom-id';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [labelledBy]=\"'my-custom-id'\"></igx-expansion-panel-body>\n     * ```\n     */\n    public set labelledBy(val: string) {\n        this._labelledBy = val;\n    }\n\n    /**\n     * Gets/sets the `role` attribute of the panel body\n     * Default is 'region';\n     * Get\n     * ```typescript\n     *  const currentRole = this.panel.body.role;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.body.role = 'content';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-body [role]=\"'custom'\"></igx-expansion-panel-body>\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.role')\n    public role = 'region';\n}\n","import { EventEmitter } from '@angular/core';\nimport { AnimationReferenceMetadata } from '@angular/animations';\n\nexport interface IgxExpansionPanelBase {\n    id: string;\n    cssClass: string;\n    /** @hidden @internal */\n    headerId: string;\n    collapsed: boolean;\n    animationSettings: { openAnimation: AnimationReferenceMetadata, closeAnimation: AnimationReferenceMetadata };\n    onCollapsed: EventEmitter<any>;\n    onExpanded: EventEmitter<any>;\n    collapse(evt?: Event);\n    expand(evt?: Event);\n    toggle(evt?: Event);\n}\n\n/** @hidden */\nexport const IGX_EXPANSION_PANEL_COMPONENT = 'IgxExpansionPanelToken';\n\nexport interface IExpansionPanelEventArgs {\n    event: Event;\n    panel: IgxExpansionPanelBase;\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-title'\n})\nexport class IgxExpansionPanelTitleDirective {\n    @HostBinding('class.igx-expansion-panel__header-title')\n    public cssClass = `igx-expansion-panel__header-title`;\n}\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-description'\n})\nexport class IgxExpansionPanelDescriptionDirective {\n    @HostBinding('class.igx-expansion-panel__header-description')\n    public cssClass = `igx-expansion-panel__header-description`;\n}\n\n/**\n * @hidden\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-expansion-panel-icon'\n})\nexport class IgxExpansionPanelIconDirective {\n}\n","import {\n    Component,\n    ChangeDetectorRef,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    Host,\n    EventEmitter,\n    Output,\n    ContentChild,\n    Inject\n} from '@angular/core';\nimport { IgxExpansionPanelIconDirective } from './expansion-panel.directives';\nimport { IExpansionPanelEventArgs, IGX_EXPANSION_PANEL_COMPONENT, IgxExpansionPanelBase } from './expansion-panel.common';\n\n/**\n * @hidden\n */\nexport enum ICON_POSITION {\n    LEFT = 'left',\n    NONE = 'none',\n    RIGHT = 'right'\n}\n\n\n@Component({\n    selector: 'igx-expansion-panel-header',\n    templateUrl: 'expansion-panel-header.component.html'\n})\nexport class IgxExpansionPanelHeaderComponent {\n     // properties section\n    private _iconTemplate = false;\n    /**\n     * Sets/gets the `id` of the expansion panel header.\n     * ```typescript\n     * let panelHeaderId =  this.panel.header.id;\n     * ```\n     * @memberof IgxExpansionPanelComponent\n     */\n    public id = '';\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxExpansionPanelIconDirective, { static: false })\n    public set iconTemplate(val: any) {\n        this._iconTemplate = <boolean>val;\n    }\n\n    /**\n     * @hidden\n     */\n    public get iconTemplate(): any {\n        return this._iconTemplate;\n    }\n\n    /**\n     * Gets/sets the `aria-level` attribute of the header\n     * Get\n     * ```typescript\n     *  const currentAriaLevel = this.panel.header.lv;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.lv = '5';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [lv]=\"myCustomLevel\"></igx-expansion-panel-header>\n     * ```\n     */\n    @HostBinding('attr.aria-level')\n    @Input()\n    public lv = '3';\n\n    /**\n     * Gets/sets the `role` attribute of the header\n     * Get\n     * ```typescript\n     *  const currentRole = this.panel.header.role;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.role = '5';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [role]=\"'custom'\"></igx-expansion-panel-header>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'heading';\n\n    /**\n     * @hidden\n     */\n    public get controls (): string {\n        return this.panel.id;\n    }\n\n    /**\n     * Gets/sets the position of the expansion-panel-header expand/collapse icon\n     * Accepts `left`, `right` or `none`\n     * ```typescript\n     *  const currentIconPosition = this.panel.header.iconPosition;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.iconPosition = 'left';\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [iconPosition]=\"'right'\"></igx-expansion-panel-header>\n     * ```\n     */\n    @Input()\n    public iconPosition: ICON_POSITION = ICON_POSITION.LEFT;\n\n    /**\n     * Emitted whenever a user interacts with the header host\n     * ```typescript\n     *  handleInteraction(event: IExpansionPanelEventArgs) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header (onInteraction)=\"handleInteraction($event)\">\n     *      ...\n     *  </igx-expansion-panel-header>\n     * ```\n     */\n    @Output()\n    public onInteraction = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * @hidden\n     */\n     @HostBinding('class.igx-expansion-panel__header')\n     public cssClass = 'igx-expansion-panel__header';\n\n     /**\n     * @hidden\n     */\n     @HostBinding('class.igx-expansion-panel__header--expanded')\n     public get isExpanded () {\n            return !this.panel.collapsed;\n         }\n\n    /**\n     * Gets/sets the whether the header is disabled\n     * When disabled, the header will not handle user events and will stop their propagation\n     *\n     * ```typescript\n     *  const isDisabled = this.panel.header.disabled;\n     * ```\n     * Set\n     * ```typescript\n     *  this.panel.header.disabled = true;\n     * ```\n     * ```html\n     *  <igx-expansion-panel-header [disabled]=\"true\">\n     *     ...\n     *  </igx-expansion-panel-header>\n     * ```\n     */\n    @Input()\n    @HostBinding('class.igx-expansion-panel--disabled')\n    public disabled = false;\n\n    constructor(@Host() @Inject(IGX_EXPANSION_PANEL_COMPONENT) public panel: IgxExpansionPanelBase, public cdr: ChangeDetectorRef,\n     public elementRef: ElementRef) {\n         this.id = `${this.panel.id}-header`;\n     }\n\n     /**\n     * @hidden\n     */\n     @HostListener('keydown.Enter', ['$event'])\n     @HostListener('keydown.Space', ['$event'])\n     @HostListener('keydown.Spacebar', ['$event'])\n     @HostListener('click', ['$event'])\n     public onAction(evt?: Event) {\n         if (this.disabled) {\n            evt.stopPropagation();\n            return;\n         }\n         this.onInteraction.emit({ event: evt, panel: this.panel });\n         this.panel.toggle(evt);\n         evt.preventDefault();\n     }\n\n    /** @hidden @internal */\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    public openPanel(event: KeyboardEvent) {\n        if (event.altKey) {\n            this.panel.expand(event);\n            this.onInteraction.emit({ event: event, panel: this.panel });\n        }\n     }\n\n     /** @hidden @internal */\n     @HostListener('keydown.Alt.ArrowUp', ['$event'])\n     public closePanel(event: KeyboardEvent) {\n        if (event.altKey) {\n            this.panel.collapse(event);\n            this.onInteraction.emit({ event: event, panel: this.panel });\n        }\n     }\n\n     /**\n     * @hidden\n     */\n     public get iconPositionClass(): string {\n        switch (this.iconPosition) {\n            case (ICON_POSITION.LEFT):\n                return `igx-expansion-panel__header-icon--start`;\n            case (ICON_POSITION.RIGHT):\n                return `igx-expansion-panel__header-icon--end`;\n            case (ICON_POSITION.NONE):\n                return `igx-expansion-panel__header-icon--none`;\n            default:\n                return '';\n        }\n     }\n}\n","import {\n    Component,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    Output,\n    ContentChild,\n    forwardRef,\n    AfterContentInit\n} from '@angular/core';\nimport { AnimationBuilder, AnimationReferenceMetadata, useAnimation, AnimationAnimateRefMetadata } from '@angular/animations';\nimport { growVerOut, growVerIn } from '../animations/main';\nimport { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';\nimport { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';\nimport { IGX_EXPANSION_PANEL_COMPONENT, IgxExpansionPanelBase, IExpansionPanelEventArgs } from './expansion-panel.common';\n\nlet NEXT_ID = 0;\n\nexport interface AnimationSettings {\n    openAnimation: AnimationReferenceMetadata;\n    closeAnimation: AnimationReferenceMetadata;\n}\n@Component({\n    selector: 'igx-expansion-panel',\n    templateUrl: 'expansion-panel.component.html',\n    providers: [{ provide: IGX_EXPANSION_PANEL_COMPONENT, useExisting: IgxExpansionPanelComponent }]\n})\nexport class IgxExpansionPanelComponent implements IgxExpansionPanelBase, AfterContentInit {\n    /**\n     * Sets/gets the animation settings of the expansion panel component\n     * Open and Close animation should be passed\n     *\n     * Get\n     * ```typescript\n     *  const currentAnimations = this.panel.animationSettings;\n     * ```\n     * Set\n     * ```typescript\n     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     *  ...\n     *  this.panel.animationsSettings = {\n     *      openAnimation: slideInLeft,\n     *      closeAnimation: slideOutRight\n     * };\n     * ```\n     * or via template\n     * ```typescript\n     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     *  ...\n     *  myCustomAnimationObject = {\n     *      openAnimation: slideInLeft,\n     *      closeAnimation: slideOutRight\n     * };\n     * ```html\n     *  <igx-expansion-panel [animationSettings]='myCustomAnimationObject'>\n     *  ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Input()\n    public animationSettings: AnimationSettings = {\n        openAnimation: growVerIn,\n        closeAnimation: growVerOut\n    };\n\n    /**\n     * Sets/gets the `id` of the expansion panel component.\n     * If not set, `id` will have value `\"igx-expansion-panel-0\"`;\n     * ```html\n     * <igx-expansion-panel id = \"my-first-expansion-panel\"></igx-expansion-panel>\n     * ```\n     * ```typescript\n     * let panelId =  this.panel.id;\n     * ```\n     * @memberof IgxExpansionPanelComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-expansion-panel-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-expansion-panel')\n    public cssClass = 'igx-expansion-panel';\n\n    /**\n     * Gets/sets whether the component is collapsed (its content is hidden)\n     * Get\n     * ```typescript\n     *  const myPanelState: boolean = this.panel.collapsed;\n     * ```\n     * Set\n     * ```html\n     *  this.panel.collapsed = true;\n     * ```\n     */\n    @Input()\n    public collapsed = true;\n\n    /**\n     * Emitted when the expansion panel finishes collapsing\n     * ```typescript\n     *  handleCollapsed(event: {\n     *  panel: IgxExpansionPanelComponent,\n     *  event: Event\n     * })\n     * ```\n     * ```html\n     *  <igx-expansion-panel (onCollapsed)=\"handleCollapsed($event)\">\n     *      ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Output()\n    public onCollapsed = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * Emitted when the expansion panel finishes expanding\n     * ```typescript\n     *  handleExpanded(event: {\n     *  panel: IgxExpansionPanelComponent,\n     *  event: Event\n     * })\n     * ```\n     * ```html\n     *  <igx-expansion-panel (onExpanded)=\"handleExpanded($event)\">\n     *      ...\n     *  </igx-expansion-panel>\n     * ```\n     */\n    @Output()\n    public onExpanded = new EventEmitter<IExpansionPanelEventArgs>();\n\n    /**\n     * @hidden\n     */\n    public get headerId() {\n        return this.header ? `${this.id}-header` : '';\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(forwardRef(() => IgxExpansionPanelBodyComponent),\n        { read: forwardRef(() => IgxExpansionPanelBodyComponent), static: false })\n    public body: IgxExpansionPanelBodyComponent;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(forwardRef(() => IgxExpansionPanelHeaderComponent),\n        { read: forwardRef(() => IgxExpansionPanelHeaderComponent), static: false })\n    public header: IgxExpansionPanelHeaderComponent;\n\n    constructor(private cdr: ChangeDetectorRef, private builder: AnimationBuilder) { }\n\n    /** @hidden */\n    ngAfterContentInit(): void {\n        if (this.body && this.header) {\n            // schedule at end of turn:\n            Promise.resolve().then(() => {\n                this.body.labelledBy = this.body.labelledBy || this.headerId;\n                this.body.label = this.body.label || this.id + '-region';\n            });\n        }\n    }\n\n    private playOpenAnimation(cb: () => void) {\n        if (!this.body) { // if not body element is passed, there is nothing to animate\n            return;\n        }\n        const animation = useAnimation(this.animationSettings.openAnimation);\n        const animationBuilder = this.builder.build(animation);\n        const openAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);\n\n        openAnimationPlayer.onDone(() => {\n            cb();\n            openAnimationPlayer.reset();\n        });\n\n        openAnimationPlayer.play();\n    }\n\n    private playCloseAnimation(cb: () => void) {\n        if (!this.body) { // if not body element is passed, there is nothing to animate\n            return;\n        }\n        const animation = useAnimation(this.animationSettings.closeAnimation);\n        const animationBuilder = this.builder.build(animation);\n        const closeAnimationPlayer = animationBuilder.create(this.body.element.nativeElement);\n        closeAnimationPlayer.onDone(() => {\n            cb();\n            closeAnimationPlayer.reset();\n        });\n\n        closeAnimationPlayer.play();\n    }\n\n    /**\n     * Collapses the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.collapse($event)\">Collpase Panel</button>\n     * ```\n     */\n    collapse(evt?: Event) {\n        if (this.collapsed) { // If expansion panel is already collapsed, do nothing\n            return;\n        }\n        this.playCloseAnimation(\n            () => {\n                this.onCollapsed.emit({ event: evt, panel: this });\n                this.collapsed = true;\n            }\n        );\n    }\n\n    /**\n     * Expands the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.expand($event)\">Expand Panel</button>\n     * ```\n     */\n    expand(evt?: Event) {\n        if (!this.collapsed) { // If the panel is already opened, do nothing\n            return;\n        }\n        this.collapsed = false;\n        this.cdr.detectChanges();\n        this.playOpenAnimation(\n            () => {\n                this.onExpanded.emit({ event: evt, panel: this });\n            }\n        );\n    }\n\n    /**\n     * Toggles the panel\n     *\n     * ```html\n     *  <igx-expansion-panel #myPanel>\n     *      ...\n     *  </igx-expansion-panel>\n     *  <button (click)=\"myPanel.toggle($event)\">Expand Panel</button>\n     * ```\n     */\n    toggle(evt?: Event) {\n        if (this.collapsed) {\n            this.open(evt);\n        } else {\n            this.close(evt);\n        }\n    }\n\n    open(evt?: Event) {\n        this.expand(evt);\n    }\n    close(evt?: Event) {\n        this.collapse(evt);\n    }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxAvatarModule } from '../avatar/avatar.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxExpansionPanelComponent } from './expansion-panel.component';\nimport { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';\nimport { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';\nimport { IgxExpansionPanelDescriptionDirective, IgxExpansionPanelTitleDirective,\n  IgxExpansionPanelIconDirective } from './expansion-panel.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxExpansionPanelComponent,\n    IgxExpansionPanelHeaderComponent,\n    IgxExpansionPanelBodyComponent,\n    IgxExpansionPanelDescriptionDirective,\n    IgxExpansionPanelTitleDirective,\n    IgxExpansionPanelIconDirective\n  ],\n  entryComponents: [\n  ],\n  exports: [\n    IgxExpansionPanelComponent,\n    IgxExpansionPanelHeaderComponent,\n    IgxExpansionPanelBodyComponent,\n    IgxExpansionPanelDescriptionDirective,\n    IgxExpansionPanelTitleDirective,\n      IgxExpansionPanelIconDirective\n  ],\n  imports: [\n    CommonModule,\n    IgxRippleModule,\n    IgxIconModule,\n    IgxButtonModule,\n    IgxAvatarModule\n  ]\n})\nexport class IgxExpansionPanelModule {\n}\n","import { Directive } from '@angular/core';\n\n// tslint:disable:directive-selector\n@Directive({\n    selector: 'igx-banner-actions'\n})\nexport class IgxBannerActionsDirective {\n}\n","import { Component, NgModule, EventEmitter, Output, Input, ViewChild, ElementRef,\n    ContentChild, HostBinding } from '@angular/core';\nimport { IgxExpansionPanelModule } from '../expansion-panel/expansion-panel.module';\nimport { AnimationSettings } from '../expansion-panel/expansion-panel.component';\nimport { IgxExpansionPanelComponent } from '../expansion-panel';\nimport { IgxIconModule, IgxIconComponent } from '../icon/index';\nimport { IToggleView } from '../core/navigation';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxBannerActionsDirective } from './banner.directives';\nimport { CommonModule } from '@angular/common';\nimport { CancelableEventArgs } from '../core/utils';\n\nexport interface BannerEventArgs {\n    banner: IgxBannerComponent;\n    event?: Event;\n}\n\nexport interface BannerCancelEventArgs extends BannerEventArgs, CancelableEventArgs {\n}\n/**\n * **Ignite UI for Angular Banner** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/banner.html)\n *\n * The Ignite UI Banner provides a highly templateable and easy to use banner that can be shown in your application.\n *\n * Usage:\n *\n * ```html\n * <igx-banner #banner>\n *   Our privacy settings have changed.\n *  <igx-banner-actions>\n *      <button igxButton=\"raised\">Read More</button>\n *      <button igxButton=\"raised\">Accept and Continue</button>\n *  </igx-banner-actions>\n * </igx-banner>\n * ```\n */\n@Component({\n    selector: 'igx-banner',\n    templateUrl: 'banner.component.html'\n})\nexport class IgxBannerComponent implements IToggleView {\n    private _bannerEvent: BannerEventArgs;\n    private _animationSettings: AnimationSettings;\n\n    @ViewChild('expansionPanel', { static: true })\n    private _expansionPanel: IgxExpansionPanelComponent;\n\n    @ContentChild(IgxBannerActionsDirective, { static: true })\n    private _bannerActionTemplate: IgxBannerActionsDirective;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxIconComponent, { static: true })\n    public bannerIcon: IgxIconComponent;\n\n    /**\n     * Fires after the banner shows up\n     * ```typescript\n     * public handleOpened(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onOpened)=\"handleOpened($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<BannerEventArgs>();\n\n    /**\n     * Fires before the banner shows up\n     * ```typescript\n     * public handleOpening(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onOpening)=\"handleOpening($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<BannerCancelEventArgs>();\n\n    /**\n     * Fires after the banner hides\n     * ```typescript\n     * public handleClosed(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onClosed)=\"handleClosed($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<BannerEventArgs>();\n\n    /**\n     * Fires before the banner hides\n     * ```typescript\n     * public handleClosing(event) {\n     *  ...\n     * }\n     * ```\n     * ```html\n     * <igx-banner (onClosing)=\"handleClosing($event)\"></igx-banner>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<BannerCancelEventArgs>();\n\n    /** @hidden */\n    public get useDefaultTemplate(): boolean {\n        return !this._bannerActionTemplate;\n    }\n\n    /**\n     * Get the animation settings used by the banner open/close methods\n     * ```typescript\n     * let currentAnimations: AnimationSettings = banner.animationSettings\n     * ```\n     */\n    @Input()\n    public get animationSettings(): AnimationSettings {\n        return this._animationSettings ? this._animationSettings : this._expansionPanel.animationSettings;\n    }\n\n    /**\n     * Set the animation settings used by the banner open/close methods\n     * ```typescript\n     * import { slideInLeft, slideOutRight } from 'igniteui-angular';\n     * ...\n     * banner.animationSettings: AnimationSettings = { openAnimation: slideInLeft, closeAnimation: slideOutRight };\n     * ```\n     */\n    public set animationSettings(settings: AnimationSettings) {\n        this._animationSettings = settings;\n    }\n    /**\n     * Gets whether banner is collapsed\n     *\n     * ```typescript\n     * const isCollapsed: boolean = banner.collapsed;\n     * ```\n     */\n    public get collapsed() {\n        return this._expansionPanel.collapsed;\n    }\n\n    /**\n     * Returns the native element of the banner component\n     * ```typescript\n     *  const myBannerElement: HTMLElement = banner.element;\n     * ```\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.display')\n    public get displayStyle(): string {\n        return this.collapsed ? '' : 'block';\n    }\n\n    constructor(public elementRef: ElementRef) { }\n\n    /**\n     * Opens the banner\n     *\n     * ```typescript\n     *  myBanner.open();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.open()\">Open Banner</button>\n     * ```\n     */\n    public open(event?: Event) {\n        this._bannerEvent = { banner: this, event};\n        const openingArgs = {\n            banner: this,\n            event,\n            cancel: false\n        };\n        this.onOpening.emit(openingArgs);\n        if (openingArgs.cancel) {\n            return;\n        }\n        this._expansionPanel.open(event);\n    }\n\n    /**\n     * Closes the banner\n     *\n     * ```typescript\n     *  myBanner.close();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.close()\">Close Banner</button>\n     * ```\n     */\n    public close(event?: Event) {\n        this._bannerEvent = { banner: this, event};\n        const closingArgs = {\n            banner: this,\n            event,\n            cancel: false\n        };\n        this.onClosing.emit(closingArgs);\n        if (closingArgs.cancel) {\n            return;\n        }\n        this._expansionPanel.close(event);\n    }\n\n    /**\n     * Toggles the banner\n     *\n     * ```typescript\n     *  myBanner.toggle();\n     * ```\n     *\n     * ```html\n     * <igx-banner #banner>\n     * ...\n     * </igx-banner>\n     * <button (click)=\"banner.toggle()\">Toggle Banner</button>\n     * ```\n     */\n    toggle(event?: Event) {\n        if (this.collapsed) {\n            this.open(event);\n        } else {\n            this.close(event);\n        }\n    }\n\n    /** @hidden */\n    public onExpansionPanelOpen() {\n        this.onOpened.emit(this._bannerEvent);\n    }\n\n    /** @hidden */\n    public onExpansionPanelClose() {\n        this.onClosed.emit(this._bannerEvent);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBannerComponent, IgxBannerActionsDirective],\n    exports: [IgxBannerComponent, IgxBannerActionsDirective],\n    imports: [CommonModule, IgxExpansionPanelModule, IgxIconModule, IgxButtonModule, IgxRippleModule]\n})\nexport class IgxBannerModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    NgModule,\n    Output,\n    Optional,\n    QueryList,\n    Renderer2,\n    ViewChildren,\n    OnDestroy\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { IgxButtonDirective, IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { takeUntil } from 'rxjs/operators';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions, DisplayDensity } from '../core/density';\n\nexport enum ButtonGroupAlignment { horizontal, vertical }\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Button Group** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/buttongroup.html)\n *\n * The Ignite UI Button Group displays a group of buttons either vertically or horizontally.  The group supports\n * single, multiple and toggle selection.\n *\n * Example:\n * ```html\n * <igx-buttongroup multiSelection=\"true\" [values]=\"fontOptions\">\n * </igx-buttongroup>\n * ```\n * The `fontOptions` value shown above is defined as:\n * ```typescript\n * this.fontOptions = [\n *   { icon: 'format_bold', selected: false },\n *   { icon: 'format_italic', selected: false },\n *   { icon: 'format_underlined', selected: false }];\n * ```\n */\n@Component({\n    selector: 'igx-buttongroup',\n    templateUrl: 'buttongroup-content.component.html'\n})\n\nexport class IgxButtonGroupComponent extends DisplayDensityBase implements AfterContentInit, AfterViewInit, OnDestroy {\n\n    private _disabled = false;\n    protected buttonClickNotifier$ = new Subject<boolean>();\n    protected queryListNotifier$ = new Subject<boolean>();\n\n    @ViewChildren(IgxButtonDirective) private viewButtons: QueryList<IgxButtonDirective>;\n    @ContentChildren(IgxButtonDirective) private templateButtons: QueryList<IgxButtonDirective>;\n\n    /**\n     * A collection containing all buttons inside the button group.\n     */\n    public get buttons(): IgxButtonDirective[] {\n        return [...this.viewButtons.toArray(), ...this.templateButtons.toArray()];\n    }\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not set it will be automatically generated.\n     * ```html\n     *  <igx-buttongroup [id]=\"'igx-dialog-56'\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-buttongroup-${NEXT_ID++}`;\n\n    /**\n     * Allows you to set a style using the `itemContentCssClass` input.\n     * The value should be the CSS class name that will be applied to the button group.\n     *```typescript\n     *public style1 = \"styleClass\";\n     * //..\n     *```\n     * ```html\n     *<igx-buttongroup [itemContentCssClass]=\"style1\" [multiSelection]=\"!multi\" [values]=\"alignOptions\">\n     *```\n     */\n    @Input() set itemContentCssClass(value: string) {\n        this._itemContentCssClass = value || this._itemContentCssClass;\n    }\n\n    /**\n     * Returns the CSS class of the item content of the `IgxButtonGroup`.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *   let buttonSelect = this.buttonG.itemContentCssClass;\n     *}\n     *```\n     */\n    get itemContentCssClass(): string {\n        return this._itemContentCssClass;\n    }\n\n    /**\n     * An @Input property that enables selecting multiple buttons. By default, multi-selection is false.\n     * ```html\n     * <igx-buttongroup [multiSelection]=\"false\" [alignment]=\"alignment\"></igx-buttongroup>\n     * ```\n     */\n    @Input() public multiSelection = false;\n    /**\n     * An @Input property that allows setting the buttons in the button group.\n     * ```typescript\n     *  public ngOnInit() {\n     *      this.cities = [\n     *        new Button({\n     *          label: \"Sofia\"\n     *      }),\n     *        new Button({\n     *          label: \"London\"\n     *      }),\n     *        new Button({\n     *          label: \"New York\",\n     *          selected: true\n     *      }),\n     *        new Button({\n     *          label: \"Tokyo\"\n     *      })\n     *  ];\n     *  }\n     *  //..\n     * ```\n     * ```html\n     *  <igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\"></igx-buttongroup>\n     * ```\n     */\n    @Input() public values: any;\n    /**\n     * An @Input property that allows you to disable the `igx-buttongroup` component. By default it's false.\n     * ```html\n     * <igx-buttongroup [disabled]=\"true\" [multiSelection]=\"multi\" [values]=\"fontOptions\"></igx-buttongroup>\n     * ```\n     */\n    @Input()\n    public get disabled(): boolean {\n        return this._disabled;\n    }\n    public set disabled(value: boolean) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this.viewButtons && this.templateButtons) {\n                this.buttons.forEach((b) => b.disabled = this._disabled);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectedIndexes: number[] = [];\n\n    /**\n     * Allows you to set the button group alignment.\n     * Available options are `ButtonGroupAlignment.horizontal` (default) and `ButtonGroupAlignment.vertical`.\n     * ```typescript\n     *public alignment = ButtonGroupAlignment.vertical;\n     * //..\n     * ```\n     * ```html\n     *<igx-buttongroup [multiSelection]=\"false\" [values]=\"cities\" [alignment]=\"alignment\"></igx-buttongroup>\n     * ```\n     */\n    @Input() set alignment(value: ButtonGroupAlignment) {\n        this._isVertical = value === ButtonGroupAlignment.vertical;\n    }\n    /**\n     * Returns the alignment of the `igx-buttongroup`.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let buttonAlignment = this.buttonG.alignment;\n     *}\n     *```\n     */\n    get alignment(): ButtonGroupAlignment {\n        return this._isVertical ? ButtonGroupAlignment.vertical : ButtonGroupAlignment.horizontal;\n    }\n\n    /**\n     * An @Ouput property that emits an event when a button is selected.\n     *```typescript\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onSelect(buttongroup){\n     *    this.toast.show()\n     *}\n     * //...\n     *```\n     *```html\n     * <igx-buttongroup #MyChild [multiSelection]=\"!multi\" (onSelect)=\"onSelect($event)\"></igx-buttongroup>\n     *<igx-toast #toast message=\"You have made a selection!\"></igx-toast>\n     *```\n     */\n    @Output() public onSelect = new EventEmitter<IButtonGroupEventArgs>();\n\n    /**\n     * An @Ouput property that emits an event when a button is deselected.\n     *```typescript\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onUnselect(buttongroup){\n     *    this.toast.show()\n     *}\n     * //...\n     *```\n     *```html\n     * igx-buttongroup #MyChild [multiSelection]=\"multi\" (onUnselect)=\"onUnselect($event)\"></igx-buttongroup>\n     *<igx-toast #toast message=\"You have deselected a button!\"></igx-toast>\n     *```\n     */\n    @Output() public onUnselect = new EventEmitter<IButtonGroupEventArgs>();\n\n    /**\n     * Returns true if the `igx-buttongroup` alignment is vertical.\n     * Note that in order for the accessor to work correctly the property should be set explicitly.\n     * ```html\n     * <igx-buttongroup #MyChild [alignment]=\"alignment\" [values]=\"alignOptions\">\n     * ```\n     * ```typescript\n     * //...\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let orientation = this.buttonG.isVertical;\n     *}\n     *```\n     */\n    public get isVertical(): boolean {\n        return this._isVertical;\n    }\n    private _isVertical: boolean;\n    private _itemContentCssClass: string;\n\n    constructor(private _cdr: ChangeDetectorRef, private _renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n    }\n\n    /**\n     * Gets the selected button/buttons.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    let selectedButton = this.buttonG.selectedButtons;\n     *}\n     *```\n     */\n    get selectedButtons(): IgxButtonDirective[] {\n        return this.buttons.filter((b, i) => {\n            return this.selectedIndexes.indexOf(i) !== -1;\n        });\n\n    }\n\n    /**\n     * Selects a button by its index.\n     * @memberOf {@link IgxButtonGroupComponent}\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    this.buttonG.selectButton(2);\n     *    this.cdr.detectChanges();\n     *}\n     *```\n     */\n    public selectButton(index: number) {\n        if (index >= this.buttons.length || index < 0) {\n            return;\n        }\n\n        const button = this.buttons[index];\n        const buttonElement = button.nativeElement;\n\n        if (buttonElement.classList.contains('igx-button--disabled')) {\n            return;\n        }\n\n        this.selectedIndexes.push(index);\n        button.selected = true;\n\n        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'true');\n        this._renderer.addClass(buttonElement, 'igx-button-group__item--selected');\n\n        this.onSelect.emit({ button: button, index: index });\n\n        const indexInViewButtons = this.viewButtons.toArray().indexOf(button);\n        if (indexInViewButtons !== -1) {\n            this.values[indexInViewButtons].selected = true;\n        }\n\n        // deselect other buttons if multiSelection is not enabled\n        if (!this.multiSelection && this.selectedIndexes.length > 1) {\n            this.buttons.forEach((b, i) => {\n                if (i !== index && this.selectedIndexes.indexOf(i) !== -1) {\n                    this.deselectButton(i);\n                }\n            });\n        }\n    }\n\n    /**\n     * Deselects a button by its index.\n     * @memberOf {@link IgxButtonGroupComponent}\n     * ```typescript\n     *@ViewChild(\"MyChild\")\n     *private buttonG: IgxButtonGroupComponent;\n     *ngAfterViewInit(){\n     *    this.buttonG.deselectButton(2);\n     *    this.cdr.detectChanges();\n     *}\n     * ```\n     */\n    public deselectButton(index: number) {\n        if (index >= this.buttons.length || index < 0) {\n            return;\n        }\n\n        const button = this.buttons[index];\n        const buttonElement = button.nativeElement;\n\n        if (buttonElement.classList.contains('igx-button--disabled')) {\n            return;\n        }\n\n        this.selectedIndexes.splice(this.selectedIndexes.indexOf(index), 1);\n        button.selected = false;\n\n        this._renderer.setAttribute(buttonElement, 'aria-pressed', 'false');\n        this._renderer.removeClass(buttonElement, 'igx-button-group__item--selected');\n\n        this.onUnselect.emit({ button: button, index: index });\n\n        const indexInViewButtons = this.viewButtons.toArray().indexOf(button);\n        if (indexInViewButtons !== -1) {\n            this.values[indexInViewButtons].selected = false;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        this.templateButtons.forEach( (button) => {\n            if (!button.initialDensity) {\n                button.displayDensity = this.displayDensity;\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        const initButtons = () => {\n            // Cancel any existing buttonClick subscriptions\n            this.buttonClickNotifier$.next();\n\n            this.selectedIndexes.splice(0, this.selectedIndexes.length);\n\n            // initial configuration\n            this.buttons.forEach((button, index) => {\n                const buttonElement = button.nativeElement;\n\n                if (this.disabled) {\n                    button.disabled = true;\n                }\n\n                if (!button.disabled && button.selected) {\n                    this.selectButton(index);\n                }\n\n                button.buttonClick.pipe(takeUntil(this.buttonClickNotifier$)).subscribe((ev) => this._clickHandler(ev, index));\n                this._renderer.addClass(buttonElement, 'igx-button-group__item');\n            });\n        };\n\n        this.viewButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(() => initButtons());\n        this.templateButtons.changes.pipe(takeUntil(this.queryListNotifier$)).subscribe(() => initButtons());\n        initButtons();\n\n        this._cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.buttonClickNotifier$.next();\n        this.buttonClickNotifier$.complete();\n\n        this.queryListNotifier$.next();\n        this.queryListNotifier$.complete();\n    }\n\n    /**\n     *@hidden\n     */\n    public _clickHandler(event, i) {\n        if (this.selectedIndexes.indexOf(i) !== -1) {\n            this.deselectButton(i);\n        } else {\n            this.selectButton(i);\n        }\n    }\n}\n\nexport interface IButtonGroupEventArgs {\n    button: IgxButtonDirective;\n    index: number;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxButtonGroupComponent],\n    exports: [IgxButtonGroupComponent],\n    imports: [IgxButtonModule, CommonModule, IgxRippleModule, IgxIconModule]\n})\n\nexport class IgxButtonGroupModule {\n}\n","export interface DateRangeDescriptor {\n    type: DateRangeType;\n    dateRange?: Date[];\n}\n\nexport enum DateRangeType {\n    After,\n    Before,\n    Between,\n    Specific,\n    Weekdays,\n    Weekends\n}\n","import { DateRangeDescriptor, DateRangeType } from '../core/dates';\n\nconst MDAYS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst FEBRUARY = 1;\n\nexport function range(start = 0, stop, step = 1) {\n    const res = [];\n    const cur = (stop === undefined) ? 0 : start;\n    const max = (stop === undefined) ? start : stop;\n    for (let i = cur; step < 0 ? i > max : i < max; i += step) {\n        res.push(i);\n    }\n    return res;\n}\n\n/**\n * Returns true for leap years, false for non-leap years.\n *\n * @export\n * @param year\n * @returns\n */\nexport function isLeap(year: number): boolean {\n    return (year % 4 === 0) && ((year % 100 !== 0) || (year % 400 === 0));\n}\n\nexport function weekDay(year: number, month: number, day: number): number {\n    return new Date(year, month, day).getDay();\n}\n\n/**\n * Return weekday and number of days for year, month.\n *\n * @export\n * @param year\n * @param month\n * @returns\n */\nexport function monthRange(year: number, month: number): number[] {\n    if ((month < 0) || (month > 11)) {\n        throw new Error('Invalid month specified');\n    }\n    const day = weekDay(year, month, 1);\n    let nDays = MDAYS[month];\n    if ((month === FEBRUARY) && (isLeap(year))) {\n        nDays++;\n    }\n    return [day, nDays];\n}\n\nexport function isDateInRanges(date: Date, ranges: DateRangeDescriptor[]): boolean {\n    date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    const dateInMs = date.getTime();\n\n    for (const descriptor of ranges) {\n        const dRanges = descriptor.dateRange ? descriptor.dateRange.map(\n            r => new Date(r.getFullYear(), r.getMonth(), r.getDate())) : undefined;\n        switch (descriptor.type) {\n            case (DateRangeType.After):\n                if (dateInMs > dRanges[0].getTime()) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Before):\n                if (dateInMs < dRanges[0].getTime()) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Between):\n                const dRange = dRanges.map(d => d.getTime());\n                const min = Math.min(dRange[0], dRange[1]);\n                const max = Math.max(dRange[0], dRange[1]);\n                if (dateInMs >= min && dateInMs <= max) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Specific):\n                const datesInMs = dRanges.map(d => d.getTime());\n                for (const specificDateInMs of datesInMs) {\n                    if (dateInMs === specificDateInMs) {\n                        return true;\n                    }\n                }\n\n                break;\n            case (DateRangeType.Weekdays):\n                const day = date.getDay();\n                if (day % 6 !== 0) {\n                    return true;\n                }\n\n                break;\n            case (DateRangeType.Weekends):\n                const weekday = date.getDay();\n                if (weekday % 6 === 0) {\n                    return true;\n                }\n\n                break;\n            default:\n                return false;\n        }\n    }\n\n    return false;\n}\n\nexport interface ICalendarDate {\n    date: Date;\n    isCurrentMonth: boolean;\n    isPrevMonth: boolean;\n    isNextMonth: boolean;\n}\n\nexport interface IFormattedParts {\n    value: string;\n    literal?: string;\n    combined: string;\n}\n\nexport interface IFormattingOptions {\n    day?: string;\n    month?: string;\n    weekday?: string;\n    year?: string;\n}\n\n\nexport interface IFormattingViews {\n    day?: boolean;\n    month?: boolean;\n    year?: boolean;\n}\n\nexport enum WEEKDAYS {\n    SUNDAY = 0,\n    MONDAY = 1,\n    TUESDAY = 2,\n    WEDNESDAY = 3,\n    THURSDAY = 4,\n    FRIDAY = 5,\n    SATURDAY = 6\n}\n\nexport class Calendar {\n\n    private _firstWeekDay: number | WEEKDAYS;\n\n    constructor(firstWeekDay: number | WEEKDAYS = WEEKDAYS.SUNDAY) {\n        this._firstWeekDay = firstWeekDay;\n    }\n\n    public get firstWeekDay(): number {\n        return this._firstWeekDay % 7;\n    }\n\n    public set firstWeekDay(value: number) {\n        this._firstWeekDay = value;\n    }\n\n    /**\n     * Returns an array of weekdays for one week starting\n     * with the currently set `firstWeekDay`\n     *\n     * this.firstWeekDay = 0 (Sunday) --> [0, 1, 2, 3, 4, 5, 6]\n     * this.firstWeekDay = 1 (Monday) --> [1, 2, 3, 4, 5, 6, 0]\n     *\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public weekdays(): number[] {\n        const res = [];\n        for (const i of range(this.firstWeekDay, this.firstWeekDay + 7)) {\n            res.push(i % 7);\n        }\n        return res;\n    }\n\n    /**\n     * Returns the date values for one month. It will always iterate throught\n     * complete weeks, so it will contain dates outside the specified month.\n     *\n     * @param year\n     * @param month\n     * @param boolean\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public monthdates(year: number, month: number, extraWeek: boolean = false): ICalendarDate[] {\n        let date = new Date(year, month, 1);\n        let days = (date.getDay() - this.firstWeekDay) % 7;\n        if (days < 0) {\n            days = 7 - Math.abs(days);\n        }\n        date = this.timedelta(date, 'day', -days);\n        const res = [];\n        let value: ICalendarDate;\n\n        while (true) {\n\n            value = this.generateICalendarDate(date, year, month);\n            res.push(value);\n\n            date = this.timedelta(date, 'day', 1);\n\n            if ((date.getMonth() !== month) && (date.getDay() === this.firstWeekDay)) {\n                if (extraWeek && res.length <= 35) {\n                    for (const i of range(0, 7)) {\n                        value = this.generateICalendarDate(date, year, month);\n                        res.push(value);\n                        date = this.timedelta(date, 'day', 1);\n                    }\n                }\n                break;\n            }\n        }\n        return res;\n    }\n\n    /**\n     * Returns a matrix (array of arrays) representing a month's calendar.\n     * Each row represents a full week; week entries are ICalendarDate objects.\n     *\n     * @param year\n     * @param month\n     * @returns\n     *\n     * @memberof Calendar\n     */\n    public monthdatescalendar(year: number, month: number, extraWeek: boolean = false): ICalendarDate[][] {\n        const dates = this.monthdates(year, month, extraWeek);\n        const res = [];\n        for (const i of range(0, dates.length, 7)) {\n            res.push(dates.slice(i, i + 7));\n        }\n        return res;\n    }\n\n    public timedelta(date: Date, interval: string, units: number): Date {\n        const ret = new Date(date);\n\n        const checkRollover = () => {\n            if (ret.getDate() !== date.getDate()) {\n                ret.setDate(0);\n            }\n        };\n\n        switch (interval.toLowerCase()) {\n            case 'year':\n                ret.setFullYear(ret.getFullYear() + units);\n                checkRollover();\n                break;\n            case 'quarter':\n                ret.setMonth(ret.getMonth() + 3 * units);\n                checkRollover();\n                break;\n            case 'month':\n                ret.setMonth(ret.getMonth() + units);\n                checkRollover();\n                break;\n            case 'week':\n                ret.setDate(ret.getDate() + 7 * units);\n                break;\n            case 'day':\n                ret.setDate(ret.getDate() + units);\n                break;\n            case 'hour':\n                ret.setTime(ret.getTime() + units * 3600000);\n                break;\n            case 'minute':\n                ret.setTime(ret.getTime() + units * 60000);\n                break;\n            case 'second':\n                ret.setTime(ret.getTime() + units * 1000);\n                break;\n            default:\n                throw new Error('Invalid interval specifier');\n        }\n        return ret;\n    }\n\n    public formatToParts(date: Date, locale: string, options: any, parts: string[]) {\n        const formatter = new Intl.DateTimeFormat(locale, options);\n        const result = {\n            date,\n            full: formatter.format(date)\n        };\n\n        if ((formatter as any).formatToParts) {\n            const formattedParts = (formatter as any).formatToParts(date);\n\n            const toType = (partType: string) => {\n                const index = formattedParts.findIndex(({ type }) => type === partType);\n                const o: IFormattedParts = { value: '', literal: '', combined: ''};\n\n                if (partType === 'era' && index > -1) {\n                    o.value = formattedParts[index].value;\n                    return o;\n                } else if (partType === 'era' && index === -1) {\n                    return o;\n                }\n\n                o.value = formattedParts[index].value;\n                o.literal = formattedParts[index + 1] ? formattedParts[index + 1].value : '';\n                o.combined = [o.value, o.literal].join('');\n                return o;\n            };\n\n            for (const each of parts) {\n                result[each] = toType(each);\n            }\n        } else {\n            for (const each of parts) {\n                result[each] = { value: '', literal: '', combined: ''};\n            }\n        }\n        return result;\n    }\n\n    private generateICalendarDate(date: Date, year: number, month: number): ICalendarDate {\n        return {\n            date,\n            isCurrentMonth: date.getFullYear() === year && date.getMonth() === month,\n            isNextMonth: this.isNextMonth(date, year, month),\n            isPrevMonth: this.isPreviousMonth(date, year, month)\n        };\n    }\n\n    private isPreviousMonth(date: Date, year: number, month: number): boolean {\n        if (date.getFullYear() === year) {\n            return date.getMonth() < month;\n        }\n        return date.getFullYear() < year;\n    }\n\n    private isNextMonth(date: Date, year: number, month: number): boolean {\n        if (date.getFullYear() === year) {\n            return date.getMonth() > month;\n        }\n\n        return date.getFullYear() > year;\n    }\n}\n","/**\n * This file contains all the directives used by the @link IgxCalendarComponent.\n * Except for the directives which are used for templating the calendar itself\n * you should generally not use them directly.\n * @preferred\n */\nimport {\n    Directive,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    Output,\n    TemplateRef,\n    ElementRef,\n    AfterViewInit,\n    OnDestroy,\n    NgZone\n} from '@angular/core';\nimport { fromEvent, Subject, interval } from 'rxjs';\nimport { takeUntil, debounce, tap } from 'rxjs/operators';\nimport { KEYS } from '../core/utils';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarYear]'\n})\nexport class IgxCalendarYearDirective {\n\n    @Input('igxCalendarYear')\n    public value: Date;\n\n    @Input()\n    public date: Date;\n\n    @Output()\n    public onYearSelection = new EventEmitter<Date>();\n\n    @HostBinding('class.igx-calendar__year')\n    public get defaultCSS(): boolean {\n        return !this.isCurrentYear;\n    }\n\n    @HostBinding('class.igx-calendar__year--current')\n    public get currentCSS(): boolean {\n        return this.isCurrentYear;\n    }\n\n    public get isCurrentYear(): boolean {\n        return this.date.getFullYear() === this.value.getFullYear();\n    }\n\n    @HostListener('click')\n    public onClick() {\n        this.onYearSelection.emit(this.value);\n    }\n}\n\n@Directive({\n    selector: '[igxCalendarMonth]'\n})\nexport class IgxCalendarMonthDirective {\n\n    @Input('igxCalendarMonth')\n    public value: Date;\n\n    @Input()\n    public date: Date;\n\n    @Input()\n    public index;\n\n    @Output()\n    public onMonthSelection = new EventEmitter<Date>();\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-calendar__month')\n    public get defaultCSS(): boolean {\n        return !this.isCurrentMonth;\n    }\n\n    @HostBinding('class.igx-calendar__month--current')\n    public get currentCSS(): boolean {\n        return this.isCurrentMonth;\n    }\n\n    public get isCurrentMonth(): boolean {\n        return this.date.getMonth() === this.value.getMonth();\n    }\n\n    public get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    constructor(public elementRef: ElementRef) {}\n\n    @HostListener('click')\n    public onClick() {\n        const date = new Date(this.value.getFullYear(), this.value.getMonth(), this.date.getDate());\n        this.onMonthSelection.emit(date);\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarHeader]'\n})\nexport class IgxCalendarHeaderTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarSubheader]'\n})\nexport class IgxCalendarSubheaderTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxCalendarScrollMonth]'\n})\nexport class IgxCalendarScrollMonthDirective implements AfterViewInit, OnDestroy {\n\n    /**\n     * A callback function to be invoked when month increment/decrement starts.\n     * @hidden\n     */\n    @Input()\n    public startScroll: (keydown?: boolean) => {};\n\n    /**\n     * A callback function to be invoked when month increment/decrement stops.\n     * @hidden\n     */\n    @Input()\n    public stopScroll: (event: any) => {};\n\n    /**\n     * @hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    constructor(private element: ElementRef, private zone: NgZone) { }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n\n        fromEvent(this.element.nativeElement, 'keyup').pipe(\n            debounce(() => interval(100)),\n            takeUntil(this.destroy$)\n        ).subscribe((event: KeyboardEvent) => {\n            this.stopScroll(event);\n        });\n\n        this.zone.runOutsideAngular(() => {\n            fromEvent(this.element.nativeElement, 'keydown').pipe(\n                tap((event: KeyboardEvent) => {\n                    if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n                        event.preventDefault();\n                        event.stopPropagation();\n                    }\n                }),\n                debounce(() => interval(100)),\n                takeUntil(this.destroy$)\n            ).subscribe((event: KeyboardEvent) => {\n                if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n                    this.zone.run(() => this.startScroll(true));\n                }\n            });\n        });\n\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mousedown')\n    public onMouseDown() {\n        this.startScroll();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseup', ['$event'])\n    public onMouseUp(event: MouseEvent) {\n        this.stopScroll(event);\n    }\n}\n","import { Input, Output, EventEmitter } from '@angular/core';\nimport { WEEKDAYS, Calendar, isDateInRanges, IFormattingOptions, IFormattingViews } from './calendar';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { DateRangeDescriptor } from '../core/dates';\nimport { Subject } from 'rxjs';\n\n/**\n * Sets the selction type - single, multi or range.\n */\nexport enum CalendarSelection {\n    SINGLE = 'single',\n    MULTI = 'multi',\n    RANGE = 'range'\n}\n\nexport enum ScrollMonth {\n    PREV = 'prev',\n    NEXT = 'next',\n    NONE = 'none'\n}\n\nexport class IgxCalendarBase implements ControlValueAccessor {\n    /**\n     * Gets the start day of the week.\n     * Can return a numeric or an enum representation of the week day.\n     * Defaults to `Sunday` / `0`.\n     */\n    @Input()\n    public get weekStart(): WEEKDAYS | number {\n        return this.calendarModel.firstWeekDay;\n    }\n\n    /**\n     * Sets the start day of the week.\n     * Can be assigned to a numeric value or to `WEEKDAYS` enum value.\n     */\n    public set weekStart(value: WEEKDAYS | number) {\n        this.calendarModel.firstWeekDay = value;\n    }\n\n    /**\n     * Gets the `locale` of the calendar.\n     * Default value is `\"en\"`.\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the calendar.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initFormatters();\n    }\n\n    /**\n     * Gets the date format options of the days view.\n     */\n    @Input()\n    public get formatOptions(): IFormattingOptions {\n        return this._formatOptions;\n    }\n\n    /**\n     * Sets the date format options of the days view.\n     * Default is { day: 'numeric', month: 'short', weekday: 'short', year: 'numeric' }\n     */\n    public set formatOptions(formatOptions: IFormattingOptions) {\n        this._formatOptions = Object.assign(this._formatOptions, formatOptions);\n        this.initFormatters();\n    }\n\n    /**\n     * Gets whether the `day`, `month` and `year` should be rendered\n     * according to the locale and formatOptions, if any.\n     */\n    @Input()\n    public get formatViews(): IFormattingViews {\n        return this._formatViews;\n    }\n\n    /**\n     * Gets whether the `day`, `month` and `year` should be rendered\n     * according to the locale and formatOptions, if any.\n     */\n    public set formatViews(formatViews: IFormattingViews) {\n        this._formatViews = Object.assign(this._formatViews, formatViews);\n    }\n\n    /**\n     *\n     * Gets the selection type.\n     * Default value is `\"single\"`.\n     * Changing the type of selection resets the currently\n     * selected values if any.\n     */\n    @Input()\n    public get selection(): string {\n        return this._selection;\n    }\n\n    /**\n     * Sets the selection.\n     */\n    public set selection(value: string) {\n        switch (value) {\n            case CalendarSelection.SINGLE:\n                this.selectedDates = null;\n                break;\n            case CalendarSelection.MULTI:\n            case CalendarSelection.RANGE:\n                this.selectedDates = [];\n                break;\n            default:\n                throw new Error('Invalid selection value');\n        }\n        this._onChangeCallback(this.selectedDates);\n        this.rangeStarted = false;\n        this._selection = value;\n    }\n\n    /**\n     * Gets the selected date(s).\n     *\n     * When selection is set to `single`, it returns\n     * a single `Date` object.\n     * Otherwise it is an array of `Date` objects.\n     */\n    @Input()\n    public get value(): Date | Date[] {\n        return this.selectedDates;\n    }\n\n    /**\n     * Sets the selected date(s).\n     *\n     * When selection is set to `single`, it accepts\n     * a single `Date` object.\n     * Otherwise it is an array of `Date` objects.\n     */\n    public set value(value: Date | Date[]) {\n        this.selectDate(value);\n    }\n\n    /**\n     * Gets the date that is presented.\n     * By default it is the current date.\n     */\n    @Input()\n    public get viewDate(): Date {\n        return this._viewDate;\n    }\n\n    /**\n     * Sets the date that will be presented in the default view when the component renders.\n     */\n    public set viewDate(value: Date) {\n        this._viewDate = this.getDateOnly(value);\n    }\n\n    /**\n     * Gets the disabled dates descriptors.\n     */\n    @Input()\n    public get disabledDates(): DateRangeDescriptor[] {\n        return this._disabledDates;\n    }\n\n    /**\n     * Sets the disabled dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyCalendar\")\n     *public calendar: IgxCalendarComponent;\n     *ngOnInit(){\n     *    this.calendar.disabledDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set disabledDates(value: DateRangeDescriptor[]) {\n        this._disabledDates = value;\n    }\n\n    /**\n     * Gets the special dates descriptors.\n     */\n    @Input()\n    public get specialDates(): DateRangeDescriptor[] {\n        return this._specialDates;\n    }\n\n    /**\n     * Sets the special dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyCalendar\")\n     *public calendar: IgxCalendarComponent;\n     *ngOnInit(){\n     *    this.calendar.specialDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set specialDates(value: DateRangeDescriptor[]) {\n        this._specialDates = value;\n    }\n\n    /**\n     * Emits an event when a date is selected.\n     * Provides reference the `selectedDates` property.\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date | Date[]>();\n\n    /**\n     *@hidden\n     */\n    private _selection: CalendarSelection | string = CalendarSelection.SINGLE;\n\n    /**\n     *@hidden\n     */\n    private rangeStarted = false;\n\n    /**\n    *@hidden\n    */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _viewDate: Date;\n\n    /**\n     *@hidden\n     */\n    private _disabledDates: DateRangeDescriptor[] = null;\n\n    /**\n     *@hidden\n     */\n    private _specialDates: DateRangeDescriptor[] = null;\n\n    /**\n     *@hidden\n     */\n    private _formatOptions: IFormattingOptions = {\n        day: 'numeric',\n        month: 'short',\n        weekday: 'short',\n        year: 'numeric'\n    };\n\n    /**\n     *@hidden\n     */\n    private _formatViews: IFormattingViews = {\n        day: false,\n        month: true,\n        year: false\n    };\n\n    /**\n     *@hidden\n     */\n    protected formatterWeekday;\n\n    /**\n     *@hidden\n     */\n    protected formatterDay;\n\n    /**\n     *@hidden\n     */\n    protected formatterMonth;\n\n    /**\n     *@hidden\n     */\n    protected formatterYear;\n\n    /**\n     *@hidden\n     */\n    protected formatterMonthday;\n\n    /**\n     *@hidden\n     */\n    public calendarModel: Calendar;\n\n    /**\n     * @hidden\n     */\n    public monthScrollDirection = ScrollMonth.NONE;\n\n    /**\n     *@hidden\n     */\n    public scrollMonth$ = new Subject();\n\n    /**\n     *@hidden\n     */\n    public stopMonthScroll$ = new Subject<boolean>();\n\n    /**\n     *@hidden\n     */\n    public startMonthScroll$ = new Subject();\n\n    /**\n     *@hidden\n     */\n    public selectedDates;\n\n    /**\n     *@hidden\n     */\n    protected _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    protected _onChangeCallback: (_: Date) => void = () => { };\n\n    /**\n     * @hidden\n     */\n    constructor() {\n        this.calendarModel = new Calendar();\n\n        this.viewDate = this.viewDate ? this.viewDate : new Date();\n\n        this.calendarModel.firstWeekDay = this.weekStart;\n        this.initFormatters();\n    }\n\n    /**\n     *@hidden\n     */\n    private getDateOnlyInMs(date: Date) {\n        return this.getDateOnly(date).getTime();\n    }\n\n    /**\n     *@hidden\n     */\n    private generateDateRange(start: Date, end: Date): Date[] {\n        const result = [];\n        start = this.getDateOnly(start);\n        end = this.getDateOnly(end);\n        while (start.getTime() !== end.getTime()) {\n            start = this.calendarModel.timedelta(start, 'day', 1);\n            result.push(start);\n        }\n\n        return result;\n    }\n\n    /**\n     * Performs a single selection.\n     * @hidden\n     */\n    private selectSingle(value: Date) {\n        this.selectedDates = this.getDateOnly(value);\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Performs a multiple selection\n     * @hidden\n     */\n    private selectMultiple(value: Date | Date[]) {\n        if (Array.isArray(value)) {\n            this.selectedDates = this.selectedDates.concat(value.map(v => this.getDateOnly(v)));\n        } else {\n            const valueDateOnly = this.getDateOnly(value);\n            const newSelection = [];\n            if (this.selectedDates.every((date: Date) => date.getTime() !== valueDateOnly.getTime())) {\n                newSelection.push(valueDateOnly);\n            } else {\n                this.selectedDates = this.selectedDates.filter(\n                    (date: Date) => date.getTime() !== valueDateOnly.getTime()\n                );\n            }\n\n            if (newSelection.length > 0) {\n                this.selectedDates = this.selectedDates.concat(newSelection);\n            }\n        }\n\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     *@hidden\n     */\n    private selectRange(value: Date | Date[], excludeDisabledDates: boolean = false) {\n        let start: Date;\n        let end: Date;\n\n        if (Array.isArray(value)) {\n            // this.rangeStarted = false;\n            value.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n            start = this.getDateOnly(value[0]);\n            end = this.getDateOnly(value[value.length - 1]);\n            this.selectedDates = [start, ...this.generateDateRange(start, end)];\n        } else {\n            if (!this.rangeStarted) {\n                this.rangeStarted = true;\n                this.selectedDates = [value];\n            } else {\n                this.rangeStarted = false;\n\n                if (this.selectedDates[0].getTime() === value.getTime()) {\n                    this.selectedDates = [];\n                    this._onChangeCallback(this.selectedDates);\n                    return;\n                }\n\n                this.selectedDates.push(value);\n                this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n\n                start = this.selectedDates.shift();\n                end = this.selectedDates.pop();\n                this.selectedDates = [start, ...this.generateDateRange(start, end)];\n            }\n        }\n\n        if (excludeDisabledDates) {\n            this.selectedDates = this.selectedDates.filter(d => !this.isDateDisabled(d));\n        }\n\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * Performs a single deselection.\n     * @hidden\n     */\n    private deselectSingle(value: Date) {\n        if (this.selectedDates !== null &&\n            this.getDateOnlyInMs(value as Date) === this.getDateOnlyInMs(this.selectedDates)) {\n            this.selectedDates = null;\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * Performs a multiple deselection.\n     * @hidden\n     */\n    private deselectMultiple(value: Date[]) {\n        value = value.filter(v => v !== null);\n        const selectedDatesCount = this.selectedDates.length;\n        const datesInMsToDeselect: Set<number> = new Set<number>(\n            value.map(v => this.getDateOnlyInMs(v)));\n\n        for (let i = this.selectedDates.length - 1; i >= 0; i--) {\n            if (datesInMsToDeselect.has(this.getDateOnlyInMs(this.selectedDates[i]))) {\n                this.selectedDates.splice(i, 1);\n            }\n        }\n\n        if (this.selectedDates.length !== selectedDatesCount) {\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * Performs a range deselection.\n     * @hidden\n     */\n    private deselectRange(value: Date[]) {\n        value = value.filter(v => v !== null);\n        if (value.length < 1) {\n            return;\n        }\n\n        value.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        const valueStart = this.getDateOnlyInMs(value[0]);\n        const valueEnd = this.getDateOnlyInMs(value[value.length - 1]);\n\n        this.selectedDates.sort((a: Date, b: Date) => a.valueOf() - b.valueOf());\n        const selectedDatesStart = this.getDateOnlyInMs(this.selectedDates[0]);\n        const selectedDatesEnd = this.getDateOnlyInMs(this.selectedDates[this.selectedDates.length - 1]);\n\n        if (!(valueEnd < selectedDatesStart) && !(valueStart > selectedDatesEnd)) {\n            this.selectedDates = [];\n            this.rangeStarted = false;\n            this._onChangeCallback(this.selectedDates);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected initFormatters() {\n        this.formatterDay = new Intl.DateTimeFormat(this._locale, { day: this._formatOptions.day });\n        this.formatterWeekday = new Intl.DateTimeFormat(this._locale, { weekday: this._formatOptions.weekday });\n        this.formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month });\n        this.formatterYear = new Intl.DateTimeFormat(this._locale, { year: this._formatOptions.year });\n        this.formatterMonthday = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month, day: this._formatOptions.day });\n    }\n\n    /**\n     *@hidden\n     */\n    protected getDateOnly(date: Date) {\n        return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date | Date[]) {\n        this.selectedDates = value;\n    }\n\n    /**\n     * Checks whether a date is disabled.\n     * @hidden\n     */\n    public isDateDisabled(date: Date) {\n        if (this.disabledDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(date, this.disabledDates);\n    }\n\n    /**\n     * Selects date(s) (based on the selection type).\n     */\n    public selectDate(value: Date | Date[]) {\n        if (value === null || value === undefined || (Array.isArray(value) && value.length === 0)) {\n            return new Date();\n        }\n\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n                this.selectSingle(value as Date);\n                break;\n            case CalendarSelection.MULTI:\n                this.selectMultiple(value);\n                break;\n            case CalendarSelection.RANGE:\n                this.selectRange(value, true);\n                break;\n        }\n    }\n\n    /**\n     * Deselects date(s) (based on the selection type).\n     */\n    public deselectDate(value?: Date | Date[]) {\n        if (this.selectedDates === null || this.selectedDates === []) {\n            return;\n        }\n\n        if (value === null || value === undefined) {\n            this.selectedDates = this.selection === CalendarSelection.SINGLE ? null : [];\n            this.rangeStarted = false;\n            this._onChangeCallback(this.selectedDates);\n            return;\n        }\n\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n                this.deselectSingle(value as Date);\n                break;\n            case CalendarSelection.MULTI:\n                this.deselectMultiple(value as Date[]);\n                break;\n            case CalendarSelection.RANGE:\n                this.deselectRange(value as Date[]);\n                break;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectDateFromClient(value: Date) {\n        switch (this.selection) {\n            case CalendarSelection.SINGLE:\n            case CalendarSelection.MULTI:\n                if (!this.isDateDisabled(value)) {\n                    this.selectDate(value);\n                }\n\n                break;\n            case CalendarSelection.RANGE:\n                this.selectRange(value, true);\n                break;\n        }\n    }\n}\n","import { IgxCalendarBase } from './calendar-base';\nimport { ViewChild, ElementRef, HostBinding } from '@angular/core';\nimport { KEYS } from '../core/utils';\n\n/**\n * Sets the calender view - days, months or years.\n */\nexport enum CalendarView {\n    DEFAULT,\n    YEAR,\n    DECADE\n}\nexport class IgxMonthPickerBase extends IgxCalendarBase {\n\n    /**\n     * @hidden\n     */\n    @ViewChild('yearsBtn', { static: false })\n    public yearsBtn: ElementRef;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Gets the current active view.\n     */\n    public get activeView(): CalendarView {\n        return this._activeView;\n    }\n\n    /**\n     * Sets the current active view.\n     */\n    public set activeView(val: CalendarView) {\n        this._activeView = val;\n    }\n\n    /**\n     * @hidden\n     */\n    public get isDefaultView(): boolean {\n        return this._activeView === CalendarView.DEFAULT;\n    }\n\n    /**\n     * @hidden\n     */\n    public get isDecadeView(): boolean {\n        return this._activeView === CalendarView.DECADE;\n    }\n\n    /**\n     *@hidden\n     */\n    private _activeView = CalendarView.DEFAULT;\n\n    /**\n     * @hidden\n     */\n    public changeYear(event: Date) {\n        this.viewDate = new Date(event.getFullYear(), this.viewDate.getMonth());\n        this._activeView = CalendarView.DEFAULT;\n\n        requestAnimationFrame(() => {\n            this.yearsBtn.nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade(): void {\n        this._activeView = CalendarView.DECADE;\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            this.activeViewDecade();\n        }\n    }\n\n    /**\n     * Returns the locale representation of the year in the year view if enabled,\n     * otherwise returns the default `Date.getFullYear()` value.\n     *\n     * @hidden\n     */\n    public formattedYear(value: Date): string {\n        if (this.formatViews.year) {\n            return this.formatterYear.format(value);\n        }\n        return `${value.getFullYear()}`;\n    }\n}\n","import {\n    Component,\n    Output,\n    EventEmitter,\n    Input,\n    HostBinding,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    ElementRef\n} from '@angular/core';\nimport { Calendar } from '../calendar';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxCalendarMonthDirective } from '../calendar.directives';\n\nlet NEXT_ID = 0;\n\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMonthsViewComponent, multi: true }],\n    selector: 'igx-months-view',\n    templateUrl: 'months-view.component.html'\n})\nexport class IgxMonthsViewComponent implements ControlValueAccessor {\n\n    /**\n     * Sets/gets the `id` of the months view.\n     * If not set, the `id` will have value `\"igx-months-view-0\"`.\n     * ```html\n     * <igx-months-view id=\"my-months-view\"></igx-months-view>\n     * ```\n     * ```typescript\n     * let monthsViewId =  this.monthsView.id;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-months-view-${NEXT_ID++}`;\n\n    /**\n     * Gets/sets the selected date of the months view.\n     * By default it is the current date.\n     * ```html\n     * <igx-months-view [date]=\"myDate\"></igx-months-view>\n     * ```\n     * ```typescript\n     * let date =  this.monthsView.date;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Input()\n    public date = new Date();\n\n    /**\n     * Gets the month format option of the months view.\n     * ```typescript\n     * let monthFormat = this.monthsView.monthFormat.\n     * ```\n     */\n    @Input()\n    public get monthFormat(): string {\n        return this._monthFormat;\n    }\n\n    /**\n     * Sets the month format option of the months view.\n     * ```html\n     * <igx-months-view> [monthFormat] = \"short'\"</igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    public set monthFormat(value: string) {\n        this._monthFormat = value;\n        this.initMonthFormatter();\n    }\n\n    /**\n     * Gets the `locale` of the months view.\n     * Default value is `\"en\"`.\n     * ```typescript\n     * let locale =  this.monthsView.locale;\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the months view.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     * ```html\n     * <igx-months-view [locale]=\"de\"></igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initMonthFormatter();\n    }\n\n    /**\n     * Gets/sets whether the view should be rendered\n     * according to the locale and monthFormat, if any.\n     */\n    @Input()\n    public formatView = true;\n\n    /**\n     * Emits an event when a selection is made in the months view.\n     * Provides reference the `date` property in the `IgxMonthsViewComponent`.\n     * ```html\n     * <igx-months-view (onSelection)=\"onSelection($event)\"></igx-months-view>\n     * ```\n     * @memberof IgxMonthsViewComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxCalendarMonthDirective, { read: IgxCalendarMonthDirective })\n    public dates: QueryList<IgxCalendarMonthDirective>;\n\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Returns an array of date objects which are then used to\n     * properly render the month names.\n     *\n     * Used in the template of the component\n     *\n     * @hidden\n     */\n    get months(): Date[] {\n        let start = new Date(this.date.getFullYear(), 0, 1);\n        const result = [];\n\n        for (let i = 0; i < 12; i++) {\n            result.push(start);\n            start = this._calendarModel.timedelta(start, 'month', 1);\n        }\n\n        return result;\n    }\n\n    /**\n     *@hidden\n     */\n    private _formatterMonth: any;\n\n    /**\n     *@hidden\n     */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _monthFormat = 'short';\n\n    /**\n     *@hidden\n     */\n    private _calendarModel: Calendar;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    constructor(public el: ElementRef) {\n        this.initMonthFormatter();\n        this._calendarModel = new Calendar();\n    }\n\n    /**\n     * Returns the locale representation of the month in the months view.\n     *\n     * @hidden\n     */\n    public formattedMonth(value: Date): string {\n        if (this.formatView) {\n            return this._formatterMonth.format(value);\n        }\n        return `${value.getMonth()}`;\n    }\n\n    /**\n     *@hidden\n     */\n    public selectMonth(event) {\n        this.onSelection.emit(event);\n\n        this.date = event;\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        if (value) {\n            this.date = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public monthTracker(index, item): string {\n        return `${item.getMonth()}}`;\n    }\n\n    /**\n     *@hidden\n     */\n    private initMonthFormatter() {\n        this._formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this.monthFormat });\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) {\n            return;\n        }\n\n        const months = this.dates.toArray();\n        const nodeRect = node.nativeElement.getBoundingClientRect();\n\n        for (let index = months.indexOf(node) - 1; index >= 0; index--) {\n            const nextNodeRect = months[index].nativeElement.getBoundingClientRect();\n            if (nodeRect.top !== nextNodeRect.top && nodeRect.left === nextNodeRect.left) {\n                months[index].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) {\n            return;\n        }\n\n        const months = this.dates.toArray();\n        const nodeRect = node.nativeElement.getBoundingClientRect();\n\n        for (let index = months.indexOf(node) + 1; index < months.length; index++) {\n            const nextNodeRect = months[index].nativeElement.getBoundingClientRect();\n            if (nodeRect.top !== nextNodeRect.top && nodeRect.left === nextNodeRect.left) {\n                months[index].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n\n        const months = this.dates.toArray();\n        if (months.indexOf(node) + 1 < months.length) {\n            const month = months[months.indexOf(node) + 1];\n\n            month.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const node = this.dates.find((date) => date.nativeElement === event.target);\n        if (!node) { return; }\n\n        const months = this.dates.toArray();\n        if (months.indexOf(node) - 1 >= 0) {\n            const month = months[months.indexOf(node) - 1];\n\n            month.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const month = this.dates.toArray()[0];\n\n        month.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const months = this.dates.toArray();\n        const month = months[months.length - 1];\n\n        month.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter', ['$event'])\n    public onKeydownEnter(event) {\n        const value = this.dates.find((date) => date.nativeElement === event.target).value;\n        this.date = new Date(value.getFullYear(), value.getMonth(), this.date.getDate());\n\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n}\n","import { Component, Output, EventEmitter, Input, HostBinding, HostListener, ElementRef, Injectable} from '@angular/core';\nimport { range, Calendar } from '../calendar';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { HammerGestureConfig, HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n\nlet NEXT_ID = 0;\n\n@Injectable()\nexport class CalendarHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }\n    };\n}\n\n@Component({\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxYearsViewComponent,\n            multi: true\n        },\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: CalendarHammerConfig\n        }\n    ],\n    selector: 'igx-years-view',\n    templateUrl: 'years-view.component.html'\n})\nexport class IgxYearsViewComponent implements ControlValueAccessor {\n\n    /**\n     * Sets/gets the `id` of the years view.\n     * If not set, the `id` will have value `\"igx-years-view-0\"`.\n     * ```html\n     * <igx-years-view id = \"my-years-view\"></igx-years-view>\n     * ```\n     * ```typescript\n     * let yearsViewId =  this.yearsView.id;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-years-view-${NEXT_ID++}`;\n\n    /**\n     * Gets/sets the selected date of the years view.\n     * By default it is the current date.\n     * ```html\n     * <igx-years-view [date]=\"myDate\"></igx-years-view>\n     * ```\n     * ```typescript\n     * let date =  this.yearsView.date;\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Input()\n    public date = new Date();\n\n    /**\n     * Gets the year format option of the years view.\n     * ```typescript\n     * let yearFormat = this.yearsView.yearFormat.\n     * ```\n     */\n    @Input()\n    public get yearFormat(): string {\n        return this._yearFormat;\n    }\n\n    /**\n     * Sets the year format option of the years view.\n     * ```html\n     * <igx-years-view [yearFormat]=\"numeric\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    public set yearFormat(value: string) {\n        this._yearFormat = value;\n        this.initYearFormatter();\n    }\n\n    /**\n     * Gets the `locale` of the years view.\n     * Default value is `\"en\"`.\n     * ```typescript\n     * let locale =  this.yearsView.locale;\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Input()\n    public get locale(): string {\n        return this._locale;\n    }\n\n    /**\n     * Sets the `locale` of the years view.\n     * Expects a valid BCP 47 language tag.\n     * Default value is `\"en\"`.\n     * ```html\n     * <igx-years-view [locale]=\"de\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    public set locale(value: string) {\n        this._locale = value;\n        this.initYearFormatter();\n    }\n\n    /**\n     * Gets/sets whether the view should be rendered\n     * according to the locale and yearFormat, if any.\n     */\n    @Input()\n    public formatView: boolean;\n\n    /**\n     * Emits an event when a selection is made in the years view.\n     * Provides reference the `date` property in the `IgxYearsViewComponent`.\n     * ```html\n     * <igx-years-view (onSelection)=\"onSelection($event)\"></igx-years-view>\n     * ```\n     * @memberof IgxYearsViewComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Returns an array of date objects which are then used to properly\n     * render the years.\n     *\n     * Used in the template of the component.\n     *\n     * @hidden\n     */\n    get decade(): number[] {\n        const result = [];\n        const start = this.date.getFullYear() - 3;\n        const end = this.date.getFullYear() + 4;\n\n        for (const year of range(start, end)) {\n            result.push(new Date(year, this.date.getMonth(), this.date.getDate()));\n        }\n\n        return result;\n    }\n\n    /**\n     *@hidden\n     */\n    private _formatterYear: any;\n\n    /**\n     *@hidden\n     */\n    private _locale = 'en';\n\n    /**\n     *@hidden\n     */\n    private _yearFormat = 'numeric';\n\n    /**\n     *@hidden\n     */\n    private _calendarModel: Calendar;\n\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = () => { };\n    /**\n     *@hidden\n     */\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    constructor(public el: ElementRef) {\n        this.initYearFormatter();\n        this._calendarModel = new Calendar();\n    }\n\n    /**\n     * Returns the locale representation of the year in the years view.\n     *\n     * @hidden\n     */\n    public formattedYear(value: Date): string {\n        if (this.formatView) {\n            return this._formatterYear.format(value);\n        }\n        return `${value.getFullYear()}`;\n    }\n\n    /**\n     *@hidden\n     */\n    public selectYear(event) {\n        this.date = event;\n\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     *@hidden\n     */\n    public scroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const delta = event.deltaY < 0 ? -1 : 1;\n        this.generateYearRange(delta);\n    }\n\n    /**\n     *@hidden\n     */\n    public pan(event) {\n        const delta = event.deltaY < 0 ? 1 : -1;\n        this.generateYearRange(delta);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (v: Date) => void) {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public yearTracker(index, item): string {\n        return `${item.getFullYear()}}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        if (value) {\n            this.date = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.generateYearRange(1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.generateYearRange(-1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter')\n    public onKeydownEnter() {\n        this.onSelection.emit(this.date);\n        this._onChangeCallback(this.date);\n    }\n\n    /**\n     *@hidden\n     */\n    private initYearFormatter() {\n        this._formatterYear = new Intl.DateTimeFormat(this._locale, { year: this.yearFormat });\n    }\n\n    /**\n     *@hidden\n     */\n    private generateYearRange(delta: number) {\n        const currentYear = new Date().getFullYear();\n\n        if ((delta > 0 && this.date.getFullYear() - currentYear >= 95) ||\n            (delta < 0 && currentYear - this.date.getFullYear() >= 95)) {\n            return;\n        }\n        this.date = this._calendarModel.timedelta(this.date, 'year', delta);\n    }\n}\n","import { Component, Input, Output, EventEmitter, HostBinding, ElementRef, HostListener } from '@angular/core';\nimport { ICalendarDate, isDateInRanges } from '../calendar';\nimport { DateRangeDescriptor } from '../../core/dates';\nimport { CalendarSelection } from '../calendar-base';\n\n/**\n *@hidden\n*/\n@Component({\n    selector: 'igx-day-item',\n    templateUrl: 'day-item.component.html'\n})\nexport class IgxDayItemComponent {\n    @Input()\n    public date: ICalendarDate;\n\n    @Input()\n    public selection: string;\n\n    @Input()\n    public value: Date | Date[];\n\n    @Input()\n    public disabledDates: DateRangeDescriptor[];\n\n    @Input()\n    public outOfRangeDates: DateRangeDescriptor[];\n\n    @Input()\n    public specialDates: DateRangeDescriptor[];\n\n    @Output()\n    public onDateSelection = new EventEmitter<ICalendarDate>();\n\n    public get selected(): boolean {\n        const date = this.date.date;\n\n        if (!this.value) {\n            return;\n        }\n\n        if (this.selection === CalendarSelection.SINGLE) {\n        this._selected = (this.value as Date).getTime() === date.getTime();\n        } else {\n        this._selected = (this.value as Date[])\n            .some((each) => each.getTime() === date.getTime());\n        }\n\n        return this._selected;\n    }\n\n    public set selected(value: boolean) {\n        this._selected = value;\n    }\n\n    public get isCurrentMonth(): boolean {\n        return this.date.isCurrentMonth;\n    }\n\n    public get isPreviousMonth(): boolean {\n        return this.date.isPrevMonth;\n    }\n\n    public get isNextMonth(): boolean {\n        return this.date.isNextMonth;\n    }\n\n    public get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    public get isInactive(): boolean {\n        return this.date.isNextMonth || this.date.isPrevMonth;\n    }\n\n    public get isToday(): boolean {\n        const today = new Date(Date.now());\n        const date = this.date.date;\n        return (date.getFullYear() === today.getFullYear() &&\n            date.getMonth() === today.getMonth() &&\n            date.getDate() === today.getDate()\n        );\n    }\n\n    public get isWeekend(): boolean {\n        const day = this.date.date.getDay();\n        return day === 0 || day === 6;\n    }\n\n    public get isDisabled(): boolean {\n        if (this.disabledDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.disabledDates);\n    }\n\n    public get isOutOfRange(): boolean {\n        if (!this.outOfRangeDates) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.outOfRangeDates);\n    }\n\n    public get isSpecial(): boolean {\n        if (this.specialDates === null) {\n            return false;\n        }\n\n        return isDateInRanges(this.date.date, this.specialDates);\n    }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-calendar__date')\n    public get defaultCSS(): boolean {\n        return this.date.isCurrentMonth && !(this.isWeekend && this.selected);\n    }\n\n    @HostBinding('class.igx-calendar__date--inactive')\n    public get isInactiveCSS(): boolean {\n        return this.isInactive;\n    }\n\n    @HostBinding('class.igx-calendar__date--current')\n    public get isTodayCSS(): boolean {\n        return this.isToday && !this.selected;\n    }\n\n    @HostBinding('class.igx-calendar__date--selected')\n    public get isSelectedCSS(): boolean {\n        return this.selected;\n    }\n\n    @HostBinding('class.igx-calendar__date--weekend')\n    public get isWeekendCSS(): boolean {\n        return this.isWeekend;\n    }\n\n    @HostBinding('class.igx-calendar__date--disabled')\n    public get isDisabledCSS(): boolean {\n        return this.isDisabled || this.isOutOfRange;\n    }\n\n    @HostBinding('class.igx-calendar__date--special')\n    public get isSpecialCSS(): boolean {\n        return this.isSpecial;\n    }\n\n    private _selected = false;\n\n    constructor(private elementRef: ElementRef) { }\n\n    @HostListener('click')\n    @HostListener('keydown.enter')\n    public onSelect() {\n        this.onDateSelection.emit(this.date);\n    }\n}\n","import {\n    Component,\n    Output,\n    EventEmitter,\n    Input,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    HostBinding,\n    DoCheck\n} from '@angular/core';\nimport { ICalendarDate } from '../../calendar';\nimport { trigger, transition, useAnimation } from '@angular/animations';\nimport { slideInLeft, slideInRight } from '../../animations/main';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxDayItemComponent } from './day-item.component';\nimport { DateRangeDescriptor, DateRangeType } from '../../core/dates';\nimport { IgxCalendarBase, ScrollMonth } from '../calendar-base';\n\nlet NEXT_ID = 0;\n\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxDaysViewComponent\n        }\n    ],\n    animations: [\n        trigger('animateChange', [\n            transition('* => prev', useAnimation(slideInLeft, {\n                params: {\n                    fromPosition: 'translateX(-30%)'\n                }\n            })),\n            transition('* => next', useAnimation(slideInRight, {\n                params: {\n                    fromPosition: 'translateX(30%)'\n                }\n            }))\n        ])\n    ],\n    selector: 'igx-days-view',\n    templateUrl: 'days-view.component.html'\n})\nexport class IgxDaysViewComponent extends IgxCalendarBase implements DoCheck {\n    /**\n     * Sets/gets the `id` of the days view.\n     * If not set, the `id` will have value `\"igx-days-view-0\"`.\n     * ```html\n     * <igx-days-view id=\"my-days-view\"></igx-days-view>\n     * ```\n     * ```typescript\n     * let daysViewId =  this.daysView.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-days-view-${NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public animationAction: any = '';\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public changeDaysView = false;\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onDateSelection = new EventEmitter<ICalendarDate>();\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onViewChanged = new EventEmitter<Date>();\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxDayItemComponent, { read: IgxDayItemComponent })\n    public dates: QueryList<IgxDayItemComponent>;\n\n    /**\n     * @hidden\n     */\n    public nextDate: Date;\n\n    /**\n     * @hidden\n     */\n    public callback: (dates?, next?) => void;\n\n    /**\n     * @hidden\n     */\n    public isKeydownTrigger = false;\n\n    /**\n     * @hidden\n     */\n    public outOfRangeDates: DateRangeDescriptor[];\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    public get getCalendarMonth(): ICalendarDate[][] {\n        return this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth(), true);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        if (!this.changeDaysView && this.dates) {\n            this.disableOutOfRangeDates();\n        }\n    }\n\n    /**\n     * Returns the locale representation of the date in the days view.\n     *\n     * @hidden\n     */\n    public formattedDate(value: Date): string {\n        if (this.formatViews.day) {\n            return this.formatterDay.format(value);\n        }\n        return `${value.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public generateWeekHeader(): string[] {\n        const dayNames = [];\n        const rv = this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth())[0];\n        for (const day of rv) {\n            dayNames.push(this.formatterWeekday.format(day.date));\n        }\n\n        return dayNames;\n    }\n\n    /**\n     * @hidden\n     */\n    public rowTracker(index, item): string {\n        return `${item[index].date.getMonth()}${item[index].date.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public dateTracker(index, item): string {\n        return `${item.date.getMonth()}--${item.date.getDate()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public isCurrentMonth(value: Date): boolean {\n        return this.viewDate.getMonth() === value.getMonth();\n    }\n\n    /**\n     * @hidden\n     */\n    public isCurrentYear(value: Date): boolean {\n        return this.viewDate.getFullYear() === value.getFullYear();\n    }\n\n    /**\n     *@hidden\n     */\n    public focusActiveDate() {\n        let date = this.dates.find((d) => d.selected);\n\n        if (!date) {\n            date = this.dates.find((d) => d.isToday);\n        }\n\n        if (date) {\n            date.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectDay(event) {\n        this.selectDateFromClient(event.date);\n        this.onDateSelection.emit(event);\n\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public animationDone(event, isLast: boolean) {\n        if (isLast) {\n            if (this.monthScrollDirection !== ScrollMonth.NONE) {\n                this.scrollMonth$.next();\n            }\n\n            const date = this.dates.find((d) => d.selected);\n            if (date && !this.isKeydownTrigger) {\n                setTimeout(() => {\n                    date.nativeElement.focus();\n                }, parseInt(slideInRight.options.params.duration, 10));\n            } else if (this.callback && (event.toState === 'next' || event.toState === 'prev')) {\n                this.callback(this.dates, this.nextDate);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private focusPreviousUpDate(target, prevView = false) {\n        const node = this.dates.find((date) => date.nativeElement === target);\n        if (!node) { return; }\n\n        const dates = this.dates.toArray();\n        for (let index = dates.indexOf(node); index - 7 > -1; index -= 7) {\n            const date = prevView ? dates[index] : dates[index - 7];\n            if (!date.isDisabled) {\n                if (!date.isOutOfRange) {\n                    date.nativeElement.focus();\n                    break;\n                }\n            }\n        }\n\n        if (this.changeDaysView && dates.indexOf(node) - 7 < 0) {\n            const dayItem = dates[dates.indexOf(node)];\n            this.nextDate = new Date(dayItem.date.date);\n\n            this.nextDate.setDate(this.nextDate.getDate() - 7);\n\n            this.isKeydownTrigger = true;\n            this.animationAction = 'prev';\n\n            this.callback = (items?, next?) => {\n                const day = items.find((item) => item.date.date.getTime() === next.getTime());\n                if (day) {\n                    this.focusPreviousUpDate(day.nativeElement, true);\n                }\n            };\n\n            this.onViewChanged.emit(this.nextDate);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private focusNextDownDate(target, nextView = false) {\n        const node = this.dates.find((date) => date.nativeElement === target);\n        if (!node) { return; }\n\n        const dates = this.dates.toArray();\n        for (let index = dates.indexOf(node); index + 7 < this.dates.length; index += 7) {\n            const date = nextView ? dates[index] : dates[index + 7];\n            if (!date.isDisabled) {\n                if (!date.isOutOfRange) {\n                    date.nativeElement.focus();\n                    break;\n                }\n            }\n        }\n\n        if (this.changeDaysView && dates.indexOf(node) + 7 > this.dates.length - 1) {\n            const dayItem = dates[dates.indexOf(node)];\n            this.nextDate = new Date(dayItem.date.date);\n\n            this.nextDate.setDate(this.nextDate.getDate() + 7);\n\n            this.isKeydownTrigger = true;\n            this.animationAction = 'next';\n\n            this.callback = (items?, next?) => {\n                const day = items.find((item) => item.date.date.getTime() === next.getTime());\n                if (day) {\n                    this.focusNextDownDate(day.nativeElement, true);\n                }\n            };\n\n            this.onViewChanged.emit(this.nextDate);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private focusPreviousDate(target) {\n        const node = this.dates.find((date) => date.nativeElement === target);\n        if (!node) { return; }\n\n        const dates = this.dates.toArray();\n        for (let index = dates.indexOf(node); index > 0; index--) {\n            const date = dates[index - 1];\n            if (!date.isDisabled) {\n                if (!date.isOutOfRange) {\n                    date.nativeElement.focus();\n                    break;\n                }\n            }\n        }\n\n        if (this.changeDaysView && dates.indexOf(node) === 0) {\n            const dayItem = dates[0];\n            if (dayItem.isCurrentMonth) {\n                this.nextDate = this.calendarModel.timedelta(dayItem.date.date, 'day', -1);\n            } else {\n                this.nextDate = new Date(dayItem.date.date);\n            }\n\n            this.isKeydownTrigger = true;\n            this.animationAction = 'prev';\n\n            this.callback = (items?, next?) => {\n                const day = items.find((item) => item.date.date.getTime() === next.getTime());\n                if (day) {\n                    this.focusPreviousDate(day.nativeElement);\n                }\n            };\n\n            this.onViewChanged.emit(this.nextDate);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private focusNextDate(target) {\n        const node = this.dates.find((date) => date.nativeElement === target);\n        if (!node) { return; }\n\n        const dates = this.dates.toArray();\n\n        for (let index = dates.indexOf(node); index < this.dates.length - 1; index++) {\n            const date = dates[index + 1];\n            if (!date.isDisabled) {\n                if (!date.isOutOfRange) {\n                    date.nativeElement.focus();\n                    break;\n                }\n            }\n        }\n\n        if (this.changeDaysView && dates.indexOf(node) === this.dates.length - 1) {\n            const dayItem = dates[this.dates.length - 1];\n            this.nextDate = new Date(dayItem.date.date);\n\n            this.isKeydownTrigger = true;\n            this.animationAction = 'next';\n\n            this.callback = (items?, next?) => {\n                const day = items.find((item) => item.date.date.getTime() === next.getTime());\n                if (day) {\n                    this.focusNextDate(day.nativeElement);\n                }\n            };\n\n            this.onViewChanged.emit(this.nextDate);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    private disableOutOfRangeDates() {\n        const dateRange = [];\n        this.dates.toArray().forEach((date) => {\n            if (!date.isCurrentMonth) {\n                dateRange.push(date.date.date);\n            }\n        });\n\n        this.outOfRangeDates = [{\n            type: DateRangeType.Specific,\n            dateRange: dateRange\n        }];\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.focusPreviousUpDate(event.target);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.focusNextDownDate(event.target);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.focusPreviousDate(event.target);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.focusNextDate(event.target);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const dates = this.dates.filter(d => d.isCurrentMonth);\n        for (let i = 0; i < dates.length; i++) {\n            if (!dates[i].isDisabled) {\n                dates[i].nativeElement.focus();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const dates = this.dates.filter(d => d.isCurrentMonth);\n        for (let i = dates.length - 1; i >= 0; i--) {\n            if (!dates[i].isDisabled) {\n                dates[i].nativeElement.focus();\n                break;\n            }\n        }\n    }\n}\n","import { transition, trigger, useAnimation } from '@angular/animations';\nimport {\n    Component,\n    ContentChild,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    ViewChild,\n    ElementRef,\n    AfterViewInit\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { fadeIn, scaleInCenter } from '../animations/main';\nimport {\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarSubheaderTemplateDirective\n} from './calendar.directives';\nimport { KEYS } from '../core/utils';\nimport { ICalendarDate, monthRange } from './calendar';\nimport { CalendarView, IgxMonthPickerBase } from './month-picker-base';\nimport { IgxMonthsViewComponent } from './months-view/months-view.component';\nimport { IgxYearsViewComponent } from './years-view/years-view.component';\nimport { IgxDaysViewComponent } from './days-view/days-view.component';\nimport { interval } from 'rxjs';\nimport { takeUntil, debounce, skipLast, switchMap } from 'rxjs/operators';\nimport { ScrollMonth } from './calendar-base';\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Calendar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/calendar.html)\n *\n * The Ignite UI Calendar provides an easy way to display a calendar and allow users to select dates using single, multiple\n * or range selection.\n *\n * Example:\n * ```html\n * <igx-calendar selection=\"range\"></igx-calendar>\n * ```\n */\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxCalendarComponent\n        }\n    ],\n    animations: [\n        trigger('animateView', [\n            transition('void => 0', useAnimation(fadeIn)),\n            transition('void => *', useAnimation(scaleInCenter, {\n                params: {\n                    duration: '.2s',\n                    fromScale: .9\n                }\n            }))\n        ])\n    ],\n    selector: 'igx-calendar',\n    templateUrl: 'calendar.component.html'\n})\nexport class IgxCalendarComponent extends IgxMonthPickerBase implements AfterViewInit {\n    /**\n     * Sets/gets the `id` of the calendar.\n     * If not set, the `id` will have value `\"igx-calendar-0\"`.\n     * ```html\n     * <igx-calendar id = \"my-first-calendar\"></igx-calendar>\n     * ```\n     * ```typescript\n     * let calendarId =  this.calendar.id;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-calendar-${NEXT_ID++}`;\n\n    @Input()\n    public hasHeader = true;\n\n    /**\n     * Sets/gets whether the calendar header will be in vertical position.\n     * Default value is `false`.\n     * ```html\n     * <igx-calendar [vertical] = \"true\"></igx-calendar>\n     * ```\n     * ```typescript\n     * let isVertical = this.calendar.vertical;\n     * ```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     * The default `tabindex` attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * The default aria role attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'grid';\n\n    /**\n     * The default aria lebelled by attribute for the component.\n     *\n     * @hidden\n     */\n    @HostBinding('attr.aria-labelledby')\n    public ariaLabelledBy = 'calendar';\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar--vertical')\n    get styleVerticalClass(): boolean {\n        return this.vertical;\n    }\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('months', { read: IgxMonthsViewComponent, static: false })\n    public monthsView: IgxMonthsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('monthsBtn', { static: false })\n    public monthsBtn: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('decade', { read: IgxYearsViewComponent, static: false })\n    public dacadeView: IgxYearsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('days', { read: IgxDaysViewComponent, static: false })\n    public daysView: IgxDaysViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('prevMonthBtn', { static: false })\n    public prevMonthBtn: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('nextMonthBtn', { static: false })\n    public nextMonthBtn: ElementRef;\n\n    /**\n     * @hidden\n     */\n    get isYearView(): boolean {\n        return this.activeView === CalendarView.YEAR;\n    }\n\n    /**\n     * @hidden\n     */\n    get monthAction(): string {\n        return this._monthAction;\n    }\n    /**\n     * @hidden\n     */\n    set monthAction(val: string) {\n        this._monthAction = val;\n    }\n\n    /**\n     * Gets the header template.\n     * ```typescript\n     * let headerTemplate =  this.calendar.headerTeamplate;\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    get headerTemplate(): any {\n        if (this.headerTemplateDirective) {\n            return this.headerTemplateDirective.template;\n        }\n        return null;\n    }\n\n    /**\n     * Sets the header template.\n     * ```html\n     * <igx-calendar headerTemplateDirective = \"igxCalendarHeader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set headerTemplate(directive: any) {\n        this.headerTemplateDirective = directive;\n    }\n\n    /**\n     * Gets the subheader template.\n     * ```typescript\n     * let subheaderTemplate = this.calendar.subheaderTemplate;\n     * ```\n     */\n    get subheaderTemplate(): any {\n        if (this.subheaderTemplateDirective) {\n            return this.subheaderTemplateDirective.template;\n        }\n        return null;\n    }\n\n    /**\n     * Sets the subheader template.\n     * ```html\n     * <igx-calendar subheaderTemplate = \"igxCalendarSubheader\"></igx-calendar>\n     * ```\n     * @memberof IgxCalendarComponent\n     */\n    set subheaderTemplate(directive: any) {\n        this.subheaderTemplateDirective = directive;\n    }\n\n    /**\n     * Gets the context for the template marked with the `igxCalendarHeader` directive.\n     * ```typescript\n     * let headerContext =  this.calendar.headerContext;\n     * ```\n     */\n    get headerContext() {\n        const date: Date = this.headerDate;\n        return this.generateContext(date);\n    }\n\n    /**\n     * Gets the context for the template marked with either `igxCalendarSubHeaderMonth`\n     * or `igxCalendarSubHeaderYear` directive.\n     * ```typescript\n     * let context =  this.calendar.context;\n     * ```\n     */\n    get context() {\n        const date: Date = this.viewDate;\n        return this.generateContext(date);\n    }\n\n    /**\n     * @hidden\n     */\n    get headerDate(): Date {\n        return this.selectedDates ? this.selectedDates : new Date();\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(forwardRef(() => IgxCalendarHeaderTemplateDirective), { read: IgxCalendarHeaderTemplateDirective, static: true  })\n    private headerTemplateDirective: IgxCalendarHeaderTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    // tslint:disable-next-line:max-line-length\n    @ContentChild(forwardRef(() => IgxCalendarSubheaderTemplateDirective), { read: IgxCalendarSubheaderTemplateDirective, static: true  })\n    private subheaderTemplateDirective: IgxCalendarSubheaderTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    private _monthAction = '';\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n\n        this.startMonthScroll$.pipe(\n            takeUntil(this.stopMonthScroll$),\n            switchMap(() => this.daysView.scrollMonth$.pipe(\n                skipLast(1),\n                debounce(() => interval(300)),\n                takeUntil(this.stopMonthScroll$)\n            ))).subscribe(() => {\n                switch (this.daysView.monthScrollDirection) {\n                    case ScrollMonth.PREV:\n                        this.previousMonth();\n                        break;\n                    case ScrollMonth.NEXT:\n                        this.nextMonth();\n                        break;\n                    case ScrollMonth.NONE:\n                    default:\n                        break;\n                }\n        });\n    }\n\n    /**\n     * Returns the locale representation of the month in the month view if enabled,\n     * otherwise returns the default `Date.getMonth()` value.\n     *\n     * @hidden\n     */\n    public formattedMonth(value: Date): string {\n        if (this.formatViews.month) {\n            return this.formatterMonth.format(value);\n        }\n        return `${value.getMonth()}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public previousMonth(isKeydownTrigger = false) {\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'month', -1);\n        this._monthAction = 'prev';\n\n        if (this.daysView) {\n            this.daysView.isKeydownTrigger = isKeydownTrigger;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public nextMonth(isKeydownTrigger = false) {\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'month', 1);\n        this._monthAction = 'next';\n\n        if (this.daysView) {\n            this.daysView.isKeydownTrigger = isKeydownTrigger;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public startPrevMonthScroll = (isKeydownTrigger = false) => {\n        this.startMonthScroll$.next();\n        this.daysView.monthScrollDirection = ScrollMonth.PREV;\n\n        this.previousMonth(isKeydownTrigger);\n    }\n\n    /**\n     * @hidden\n     */\n    public startNextMonthScroll = (isKeydownTrigger = false) => {\n        this.startMonthScroll$.next();\n        this.daysView.monthScrollDirection = ScrollMonth.NEXT;\n\n        this.nextMonth(isKeydownTrigger);\n    }\n\n    /**\n     * @hidden\n     */\n    public stopMonthScroll = (event) => {\n        event.stopPropagation();\n\n        this.daysView.stopMonthScroll$.next(true);\n        this.daysView.stopMonthScroll$.complete();\n\n\n        if (this.daysView.monthScrollDirection === ScrollMonth.PREV) {\n            this.prevMonthBtn.nativeElement.focus();\n        } else if (this.daysView.monthScrollDirection === ScrollMonth.NEXT) {\n            this.nextMonthBtn.nativeElement.focus();\n        }\n\n        this.daysView.monthScrollDirection = ScrollMonth.NONE;\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade() {\n        super.activeViewDecade();\n\n        requestAnimationFrame(() => {\n            if (this.dacadeView) {\n                this.dacadeView.el.nativeElement.focus();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event) {\n        super.activeViewDecadeKB(event);\n\n        requestAnimationFrame(() => {\n            if (this.dacadeView) {\n                this.dacadeView.el.nativeElement.focus();\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public getFormattedDate(): { weekday: string, monthday: string } {\n\n        const date = this.headerDate;\n\n        return {\n            monthday: this.formatterMonthday.format(date),\n            weekday: this.formatterWeekday.format(date),\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    public childClicked(instance: ICalendarDate) {\n        if (instance.isPrevMonth) {\n            this.previousMonth();\n        }\n\n        if (instance.isNextMonth) {\n            this.nextMonth();\n        }\n\n        this.selectDateFromClient(instance.date);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public viewChanged(event) {\n        this.viewDate = this.calendarModel.timedelta(event, 'month', 0);\n    }\n\n    /**\n     * @hidden\n     */\n    public changeMonth(event: Date) {\n        this.viewDate = new Date(this.viewDate.getFullYear(), event.getMonth());\n        this.activeView = CalendarView.DEFAULT;\n\n        requestAnimationFrame(() => {\n            this.monthsBtn.nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewYear(): void {\n        this.activeView = CalendarView.YEAR;\n        requestAnimationFrame(() => {\n            this.monthsView.dates.find((date) => date.isCurrentMonth).nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewYearKB(event): void {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            this.activeViewYear();\n        }\n    }\n\n    /**\n     * Deselects date(s) (based on the selection type).\n     *```typescript\n     * this.calendar.deselectDate(new Date(`2018-06-12`));\n     *````\n     */\n    public deselectDate(value?: Date | Date[]) {\n        super.deselectDate(value);\n\n        this.daysView.selectedDates = this.selectedDates;\n        this._onChangeCallback(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pageup', ['$event'])\n    public onKeydownPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const activeDate = this.daysView.dates.find((date) => date.nativeElement === document.activeElement);\n        if (activeDate) {\n            this.daysView.nextDate = new Date(activeDate.date.date);\n\n            let year = this.daysView.nextDate.getFullYear();\n\n            let month = this.daysView.nextDate.getMonth() - 1;\n            if (month < 0) { month = 11; year -= 1; }\n\n            const range = monthRange(this.daysView.nextDate.getFullYear(), month);\n\n            let day = this.daysView.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.daysView.nextDate.setDate(day);\n            this.daysView.nextDate.setMonth(month);\n            this.daysView.nextDate.setFullYear(year);\n\n            this.daysView.callback = (dates?, next?) => {\n                const dayItem = dates.find((d) => d.date.date.getTime() === next.getTime());\n                if (dayItem) { dayItem.nativeElement.focus(); }\n            };\n        }\n\n        this.previousMonth(true);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pagedown', ['$event'])\n    public onKeydownPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.nextMonth(true);\n\n        const activeDate = this.daysView.dates.find((date) => date.nativeElement === document.activeElement);\n        if (activeDate) {\n            this.daysView.nextDate = new Date(activeDate.date.date);\n\n            let year = this.daysView.nextDate.getFullYear();\n\n            let month = this.daysView.nextDate.getMonth() + 1;\n            if (month > 11) { month = 0; year += 1; }\n\n            const range = monthRange(this.daysView.nextDate.getFullYear(), month);\n\n            let day = this.daysView.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.daysView.nextDate.setDate(day);\n            this.daysView.nextDate.setMonth(month);\n            this.daysView.nextDate.setFullYear(year);\n\n            this.daysView.callback = (dates?, next?) => {\n                const dayItem = dates.find((d) => d.date.date.getTime() === next.getTime());\n                if (dayItem) { dayItem.nativeElement.focus(); }\n            };\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.shift.pageup', ['$event'])\n    public onKeydownShiftPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', -1);\n\n        this.daysView.animationAction = 'prev';\n        this.daysView.isKeydownTrigger = true;\n\n        const activeDate = this.daysView.dates.find((date) => date.nativeElement === document.activeElement);\n        if (activeDate) {\n            this.daysView.nextDate = new Date(activeDate.date.date);\n\n            const year = this.daysView.nextDate.getFullYear() - 1;\n\n            const range = monthRange(year, this.daysView.nextDate.getMonth());\n\n            let day = this.daysView.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.daysView.nextDate.setDate(day);\n            this.daysView.nextDate.setFullYear(year);\n\n            this.daysView.callback = (dates?, next?) => {\n                const dayItem = dates.find((d) => d.date.date.getTime() === next.getTime());\n                if (dayItem) { dayItem.nativeElement.focus(); }\n            };\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.shift.pagedown', ['$event'])\n    public onKeydownShiftPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', 1);\n\n        this.daysView.animationAction = 'next';\n        this.daysView.isKeydownTrigger = true;\n\n        const activeDate = this.daysView.dates.find((date) => date.nativeElement === document.activeElement);\n        if (activeDate) {\n            this.daysView.nextDate = new Date(activeDate.date.date);\n\n            const year = this.daysView.nextDate.getFullYear() + 1;\n\n            const range = monthRange(year, this.daysView.nextDate.getMonth());\n\n            let day = this.daysView.nextDate.getDate();\n            if (day > range[1]) { day = range[1]; }\n\n            this.daysView.nextDate.setDate(day);\n            this.daysView.nextDate.setFullYear(year);\n\n            this.daysView.callback = (dates?, next?) => {\n                const dayItem = dates.find((d) => d.date.date.getTime() === next.getTime());\n                if (dayItem) { dayItem.nativeElement.focus(); }\n            };\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        if (this.daysView) {\n            this.daysView.onKeydownHome(event);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        if (this.daysView) {\n            this.daysView.onKeydownEnd(event);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('document:mouseup', ['$event'])\n    public onMouseUp(event: KeyboardEvent) {\n        if (this.daysView && this.daysView.monthScrollDirection !== ScrollMonth.NONE) {\n            this.stopMonthScroll(event);\n        }\n    }\n\n    /**\n     * Helper method building and returning the context object inside\n     * the calendar templates.\n     * @hidden\n     */\n    private generateContext(value: Date) {\n        const formatObject = {\n            monthView: () => this.activeViewYear(),\n            yearView: () => this.activeViewDecade(),\n            ...this.calendarModel.formatToParts(value, this.locale, this.formatOptions,\n                ['era', 'year', 'month', 'day', 'weekday'])\n        };\n        return { $implicit: formatObject };\n    }\n}\n","import {\n    Component,\n    HostListener,\n    ViewChild,\n    HostBinding,\n    Input\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { trigger, transition, useAnimation } from '@angular/animations';\nimport { fadeIn, scaleInCenter, slideInLeft, slideInRight } from '../../animations/main';\nimport { KEYS } from '../../core/utils';\nimport { IgxMonthsViewComponent } from '../months-view/months-view.component';\nimport { IgxMonthPickerBase, CalendarView } from '../month-picker-base';\nimport { IgxYearsViewComponent } from '../years-view/years-view.component';\nimport { IgxDaysViewComponent } from '../days-view/days-view.component';\n\nlet NEXT_ID = 0;\n@Component({\n    providers: [\n        {\n            multi: true,\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxMonthPickerComponent\n        }\n    ],\n    animations: [\n        trigger('animateView', [\n            transition('void => 0', useAnimation(fadeIn)),\n            transition('void => *', useAnimation(scaleInCenter, {\n                params: {\n                    duration: '.2s',\n                    fromScale: .9\n                }\n            }))\n        ]),\n        trigger('animateChange', [\n            transition('* => prev', useAnimation(slideInLeft, {\n                params: {\n                    fromPosition: 'translateX(-30%)'\n                }\n            })),\n            transition('* => next', useAnimation(slideInRight, {\n                params: {\n                    fromPosition: 'translateX(30%)'\n                }\n            }))\n        ])\n    ],\n    selector: 'igx-month-picker',\n    templateUrl: 'month-picker.component.html'\n})\nexport class IgxMonthPickerComponent extends IgxMonthPickerBase {\n    /**\n     * Sets/gets the `id` of the month picker.\n     * If not set, the `id` will have value `\"igx-month-picker-0\"`.\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-month-picker-${NEXT_ID++}`;\n\n    /**\n     * The default css class applied to the component.\n     *\n     * @hidden\n     */\n    @HostBinding('class.igx-calendar')\n    public styleClass = true;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('months', { read: IgxMonthsViewComponent, static: false })\n    public monthsView: IgxMonthsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('decade', { read: IgxYearsViewComponent, static: false })\n    public dacadeView: IgxYearsViewComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('days', { read: IgxDaysViewComponent, static: false })\n    public daysView: IgxDaysViewComponent;\n\n    /**\n     * @hidden\n     */\n    public yearAction = '';\n\n    /**\n     * @hidden\n     */\n    public animationDone() {\n        this.yearAction = '';\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecadeKB(event) {\n        super.activeViewDecadeKB(event);\n\n        if (event.key === KEYS.RIGHT_ARROW || event.key === KEYS.RIGHT_ARROW_IE) {\n            event.preventDefault();\n            this.nextYear();\n        }\n\n        if (event.key === KEYS.LEFT_ARROW || event.key === KEYS.LEFT_ARROW_IE) {\n            event.preventDefault();\n            this.previousYear();\n        }\n\n        requestAnimationFrame(() => {\n            if (this.dacadeView) { this.dacadeView.el.nativeElement.focus(); }\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public activeViewDecade() {\n        super.activeViewDecade();\n\n        requestAnimationFrame(() => {\n            this.dacadeView.el.nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public nextYear() {\n        this.yearAction = 'next';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', 1);\n\n        this.selectDate(this.viewDate);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public nextYearKB(event) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            this.nextYear();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public previousYear() {\n        this.yearAction = 'prev';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', -1);\n\n        this.selectDate(this.viewDate);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * @hidden\n     */\n    public previousYearKB(event) {\n        if (event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE || event.key === KEYS.ENTER) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            this.previousYear();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public selectYear(event: Date) {\n        this.viewDate = new Date(event.getFullYear(), event.getMonth(), event.getDate());\n        this.activeView = CalendarView.DEFAULT;\n\n        this.selectDate(event);\n        this.onSelection.emit(this.selectedDates);\n\n        requestAnimationFrame(() => {\n            this.yearsBtn.nativeElement.focus();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public selectMonth(event: Date) {\n        this.selectDate(event);\n        this.onSelection.emit(this.selectedDates);\n    }\n\n    /**\n     * Selects a date.\n     *```typescript\n     * this.monPicker.selectDate(new Date(`2018-06-12`));\n     *```\n     */\n    public selectDate(value: Date) {\n        if (!value) {\n            return new Date();\n        }\n\n        // TO DO: to be refactored after discussion on the desired behavior\n        super.selectDate(value);\n        this.viewDate = value;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n\n        // TO DO: to be refactored after discussion on the desired behavior\n        if (value) {\n            this.viewDate = this.selectedDates = value;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pageup', ['$event'])\n    public onKeydownPageUp(event: KeyboardEvent) {\n        event.preventDefault();\n        this.yearAction = 'prev';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', -1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.pagedown', ['$event'])\n    public onKeydownPageDown(event: KeyboardEvent) {\n        event.preventDefault();\n        this.yearAction = 'next';\n        this.viewDate = this.calendarModel.timedelta(this.viewDate, 'year', 1);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        if (this.monthsView) {\n            this.monthsView.el.nativeElement.focus();\n            this.monthsView.onKeydownHome(event);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        if (this.monthsView) {\n            this.monthsView.el.nativeElement.focus();\n            this.monthsView.onKeydownEnd(event);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxCalendarComponent } from './calendar.component';\nimport {\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarMonthDirective,\n    IgxCalendarSubheaderTemplateDirective,\n    IgxCalendarYearDirective,\n    IgxCalendarScrollMonthDirective\n} from './calendar.directives';\nimport { IgxMonthsViewComponent } from './months-view/months-view.component';\nimport { IgxYearsViewComponent } from './years-view/years-view.component';\nimport { IgxDaysViewComponent } from './days-view/days-view.component';\nimport { IgxDayItemComponent } from './days-view/day-item.component';\nimport { IgxMonthPickerComponent } from './month-picker/month-picker.component';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxDayItemComponent,\n        IgxDaysViewComponent,\n        IgxCalendarComponent,\n        IgxCalendarHeaderTemplateDirective,\n        IgxCalendarMonthDirective,\n        IgxCalendarYearDirective,\n        IgxCalendarSubheaderTemplateDirective,\n        IgxCalendarScrollMonthDirective,\n        IgxMonthsViewComponent,\n        IgxYearsViewComponent,\n        IgxMonthPickerComponent\n    ],\n    exports: [\n        IgxCalendarComponent,\n        IgxDaysViewComponent,\n        IgxMonthsViewComponent,\n        IgxYearsViewComponent,\n        IgxMonthPickerComponent,\n        IgxCalendarHeaderTemplateDirective,\n        IgxCalendarMonthDirective,\n        IgxCalendarYearDirective,\n        IgxCalendarSubheaderTemplateDirective\n    ],\n    imports: [CommonModule, FormsModule, IgxIconModule]\n})\nexport class IgxCalendarModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    Directive,\n    HostBinding,\n    Optional,\n    Inject,\n    Input,\n    NgModule,\n    OnInit,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxButtonModule } from '../directives/button/button.directive';\n\nlet NEXT_ID = 0;\n\n/**\n * IgxCardMedia is container for the card media section.\n * Use it to wrap images and videos.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-media'\n})\nexport class IgxCardMediaDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card__media')\n    public cssClass = 'igx-card__media';\n\n    /**\n     * An @Input property that sets the `width` and `min-width` style property\n     * of the media container. If not provided it will be set to `auto`.\n     * ```html\n     * <igx-card-media width=\"300px\"></igx-card-media>\n     * ```\n     */\n    @HostBinding('style.width')\n    @HostBinding('style.min-width')\n    @Input()\n    public width = 'auto';\n\n    /**\n     * An @Input property that sets the `height` style property of the media container.\n     * If not provided it will be set to `auto`.\n     * ```html\n     * <igx-card-media height=\"50%\"></igx-card-media>\n     * ```\n     */\n    @HostBinding('style.height')\n    @Input()\n    public height = 'auto';\n\n    /**\n     * An @Input property that sets the `role` attribute of the media container.\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'img';\n}\n\n/**\n * IgxCardHeader is container for the card header\n */\n@Component({\n    selector: 'igx-card-header',\n    templateUrl: 'card-header.component.html'\n})\nexport class IgxCardHeaderComponent {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-header')\n    public cssClass = 'igx-card-header';\n\n    /**\n     * An @Input property that sets the layout style of the header.\n     * By default the header elements(thumbnail and title/subtitle) are aligned horizontally.\n     * ```html\n     * <igx-card-header [vertical]=\"true\"></igx-card-header>\n     * ```\n     */\n    @HostBinding('class.igx-card-header--vertical')\n    @Input()\n    public vertical = false;\n\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card header.\n     * By default the value is set to `header`.\n     * ```html\n     * <igx-card-header role=\"header\"></igx-card-header>\n     * ```\n     */\n    @HostBinding('attr.role')\n    public role = 'header';\n}\n\n/**\n * IgxCardThumbnail is container for the card thumbnail section.\n * Use it to wrap anything you want to be used as a thumbnail.\n */\n@Directive({\n    selector: '[igxCardThumbnail]'\n})\nexport class IgxCardThumbnailDirective { }\n\n/**\n * igxCardHeaderTitle is used to denote the header title in a card.\n * Use it to tag text nodes.\n */\n@Directive({\n    selector: '[igxCardHeaderTitle]'\n})\nexport class IgxCardHeaderTitleDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-header__title')\n    public cssClass = 'igx-card__header__title';\n}\n\n/**\n * igxCardHeaderSubtitle is used to denote the header subtitle in a card.\n * Use it to tag text nodes.\n */\n@Directive({\n    selector: '[igxCardHeaderSubtitle]'\n})\nexport class IgxCardHeaderSubtitleDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-header__subtitle')\n    public cssClass = 'igx-card-header__subtitle';\n}\n/**\n * IgxCardContent is container for the card content.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-content'\n})\nexport class IgxCardContentDirective {\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-card-content')\n    public cssClass = 'igx-card-content';\n}\n\n/**\n * IgxCardFooter is container for the card footer\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-footer'\n})\nexport class IgxCardFooterDirective {\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card footer.\n     * By default the value is set to `footer`.\n     * ```html\n     * <igx-card-footer role=\"footer\"></igx-card-footer>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'footer';\n}\n\n/**\n * **Ignite UI for Angular Card** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/card.html)\n *\n * The Ignite UI Card serves as a container that allows custom content to be organized in an appealing way. There are\n * five sections in a card that you can use to organize your content. These are header, media, content, actions, and footer.\n *\n * Example:\n * ```html\n * <igx-card>\n *   <igx-card-header>\n *     <h3 igxCardHeaderTitle>{{title}}</h3>\n *     <h5 igxCardHeaderSubtitle>{{subtitle}}</h5>\n *   </igx-card-header>\n *   <igx-card-actions>\n *       <button igxButton igxRipple>Share</button>\n *       <button igxButton igxRipple>Play Album</button>\n *   </igx-card-actions>\n * </igx-card>\n * ```\n */\n\nexport enum IgxCardType {\n    DEFAULT = 'default',\n    OUTLINED = 'outlined'\n}\n\n@Component({\n    selector: 'igx-card',\n    templateUrl: 'card.component.html'\n})\nexport class IgxCardComponent {\n    /**\n     * Sets/gets the `id` of the card.\n     * If not set, `id` will have value `\"igx-card-0\"`;\n     * ```html\n     * <igx-card id = \"my-first-card\"></igx-card>\n     * ```\n     * ```typescript\n     * let cardId =  this.card.id;\n     * ```\n     * @memberof IgxCardComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-card-${NEXT_ID++}`;\n\n    /**\n     * An @Input property that sets the value of the `role` attribute of the card.\n     * By default the value is set to `group`.\n     * ```html\n     * <igx-card role=\"group\"></igx-card>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'group';\n\n    /**\n     * An @Input property that sets the value of the `type` attribute of the card.\n     * By default the value is set to `default`. You can make the card use the\n     * outlined style by setting the value to `outlined`.\n     * ```html\n     * <igx-card type=\"outlined\"></igx-card>\n     * ```\n     */\n    @HostBinding('class.igx-card')\n    @Input()\n    public type: IgxCardType | string = IgxCardType.DEFAULT;\n\n    /**\n     * A getter which will return true if the card type is `outlined`.\n     */\n    @HostBinding('class.igx-card--outlined')\n    get isOutlinedCard() {\n        return this.type === IgxCardType.OUTLINED;\n    }\n\n    /**\n     * An @Input property that sets the value of the `horizontal` attribute of the card.\n     * Setting this to `true` will make the different card sections align horizontally,\n     * essentially flipping the card to the side.\n     * ```html\n     * <igx-card [horizontal]=\"true\"></igx-card>\n     * ```\n     */\n    @HostBinding('class.igx-card--horizontal')\n    @Input()\n    public horizontal = false;\n}\n\nexport enum IgxCardActionsLayout {\n    DEFAULT = 'default',\n    JUSTIFY = 'justify',\n}\n\n/**\n * IgxCardActions is container for the card actions.\n */\n@Component({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-card-actions',\n    templateUrl: 'card-actions.component.html'\n})\nexport class IgxCardActionsComponent implements OnInit, OnChanges {\n    private isVerticalSet = false;\n\n    constructor(@Optional() @Inject(IgxCardComponent) public card: IgxCardComponent) { }\n\n    /**\n     * An @Input property that sets the layout style of the actions.\n     * By default icons and icon buttons, as well as regular buttons\n     * are split into two containers, which are then positioned on both ends\n     * of the card-actions area.\n     * You can justify the elements in those groups so they are positioned equally\n     * from one another taking up all the space available along the card actions axis.\n     * ```html\n     * <igx-card-actions layout=\"justify\"></igx-card-actions>\n     * ```\n     */\n    @HostBinding('class.igx-card-actions')\n    @Input()\n    public layout: IgxCardActionsLayout | string = 'default';\n\n    /**\n     * An @Input property that sets the vertical attribute of the actions.\n     * When set to `true` the actions will be layed out vertically.\n     */\n    @HostBinding('class.igx-card-actions--vertical')\n    @Input()\n    public vertical: boolean;\n\n    /**\n     * A getter that returns `true` when the layout has been\n     * set to `justify`.\n     */\n    @HostBinding('class.igx-card-actions--justify')\n    get isJustifyLayout() {\n        return this.layout === IgxCardActionsLayout.JUSTIFY;\n    }\n\n    /**\n     * An @Input property that sets order of the buttons the actions area.\n     * By default all icons/icon buttons are placed at the end of the action\n     * area. Any regular buttons(flat, raised) will appear before the icons/icon buttons\n     * placed in the actions area.\n     * If you want to reverse their positions so that icons appear first, use the `reverse`\n     * attribute.\n     * ```html\n     * <igx-card-actions [reverse]=\"true\"></igx-card-actions>\n     * ```\n     */\n    @HostBinding('class.igx-card-actions--reverse')\n    @Input()\n    public reverse = false;\n\n    ngOnChanges(changes: SimpleChanges) {\n        for (const prop in changes) {\n            if (prop === 'vertical') {\n                this.isVerticalSet = true;\n            }\n        }\n    }\n\n    ngOnInit() {\n        this.vertical = !this.isVerticalSet && this.card.horizontal;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxCardComponent,\n        IgxCardHeaderComponent,\n        IgxCardMediaDirective,\n        IgxCardContentDirective,\n        IgxCardActionsComponent,\n        IgxCardFooterDirective,\n        IgxCardHeaderTitleDirective,\n        IgxCardHeaderSubtitleDirective,\n        IgxCardThumbnailDirective,\n    ],\n    exports: [\n        IgxCardComponent,\n        IgxCardHeaderComponent,\n        IgxCardMediaDirective,\n        IgxCardContentDirective,\n        IgxCardActionsComponent,\n        IgxCardFooterDirective,\n        IgxCardHeaderTitleDirective,\n        IgxCardHeaderSubtitleDirective,\n        IgxCardThumbnailDirective,\n    ],\n    imports: [CommonModule, IgxButtonModule]\n})\nexport class IgxCardModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output\n} from '@angular/core';\nimport { IgxIconModule } from '../icon/index';\n\nlet NEXT_ID = 0;\n\nexport enum Direction { NONE, NEXT, PREV }\n\n/**\n * **Ignite UI for Angular Carousel** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/carousel.html)\n *\n * The Ignite UI Carousel is used to browse or navigate through a collection of slides. Slides can contain custom\n * content such as images or cards and be used for things such as on-boarding tutorials or page-based interfaces.\n * It can be used as a separate fullscreen element or inside another component.\n *\n * Example:\n * ```html\n * <igx-carousel>\n *   <igx-slide>\n *     <h3>First Slide Header</h3>\n *     <p>First slide Content</p>\n *   <igx-slide>\n *   <igx-slide>\n *     <h3>Second Slide Header</h3>\n *     <p>Second Slide Content</p>\n * </igx-carousel>\n * ```\n */\n@Component({\n    selector: 'igx-carousel',\n    templateUrl: 'carousel.component.html',\n    styles: [`\n    :host {\n        display: block;\n        outline-style: none;\n    }`]\n})\n\nexport class IgxCarouselComponent implements OnDestroy {\n    /**\n     * Returns the `role` attribute of the carousel.\n     * ```typescript\n     * let carouselRole =  this.carousel.role;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.role') public role = 'region';\n\n    /**\n     * Sets the `id` of the carousel.\n     * If not set, the `id` of the first carousel component will be `\"igx-carousel-0\"`.\n     * ```html\n     * <igx-carousel id=\"my-first-carousel\"></igx-carousel>\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-carousel-${NEXT_ID++}`;\n\n    /**\n     * Sets whether the carousel should `loop` back to the first slide after reaching the last slide.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [loop]=\"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public loop = true;\n\n    /**\n     * Sets whether the carousel will `pause` the slide transitions on user interactions.\n     * Default value is `true`.\n     * ```html\n     *  <igx-carousel [pause]=\"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public pause = true;\n\n    /**\n     * Returns the time `interval` in milliseconds before the slide changes.\n     * ```typescript\n     * let timeInterval = this.carousel.interval;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @Input()\n    get interval(): number {\n        return this._interval;\n    }\n\n    /**\n     * Sets the time `interval` in milliseconds before the slide changes.\n     * If not set, the carousel will not change `slides` automatically.\n     * ```html\n     * <igx-carousel [interval] = \"1000\"></carousel>\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    set interval(value: number) {\n        this._interval = +value;\n        this._restartInterval();\n    }\n    /**\n     * Returns the `tabIndex` of the carousel component.\n     * ```typescript\n     * let tabIndex =  this.carousel.tabIndex;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    @HostBinding('attr.tabindex')\n    get tabIndex() {\n        return 0;\n    }\n\n    /**\n     * Controls whether the carousel should render the left/right `navigation` buttons.\n     * Default value is `true`.\n     * ```html\n     * <igx-carousel [navigation] = \"false\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Input() public navigation = true;\n\n    /**\n     * An event that is emitted after a slide transition has happened.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideChanged)=\"onSlideChanged($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideChanged = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after a slide has been added to the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideAdded)=\"onSlideAdded($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideAdded = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after a slide has been removed from the carousel.\n     * Provides references to the `IgxCarouselComponent` and `IgxSlideComponent` as event arguments.\n     * ```html\n     * <igx-carousel (onSlideRemoved)=\"onSlideRemoved($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onSlideRemoved = new EventEmitter<ISlideEventArgs>();\n\n    /**\n     * An event that is emitted after the carousel has been paused.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPaused)=\"onCarouselPaused($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onCarouselPaused = new EventEmitter<IgxCarouselComponent>();\n\n    /**\n     * An event that is emitted after the carousel has resumed transitioning between `slides`.\n     * Provides a reference to the `IgxCarouselComponent` as an event argument.\n     * ```html\n     * <igx-carousel (onCarouselPlaying)=\"onCarouselPlaying($event)\"></igx-carousel>\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    @Output() public onCarouselPlaying = new EventEmitter<IgxCarouselComponent>();\n\n    /**\n     * The collection of `slides` currently in the carousel.\n     * ```typescript\n     * let slides: IgxSlideComponent[] = this.carousel.slides;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public slides: IgxSlideComponent[] = [];\n    private _interval: number;\n    private _lastInterval: any;\n    private _playing: boolean;\n    private _currentSlide: IgxSlideComponent;\n    private _destroyed: boolean;\n    private _total = 0;\n\n    constructor(private element: ElementRef) { }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        this._destroyed = true;\n        if (this._lastInterval) {\n            clearInterval(this._lastInterval);\n        }\n    }\n    /**\n     * @hidden\n     * @memberof IgxCarouselComponent\n     */\n    public setAriaLabel(slide) {\n        return `Item ${slide.index + 1} of ${this.total}`;\n    }\n\n    /**\n     * Returns the total number of `slides` in the carousel.\n     * ```typescript\n     * let slideCount =  this.carousel.total;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get total(): number {\n        return this._total;\n    }\n\n    /**\n     * The index of the slide being currently shown.\n     * ```typescript\n     * let currentSlideNumber =  this.carousel.current;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get current(): number {\n        return !this._currentSlide ? 0 : this._currentSlide.index;\n    }\n\n    /**\n     * Returns a boolean indicating if the carousel is playing.\n     * ```typescript\n     * let isPlaying =  this.carousel.isPlaying;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get isPlaying(): boolean {\n        return this._playing;\n    }\n\n    /**\n     * Returns Ð° boolean indicating if the carousel is destroyed.\n     * ```typescript\n     * let isDestroyed =  this.carousel.isDestroyed;\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get isDestroyed(): boolean {\n        return this._destroyed;\n    }\n    /**\n     * Returns a reference to the carousel element in the DOM.\n     * ```typescript\n     * let nativeElement =  this.carousel.nativeElement;\n     * ```\n     * @memberof IgxCarouselComponent\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Returns the slide corresponding to the provided `index` or null.\n     * ```typescript\n     * let slide1 =  this.carousel.get(1);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public get(index: number): IgxSlideComponent {\n        for (const each of this.slides) {\n            if (each.index === index) {\n                return each;\n            }\n        }\n    }\n\n    /**\n     * Adds a new slide to the carousel.\n     * ```typescript\n     * this.carousel.add(newSlide);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public add(slide: IgxSlideComponent) {\n        slide.index = this.total;\n        this.slides.push(slide);\n        this._total += 1;\n\n        if (this.total === 1 || slide.active) {\n            this.select(slide);\n            if (this.total === 1) {\n                this.play();\n            }\n        } else {\n            slide.active = false;\n        }\n\n        this.onSlideAdded.emit({ carousel: this, slide });\n    }\n\n    /**\n     * Removes a slide from the carousel.\n     * ```typescript\n     * this.carousel.remove(slide);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public remove(slide: IgxSlideComponent) {\n        if (slide && slide === this.get(slide.index)) { // check if the requested slide for delete is present in the carousel\n            if (slide.index === this.current) {\n                slide.active = false;\n                this.next();\n            }\n\n            this.slides.splice(slide.index, 1);\n            this._total -= 1;\n\n            if (!this.total) {\n                this._currentSlide = null;\n                return;\n            }\n\n            for (let i = 0; i < this.total; i++) {\n                this.slides[i].index = i;\n            }\n\n            this.onSlideRemoved.emit({ carousel: this, slide });\n        }\n    }\n\n    /**\n     * Kicks in a transition for a given slide with a given `direction`.\n     * ```typescript\n     * this.carousel.select(this.carousel.get(2), Direction.NEXT);\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public select(slide: IgxSlideComponent, direction: Direction = Direction.NONE) {\n        const newIndex = slide.index;\n        if (direction === Direction.NONE) {\n            direction = newIndex > this.current ? Direction.NEXT : Direction.PREV;\n        }\n\n        if (slide && slide !== this._currentSlide) {\n            this._moveTo(slide, direction);\n        }\n    }\n\n    /**\n     * Transitions to the next slide in the carousel.\n     * ```typescript\n     * this.carousel.next();\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public next() {\n        const index = (this.current + 1) % this.total;\n\n        if (index === 0 && !this.loop) {\n            this.stop();\n            return;\n        }\n        return this.select(this.get(index), Direction.NEXT);\n    }\n\n    /**\n     * Transitions to the previous slide in the carousel.\n     * ```typescript\n     * this.carousel.prev();\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public prev() {\n        const index = this.current - 1 < 0 ?\n            this.total - 1 : this.current - 1;\n\n        if (!this.loop && index === this.total - 1) {\n            this.stop();\n            return;\n        }\n        return this.select(this.get(index), Direction.PREV);\n    }\n\n    /**\n     * Resumes playing of the carousel if in paused state.\n     * No operation otherwise.\n     * ```typescript\n     * this.carousel.play();\n     * }\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public play() {\n        if (!this._playing) {\n            this._playing = true;\n            this.onCarouselPlaying.emit(this);\n            this._restartInterval();\n        }\n    }\n\n    /**\n     * Stops slide transitions if the `pause` option is set to `true`.\n     * No operation otherwise.\n     * ```typescript\n     *  this.carousel.stop();\n     * }\n     * ```\n     * @memberOf IgxCarouselComponent\n     */\n    public stop() {\n        if (this.pause) {\n            this._playing = false;\n            this.onCarouselPaused.emit(this);\n            this._resetInterval();\n        }\n    }\n    /**\n     *@hidden\n     */\n    private _moveTo(slide: IgxSlideComponent, direction: Direction) {\n        if (this._destroyed) {\n            return;\n        }\n\n        slide.direction = direction;\n        slide.active = true;\n\n        if (this._currentSlide) {\n            this._currentSlide.direction = direction;\n            this._currentSlide.active = false;\n        }\n\n        this._currentSlide = slide;\n\n        this.onSlideChanged.emit({ carousel: this, slide });\n        this._restartInterval();\n    }\n    /**\n     *@hidden\n     */\n    private _resetInterval() {\n        if (this._lastInterval) {\n            clearInterval(this._lastInterval);\n            this._lastInterval = null;\n        }\n    }\n    /**\n     *@hidden\n     */\n    private _restartInterval() {\n        this._resetInterval();\n\n        if (!isNaN(this.interval) && this.interval > 0) {\n            this._lastInterval = setInterval(() => {\n                const tick = +this.interval;\n                if (this._playing && this.total && !isNaN(tick) && tick > 0) {\n                    this.next();\n                } else {\n                    this.stop();\n                }\n            }, this.interval);\n        }\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('keydown.arrowright')\n    public onKeydownArrowRight() {\n        this.next();\n        requestAnimationFrame(() => this.nativeElement.focus());\n    }\n    /**\n     *@hidden\n     */\n    @HostListener('keydown.arrowleft')\n    public onKeydownArrowLeft() {\n        this.prev();\n        requestAnimationFrame(() => this.nativeElement.focus());\n    }\n}\n\n/**\n * A slide component that usually holds an image and/or a caption text.\n * IgxSlideComponent is usually a child component of an IgxCarouselComponent.\n *\n * ```\n * <igx-slide [input bindings] >\n *    <ng-content></ng-content>\n * </igx-slide>\n * ```\n *\n * @export\n */\n@Component({\n    selector: 'igx-slide',\n    templateUrl: 'slide.component.html'\n})\n\nexport class IgxSlideComponent implements OnInit, OnDestroy {\n\n    /**\n     * Gets/sets the `index` of the slide inside the carousel.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide index = \"1\"</igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public index: number;\n\n    /**\n     * Gets/sets the target `direction` for the slide.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide direction=\"NEXT\"</igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberOf IgxSlideComponent\n     */\n    @Input() public direction: Direction;\n    /**\n     * Gets/sets the `active` state of the slide.\n     * ```html\n     * <igx-carousel>\n     *  <igx-slide [active] =\"false\"</igx-slide>\n     * <igx-carousel>\n     * ```\n     * @memberof IgxSlideComponent\n     */\n    @HostBinding('class.active')\n    @Input() public active: boolean;\n\n    constructor(private carousel: IgxCarouselComponent) { }\n    /**\n     *@hidden\n     */\n    public ngOnInit() {\n        this.carousel.add(this);\n    }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        this.carousel.remove(this);\n    }\n}\n\nexport interface ISlideEventArgs {\n    carousel: IgxCarouselComponent;\n    slide: IgxSlideComponent;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxCarouselComponent, IgxSlideComponent],\n    exports: [IgxCarouselComponent, IgxSlideComponent],\n    imports: [CommonModule, IgxIconModule]\n})\nexport class IgxCarouselModule {\n}\n","import {\n    Component,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Provider,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { CheckboxRequiredValidator, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { isIE } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum LabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nexport interface IChangeCheckboxEventArgs {\n    checked: boolean;\n    checkbox: IgxCheckboxComponent;\n}\n\nconst noop = () => { };\nlet nextId = 0;\n/**\n * **Ignite UI for Angular Checkbox** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/checkbox.html)\n *\n * The Ignite UI Checkbox is a selection control that allows users to make a binary choice. It behaves similarly\n * to the native browser checkbox.\n *\n * Example:\n * ```html\n * <igx-checkbox checked=\"true\">\n *   simple checkbox\n * </igx-checkbox>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxCheckboxComponent, multi: true }],\n    selector: 'igx-checkbox',\n    preserveWhitespaces: false,\n    templateUrl: 'checkbox.component.html'\n})\nexport class IgxCheckboxComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     *@hidden\n     */\n    protected _value: any;\n    /**\n     * Returns reference to the native checkbox element.\n     * ```typescript\n     * let checkboxElement =  this.checkbox.checkboxElement;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('checkbox', { static: true }) public nativeCheckbox: ElementRef;\n    /**\n     * Returns reference to the native label element.\n     * ```typescript\n     * let labelElement =  this.checkbox.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('label', { static: true }) public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.checkbox.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel', { static: true }) public placeholderLabel;\n    /**\n     * Sets/gets the `id` of the checkbox component.\n     * If not set, the `id` of the first checkbox component will be `\"igx-checkbox-0\"`.\n     * ```html\n     * <igx-checkbox id=\"my-first-checkbox\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let checkboxId =  this.checkbox.id;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-checkbox-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element.\n     * If not set, the id of the `label` in the first checkbox component will be `\"igx-checkbox-0-label\"`.\n     * ```html\n     * <igx-checkbox labelId = \"Label1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let labelId =  this.checkbox.labelId;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the `value` attribute.\n     * ```html\n     * <igx-checkbox [value] = \"'CheckboxValue'\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let value =  this.checkbox.value;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute.\n     * ```html\n     * <igx-checkbox name = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let name =  this.checkbox.name;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets/gets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-checkbox [tabindex] = \"1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.checkbox.tabindex;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     *  Sets/gets the position of the `label`.\n     *  If not set, the `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-checkbox labelPosition = \"before\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.checkbox.labelPosition;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public labelPosition: LabelPosition | string = LabelPosition.AFTER;\n    /**\n     * Enables/Disables the ripple effect.\n     * If not set, `disableRipple` will have value `false`.\n     * ```html\n     * <igx-checkbox [disableRipple] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isRippleDisabled = this.checkbox.desableRipple;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether the checkbox is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-checkbox [required] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isRequired =  this.checkbox.required;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledby` attribute.\n     * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-checkbox aria-labelledby = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy =  this.checkbox.ariaLabelledBy;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the value of the `aria-label` attribute.\n     * ```html\n     * <igx-checkbox aria-label = \"Checkbox1\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let ariaLabel = this.checkbox.aruaLabel;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the checkbox state is changed.\n     * Provides references to the `IgxCheckboxComponent` and the `checked` property as event arguments.\n     * @memberof IgxCheckboxComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeCheckboxEventArgs> = new EventEmitter<IChangeCheckboxEventArgs>();\n    /**\n     * Returns the class of the checkbox component.\n     * ```typescript\n     * let class =  this.checkbox.cssClass;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox')\n    public cssClass = 'igx-checkbox';\n    /**\n     * Sets/gets whether the checkbox component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.checkbox.focused =  true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.checkbox.focused;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--focused')\n    public focused = false;\n    /**\n     * Sets/gets the checkbox indeterminate visual state.\n     * Default value is `false`;\n     * ```html\n     * <igx-checkbox [indeterminate] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isIndeterminate = this.checkbox.indeterminate;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--indeterminate')\n    @Input() public indeterminate = false;\n    /**\n     * Sets/gets whether the checkbox is checked.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [checked] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isChecked =  this.checkbox.checked;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets whether the checkbox is disabled.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [disabled] = \"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let isDesabled = this.checkbox.disabled;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the checkbox should disable all css transitions.\n     * Default value is `false`.\n     * ```html\n     * <igx-checkbox [disableTransitions]=\"true\"></igx-checkbox>\n     * ```\n     * ```typescript\n     * let disableTransitions = this.checkbox.disableTransitions;\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    @HostBinding('class.igx-checkbox--plain')\n    @Input() public disableTransitions = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     *@hidden\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     * @hidden\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * If `disabled` is `false`, switches the `checked` state.\n     * ```typescript\n     * this.checkbox.toggle();\n     * ```\n     * @memberof IgxCheckboxComponent\n     */\n    public toggle() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.indeterminate = false;\n        this.focused = false;\n        this.checked = !this.checked;\n\n        this.change.emit({ checked: this.checked, checkbox: this });\n        this._onChangeCallback(this.checked);\n    }\n    /**\n     *@hidden\n     */\n    public _onCheckboxChange(event) {\n        // We have to stop the original checkbox change event\n        // from bubbling up since we emit our own change event\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onCheckboxClick(event) {\n        // Since the original checkbox is hidden and the label\n        // is used for styling and to change the checked state of the checkbox,\n        // we need to prevent the checkbox click event from bubbling up\n        // as it gets triggered on label click\n        event.stopPropagation();\n\n        if (isIE()) {\n            this.nativeCheckbox.nativeElement.blur();\n        }\n\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick(event) {\n        // We use a span element as a placeholder label\n        // in place of the native label, we need to emit\n        // the change event separately here alongside\n        // the click event emitted on click\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        this._value = value;\n        this.checked = !!this._value;\n    }\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case LabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case LabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden */\n    getEditElement() {\n        return this.nativeCheckbox.nativeElement;\n    }\n}\n\nexport const IGX_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => IgxCheckboxRequiredDirective),\n    multi: true\n};\n\n/* tslint:disable directive-selector */\n@Directive({\n    selector: `igx-checkbox[required][formControlName],\n    igx-checkbox[required][formControl],\n    igx-checkbox[required][ngModel]`,\n    providers: [IGX_CHECKBOX_REQUIRED_VALIDATOR]\n})\nexport class IgxCheckboxRequiredDirective extends CheckboxRequiredValidator { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],\n    exports: [IgxCheckboxComponent, IgxCheckboxRequiredDirective],\n    imports: [IgxRippleModule]\n})\nexport class IgxCheckboxModule { }\n","import {\n    Component,\n    ChangeDetectorRef,\n    EventEmitter,\n    ElementRef,\n    HostBinding,\n    Input,\n    Output,\n    ViewChild,\n    Renderer2,\n    TemplateRef,\n    Inject,\n    Optional\n} from '@angular/core';\nimport { DisplayDensity, IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport {\n    IgxDragDirective,\n    IDragBaseEventArgs,\n    IDragStartEventArgs,\n    IgxDropEnterEventArgs,\n    IgxDropEventArgs\n} from '../directives/dragdrop/dragdrop.directive';\n\n\nexport interface IBaseChipEventArgs {\n    originalEvent: PointerEvent | MouseEvent | TouchEvent | KeyboardEvent | IgxDropEnterEventArgs;\n    owner: IgxChipComponent;\n}\n\nexport interface IChipClickEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n}\n\nexport interface IChipKeyDownEventArgs extends IBaseChipEventArgs {\n    originalEvent: KeyboardEvent;\n    cancel: boolean;\n}\n\nexport interface IChipEnterDragAreaEventArgs extends IBaseChipEventArgs {\n    dragChip: IgxChipComponent;\n}\n\nexport interface IChipSelectEventArgs extends IBaseChipEventArgs {\n    cancel: boolean;\n    selected: boolean;\n}\n\nlet CHIP_ID = 0;\n\n@Component({\n    selector: 'igx-chip',\n    templateUrl: 'chip.component.html'\n})\nexport class IgxChipComponent extends DisplayDensityBase {\n\n    /**\n     * An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\"></igx-chip>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-chip-${CHIP_ID++}`;\n\n    /**\n     * An @Input property that stores data related to the chip.\n     * ```html\n     * <igx-chip [data]=\"{ value: 'Country' }\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public data: any;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be dragged in order to change it's position.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public draggable = false;\n\n    /**\n     * An @Input property that enables/disables the draggable element animation when the element is released.\n     * By default it's set to true.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [animateOnRelease]=\"false\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public animateOnRelease = true;\n\n    /**\n     * An @Input property that enables/disables the hiding of the base element that has been dragged.\n     * By default it's set to true.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [hideBaseOnDrag]=\"false\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public hideBaseOnDrag = true;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` should render remove button and throw remove events.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"'igx-chip-1'\" [draggable]=\"true\" [removable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public removable = false;\n\n    /**\n     * An @Input property that overrides the default icon that the chip applies to the remove button.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [removable]=\"true\" [removeIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>delete</igx-icon></ng-template>\n     * ```\n     */\n    @Input()\n    public removeIcon: TemplateRef<any>;\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` can be selected on click or through navigation,\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [draggable]=\"true\" [removable]=\"true\" [selectable]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public selectable = false;\n\n    /**\n     * An @Input property that overrides the default icon that the chip applies when it is selected.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [selectable]=\"true\" [selectIcon]=\"iconTemplate\"></igx-chip>\n     * <ng-template #iconTemplate><igx-icon>done_outline</igx-icon></ng-template>\n     * ```\n     */\n    @Input()\n    public selectIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * An @Input property that defines if the `IgxChipComponent` is disabled. When disabled it restricts user interactions\n     * like focusing on click or tab, selection on click or Space, dragging.\n     * By default it is set to false.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [disabled]=\"true\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * Sets the `IgxChipComponent` selected state.\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [selectable]=\"true\" [selected]=\"true\">\n     * ```\n     */\n    @Input()\n    public set selected(newValue: boolean) {\n        this.changeSelection(newValue);\n    }\n\n    /**\n     * Returns if the `IgxChipComponent` is selected.\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * selectedChip(){\n     *     let selectedChip = this.chip.selected;\n     * }\n     * ```\n     */\n    public get selected() {\n        return this._selected;\n    }\n\n    /**\n     * An @Input property that sets the `IgxChipComponent` background color.\n     * The `color` property supports string, rgb, hex.\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [color]=\"'#ff0000'\"></igx-chip>\n     * ```\n     */\n    @Input()\n    public set color(newColor) {\n        this.chipArea.nativeElement.style.backgroundColor = newColor;\n    }\n\n    /**\n     * Returns the background color of the `IgxChipComponent`.\n     * ```typescript\n     * @ViewChild('myChip')\n     * public chip: IgxChipComponent;\n     * ngAfterViewInit(){\n     *     let chipColor = this.chip.color;\n     * }\n     * ```\n     */\n    public get color() {\n        return this.chipArea.nativeElement.style.backgroundColor;\n    }\n\n    /**\n     * Emits an event when the `IgxChipComponent` moving starts.\n     * Returns the moving `IgxChipComponent`.\n     * ```typescript\n     * moveStarted(event: IBaseChipEventArgs){\n     *     let movingChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onMoveStart)=\"moveStarted($event)\">\n     * ```\n     */\n    @Output()\n    public onMoveStart = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` moving ends.\n     * Returns the moved `IgxChipComponent`.\n     * ```typescript\n     * moveEnded(event: IBaseChipEventArgs){\n     *     let movedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onMoveEnd)=\"moveEnded($event)\">\n     * ```\n     */\n    @Output()\n    public onMoveEnd = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` is removed.\n     * Returns the removed `IgxChipComponent`.\n     * ```typescript\n     * remove(event: IBaseChipEventArgs){\n     *     let removedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onRemove)=\"remove($event)\">\n     * ```\n     */\n    @Output()\n    public onRemove = new EventEmitter<IBaseChipEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` is clicked.\n     * Returns the clicked `IgxChipComponent`, whether the event should be canceled.\n     * ```typescript\n     * chipClick(event: IChipClickEventArgs){\n     *     let clickedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onClick)=\"chipClick($event)\">\n     * ```\n     */\n    @Output()\n    public onClick = new EventEmitter<IChipClickEventArgs>();\n\n    /**\n     * Emits event when the `IgxChipComponent` is selected/deselected.\n     * Returns the selected chip reference, whether the event should be canceled, what is the next selection state and\n     * when the event is triggered by interaction `originalEvent` is provided, otherwise `originalEvent` is `null`.\n     * ```typescript\n     * chipSelect(event: IChipSelectEventArgs){\n     *     let selectedChip = event.owner;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onSelection)=\"chipSelect($event)\">\n     * ```\n     */\n    @Output()\n    public onSelection = new EventEmitter<IChipSelectEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` keyboard navigation is being used.\n     * Returns the focused/selected `IgxChipComponent`, whether the event should be canceled,\n     * if the `alt`, `shift` or `control` key is pressed and the pressed key name.\n     * ```typescript\n     * chipKeyDown(event: IChipKeyDownEventArgs){\n     *     let keyDown = event.key;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onKeyDown)=\"chipKeyDown($event)\">\n     * ```\n     */\n    @Output()\n    public onKeyDown = new EventEmitter<IChipKeyDownEventArgs>();\n\n    /**\n     * Emits an event when the `IgxChipComponent` has entered the `IgxChipsAreaComponent`.\n     * Returns the target `IgxChipComponent`, the drag `IgxChipComponent`, as  well as\n     * the original drop event arguments.\n     * ```typescript\n     * chipEnter(event: IChipEnterDragAreaEventArgs){\n     *     let targetChip = event.targetChip;\n     * }\n     * ```\n     * ```html\n     * <igx-chip #myChip [id]=\"'igx-chip-1'\" [draggable]=\"true\" (onDragEnter)=\"chipEnter($event)\">\n     * ```\n     */\n    @Output()\n    public onDragEnter = new EventEmitter<IChipEnterDragAreaEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        const classes = [this.getComponentDensityClass('igx-chip')];\n        classes.push(this.disabled ? 'igx-chip--disabled' : '');\n        // The custom classes should be at the end.\n        classes.push(this.class);\n        return classes.join(' ');\n    }\n\n    /**\n     * Property that contains a reference to the `IgxDragDirective` the `IgxChipComponent` uses for dragging behavior.\n     * ```html\n     * <igx-chip [id]=\"chip.id\" [draggable]=\"true\"></igx-chip>\n     * ```\n     * ```typescript\n     * onMoveStart(event: IBaseChipEventArgs){\n     *     let dragDirective = event.owner.dragDirective;\n     * }\n     * ```\n     */\n    @ViewChild('chipArea', { read: IgxDragDirective, static: true })\n    public dragDirective: IgxDragDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('chipArea', { read: ElementRef, static: true })\n    public chipArea: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultRemoveIcon', { read: TemplateRef, static: true })\n    public defaultRemoveIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultSelectIcon', { read: TemplateRef, static: true })\n    public defaultSelectIcon: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    public get removeButtonTemplate() {\n        return this.removeIcon || this.defaultRemoveIcon;\n    }\n\n    /**\n     * @hidden\n     */\n    public get selectIconTemplate() {\n        return this.selectIcon || this.defaultSelectIcon;\n    }\n\n    /**\n     * @hidden\n     */\n    public get ghostClass(): string {\n        return this.getComponentDensityClass('igx-chip__ghost');\n    }\n\n    public get chipTabindex() {\n        return !this.disabled ? 0 : '';\n    }\n\n    protected _selected = false;\n    protected _selectedItemClass = 'igx-chip__item--selected';\n    protected _movedWhileRemoving = false;\n\n    constructor(public cdr: ChangeDetectorRef, public elementRef: ElementRef, private renderer: Renderer2,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n        }\n\n    /**\n     * @hidden\n     */\n    public selectClass(condition: boolean): object {\n        const SELECT_CLASS = 'igx-chip__select';\n\n        return {\n            [SELECT_CLASS]: condition,\n            [`${SELECT_CLASS}--hidden`]: !condition\n        };\n    }\n\n    protected changeSelection(newValue: boolean, srcEvent = null) {\n        const onSelectArgs: IChipSelectEventArgs = {\n            originalEvent: srcEvent,\n            owner: this,\n            selected: false,\n            cancel: false\n        };\n\n        if (newValue && !this._selected) {\n            onSelectArgs.selected = true;\n            this.onSelection.emit(onSelectArgs);\n\n            if (!onSelectArgs.cancel) {\n                this.renderer.addClass(this.chipArea.nativeElement, this._selectedItemClass);\n                this._selected = newValue;\n            }\n        } else if (!newValue && this._selected) {\n            this.onSelection.emit(onSelectArgs);\n\n            if (!onSelectArgs.cancel) {\n                this.renderer.removeClass(this.chipArea.nativeElement, this._selectedItemClass);\n                this._selected = newValue;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipKeyDown(event: KeyboardEvent) {\n        const keyDownArgs: IChipKeyDownEventArgs = {\n            originalEvent: event,\n            owner: this,\n            cancel: false\n        };\n\n        this.onKeyDown.emit(keyDownArgs);\n        if (keyDownArgs.cancel) {\n            return;\n        }\n\n        if ((event.key === 'Delete' || event.key === 'Del') && this.removable) {\n            this.onRemove.emit({\n                originalEvent: event,\n                owner: this\n            });\n        }\n\n        if ((event.key === ' ' || event.key === 'Spacebar') && this.selectable && !this.disabled) {\n            this.changeSelection(!this.selected, event);\n        }\n\n        if (event.key !== 'Tab') {\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveBtnKeyDown(event: KeyboardEvent) {\n        if (event.key === ' ' || event.key === 'Spacebar' || event.key === 'Enter') {\n            this.onRemove.emit({\n                originalEvent: event,\n                owner: this\n            });\n\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    public onRemoveMouseDown(event: PointerEvent | MouseEvent) {\n        event.stopPropagation();\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveClick(event: MouseEvent | TouchEvent) {\n        this.onRemove.emit({\n            originalEvent: event,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveTouchMove() {\n        // We don't remove chip if user starting touch interacting on the remove button moves the chip\n        this._movedWhileRemoving = true;\n    }\n\n    /**\n     * @hidden\n     */\n    public onRemoveTouchEnd(event: TouchEvent) {\n        if (!this._movedWhileRemoving) {\n            this.onRemoveClick(event);\n        }\n        this._movedWhileRemoving = false;\n    }\n\n    /**\n     * @hidden\n     */\n    // -----------------------------\n    // Start chip igxDrag behaviour\n    public onChipDragStart(event: IDragStartEventArgs) {\n        this.onMoveStart.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n        event.cancel = !this.draggable || this.disabled;\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDragEnd() {\n        this.dragDirective.dropFinished();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipMoveEnd(event: IDragBaseEventArgs) {\n        // moveEnd is triggered after return animation has finished. This happen when we drag and release the chip.\n        this.onMoveEnd.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n\n        if (this.selected) {\n            this.chipArea.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDragClicked(event: IDragBaseEventArgs) {\n        const clickEventArgs: IChipClickEventArgs = {\n            originalEvent: event.originalEvent,\n            owner: this,\n            cancel: false\n        };\n        this.onClick.emit(clickEventArgs);\n\n        if (!clickEventArgs.cancel && this.selectable && !this.disabled) {\n            this.changeSelection(!this.selected, event.originalEvent);\n        }\n    }\n    // End chip igxDrag behaviour\n\n    /**\n     * @hidden\n     */\n    // -----------------------------\n    // Start chip igxDrop behaviour\n    public onChipDragEnterHandler(event: IgxDropEnterEventArgs) {\n        if (this.dragDirective === event.drag || !event.dragData || !event.dragData.chip) {\n            return;\n        }\n\n        const eventArgs: IChipEnterDragAreaEventArgs = {\n            owner: this,\n            dragChip: event.dragData.chip,\n            originalEvent: event\n        };\n        this.onDragEnter.emit(eventArgs);\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipDrop(event: IgxDropEventArgs) {\n        // Cancel the default drop logic\n        event.cancel = true;\n    }\n    // End chip igxDrop behaviour\n}\n","import {\n    Component,\n    ContentChildren,\n    ChangeDetectorRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    Output,\n    QueryList,\n    DoCheck,\n    AfterViewInit,\n    OnDestroy,\n    ElementRef\n} from '@angular/core';\nimport {\n    IgxChipComponent,\n    IChipSelectEventArgs,\n    IChipKeyDownEventArgs,\n    IChipEnterDragAreaEventArgs,\n    IBaseChipEventArgs\n} from './chip.component';\nimport {\n    IgxDropEnterEventArgs\n} from '../directives/dragdrop/dragdrop.directive';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/internal/Subject';\n\nexport interface IBaseChipsAreaEventArgs {\n    originalEvent: PointerEvent | MouseEvent | TouchEvent | KeyboardEvent | IgxDropEnterEventArgs;\n    owner: IgxChipsAreaComponent;\n}\n\nexport interface IChipsAreaReorderEventArgs extends IBaseChipsAreaEventArgs {\n    chipsArray: IgxChipComponent[];\n}\n\nexport interface IChipsAreaSelectEventArgs extends IBaseChipsAreaEventArgs {\n    newSelection: IgxChipComponent[];\n}\n\n@Component({\n    selector: 'igx-chips-area',\n    templateUrl: 'chips-area.component.html',\n})\nexport class IgxChipsAreaComponent implements DoCheck, AfterViewInit, OnDestroy {\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public class = '';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass() {\n        const classes = ['igx-chip-area'];\n        classes.push(this.class);\n\n        return classes.join(' ');\n    }\n\n    /**\n     * An @Input property that sets the width of the `IgxChipsAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    @HostBinding('style.width.px')\n    @Input()\n    public width: number;\n\n    /**\n     * An @Input property that sets the height of the `IgxChipsAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"chipsOrderChanged($event)\"></igx-chips-area>\n     * ```\n     */\n    @HostBinding('style.height.px')\n    @Input()\n    public height: number;\n\n    /**\n     * Emits an event when `IgxChipComponent`s in the `IgxChipsAreaComponent` should be reordered.\n     * Returns an array of `IgxChipComponent`s.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onReorder)=\"changedOrder($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * public changedOrder(event: IChipsAreaReorderEventArgs){\n     *      let chips: IgxChipComponent[] = event.chipsArray;\n     * }\n     * ```\n     */\n    @Output()\n    public onReorder = new EventEmitter<IChipsAreaReorderEventArgs>();\n\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is selected/deselected.\n     * Fired after the chips area is initialized if there are initially selected chips as well.\n     * Returns an array of selected `IgxChipComponent`s and the `IgxChipAreaComponent`.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onSelection)=\"selection($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * public selection(event: IChipsAreaSelectEventArgs){\n     *      let selectedChips: IgxChipComponent[] = event.newSelection;\n     * }\n     */\n    @Output()\n    public onSelection = new EventEmitter<IChipsAreaSelectEventArgs>();\n\n    /**\n     * Emits an event when an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveStart)=\"moveStart($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * moveStart(event: IBaseChipsAreaEventArgs){\n     *      let chipArea = event.owner;\n     * }\n     * ```\n     */\n    @Output()\n    public onMoveStart = new EventEmitter<IBaseChipsAreaEventArgs>();\n\n    /**\n     * Emits an event after an `IgxChipComponent` in the `IgxChipsAreaComponent` is moved.\n     * ```html\n     * <igx-chips-area #chipsArea [width]=\"'300'\" [height]=\"'10'\" (onMoveEnd)=\"moveEnd($event)\"></igx-chips-area>\n     * ```\n     * ```typescript\n     * moveEnd(event: IBaseChipsAreaEventArgs){\n     *      let chipArea = event.owner;\n     * }\n     * ```\n     */\n    @Output()\n    public onMoveEnd = new EventEmitter<IBaseChipsAreaEventArgs>();\n\n    /**\n     * Holds the `IgxChipComponent` in the `IgxChipsAreaComponent`.\n     * ```typescript\n     * ngAfterViewInit(){\n     *    let chips = this.chipsArea.chipsList;\n     * }\n     * ```\n     */\n    @ContentChildren(IgxChipComponent)\n    public chipsList: QueryList<IgxChipComponent>;\n\n    private modifiedChipsArray: IgxChipComponent[];\n    private _differ: IterableDiffer<IgxChipComponent> | null = null;\n    private selectedChips: IgxChipComponent[] = [];\n    protected destroy$ = new Subject<boolean>();\n\n    constructor(public cdr: ChangeDetectorRef, public element: ElementRef,\n        private _iterableDiffers: IterableDiffers) {\n        this._differ = this._iterableDiffers.find([]).create(null);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        // If we have initially selected chips through their inputs, we need to get them, because we cannot listen to their events yet.\n        if (this.chipsList.length) {\n            this.selectedChips = this.chipsList.filter((item: IgxChipComponent) => item.selected);\n            if (this.selectedChips.length) {\n                this.onSelection.emit({\n                    originalEvent: null,\n                    newSelection: this.selectedChips,\n                    owner: this\n                });\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck(): void {\n        if (this.chipsList) {\n            const changes = this._differ.diff(this.chipsList.toArray());\n            if (changes) {\n                changes.forEachAddedItem((addedChip) => {\n                    addedChip.item.onMoveStart.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipMoveStart(args);\n                    });\n                    addedChip.item.onMoveEnd.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipMoveEnd(args);\n                    });\n                    addedChip.item.onDragEnter.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipDragEnter(args);\n                    });\n                    addedChip.item.onKeyDown.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                        this.onChipKeyDown(args);\n                    });\n                    if (addedChip.item.selectable) {\n                        addedChip.item.onSelection.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n                            this.onChipSelectionChange(args);\n                        });\n                    }\n                });\n                this.modifiedChipsArray = this.chipsList.toArray();\n            }\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipKeyDown(event: IChipKeyDownEventArgs) {\n        let orderChanged = false;\n        const chipsArray = this.chipsList.toArray();\n        const dragChipIndex = chipsArray.findIndex((el) => el === event.owner);\n        if (event.originalEvent.shiftKey === true) {\n            if (event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') {\n                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex - 1, false, event.originalEvent);\n                if (orderChanged) {\n                    setTimeout(() => {\n                        this.chipsList.toArray()[dragChipIndex - 1].chipArea.nativeElement.focus();\n                    });\n                }\n            } else if (event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') {\n                orderChanged = this.positionChipAtIndex(dragChipIndex, dragChipIndex + 1, true, event.originalEvent);\n            }\n        } else {\n            if ((event.originalEvent.key === 'ArrowLeft' || event.originalEvent.key === 'Left') && dragChipIndex > 0) {\n                chipsArray[dragChipIndex - 1].chipArea.nativeElement.focus();\n            } else if ((event.originalEvent.key === 'ArrowRight' || event.originalEvent.key === 'Right') &&\n                dragChipIndex < chipsArray.length - 1) {\n                chipsArray[dragChipIndex + 1].chipArea.nativeElement.focus();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipMoveStart(event: IBaseChipEventArgs) {\n        this.onMoveStart.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipMoveEnd(event: IBaseChipEventArgs) {\n        this.onMoveEnd.emit({\n            originalEvent: event.originalEvent,\n            owner: this\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipDragEnter(event: IChipEnterDragAreaEventArgs) {\n        const dropChipRect = event.owner.elementRef.nativeElement.getBoundingClientRect();\n        const dropChipIndex = this.chipsList.toArray().findIndex((el) => el === event.owner);\n        const dragChipIndex = this.chipsList.toArray().findIndex((el) => el === event.dragChip);\n        if (dragChipIndex < dropChipIndex) {\n            // from the left to right\n            this.positionChipAtIndex(dragChipIndex, dropChipIndex, true, event.originalEvent);\n        } else {\n            // from the right to left\n            this.positionChipAtIndex(dragChipIndex, dropChipIndex, false, event.originalEvent);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected positionChipAtIndex(chipIndex, targetIndex, shiftRestLeft, originalEvent) {\n        if (chipIndex < 0 || this.chipsList.length <= chipIndex ||\n            targetIndex < 0 || this.chipsList.length <= targetIndex) {\n            return false;\n        }\n\n        const chipsArray = this.chipsList.toArray();\n        const result: IgxChipComponent[] = [];\n        for (let i = 0; i < chipsArray.length; i++) {\n            if (shiftRestLeft) {\n                if (chipIndex <= i && i < targetIndex) {\n                    result.push(chipsArray[i + 1]);\n                } else if (i === targetIndex) {\n                    result.push(chipsArray[chipIndex]);\n                } else {\n                    result.push(chipsArray[i]);\n                }\n            } else {\n                if (targetIndex < i && i <= chipIndex) {\n                    result.push(chipsArray[i - 1]);\n                } else if (i === targetIndex) {\n                    result.push(chipsArray[chipIndex]);\n                } else {\n                    result.push(chipsArray[i]);\n                }\n            }\n        }\n        this.modifiedChipsArray = result;\n\n        const eventData: IChipsAreaReorderEventArgs = {\n            chipsArray: this.modifiedChipsArray,\n            originalEvent: originalEvent,\n            owner: this\n        };\n        this.onReorder.emit(eventData);\n        return true;\n    }\n\n    /**\n     * @hidden\n     */\n    protected onChipSelectionChange(event: IChipSelectEventArgs) {\n        if (event.selected) {\n            this.selectedChips.push(event.owner);\n        } else if (!event.selected) {\n            this.selectedChips = this.selectedChips.filter((chip) => {\n                return chip.id !== event.owner.id;\n            });\n        }\n        this.onSelection.emit({\n            originalEvent: event.originalEvent,\n            newSelection: this.selectedChips,\n            owner: this\n        });\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxAvatarModule } from '../avatar/avatar.component';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxChipComponent } from './chip.component';\nimport { IgxChipsAreaComponent } from './chips-area.component';\nimport { IgxDragDropModule } from '../directives/dragdrop/dragdrop.directive';\nimport { IgxPrefixModule, IgxPrefixDirective} from '../directives/prefix/prefix.directive';\nimport { IgxSuffixModule, IgxSuffixDirective } from '../directives/suffix/suffix.directive';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxChipsAreaComponent,\n    IgxChipComponent\n  ],\n  exports: [\n    IgxChipsAreaComponent,\n    IgxChipComponent,\n    IgxPrefixDirective,\n    IgxSuffixDirective\n  ],\n  imports: [\n    CommonModule,\n    IgxRippleModule,\n    IgxIconModule,\n    IgxButtonModule,\n    IgxAvatarModule,\n    IgxDragDropModule,\n    IgxPrefixModule,\n    IgxSuffixModule\n  ]\n})\nexport class IgxChipsModule { }\n","import { Directive } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboHeader]'\n})\nexport class IgxComboHeaderDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboFooter]'\n})\nexport class IgxComboFooterDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboItem]'\n})\nexport class IgxComboItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboEmpty]'\n})\nexport class IgxComboEmptyDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboHeaderItem]'\n})\n\nexport class IgxComboHeaderItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboAddItem]'\n})\nexport class IgxComboAddItemDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboToggleIcon]'\n})\nexport class IgxComboToggleIconDirective {\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxComboClearIcon]'\n})\nexport class IgxComboClearIconDirective {\n}\n\n","import { IgxComboBase } from './combo.common';\n\n/**\n * @hidden\n */\nexport class IgxComboAPIService {\n    protected combo: IgxComboBase;\n\n    public disableTransitions = false;\n\n    public register(combo: IgxComboBase) {\n        this.combo = combo;\n    }\n\n\n    public clear(): void {\n        this.combo = null;\n    }\n\n\n    public get item_focusable(): boolean {\n        return false;\n    }\n    public get isRemote(): boolean {\n        return this.combo.isRemote;\n    }\n\n    public add_custom_item(): void {\n        if (!this.combo) {\n            return;\n        }\n        this.combo.addItemToCollection();\n    }\n\n    public get comboID(): string {\n        return this.combo.id;\n    }\n\n    public set_selected_item(itemID: any, event?: Event): void {\n        const selected = this.combo.isItemSelected(itemID);\n        if (itemID === null || itemID === undefined) {\n            return;\n        }\n        if (!selected) {\n            this.combo.selectItems([itemID], false, event);\n        } else {\n            this.combo.deselectItems([itemID], event);\n        }\n    }\n\n    public is_item_selected(itemID: any): boolean {\n        return this.combo.isItemSelected(itemID);\n    }\n}\n","import {\n    Component,\n    ElementRef,\n    HostBinding,\n    Inject,\n    Input,\n    DoCheck,\n    Host,\n    HostListener\n} from '@angular/core';\nimport { IgxDropDownItemComponent } from '../drop-down/drop-down-item.component';\nimport { IGX_DROPDOWN_BASE, IDropDownBase, Navigate } from '../drop-down/drop-down.common';\nimport { IgxComboAPIService } from './combo.api';\nimport { IgxSelectionAPIService } from '../core/selection';\n\n/** @hidden */\n@Component({\n    selector: 'igx-combo-item',\n    templateUrl: 'combo-item.component.html'\n})\nexport class IgxComboItemComponent extends IgxDropDownItemComponent implements DoCheck {\n\n    /**\n     * Gets the height of a list item\n     * @hidden\n     */\n    @Input()\n    @HostBinding('style.height.px')\n    public itemHeight = '';\n\n    /**\n     * @hidden\n     */\n    public get itemID() {\n        return this.comboAPI.isRemote ? JSON.stringify(this.value) : this.value;\n    }\n\n    /**\n     * @hidden\n     */\n    public get comboID() {\n        return this.comboAPI.comboID;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public get disableTransitions() {\n        return this.comboAPI.disableTransitions;\n    }\n\n    constructor(\n        protected comboAPI: IgxComboAPIService,\n        @Inject(IGX_DROPDOWN_BASE) protected dropDown: IDropDownBase,\n        protected elementRef: ElementRef,\n        @Inject(IgxSelectionAPIService) protected selection: IgxSelectionAPIService\n    ) {\n        super(dropDown, elementRef, null, selection);\n    }\n\n    /**\n     * @hidden\n     */\n    get selected(): boolean {\n        return this.comboAPI.is_item_selected(this.itemID);\n    }\n\n    set selected(value: boolean) {\n        if (this.isHeader) {\n            return;\n        }\n        this._selected = value;\n    }\n\n    /**\n     * @hidden\n     */\n    isVisible(direction: Navigate): boolean {\n        const rect = this.element.nativeElement.getBoundingClientRect();\n        const parentDiv = this.element.nativeElement.parentElement.parentElement.getBoundingClientRect();\n        if (direction === Navigate.Down) {\n            return rect.y + rect.height <= parentDiv.y + parentDiv.height;\n        }\n        return rect.y >= parentDiv.y;\n    }\n\n    @HostListener('click', ['$event'])\n    clicked(event) {\n        this.comboAPI.disableTransitions = false;\n        if (this.disabled || this.isHeader) {\n            const focusedItem = this.dropDown.items.find((item) => item.focused);\n            if (this.dropDown.allowItemsFocus && focusedItem) {\n                focusedItem.element.nativeElement.focus({ preventScroll: true });\n            }\n            return;\n        }\n        this.dropDown.navigateItem(this.index);\n        this.comboAPI.set_selected_item(this.itemID, event);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     * The event that is prevented is the click on the checkbox label element.\n     * That is the only visible element that a user can interact with.\n     * The click propagates to the host and the preventDefault is to stop it from\n     * switching focus to the input it's base on.\n     * The toggle happens in an internal handler in the drop-down on the next task queue cycle.\n     */\n    disableCheck(event: MouseEvent) {\n        event.preventDefault();\n    }\n\n    ngDoCheck() {\n    }\n}\n","import { IgxComboItemComponent } from './combo-item.component';\nimport { Component } from '@angular/core';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-combo-add-item',\n    template: '<ng-content></ng-content>',\n    providers: [{ provide: IgxComboItemComponent, useExisting: IgxComboAddItemComponent}]\n})\nexport class IgxComboAddItemComponent extends IgxComboItemComponent {\n    get selected(): boolean {\n        return false;\n    }\n    set selected(value: boolean) {\n    }\n\n    clicked(event?) {\n        this.comboAPI.disableTransitions = false;\n        this.comboAPI.add_custom_item();\n    }\n}\n","import {\n    ChangeDetectorRef, Component, ElementRef, Inject, QueryList, OnDestroy, AfterViewInit, ContentChildren, Optional\n} from '@angular/core';\nimport { IgxComboBase, IGX_COMBO_COMPONENT } from './combo.common';\nimport { IDropDownBase, IGX_DROPDOWN_BASE } from '../drop-down/drop-down.common';\nimport { IgxDropDownComponent } from '../drop-down/drop-down.component';\nimport { DropDownActionKey } from '../drop-down/drop-down.common';\nimport { IgxComboAddItemComponent } from './combo-add-item.component';\nimport { IgxComboAPIService } from './combo.api';\nimport { IgxDropDownItemBase } from '../drop-down/drop-down-item.base';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxComboItemComponent } from './combo-item.component';\nimport { DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\n/** @hidden */\n@Component({\n    selector: 'igx-combo-drop-down',\n    templateUrl: '../drop-down/drop-down.component.html',\n    providers: [{ provide: IGX_DROPDOWN_BASE, useExisting: IgxComboDropDownComponent }]\n})\nexport class IgxComboDropDownComponent extends IgxDropDownComponent implements IDropDownBase, OnDestroy, AfterViewInit {\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        @Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase,\n        protected comboAPI: IgxComboAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(elementRef, cdr, selection, _displayDensityOptions);\n    }\n\n    protected get scrollContainer() {\n        return this.virtDir.dc.location.nativeElement;\n    }\n\n    protected get isScrolledToLast(): boolean {\n        const scrollTop = this.virtDir.getVerticalScroll().scrollTop;\n        const scrollHeight = this.virtDir.getVerticalScroll().scrollHeight;\n        return Math.floor(scrollTop + this.virtDir.igxForContainerSize) === scrollHeight;\n    }\n\n    protected get lastVisibleIndex(): number {\n        return this.combo.totalItemCount ?\n            Math.floor(this.combo.itemsMaxHeight / this.combo.itemHeight) :\n            this.items.length - 1;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ContentChildren(IgxComboItemComponent, { descendants: true })\n    public children: QueryList<IgxDropDownItemBase> = null;\n\n    /**\n     * @hidden @internal\n     */\n    public onFocus() {\n        this.focusedItem = this._focusedItem || this.items[0];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onBlur(evt?) {\n        this.focusedItem = null;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onToggleOpened() {\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden\n     */\n    public navigateFirst() {\n        this.navigateItem(this.virtDir.igxForOf.findIndex(e => !e.isHeader));\n    }\n\n    /**\n     * @hidden\n     */\n    public navigatePrev() {\n        if (this._focusedItem && this._focusedItem.index === 0 && this.virtDir.state.startIndex === 0) {\n            this.combo.focusSearchInput(false);\n        } else {\n            super.navigatePrev();\n        }\n    }\n\n\n    /**\n     * @hidden\n     */\n    public navigateNext() {\n        const lastIndex = this.combo.totalItemCount ? this.combo.totalItemCount - 1 : this.virtDir.igxForOf.length - 1;\n        if (this._focusedItem && this._focusedItem.index === lastIndex) {\n            this.focusAddItemButton();\n        } else {\n            super.navigateNext();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public selectItem(item: IgxDropDownItemBase) {\n        if (item === null || item === undefined) {\n            return;\n        }\n        this.comboAPI.set_selected_item(item.itemID);\n        this._focusedItem = item;\n    }\n\n    private focusAddItemButton() {\n        if (this.combo.isAddButtonVisible()) {\n            this.focusedItem = this.items[this.items.length - 1];\n        }\n    }\n\n    protected scrollToHiddenItem(newItem: any): void { }\n\n    protected scrollHandler = () => {\n        this.comboAPI.disableTransitions = true;\n    }\n\n    protected get sortedChildren(): IgxDropDownItemBase[] {\n        if (this.children !== undefined) {\n            return this.children.toArray()\n                .sort((a: IgxDropDownItemBase, b: IgxDropDownItemBase) => {\n                    return a.index - b.index;\n                });\n        }\n        return null;\n    }\n\n    /**\n     * Get all non-header items\n     *\n     * ```typescript\n     * let myDropDownItems = this.dropdown.items;\n     * ```\n     */\n    public get items(): IgxComboItemComponent[] {\n        const items: IgxComboItemComponent[] = [];\n        if (this.children !== undefined) {\n            const sortedChildren = this.sortedChildren as IgxComboItemComponent[];\n            for (const child of sortedChildren) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n\n        return items;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public updateScrollPosition() {\n        this.virtDir.getVerticalScroll().scrollTop = this._scrollPosition;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onItemActionKey(key: DropDownActionKey) {\n        switch (key) {\n            case DropDownActionKey.ENTER:\n                this.handleEnter();\n                break;\n            case DropDownActionKey.SPACE:\n                this.handleSpace();\n                break;\n            case DropDownActionKey.ESCAPE:\n                this.close();\n        }\n    }\n\n    private handleEnter() {\n        if (this.isAddItemFocused()) {\n            this.combo.addItemToCollection();\n        } else {\n            this.close();\n        }\n    }\n\n    private handleSpace() {\n        if (this.isAddItemFocused()) {\n            return;\n        } else {\n            this.selectItem(this.focusedItem);\n        }\n    }\n\n    private isAddItemFocused(): boolean {\n        return this.focusedItem instanceof IgxComboAddItemComponent;\n    }\n\n    public ngAfterViewInit() {\n        this.virtDir.getVerticalScroll().addEventListener('scroll', this.scrollHandler);\n    }\n\n    /**\n     *@hidden @internal\n     */\n    public ngOnDestroy(): void {\n        this.virtDir.getVerticalScroll().removeEventListener('scroll', this.scrollHandler);\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n","import { ElementRef, EventEmitter } from '@angular/core';\nimport { CancelableEventArgs, CancelableBrowserEventArgs } from '../core/utils';\nimport { IFilteringExpression } from '../data-operations/filtering-expression.interface';\n\nexport const IGX_COMBO_COMPONENT = 'IgxComboComponentToken';\n\n/** @hidden @internal TODO: Evaluate */\nexport interface IgxComboBase {\n    id: string;\n    data: any[];\n    valueKey: string;\n    groupKey: string;\n    isRemote: boolean;\n    filteredData: any[];\n    filteringExpressions: IFilteringExpression[];\n    totalItemCount: number;\n    itemsMaxHeight: number;\n    itemHeight: number;\n    searchValue: string;\n    searchInput: ElementRef<HTMLInputElement>;\n    comboInput: ElementRef<HTMLInputElement>;\n    onOpened: EventEmitter<void>;\n    onOpening: EventEmitter<CancelableEventArgs>;\n    onClosing: EventEmitter<CancelableBrowserEventArgs>;\n    onClosed: EventEmitter<void>;\n    focusSearchInput(opening?: boolean): void;\n    triggerCheck(): void;\n    addItemToCollection(): void;\n    isAddButtonVisible(): boolean;\n    handleInputChange(event?: string): void;\n    isItemSelected(itemID: any): boolean;\n    selectItems(itemIDs: any[], clearSelection?: boolean, event?: Event): void;\n    deselectItems(itemIDs: any[], event?: Event): void;\n}\n","import { Inject, Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../core/utils';\nimport { DataUtil } from '../data-operations/data-util';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IFilteringState } from '../data-operations/filtering-state.interface';\nimport { FilteringStrategy } from '../data-operations/filtering-strategy';\nimport { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IGX_COMBO_COMPONENT, IgxComboBase } from './combo.common';\n\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboFiltering'\n})\nexport class IgxComboFilteringPipe implements PipeTransform {\n\n    constructor(@Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase) { }\n\n    public transform(collection: any[], expressions: IFilteringExpression[],\n                     logic: FilteringLogic) {\n        const filteringExpressionsTree =  new FilteringExpressionsTree(logic);\n        filteringExpressionsTree.filteringOperands = expressions;\n        const state: IFilteringState = { expressionsTree: filteringExpressionsTree, strategy: new SimpleFilteringStrategy()};\n        state.expressionsTree.filteringOperands = this.combo.filteringExpressions;\n\n        if (!state.expressionsTree.filteringOperands.length) {\n            return collection;\n        }\n\n        const result = DataUtil.filter(cloneArray(collection), state);\n        return result;\n    }\n}\n\n/** @hidden */\nexport class SimpleFilteringStrategy extends FilteringStrategy {\n    public findMatchByExpression(rec: object, expr: IFilteringExpression): boolean {\n        const cond = expr.condition;\n        const val = expr.fieldName === undefined ? rec : rec[expr.fieldName];\n        return cond.logic(val, expr.searchVal, expr.ignoreCase);\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboSorting',\n    pure: true\n})\nexport class IgxComboSortingPipe implements PipeTransform {\n    constructor() { }\n\n    public transform(collection: any[], expressions: ISortingExpression []) {\n        if (!expressions.length) {\n            return collection;\n        }\n        const result = DataUtil.sort(cloneArray(collection), expressions);\n        return result;\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'comboGrouping'\n})\nexport class IgxComboGroupingPipe implements PipeTransform {\n\n    constructor(@Inject(IGX_COMBO_COMPONENT) public combo: IgxComboBase) { }\n\n    public transform(collection: any[], groupKey: any) {\n        this.combo.filteredData = collection;\n        if ((!groupKey && groupKey !== 0) || !collection.length) {\n            return collection;\n        }\n        const data = cloneArray(collection);\n        let inserts = 0;\n        let currentHeader = null;\n        for (let i = 0; i < collection.length; i++) {\n            let insertFlag = 0;\n            if (currentHeader !== collection[i][groupKey]) {\n                currentHeader = collection[i][groupKey];\n                insertFlag = 1;\n            }\n            if (insertFlag) {\n                data.splice(i + inserts, 0, {\n                    [this.combo.valueKey]: currentHeader,\n                    [this.combo.groupKey]: currentHeader,\n                    isHeader: true\n                });\n                inserts++;\n            }\n        }\n        return data;\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'filterCondition',\n    pure: true\n})\n\nexport class IgxComboFilterConditionPipe implements PipeTransform {\n\n    public transform(value: string): string {\n        return value.split(/(?=[A-Z])/).join(' ');\n    }\n}\n","import { ConnectedPositioningStrategy } from './../services/overlay/position/connected-positioning-strategy';\nimport { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectorRef, Component, ContentChild, ElementRef, EventEmitter, HostBinding, HostListener,\n    Input, NgModule, OnInit, OnDestroy, Output, TemplateRef, ViewChild, Optional, Inject, Injector, forwardRef\n} from '@angular/core';\nimport {\n    IgxComboItemDirective,\n    IgxComboEmptyDirective,\n    IgxComboHeaderItemDirective,\n    IgxComboHeaderDirective,\n    IgxComboFooterDirective,\n    IgxComboAddItemDirective,\n    IgxComboToggleIconDirective,\n    IgxComboClearIconDirective\n} from './combo.directives';\nimport { FormsModule, ReactiveFormsModule, ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { cloneArray, CancelableEventArgs, CancelableBrowserEventArgs } from '../core/utils';\nimport { IgxStringFilteringOperand, IgxBooleanFilteringOperand } from '../data-operations/filtering-condition';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { SortingDirection, ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IgxForOfModule, IForOfState, IgxForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxDropDownModule } from '../drop-down/index';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxComboItemComponent } from './combo-item.component';\nimport { IgxComboDropDownComponent } from './combo-dropdown.component';\nimport { IgxComboFilterConditionPipe, IgxComboFilteringPipe, IgxComboGroupingPipe, IgxComboSortingPipe } from './combo.pipes';\nimport { OverlaySettings, AbsoluteScrollStrategy } from '../services';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { DefaultSortingStrategy, ISortingStrategy } from '../data-operations/sorting-strategy';\nimport { DisplayDensityBase, DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\nimport { IGX_COMBO_COMPONENT, IgxComboBase } from './combo.common';\nimport { IgxComboAddItemComponent } from './combo-add-item.component';\nimport { IgxComboAPIService } from './combo.api';\nimport { EditorProvider } from '../core/edit-provider';\nimport { take } from 'rxjs/operators';\n\n/**\n * @hidden\n */\nenum DataTypes {\n    EMPTY = 'empty',\n    PRIMITIVE = 'primitive',\n    COMPLEX = 'complex',\n    PRIMARYKEY = 'valueKey'\n}\n\n/**\n * @hidden\n */\nconst ItemHeights = {\n    'comfortable': 40,\n    'cosy': 32,\n    'compact': 28,\n};\n\n/**\n * @hidden\n * The default number of items that should be in the combo's\n * drop-down list if no `[itemsMaxHeight]` is specified\n */\nconst itemsInContainer = 10;\n\nexport enum IgxComboState {\n    /**\n     * Combo with initial state.\n     */\n    INITIAL,\n    /**\n     * Combo with valid state.\n     */\n    VALID,\n    /**\n     * Combo with invalid state.\n     */\n    INVALID\n}\n\nexport interface IComboSelectionChangeEventArgs extends CancelableEventArgs {\n    oldSelection: any[];\n    newSelection: any[];\n    event?: Event;\n}\n\nexport interface IComboItemAdditionEvent {\n    oldCollection: any[];\n    addedItem: any;\n    newCollection: any[];\n}\n\nlet NEXT_ID = 0;\nconst noop = () => { };\n\n@Component({\n    selector: 'igx-combo',\n    templateUrl: 'combo.component.html',\n    providers: [\n        IgxComboAPIService,\n        { provide: IGX_COMBO_COMPONENT, useExisting: IgxComboComponent },\n        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => IgxComboComponent), multi: true }\n    ]\n})\nexport class IgxComboComponent extends DisplayDensityBase implements IgxComboBase, AfterViewInit, ControlValueAccessor, OnInit,\n    OnDestroy, EditorProvider {\n    /**\n     * @hidden @internal\n     */\n    public customValueFlag = true;\n    /**\n     * @hidden @internal\n     */\n    public defaultFallbackGroup = 'Other';\n    protected stringFilters = IgxStringFilteringOperand;\n    protected booleanFilters = IgxBooleanFilteringOperand;\n    protected _filteringLogic = FilteringLogic.Or;\n    protected _filteringExpressions: IFilteringExpression[] = [];\n    protected _sortingExpressions: ISortingExpression[] = [];\n    protected _groupKey = '';\n    protected _displayKey: string;\n    protected _prevInputValue = '';\n    private _dataType = '';\n    private ngControl: NgControl = null;\n    private destroy$ = new Subject<any>();\n    private _data = [];\n    private _filteredData = [];\n    private _itemHeight = null;\n    private _itemsMaxHeight = null;\n    private _onChangeCallback: (_: any) => void = noop;\n    private _overlaySettings: OverlaySettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(),\n        modal: false,\n        closeOnOutsideClick: true,\n        excludePositionTarget: true\n    };\n    private _value = '';\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n        protected comboAPI: IgxComboAPIService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        @Optional() private injector: Injector) {\n        super(_displayDensityOptions);\n        this.comboAPI.register(this);\n    }\n\n    @ViewChild(IgxForOfDirective, { read: IgxForOfDirective, static: true })\n    protected virtDir: IgxForOfDirective<any>;\n\n    /**\n     * Set custom overlay settings that control how the combo's list of items is displayed.\n     * Set:\n     * ```html\n     * <igx-combo [overlaySettings] = \"customOverlaySettings\"></igx-combo>\n     * ```\n     *\n     * ```typescript\n     *  const customSettings = { positionStrategy: { settings: { target: myTarget } } };\n     *  combo.overlaySettings = customSettings;\n     * ```\n     * Get any custom overlay settings used by the combo:\n     * ```typescript\n     *  const comboOverlaySettings: OverlaySettings = myCombo.overlaySettings;\n     * ```\n     */\n\n    @Input()\n    public overlaySettings: OverlaySettings = null;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxComboDropDownComponent, { read: IgxComboDropDownComponent, static: true })\n    public dropdown: IgxComboDropDownComponent;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('searchInput', { static: false })\n    public searchInput: ElementRef<HTMLInputElement> = null;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild('comboInput', { static: true })\n    public comboInput: ElementRef<HTMLInputElement> = null;\n\n    /**\n     * @hidden @internal\n     */\n    get displaySearchInput(): boolean {\n        return this.filterable || this.allowCustomValues;\n    }\n\n    /**\n     * The custom template, if any, that should be used when rendering ITEMS in the combo list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.itemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboItem>\n     *          <div class=\"custom-item\" let-item let-key=\"valueKey\">\n     *              <div class=\"custom-item__name\">{{ item[key] }}</div>\n     *              <div class=\"custom-item__cost\">{{ item.cost }}</div>\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboItemDirective, { read: TemplateRef, static: true })\n    public itemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the HEADER for the combo items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.headerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboHeader>\n     *          <div class=\"combo__header\">\n     *              This is a custom header\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboHeaderDirective, { read: TemplateRef, static: true })\n    public headerTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the FOOTER for the combo items list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.footerTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboFooter>\n     *          <div class=\"combo__footer\">\n     *              This is a custom footer\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboFooterDirective, { read: TemplateRef, static: true })\n    public footerTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering HEADER ITEMS for groups in the combo list\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.headerItemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboHeaderItem let-item let-key=\"groupKey\">\n     *          <div class=\"custom-item--group\">Group header for {{ item[key] }}</div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboHeaderItemDirective, { read: TemplateRef, static: true })\n    public headerItemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.addItemTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboAddItem>\n     *          <button class=\"combo__add-button\">\n     *              Click to add item\n     *          </button>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboAddItemDirective, { read: TemplateRef, static: true })\n    public addItemTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the ADD BUTTON in the combo drop down\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.emptyTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboEmpty>\n     *          <div class=\"combo--emtpy\">\n     *              There are no items to display\n     *          </div>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboEmptyDirective, { read: TemplateRef, static: true })\n    public emptyTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the combo TOGGLE(open/close) button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.toggleIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboToggleIcon let-collapsed>\n     *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboToggleIconDirective, { read: TemplateRef, static: true })\n    public toggleIconTemplate: TemplateRef<any> = null;\n\n    /**\n     * The custom template, if any, that should be used when rendering the combo CLEAR button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.combo.clearIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-combo #combo>\n     *      ...\n     *      <ng-template igxComboClearIcon>\n     *          <igx-icon>clear</igx-icon>\n     *      </ng-template>\n     *  </igx-combo>\n     * ```\n     */\n    @ContentChild(IgxComboClearIconDirective, { read: TemplateRef, static: true })\n    public clearIconTemplate: TemplateRef<any> = null;\n\n    @ViewChild('primitive', { read: TemplateRef, static: true })\n    protected primitiveTemplate: TemplateRef<any>;\n\n    @ViewChild('complex', { read: TemplateRef, static: true })\n    protected complexTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden @internal\n     */\n    @ViewChild(IgxForOfDirective, { static: true })\n    public virtualScrollContainer: IgxForOfDirective<any>;\n\n    @ViewChild('dropdownItemContainer', { static: true })\n    protected dropdownContainer: ElementRef = null;\n\n    /**\n     * Emitted when item selection is changing, before the selection completes\n     *\n     * ```html\n     * <igx-combo (onSelectionChange)='handleSelection()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onSelectionChange = new EventEmitter<IComboSelectionChangeEventArgs>();\n\n    /**\n     * Emitted before the dropdown is opened\n     *\n     * ```html\n     * <igx-combo onOpening='handleOpening($event)'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onOpening = new EventEmitter<CancelableEventArgs>();\n\n    /**\n     * Emitted after the dropdown is opened\n     *\n     * ```html\n     * <igx-combo (onOpened)='handleOpened()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onOpened = new EventEmitter<void>();\n\n    /**\n     * Emitted before the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosing)='handleClosing($event)'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs>();\n\n    /**\n     * Emitted after the dropdown is closed\n     *\n     * ```html\n     * <igx-combo (onClosed)='handleClosed()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onClosed = new EventEmitter<void>();\n\n    /**\n     * Emitted when an item is being added to the data collection\n     *\n     * ```html\n     * <igx-combo (onAddition)='handleAdditionEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onAddition = new EventEmitter<IComboItemAdditionEvent>();\n\n    /**\n     * Emitted when the value of the search input changes (e.g. typing, pasting, clear, etc.)\n     *\n     * ```html\n     * <igx-combo (onSearchInput)='handleSearchInputEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onSearchInput = new EventEmitter();\n\n    /**\n     * Emitted when new chunk of data is loaded from the virtualization\n     *\n     * ```html\n     * <igx-combo (onDataPreLoad)='handleDataPreloadEvent()'></igx-combo>\n     * ```\n     */\n    @Output()\n    public onDataPreLoad = new EventEmitter<any>();\n\n    /**\n     * Gets/gets combo id.\n     *\n     * ```typescript\n     * // get\n     * let id = this.combo.id;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [id]='combo1'></igx-combo>\n     * ```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-combo-${NEXT_ID++}`;\n\n    /**\n     * Sets the style width of the element\n     *\n     * ```typescript\n     * // get\n     * let myComboWidth = this.combo.width;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [width]='250px'></igx-combo>\n     * ```\n     */\n    @HostBinding('style.width')\n    @Input()\n    public width: string;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-input-group--valid')\n    public get validClass(): boolean {\n        return this.valid === IgxComboState.VALID;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-input-group--invalid')\n    public get invalidClass(): boolean {\n        return this.valid === IgxComboState.INVALID;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('class.igx-combo')\n    public cssClass = 'igx-combo'; // Independent of display density, at the time being\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding(`attr.role`)\n    public role = 'combobox';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-expanded')\n    public get ariaExpanded(): boolean {\n        return !this.dropdown.collapsed;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-haspopup')\n    public get hasPopUp() {\n        return 'listbox';\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-owns')\n    public get ariaOwns() {\n        return this.dropdown.id;\n    }\n\n    /**\n     * Controls whether custom values can be added to the collection\n     *\n     * ```typescript\n     * // get\n     * let comboAllowsCustomValues = this.combo.allowCustomValues;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [allowCustomValues]='true'></igx-combo>\n     * ```\n     */\n    @Input()\n    public allowCustomValues = false;\n\n    /**\n     * Configures the drop down list height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsMaxHeight = this.combo.itemsMaxHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsMaxHeight]='320'></igx-combo>\n     * ```\n    */\n    @Input()\n    public get itemsMaxHeight(): number {\n        if (this._itemsMaxHeight === null || this._itemsMaxHeight === undefined) {\n            return this.itemHeight * itemsInContainer;\n        }\n        return this._itemsMaxHeight;\n    }\n\n    public set itemsMaxHeight(val: number) {\n        this._itemsMaxHeight = val;\n    }\n\n    /**\n     * Configures the drop down list width\n     *\n     * ```typescript\n     * // get\n     * let myComboItemsWidth = this.combo.itemsWidth;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemsWidth] = '\"180px\"'></igx-combo>\n     * ```\n     */\n    @Input()\n    public itemsWidth: string;\n\n    /**\n     * Configures the drop down list item height\n     *\n     * ```typescript\n     * // get\n     * let myComboItemHeight = this.combo.itemHeight;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [itemHeight]='32'></igx-combo>\n     * ```\n     */\n    @Input()\n    public get itemHeight(): number {\n        if (this._itemHeight === null || this._itemHeight === undefined) {\n            return ItemHeights[this.displayDensity];\n        }\n        return this._itemHeight;\n    }\n\n    public set itemHeight(val: number) {\n        this._itemHeight = val;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public filteringLogic = FilteringLogic.Or;\n\n    /**\n     * Defines the placeholder value for the combo value field\n     *\n     * ```typescript\n     * // get\n     * let myComboPlaceholder = this.combo.placeholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [placeholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    @Input()\n    public placeholder = '';\n\n    /**\n     * @hidden @internal\n     */\n    public get inputEmpty(): boolean {\n        return !this.value && !this.placeholder;\n    }\n\n    /**\n     * Defines the placeholder value for the combo dropdown search field\n     *\n     * ```typescript\n     * // get\n     * let myComboSearchPlaceholder = this.combo.searchPlaceholder;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [searchPlaceholder]='newPlaceHolder'></igx-combo>\n     * ```\n     */\n    @Input()\n    public searchPlaceholder = 'Enter a Search Term';\n\n    /**\n     * Combo data source.\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [data]='items'></igx-combo>\n     * ```\n     */\n    @Input()\n    get data(): any[] {\n        return this._data;\n    }\n    set data(val: any[]) {\n        this._data = (val) ? val : [];\n    }\n\n    /**\n     * Combo value data source propery.\n     *\n     * ```typescript\n     * // get\n     * let myComboValueKey = this.combo.valueKey;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [valueKey]='myKey'></igx-combo>\n     * ```\n     */\n    @Input()\n    public valueKey: string;\n\n    @Input()\n    set displayKey(val: string) {\n        this._displayKey = val;\n    }\n\n    /**\n     * Combo text data source propery.\n     *\n     * ```typescript\n     * // get\n     * let myComboDisplayKey = this.combo.displayKey;\n     *\n     * // set\n     * this.combo.displayKey = 'val';\n     *\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [displayKey]='mydisplayKey'></igx-combo>\n     * ```\n     */\n    get displayKey() {\n        return this._displayKey ? this._displayKey : this.valueKey;\n    }\n\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```html\n     * <!--set-->\n     * <igx-combo [groupKey]='newGroupKey'></igx-combo>\n     * ```\n     */\n    @Input()\n    public set groupKey(val: string) {\n        this.clearSorting(this._groupKey);\n        this._groupKey = val;\n        this.sort(this._groupKey);\n    }\n\n    /**\n     * The item property by which items should be grouped inside the items list. Not usable if data is not of type Object[].\n     *\n     * ```typescript\n     * // get\n     * let currentGroupKey = this.combo.groupKey;\n     * ```\n     */\n    public get groupKey(): string {\n        return this._groupKey;\n    }\n\n    /**\n     * An @Input property that enabled/disables filtering in the list. The default is `true`.\n     * ```html\n     *<igx-combo [filterable]=\"'false'\">\n     * ```\n     */\n    @Input()\n    public filterable = true;\n\n    /**\n     * An @Input property that set aria-labelledby attribute\n     * ```html\n     *<igx-combo [ariaLabelledBy]=\"'label1'\">\n     * ```\n     */\n    @Input()\n    @HostBinding('attr.aria-labelledby')\n    public ariaLabelledBy: string;\n\n    /**\n     * An @Input property that enabled/disables combo. The default is `false`.\n     * ```html\n     *<igx-combo [disabled]=\"'true'\">\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * An @Input property that sets how the combo will be styled.\n     * The allowed values are `line`, `box`, `border` and `search`. The default is `box`.\n     * ```html\n     *<igx-combo [type]=\"'line'\">\n     * ```\n     */\n    @Input()\n    public type = 'box';\n\n    /**\n     * Gets/Sets if control is valid, when used in a form\n     *\n     * ```typescript\n     * // get\n     * let valid = this.combo.valid;\n     * ```\n     * ```typescript\n     * // set\n     * this.combo.valid = IgxComboState.INVALID;\n     * ```\n    */\n    public valid: IgxComboState = IgxComboState.INITIAL;\n\n    /**\n     * @hidden @internal\n     */\n    public searchValue = '';\n\n    /**\n     * @hidden @internal\n     */\n    @HostListener('keydown.ArrowDown', ['$event'])\n    @HostListener('keydown.Alt.ArrowDown', ['$event'])\n    onArrowDown(event: Event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.open();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    onInputClick(event: Event) {\n        event.stopPropagation();\n        event.preventDefault();\n        this.toggle();\n    }\n\n    /**\n     * Defines the current state of the virtualized data. It contains `startIndex` and `chunkSize`\n     *\n     * ```typescript\n     * // get\n     * let state = this.combo.virtualizationState;\n     * ```\n    */\n    get virtualizationState(): IForOfState {\n        return this.virtDir.state;\n    }\n    /**\n     * Sets the current state of the virtualized data.\n     *\n     * ```typescript\n     * // set\n     * this.combo.virtualizationState(state);\n     * ```\n     */\n    set virtualizationState(state: IForOfState) {\n        this.virtDir.state = state;\n    }\n\n    /**\n     * Gets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // get\n     * let count = this.combo.totalItemCount;\n     * ```\n    */\n    get totalItemCount(): number {\n        return this.virtDir.totalItemCount;\n    }\n    /**\n     * Sets total count of the virtual data items, when using remote service.\n     *\n     * ```typescript\n     * // set\n     * this.combo.totalItemCount(remoteService.count);\n     * ```\n     */\n    set totalItemCount(count: number) {\n        this.virtDir.totalItemCount = count;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get filteringExpressions(): IFilteringExpression[] {\n        return this.filterable ? this._filteringExpressions : [];\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set filteringExpressions(value: IFilteringExpression[]) {\n        this._filteringExpressions = value;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get sortingExpressions(): ISortingExpression[] {\n        return this._sortingExpressions;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set sortingExpressions(value: ISortingExpression[]) {\n        this._sortingExpressions = value;\n        this.cdr.markForCheck();\n    }\n\n    protected clearSorting(field?: string | number) {\n        if (field === undefined || field === null) {\n            this.sortingExpressions = [];\n            return;\n        }\n        const currentState = cloneArray(this.sortingExpressions);\n        const index = currentState.findIndex((expr) => expr.fieldName === field);\n        if (index > -1) {\n            currentState.splice(index, 1);\n            this.sortingExpressions = currentState;\n        }\n    }\n\n    /**\n     * The text displayed in the combo input\n     *\n     * ```typescript\n     * // get\n     * let comboValue = this.combo.value;\n     * ```\n     */\n    get value(): string {\n        return this._value;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get filteredData(): any[] {\n        return this.filterable ? this._filteredData : this.data;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public set filteredData(val: any[]) {\n        this._filteredData = this.groupKey ? (val || []).filter((e) => e.isHeader !== true) : val;\n        this.checkMatch();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleKeyUp(event: KeyboardEvent): void {\n        if (event.key === 'ArrowDown' || event.key === 'Down') {\n            this.dropdown.focusedItem = this.dropdown.items[0];\n            this.dropdownContainer.nativeElement.focus();\n        } else if (event.key === 'Escape' || event.key === 'Esc') {\n            this.toggle();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleKeyDown(event: KeyboardEvent) {\n        if (event.key === 'ArrowUp' || event.key === 'Up') {\n            event.preventDefault();\n            event.stopPropagation();\n            this.close();\n        }\n    }\n\n    private checkMatch(): void {\n        const displayKey = this.displayKey;\n        const matchFn = (e) => {\n            const value = displayKey ? e[displayKey] : e;\n            return value.toString().toLowerCase() === this.searchValue.trim().toLowerCase();\n        };\n        const itemMatch = this.filteredData.some(matchFn);\n        this.customValueFlag = this.allowCustomValues && !itemMatch;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleInputChange(event?: string) {\n        let cdrFlag = false;\n        const vContainer = this.virtDir;\n        if (event !== undefined && this._prevInputValue === event) {\n            // Nothing has changed\n            return;\n        } else {\n            this._prevInputValue = event !== undefined ? event : '';\n        }\n        if (event !== undefined) {\n            // Do not scroll if not scrollable\n            if (vContainer.isScrollable()) {\n                vContainer.scrollTo(0);\n            } else {\n                cdrFlag = true;\n            }\n            this.onSearchInput.emit(event);\n        } else {\n            cdrFlag = true;\n        }\n        if (this.filterable) {\n            this.filter();\n            // If there was no scroll before filtering, check if there is after and detect changes\n            if (cdrFlag) {\n                vContainer.onChunkLoad.pipe(take(1)).subscribe(() => {\n                    if (vContainer.isScrollable()) {\n                        this.cdr.detectChanges();\n                    }\n                });\n            }\n        } else {\n            this.checkMatch();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public sort(fieldName: string, dir: SortingDirection = SortingDirection.Asc, ignoreCase: boolean = true,\n        strategy: ISortingStrategy = DefaultSortingStrategy.instance()): void {\n        if (!fieldName) {\n            return;\n        }\n        const sortingState = cloneArray(this.sortingExpressions, true);\n\n        this.prepare_sorting_expression(sortingState, fieldName, dir, ignoreCase, strategy);\n        this.sortingExpressions = sortingState;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public getValueByValueKey(val: any): any {\n        if (!val && val !== 0) {\n            return undefined;\n        }\n        return this.valueKey ?\n            this.data.filter((e) => e[this.valueKey] === val)[0] :\n            this.data.filter((e) => e === val);\n    }\n\n    protected prepare_sorting_expression(state: ISortingExpression[], fieldName: string, dir: SortingDirection, ignoreCase: boolean,\n        strategy: ISortingStrategy) {\n\n        if (dir === SortingDirection.None) {\n            state.splice(state.findIndex((expr) => expr.fieldName === fieldName), 1);\n            return;\n        }\n\n        const expression = state.find((expr) => expr.fieldName === fieldName);\n\n        if (!expression) {\n            state.push({ fieldName, dir, ignoreCase, strategy });\n        } else {\n            Object.assign(expression, { fieldName, dir, ignoreCase });\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get dataType(): string {\n        if (this.valueKey) {\n            return DataTypes.COMPLEX;\n        }\n        return DataTypes.PRIMITIVE;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isRemote() {\n        return this.totalItemCount > 0 &&\n            this.valueKey &&\n            this.dataType === DataTypes.COMPLEX;\n    }\n\n    /**\n     * If the data source is remote, returns JSON.stringify(itemID)\n     * @hidden\n     * @internal\n     */\n    private _stringifyItemID(itemID: any) {\n        return this.isRemote && typeof itemID === 'object' ? JSON.stringify(itemID) : itemID;\n    }\n\n    private _parseItemID(itemID) {\n        return this.isRemote && typeof itemID === 'string' ? JSON.parse(itemID) : itemID;\n    }\n\n    /**\n     * Returns if the specified itemID is selected\n     * @hidden\n     * @internal\n     */\n    public isItemSelected(item: any): boolean {\n        return this.selection.is_item_selected(this.id, this._stringifyItemID(item));\n    }\n\n    /**\n     * Triggers change detection on the combo view\n     */\n    public triggerCheck() {\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public isAddButtonVisible(): boolean {\n        // This should always return a boolean value. If this.searchValue was '', it returns '' instead of false;\n        return this.searchValue !== '' && this.customValueFlag;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleSelectAll(evt) {\n        if (evt.checked) {\n            this.selectAllItems();\n        } else {\n            this.deselectAllItems();\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public addItemToCollection() {\n        if (!this.searchValue) {\n            return;\n        }\n        const newValue = this.searchValue.trim();\n        const addedItem = this.displayKey ? {\n            [this.valueKey]: newValue,\n            [this.displayKey]: newValue\n        } : newValue;\n        if (this.groupKey) {\n            Object.assign(addedItem, { [this.groupKey]: this.defaultFallbackGroup });\n        }\n        const oldCollection = this.data;\n        const newCollection = [...this.data];\n        newCollection.push(addedItem);\n        const args: IComboItemAdditionEvent = {\n            oldCollection, addedItem, newCollection\n        };\n        this.onAddition.emit(args);\n        this.data.push(addedItem);\n        // If you mutate the array, no pipe is invoked and the display isn't updated;\n        // if you replace the array, the pipe executes and the display is updated.\n        this.data = cloneArray(this.data);\n        this.selectItems([addedItem], false);\n        this.customValueFlag = false;\n        this.searchInput.nativeElement.focus();\n        this.dropdown.focusedItem = null;\n        this.handleInputChange();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public focusSearchInput(opening?: boolean): void {\n        if (this.displaySearchInput && this.searchInput) {\n            this.searchInput.nativeElement.focus();\n        } else {\n            if (opening) {\n                this.dropdownContainer.nativeElement.focus();\n            } else {\n                this.comboInput.nativeElement.focus();\n                this.toggle();\n            }\n        }\n    }\n\n\n    protected prepare_filtering_expression(searchVal, condition, ignoreCase, fieldName?) {\n        const newArray = [...this.filteringExpressions];\n        const expression = newArray.find((expr) => expr.fieldName === fieldName);\n        const newExpression = { fieldName, searchVal, condition, ignoreCase };\n        if (!expression) {\n            newArray.push(newExpression);\n        } else {\n            Object.assign(expression, newExpression);\n        }\n        if (this.groupKey) {\n            const expression2 = newArray.find((expr) => expr.fieldName === 'isHeader');\n            const headerExpression = {\n                fieldName: 'isHeader', searchVale: '',\n                condition: IgxBooleanFilteringOperand.instance().condition('true'), ignoreCase: true\n            };\n            if (!expression2) {\n                newArray.push(headerExpression);\n            } else {\n                Object.assign(expression2, headerExpression);\n            }\n        }\n        this.filteringExpressions = newArray;\n    }\n\n    protected onStatusChanged = () => {\n        if ((this.ngControl.control.touched || this.ngControl.control.dirty) &&\n            (this.ngControl.control.validator || this.ngControl.control.asyncValidator)) {\n            this.valid = this.ngControl.valid ? IgxComboState.VALID : IgxComboState.INVALID;\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public onBlur() {\n        if (this.collapsed) {\n            if (this.ngControl && !this.ngControl.valid) {\n                this.valid = IgxComboState.INVALID;\n            } else {\n                this.valid = IgxComboState.INITIAL;\n            }\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public filter() {\n        this.prepare_filtering_expression(this.searchValue.trim(), IgxStringFilteringOperand.instance().condition('contains'),\n            true, this.dataType === DataTypes.PRIMITIVE ? undefined : this.displayKey);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnInit() {\n        this.ngControl = this.injector.get(NgControl, null);\n        this._overlaySettings.positionStrategy.settings.target = this.elementRef.nativeElement;\n        this.selection.set(this.id, new Set());\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngAfterViewInit() {\n        this.filteredData = [...this.data];\n\n        if (this.ngControl) {\n            this.ngControl.statusChanges.pipe(takeUntil(this.destroy$)).subscribe(this.onStatusChanged);\n        }\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.destroy$.next();\n        this.destroy$.complete();\n        this.comboAPI.clear();\n        this.selection.clear(this.id);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public dataLoading(event) {\n        this.onDataPreLoad.emit(event);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public writeValue(value: any): void {\n        // selectItems can handle Array<any>, no valueKey is needed;\n        this.selectItems(value, true);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public registerOnTouched(fn: any): void { }\n\n    /**\n     * @hidden @internal\n     */\n    public setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /**\n     * @hidden\n     */\n    public getEditElement(): HTMLElement {\n        return this.comboInput.nativeElement;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get template(): TemplateRef<any> {\n        this._dataType = this.dataType;\n        if (this.itemTemplate) {\n            return this.itemTemplate;\n        }\n        if (this._dataType === DataTypes.COMPLEX) {\n            return this.complexTemplate;\n        }\n        return this.primitiveTemplate;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClearItems(event: Event): void {\n        this.deselectAllItems(true, event);\n        event.stopPropagation();\n    }\n\n    /**\n     * A method that opens/closes the combo.\n     *\n     *```html\n     *<button (click)=\"combo.toggle()\">Toggle Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public toggle(): void {\n        const overlaySettings = Object.assign({}, this._overlaySettings, this.overlaySettings);\n        this.dropdown.toggle(overlaySettings);\n    }\n\n    /**\n     * A method that opens the combo.\n     *\n     *```html\n     *<button (click)=\"combo.open()\">Open Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public open(): void {\n        const overlaySettings = Object.assign({}, this._overlaySettings, this.overlaySettings);\n        this.dropdown.open(overlaySettings);\n    }\n\n    /**\n     * A method that closes the combo.\n     *\n     *```html\n     *<button (click)=\"combo.close()\">Close Combo</button>\n     *<igx-combo #combo></igx-combo>\n     *```\n     */\n    public close(): void {\n        this.dropdown.close();\n    }\n\n    /**\n     * Gets drop down state.\n     *\n     * ```typescript\n     * let state = this.combo.collapsed;\n     * ```\n    */\n    public get collapsed(): boolean {\n        return this.dropdown.collapsed;\n    }\n\n    /**\n     * Get current selection state\n     * @returns Array of selected items\n     * ```typescript\n     * let selectedItems = this.combo.selectedItems();\n     * ```\n     */\n    public selectedItems() {\n        const items = Array.from(this.selection.get(this.id));\n        return this.isRemote ? items.map(item => this._parseItemID(item)) : items;\n    }\n\n    /**\n     * Select defined items\n     * @param newItems new items to be selected\n     * @param clearCurrentSelection if true clear previous selected items\n     * ```typescript\n     * this.combo.selectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    public selectItems(newItems: Array<any>, clearCurrentSelection?: boolean, event?: Event) {\n        if (newItems) {\n            const newSelection = this.selection.add_items(this.id, newItems, clearCurrentSelection);\n            this.setSelection(newSelection, event);\n        }\n    }\n\n    /**\n     * Deselect defined items\n     * @param items items to deselected\n     * ```typescript\n     * this.combo.deselectItems([\"New York\", \"New Jersey\"]);\n     * ```\n     */\n    public deselectItems(items: Array<any>, event?: Event) {\n        if (items) {\n            const newSelection = this.selection.delete_items(this.id, items);\n            this.setSelection(newSelection, event);\n        }\n    }\n\n    /**\n     * Select all (filtered) items\n     * @param ignoreFilter if set to true, selects all items, otherwise selects only the filtered ones.\n     * ```typescript\n     * this.combo.selectAllItems();\n     * ```\n     */\n    public selectAllItems(ignoreFilter?: boolean, event?: Event) {\n        const allVisible = this.selection.get_all_ids(ignoreFilter ? this.data : this.filteredData);\n        const newSelection = this.selection.add_items(this.id, allVisible);\n        this.setSelection(newSelection, event);\n    }\n\n    /**\n     * Deselect all (filtered) items\n     * @param ignoreFilter if set to true, deselects all items, otherwise deselects only the filtered ones.\n     * ```typescript\n     * this.combo.deselectAllItems();\n     * ```\n     */\n    public deselectAllItems(ignoreFilter?: boolean, event?: Event): void {\n        let newSelection = this.selection.get_empty();\n        if (this.filteredData.length !== this.data.length && !ignoreFilter) {\n            newSelection = this.selection.delete_items(this.id, this.selection.get_all_ids(this.filteredData));\n        }\n        this.setSelection(newSelection, event);\n    }\n\n    /**\n     * Selects/Deselects an item using it's valueKey value\n     * @param itemID the valueKey of the specified item\n     * @param select If the item should be selected (true) or deselcted (false)\n     *\n     * ```typescript\n     * items: { field: string, region: string}[] = data;\n     * this.combo.setSelectedItem('Connecticut', true);\n     * // combo.valueKey === 'field'\n     * // items[n] === { field: 'Connecticut', state: 'New England'}\n     * ```\n     */\n    public setSelectedItem(itemID: any, select = true, event?: Event): void {\n        if (itemID === null || itemID === undefined) {\n            return;\n        }\n        const itemValue = this.getValueByValueKey(itemID);\n        if (itemValue !== null && itemValue !== undefined) {\n            if (select) {\n                this.selectItems([itemValue], false, event);\n            } else {\n                this.deselectItems([itemValue], event);\n            }\n        }\n    }\n\n    protected setSelection(newSelection: Set<any>, event?: Event): void {\n        const oldSelectionEmit = Array.from(this.selection.get(this.id) || []);\n        const newSelectionEmit = Array.from(newSelection || []);\n        const args: IComboSelectionChangeEventArgs = {\n            newSelection: newSelectionEmit,\n            oldSelection: oldSelectionEmit,\n            event,\n            cancel: false\n        };\n        this.onSelectionChange.emit(args);\n        if (!args.cancel) {\n            this.selection.select_items(this.id, args.newSelection, true);\n            this._value = this.dataType !== DataTypes.PRIMITIVE ?\n                args.newSelection.map((id) => this._parseItemID(id)[this.displayKey]).join(', ') :\n                args.newSelection.join(', ');\n            this._onChangeCallback(args.newSelection);\n        }\n    }\n    /**\n     * Event handlers\n     * @hidden\n     * @internal\n     */\n    public handleOpening(event: CancelableEventArgs) {\n        this.onOpening.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.handleInputChange();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleOpened() {\n        this.triggerCheck();\n        this.focusSearchInput(true);\n        this.onOpened.emit();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClosing(event) {\n        this.onClosing.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.searchValue = '';\n        this.comboInput.nativeElement.focus();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public handleClosed() {\n        this.onClosed.emit();\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxComboComponent, IgxComboItemComponent, IgxComboFilterConditionPipe, IgxComboGroupingPipe,\n        IgxComboFilteringPipe, IgxComboSortingPipe, IgxComboDropDownComponent, IgxComboAddItemComponent,\n        IgxComboItemDirective,\n        IgxComboEmptyDirective,\n        IgxComboHeaderItemDirective,\n        IgxComboHeaderDirective,\n        IgxComboFooterDirective,\n        IgxComboAddItemDirective,\n        IgxComboToggleIconDirective,\n        IgxComboClearIconDirective],\n    exports: [IgxComboComponent, IgxComboItemComponent, IgxComboDropDownComponent, IgxComboAddItemComponent,\n        IgxComboItemDirective,\n        IgxComboEmptyDirective,\n        IgxComboHeaderItemDirective,\n        IgxComboHeaderDirective,\n        IgxComboFooterDirective,\n        IgxComboAddItemDirective,\n        IgxComboToggleIconDirective,\n        IgxComboClearIconDirective],\n    imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,\n        IgxForOfModule, IgxToggleModule, IgxCheckboxModule, IgxDropDownModule, IgxButtonModule, IgxIconModule],\n    providers: [IgxSelectionAPIService]\n})\nexport class IgxComboModule { }\n","import { isIE } from '../core/utils';\n\n/**\n * This enum is used to keep the date validation result.\n *\n *@hidden\n */\nexport const enum DateState {\n    Valid = 'valid',\n    Invalid = 'invalid',\n}\n\n/**\n *@hidden\n */\nconst enum FormatDesc {\n    Numeric = 'numeric',\n    TwoDigits = '2-digit'\n}\n\n/**\n *@hidden\n */\nconst enum DateChars {\n    YearChar = 'y',\n    MonthChar = 'M',\n    DayChar = 'd'\n}\n\n/**\n *@hidden\n */\nconst enum DateParts {\n    Day = 'day',\n    Month = 'month',\n    Year = 'year'\n}\n\n/**\n *@hidden\n */\nexport abstract class DatePickerUtil {\n    private static readonly SHORT_DATE_MASK = 'MM/dd/yy';\n    private static readonly SEPARATOR = 'literal';\n    private static readonly NUMBER_OF_MONTHS = 12;\n    private static readonly PROMPT_CHAR = '_';\n    private static readonly DEFAULT_LOCALE = 'en';\n\n    /**\n     * This method generates date parts structure based on editor mask and locale.\n     * @param maskValue: string\n     * @param locale: string\n     * @returns array containing information about date parts - type, position, format\n     */\n    public static parseDateFormat(maskValue: string, locale: string = DatePickerUtil.DEFAULT_LOCALE): any[] {\n        let dateStruct = [];\n        if (maskValue === undefined && !isIE()) {\n            dateStruct = DatePickerUtil.getDefaultLocaleMask(locale);\n        } else {\n            const mask = (maskValue) ? maskValue : DatePickerUtil.SHORT_DATE_MASK;\n            const maskArray = Array.from(mask);\n            const monthInitPosition = mask.indexOf(DateChars.MonthChar);\n            const dayInitPosition = mask.indexOf(DateChars.DayChar);\n            const yearInitPosition = mask.indexOf(DateChars.YearChar);\n\n            if (yearInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Year,\n                    initialPosition: yearInitPosition,\n                    formatType: DatePickerUtil.getYearFormatType(mask)\n                });\n            }\n\n            if (monthInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Month,\n                    initialPosition: monthInitPosition,\n                    formatType: DatePickerUtil.getMonthFormatType(mask)\n                });\n            }\n\n            if (dayInitPosition !== -1) {\n                dateStruct.push({\n                    type: DateParts.Day,\n                    initialPosition: dayInitPosition,\n                    formatType: DatePickerUtil.getDayFormatType(mask)\n                });\n            }\n\n            for (let i = 0; i < maskArray.length; i++) {\n                if (!DatePickerUtil.isDateChar(maskArray[i])) {\n                    dateStruct.push({\n                        type: DatePickerUtil.SEPARATOR,\n                        initialPosition: i,\n                        value: maskArray[i]\n                    });\n                }\n            }\n\n            dateStruct.sort((a, b) => a.initialPosition - b.initialPosition);\n            DatePickerUtil.fillDatePartsPositions(dateStruct);\n        }\n        return dateStruct;\n    }\n\n    /**\n     * This method generates input mask based on date parts.\n     * @param dateStruct array\n     * @returns input mask\n     */\n    public static getInputMask(dateStruct: any[]): string {\n        const inputMask = [];\n        for (let i = 0; i < dateStruct.length; i++) {\n            if (dateStruct[i].type === DatePickerUtil.SEPARATOR) {\n                inputMask.push(dateStruct[i].value);\n            } else if (dateStruct[i].type === DateParts.Day || dateStruct[i].type === DateParts.Month) {\n                inputMask.push('00');\n            } else if (dateStruct[i].type === DateParts.Year) {\n                switch (dateStruct[i].formatType) {\n                    case FormatDesc.Numeric: {\n                        inputMask.push('0000');\n                        break;\n                    }\n                    case FormatDesc.TwoDigits: {\n                        inputMask.push('00');\n                        break;\n                    }\n                }\n            }\n        }\n        return inputMask.join('');\n    }\n\n    /**\n     * This method generates editor mask.\n     * @param dateStruct\n     * @returns editor mask\n     */\n    public static getMask(dateStruct: any[]): string {\n        const mask = [];\n        for (let i = 0; i < dateStruct.length; i++) {\n            switch (dateStruct[i].formatType) {\n                case FormatDesc.Numeric: {\n                    if (dateStruct[i].type === DateParts.Day) {\n                        mask.push('d');\n                    } else if (dateStruct[i].type === DateParts.Month) {\n                        mask.push('M');\n                    } else {\n                        mask.push('yyyy');\n                    }\n                    break;\n                }\n                case FormatDesc.TwoDigits: {\n                    if (dateStruct[i].type === DateParts.Day) {\n                        mask.push('dd');\n                    } else if (dateStruct[i].type === DateParts.Month) {\n                        mask.push('MM');\n                    } else {\n                        mask.push('yy');\n                    }\n                }\n            }\n\n            if (dateStruct[i].type === DatePickerUtil.SEPARATOR) {\n                mask.push(dateStruct[i].value);\n            }\n        }\n\n        return mask.join('');\n    }\n    /**\n     * This method parses an input string base on date parts and returns a date and its validation state.\n     * @param dateFormatParts\n     * @param prevDateValue\n     * @param inputValue\n     * @returns object containing a date and its validation state\n     */\n    public static parseDateArray(dateFormatParts: any[], prevDateValue: Date, inputValue: string): any {\n        const dayStr = DatePickerUtil.getDayValueFromInput(dateFormatParts, inputValue);\n        const monthStr = DatePickerUtil.getMonthValueFromInput(dateFormatParts, inputValue);\n        const yearStr = DatePickerUtil.getYearValueFromInput(dateFormatParts, inputValue);\n        const yearFormat = DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year).formatType;\n        const day = (dayStr !== '') ? parseInt(dayStr, 10) : 1;\n        const month = (monthStr !== '') ? parseInt(monthStr, 10) - 1 : 0;\n\n        let year;\n        if (yearStr === '') {\n            year = (yearFormat === FormatDesc.TwoDigits) ? '00' : '2000';\n        } else {\n            year = yearStr;\n        }\n        let yearPrefix;\n        if (prevDateValue) {\n            const originalYear = prevDateValue.getFullYear().toString();\n            if (originalYear.length === 4) {\n                yearPrefix = originalYear.substring(0, 2);\n            }\n        } else {\n            yearPrefix = '20';\n        }\n        const fullYear = (yearFormat === FormatDesc.TwoDigits) ? yearPrefix.concat(year) : year;\n\n        if ((month < 0) || (month > 11) || (month === NaN)) {\n            return { state: DateState.Invalid, value: inputValue };\n        }\n\n        if ((day < 1) || (day > DatePickerUtil.daysInMonth(fullYear, month + 1)) || (day === NaN)) {\n            return { state: DateState.Invalid, value: inputValue };\n        }\n\n        return { state: DateState.Valid, date: new Date(fullYear, month, day) };\n    }\n\n    public static maskToPromptChars(mask: string): string {\n        const result = mask.replace(/0|L/g, DatePickerUtil.PROMPT_CHAR);\n        return result;\n    }\n\n    /**\n     * This method replaces prompt chars with empty string.\n     * @param value\n     */\n    public static trimUnderlines(value: string): string {\n        const result = value.replace(/_/g, '');\n        return result;\n    }\n\n    /**\n     * This method is used for spinning date parts.\n     * @param dateFormatParts\n     * @param inputValue\n     * @param position\n     * @param delta\n     * @param isSpinLoop\n     * @return modified text input\n     */\n    public static getModifiedDateInput(dateFormatParts: any[],\n        inputValue: string,\n        position: number,\n        delta: number,\n        isSpinLoop: boolean): string {\n        const datePart = DatePickerUtil.getDatePartOnPosition(dateFormatParts, position);\n        const datePartType = datePart.type;\n        const datePartFormatType = datePart.formatType;\n        let newValue;\n\n        const datePartValue = DatePickerUtil.getDateValueFromInput(dateFormatParts, datePartType, inputValue);\n        newValue = parseInt(datePartValue, 10);\n\n        let maxValue, minValue;\n        const minMax = DatePickerUtil.getMinMaxValue(dateFormatParts, datePart, inputValue);\n        minValue = minMax.min;\n        maxValue = minMax.max;\n\n        if (isNaN(newValue)) {\n            if (minValue === 'infinite') {\n                newValue = 2000;\n            } else {\n                newValue = minValue;\n            }\n        }\n        let tempValue = newValue;\n        tempValue += delta;\n\n        // Infinite loop for full years\n        if (maxValue === 'infinite' && minValue === 'infinite') {\n            newValue = tempValue;\n        }\n\n        if (isSpinLoop) {\n            if (tempValue > maxValue) {\n                tempValue = minValue;\n            }\n            if (tempValue < minValue) {\n                tempValue = maxValue;\n            }\n            newValue = tempValue;\n        } else {\n            if (tempValue <= maxValue && tempValue >= minValue) {\n                newValue = tempValue;\n            }\n        }\n\n        const startIdx = datePart.position[0];\n        const endIdx = datePart.position[1];\n        const start = inputValue.slice(0, startIdx);\n        const end = inputValue.slice(endIdx, inputValue.length);\n        let changedPart: string;\n\n        const prefix = DatePickerUtil.getNumericFormatPrefix(datePartFormatType);\n        changedPart = (newValue < 10) ? `${prefix}${newValue}` : `${newValue}`;\n\n        return `${start}${changedPart}${end}`;\n    }\n\n    /**\n     * This method returns date input with prompt chars.\n     * @param dateFormatParts\n     * @param date\n     * @param inputValue\n     * @returns date input including prompt chars\n     */\n    public static addPromptCharsEditMode(dateFormatParts: any[], date: Date, inputValue: string): string {\n        const dateArray = Array.from(inputValue);\n        for (let i = 0; i < dateFormatParts.length; i++) {\n            if (dateFormatParts[i].formatType === FormatDesc.Numeric) {\n                if ((dateFormatParts[i].type === DateParts.Day && date.getDate() < 10)\n                    || (dateFormatParts[i].type === DateParts.Month && date.getMonth() + 1 < 10)) {\n                    dateArray.splice(dateFormatParts[i].position[0], 0, DatePickerUtil.PROMPT_CHAR);\n                    dateArray.join('');\n                }\n            }\n        }\n        return dateArray.join('');\n    }\n\n    /**\n     * This method checks if date input is done.\n     * @param dateFormatParts\n     * @param input\n     * @returns input completeness\n     */\n    public static checkForCompleteDateInput(dateFormatParts: any[], input: string): string {\n        const dayValue = DatePickerUtil.getDayValueFromInput(dateFormatParts, input);\n        const monthValue = DatePickerUtil.getMonthValueFromInput(dateFormatParts, input);\n        const yearValue = DatePickerUtil.getYearValueFromInput(dateFormatParts, input);\n        const dayStr = DatePickerUtil.getDayValueFromInput(dateFormatParts, input, false);\n        const monthStr = DatePickerUtil.getMonthValueFromInput(dateFormatParts, input, false);\n\n        if (DatePickerUtil.isFullInput(dayValue, dayStr)\n            && DatePickerUtil.isFullInput(monthValue, monthStr)\n            && DatePickerUtil.isFullYearInput(dateFormatParts, yearValue)) {\n            return 'complete';\n        } else if (dayValue === '' && monthValue === '' && yearValue === '') {\n            return 'empty';\n        } else if (dayValue === '' || monthValue === '' || yearValue === '') {\n            return 'partial';\n        }\n        return '';\n    }\n\n    private static getYearFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.YearChar, 'g')).length) {\n            case 1: {\n                // y (2020)\n                return FormatDesc.Numeric;\n            }\n            case 4: {\n                // yyyy (2020)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // yy (20)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getMonthFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.MonthChar, 'g')).length) {\n            case 1: {\n                // M (8)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // MM (08)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getDayFormatType(format: string): string {\n        switch (format.match(new RegExp(DateChars.DayChar, 'g')).length) {\n            case 1: {\n                // d (6)\n                return FormatDesc.Numeric;\n            }\n            case 2: {\n                // dd (06)\n                return FormatDesc.TwoDigits;\n            }\n        }\n    }\n\n    private static getDefaultLocaleMask(locale: string) {\n        const dateStruct = [];\n        const formatter = new Intl.DateTimeFormat(locale);\n        const formatToParts = formatter.formatToParts(new Date());\n        for (let i = 0; i < formatToParts.length; i++) {\n            if (formatToParts[i].type === DatePickerUtil.SEPARATOR) {\n                dateStruct.push({\n                    type: DatePickerUtil.SEPARATOR,\n                    value: formatToParts[i].value\n                });\n            } else {\n                dateStruct.push({\n                    type: formatToParts[i].type,\n                });\n            }\n        }\n        const formatterOptions = formatter.resolvedOptions();\n        for (let i = 0; i < dateStruct.length; i++) {\n            switch (dateStruct[i].type) {\n                case DateParts.Day: {\n                    dateStruct[i].formatType = formatterOptions.day;\n                    break;\n                }\n                case DateParts.Month: {\n                    dateStruct[i].formatType = formatterOptions.month;\n                    break;\n                }\n                case DateParts.Year: {\n                    dateStruct[i].formatType = formatterOptions.month;\n                    break;\n                }\n            }\n        }\n        DatePickerUtil.fillDatePartsPositions(dateStruct);\n        return dateStruct;\n    }\n\n    private static isDateChar(char: string): boolean {\n        return (char === DateChars.YearChar || char === DateChars.MonthChar || char === DateChars.DayChar);\n    }\n\n    private static getNumericFormatPrefix(formatType: string): string {\n        switch (formatType) {\n            case FormatDesc.TwoDigits: {\n                return '0';\n            }\n            case FormatDesc.Numeric: {\n                return DatePickerUtil.PROMPT_CHAR;\n            }\n        }\n    }\n\n    private static getMinMaxValue(dateFormatParts: any[], datePart, inputValue: string): any {\n        let maxValue, minValue;\n        switch (datePart.type) {\n            case DateParts.Month: {\n                minValue = 1;\n                maxValue = DatePickerUtil.NUMBER_OF_MONTHS;\n                break;\n            }\n            case DateParts.Day: {\n                minValue = 1;\n                maxValue = DatePickerUtil.daysInMonth(\n                    DatePickerUtil.getFullYearFromString(DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year), inputValue),\n                    parseInt(DatePickerUtil.getMonthValueFromInput(dateFormatParts, inputValue), 10));\n                break;\n            }\n            case DateParts.Year: {\n                if (datePart.formatType === FormatDesc.TwoDigits) {\n                    minValue = 0;\n                    maxValue = 99;\n                } else {\n                    // Infinite loop\n                    minValue = 'infinite';\n                    maxValue = 'infinite';\n                }\n                break;\n            }\n        }\n        return { min: minValue, max: maxValue };\n    }\n\n    private static daysInMonth(fullYear: number, month: number): number {\n        return new Date(fullYear, month, 0).getDate();\n    }\n\n    private static getDateValueFromInput(dateFormatParts: any[], type: DateParts, inputValue: string, trim: boolean = true): string {\n        const partPosition = DatePickerUtil.getDateFormatPart(dateFormatParts, type).position;\n        const result = inputValue.substring(partPosition[0], partPosition[1]);\n        return (trim) ? DatePickerUtil.trimUnderlines(result) : result;\n    }\n\n    private static getDayValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Day, inputValue, trim);\n    }\n\n    private static getMonthValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Month, inputValue, trim);\n    }\n\n    private static getYearValueFromInput(dateFormatParts: any[], inputValue: string, trim: boolean = true): string {\n        return DatePickerUtil.getDateValueFromInput(dateFormatParts, DateParts.Year, inputValue, trim);\n    }\n\n    private static getDateFormatPart(dateFormatParts: any[], type: DateParts): any {\n        const result = dateFormatParts.filter((datePart) => (datePart.type === type))[0];\n        return result;\n    }\n\n    private static isFullInput(value: any, input: string): boolean {\n        return (value !== '' && input.length === 2 && input.charAt(1) !== DatePickerUtil.PROMPT_CHAR);\n    }\n\n    private static isFullYearInput(dateFormatParts: any[], value: any): boolean {\n        switch (DatePickerUtil.getDateFormatPart(dateFormatParts, DateParts.Year).formatType) {\n            case FormatDesc.Numeric: {\n                return (value !== '' && value.length === 4);\n            }\n            case FormatDesc.TwoDigits: {\n                return (value !== '' && value.length === 2);\n            }\n            default: {\n                return false;\n            }\n        }\n    }\n\n    private static getDatePartOnPosition(dateFormatParts: any[], position: number) {\n        const result = dateFormatParts.filter((element) =>\n            element.position[0] <= position && position <= element.position[1] && element.type !== DatePickerUtil.SEPARATOR)[0];\n        return result;\n    }\n\n    private static getFullYearFromString(yearPart, inputValue): number {\n        return parseInt(inputValue.substring(yearPart.position[0], yearPart.position[1]), 10);\n    }\n\n    private static fillDatePartsPositions(dateArray: any[]): void {\n        let currentPos = 0;\n\n        for (let i = 0; i < dateArray.length; i++) {\n            // Day|Month part positions\n            if (dateArray[i].type === DateParts.Day || dateArray[i].type === DateParts.Month) {\n                // Offset 2 positions for number\n                dateArray[i].position = [currentPos, currentPos + 2];\n                currentPos += 2;\n            } else if (dateArray[i].type === DateParts.Year) {\n                // Year part positions\n                switch (dateArray[i].formatType) {\n                    case FormatDesc.Numeric: {\n                        // Offset 4 positions for full year\n                        dateArray[i].position = [currentPos, currentPos + 4];\n                        currentPos += 4;\n                        break;\n                    }\n                    case FormatDesc.TwoDigits: {\n                        // Offset 2 positions for short year\n                        dateArray[i].position = [currentPos, currentPos + 2];\n                        currentPos += 2;\n                        break;\n                    }\n                }\n            } else if (dateArray[i].type === DatePickerUtil.SEPARATOR) {\n                // Separator positions\n                dateArray[i].position = [currentPos, currentPos + 1];\n                currentPos++;\n            }\n        }\n    }\n}\n\n\n","import { PipeTransform, Pipe, Inject } from '@angular/core';\nimport { IGX_DATE_PICKER_COMPONENT, IDatePicker } from './date-picker.common';\nimport { DatePickerUtil } from './date-picker.utils';\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'displayValue'\n})\nexport class DatePickerDisplayValuePipe implements PipeTransform {\n    constructor(@Inject(IGX_DATE_PICKER_COMPONENT) private _datePicker: IDatePicker) { }\n    transform(value: any, args?: any): any {\n        if (value !== '') {\n            if (value === DatePickerUtil.maskToPromptChars(this._datePicker.inputMask)) {\n                return '';\n            }\n            this._datePicker.rawDateString = value;\n            return DatePickerUtil.trimUnderlines(value);\n        }\n        return '';\n    }\n}\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'inputValue'\n})\nexport class DatePickerInputValuePipe implements PipeTransform {\n    constructor(@Inject(IGX_DATE_PICKER_COMPONENT) private _datePicker: IDatePicker) { }\n    transform(value: any, args?: any): any {\n        if (this._datePicker.invalidDate !== '') {\n            return this._datePicker.invalidDate;\n        } else {\n            if (this._datePicker.value === null || this._datePicker.value === undefined) {\n                return DatePickerUtil.maskToPromptChars(this._datePicker.inputMask);\n            } else {\n                return DatePickerUtil.addPromptCharsEditMode(this._datePicker.dateFormatParts, this._datePicker.value, value);\n            }\n        }\n    }\n}\n","/** @hidden */\nexport const IGX_DATE_PICKER_COMPONENT = 'IgxDatePickerComponentToken';\n\n/** @hidden */\nexport interface IDatePicker {\n    value: Date;\n    mask: string;\n    inputMask: string;\n    rawDateString: string;\n    dateFormatParts: any[];\n    invalidDate: string;\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxDatePickerTemplate]'\n})\n\n/**\n * IgxDatePickerTemplateDirective can be used to re-template the date-picker input-group.\n *\n * @hidden\n */\nexport class IgxDatePickerTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n/**\n * IgxDatePickerActionsDirective can be used to re-template the dropdown/dialog action buttons.\n */\n@Directive({\n    selector: '[igxDatePickerActions]'\n})\nexport class IgxDatePickerActionsDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * This enumeration is used to configure whether the date/time picker has an editable input with drop down\n * or is readonly - the date/time is selected only through a dialog.\n */\nexport enum InteractionMode {\n    DropDown = 'dropdown',\n    Dialog = 'dialog'\n}\n","import { Component, ViewChild, Input, Output, EventEmitter, HostListener, HostBinding } from '@angular/core';\nimport { IgxCalendarComponent } from '../calendar';\nimport { InteractionMode } from '../core/enums';\nimport { IgxDatePickerActionsDirective } from './date-picker.directives';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-calendar-container',\n    styles: [':host {display: block;}'],\n    templateUrl: 'calendar-container.component.html'\n})\nexport class IgxCalendarContainerComponent {\n    @ViewChild('calendar', { static: true })\n    public calendar: IgxCalendarComponent;\n\n    @Input()\n    public mode: InteractionMode = InteractionMode.Dialog;\n\n    @Input()\n    public vertical = false;\n\n    @Input()\n    public cancelButtonLabel: string;\n\n    @Input()\n    public todayButtonLabel: string;\n\n    @Input()\n    public datePickerActions: IgxDatePickerActionsDirective;\n\n    @Output()\n    public onClose = new EventEmitter();\n\n    @Output()\n    public onTodaySelection = new EventEmitter();\n\n    @HostBinding('class.igx-date-picker')\n    public styleClass = 'igx-date-picker';\n\n    @HostBinding('class.igx-date-picker--dropdown')\n    get dropdownCSS(): boolean {\n        return this.mode === InteractionMode.DropDown;\n    }\n\n    @HostBinding('class.igx-date-picker--vertical')\n    get verticalCSS(): boolean {\n        return this.vertical && this.mode === InteractionMode.Dialog;\n    }\n\n    @HostListener('keydown.esc', ['$event'])\n    @HostListener('keydown.alt.arrowup', ['$event'])\n    public onEscape(event) {\n        event.preventDefault();\n        this.onClose.emit();\n    }\n\n    /**\n     * Returns whether the date-picker is in readonly dialog mode.\n     *\n     * @hidden\n    */\n    public get isReadonly() {\n        return this.mode === InteractionMode.Dialog;\n    }\n\n    /**\n     * Emits close event for the calendar.\n     */\n    public closeCalendar() {\n        this.onClose.emit();\n    }\n\n    /**\n    * Emits today selection event for the calendar.\n    */\n    public triggerTodaySelection() {\n        this.onTodaySelection.emit();\n    }\n}\n","import { CommonModule, formatDate } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    Output,\n    ViewChild,\n    ElementRef,\n    TemplateRef,\n    Inject,\n    ChangeDetectorRef,\n    HostListener,\n    NgModuleRef,\n    OnInit,\n    AfterViewInit\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    IgxCalendarComponent,\n    IgxCalendarHeaderTemplateDirective,\n    IgxCalendarModule,\n    IgxCalendarSubheaderTemplateDirective,\n    WEEKDAYS,\n    isDateInRanges\n} from '../calendar/index';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule, IgxInputDirective, IgxInputGroupComponent } from '../input-group/index';\nimport { Subject, fromEvent, animationFrameScheduler, interval } from 'rxjs';\nimport { filter, takeUntil, throttle } from 'rxjs/operators';\nimport { IgxOverlayOutletDirective } from '../directives/toggle/toggle.directive';\nimport {\n    OverlaySettings,\n    IgxOverlayService,\n    PositionSettings,\n    AbsoluteScrollStrategy,\n    AutoPositionStrategy,\n    OverlayCancelableEventArgs\n} from '../services/index';\nimport { DateRangeDescriptor } from '../core/dates/dateRange';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxMaskModule } from '../directives/mask/mask.directive';\nimport {\n    DatePickerUtil,\n    DateState\n} from './date-picker.utils';\nimport { DatePickerDisplayValuePipe, DatePickerInputValuePipe } from './date-picker.pipes';\nimport { IDatePicker } from './date-picker.common';\nimport { KEYS, CancelableBrowserEventArgs, isIE } from '../core/utils';\nimport { IgxDatePickerTemplateDirective, IgxDatePickerActionsDirective } from './date-picker.directives';\nimport { IgxCalendarContainerComponent } from './calendar-container.component';\nimport { InteractionMode } from '../core/enums';\nimport { fadeIn, fadeOut } from '../animations/fade';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\nlet NEXT_ID = 0;\n\n/**\n * This interface is used to provide information about date picker reference and its current value\n * when onDisabledDate event is fired.\n */\nexport interface IDatePickerDisabledDateEventArgs {\n    datePicker: IgxDatePickerComponent;\n    currentValue: Date;\n}\n\n/**\n * This interface is used to provide information about date picker reference and its previously valid value\n * when onValidationFailed event is fired.\n */\nexport interface IDatePickerValidationFailedEventArgs {\n    datePicker: IgxDatePickerComponent;\n    prevValue: Date;\n}\n\n/**\n * This interface is used to configure calendar format view options.\n */\nexport interface IFormatViews {\n    day?: boolean;\n    month?: boolean;\n    year?: boolean;\n}\n\n/**\n * This interface is used to configure calendar format options.\n */\nexport interface IFormatOptions {\n    day?: string;\n    month?: string;\n    weekday?: string;\n    year?: string;\n}\n\n/**\n * This enumeration is used to configure the date picker to operate with pre-defined format option used in Angular DatePipe.\n * 'https://angular.io/api/common/DatePipe'\n * 'shortDate': equivalent to 'M/d/yy' (6/15/15).\n * 'mediumDate': equivalent to 'MMM d, y' (Jun 15, 2015).\n * 'longDate': equivalent to 'MMMM d, y' (June 15, 2015).\n * 'fullDate': equivalent to 'EEEE, MMMM d, y' (Monday, June 15, 2015).\n */\nexport enum PredefinedFormatOptions {\n    ShortDate = 'shortDate',\n    MediumDate = 'mediumDate',\n    LongDate = 'longDate',\n    FullDate = 'fullDate'\n}\n\n/**\n * **Ignite UI for Angular Date Picker** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/date_picker.html)\n *\n * The Ignite UI Date Picker displays a popup calendar that lets users select a single date.\n *\n * Example:\n * ```html\n * <igx-date-picker [(ngModel)]=\"selectedDate\"></igx-date-picker>\n * ```\n */\n@Component({\n    providers:\n        [{\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxDatePickerComponent,\n            multi: true\n        }],\n    // tslint:disable-next-line:component-selector\n    selector: 'igx-date-picker',\n    templateUrl: 'date-picker.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxDatePickerComponent implements IDatePicker, ControlValueAccessor, EditorProvider, OnInit, AfterViewInit, OnDestroy {\n    /**\n     * An @Input property that sets the `IgxDatePickerComponent` label.\n     * The default label is 'Date'.\n     * ```html\n     * <igx-date-picker [label]=\"Calendar\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public label = 'Date';\n\n    /**\n     * An @Input property that sets the `IgxDatePickerComponent` label visibility.\n     * By default the visibility is set to true.\n     * <igx-date-picker [labelVisibility]=\"false\"></igx-date-picker>\n     */\n    @Input()\n    public labelVisibility = true;\n\n    /**\n     *An @Input property that sets locales. Default locale is en.\n     *```html\n     *<igx-date-picker locale=\"ja-JP\" [value]=\"date\"></igx-date-picker>\n     *```\n     */\n    @Input() public locale: 'en';\n\n    /**\n     *An @Input property that sets on which day the week starts.\n     *```html\n     *<igx-date-picker [weekStart]=\"WEEKDAYS.FRIDAY\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Input() public weekStart: WEEKDAYS | number = WEEKDAYS.SUNDAY;\n\n    /**\n     *Returns the format options of the `IgxDatePickerComponent`.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let formatOptions = this.datePicker.formatOptions;\n     *}\n     *```\n     */\n    @Input()\n    public get formatOptions(): IFormatOptions {\n        return this._formatOptions;\n    }\n\n    /**\n     *Sets the format options of the `IgxDatePickerComponent`.\n     *```typescript\n     *public Options;\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.Options = {\n     *        day: \"numeric\",\n     *        month: \"long\",\n     *        weekday: \"long\",\n     *        year: \"numeric\"\n     *    }\n     *this.datePicker.formatOptions = this.Options;\n     *}\n     *```\n     */\n    public set formatOptions(formatOptions: IFormatOptions) {\n        this._formatOptions = Object.assign(this._formatOptions, formatOptions);\n    }\n\n    /**\n     *Returns the date display format of the `IgxDatePickerComponent` in dropdown mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let format = this.datePicker.format;\n     *}\n     *```\n     */\n    @Input()\n    public get format(): string {\n        return (this._format === undefined) ? PredefinedFormatOptions.ShortDate : this._format;\n    }\n\n    /**\n    *Sets the date format of the `IgxDatePickerComponent` when in editable dropdown mode.\n    *```typescript\n    *@ViewChild(\"MyDatePicker\")\n    *public datePicker: IgxDatePickerComponent;\n    *this.datePicker.format = 'yyyy-M-d';\n    *}\n    *```\n    */\n    public set format(format: string) {\n        this._format = format;\n    }\n\n    /**\n     *Returns the date mask of the `IgxDatePickerComponent` when in editable dropdown mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let mask = this.datePicker.mask;\n     *}\n     *```\n     */\n    @Input()\n    public mask: string;\n\n    /**\n     *Returns the format views of the `IgxDatePickerComponent`.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    let formatViews = this.datePicker.formatViews;\n     *}\n     *```\n     */\n    @Input()\n    public get formatViews(): IFormatViews {\n        return this._formatViews;\n    }\n\n    /**\n     *Sets the format views of the `IgxDatePickerComponent`.\n     *```typescript\n     *public Views;\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.Views = {day:false, month: false, year:false};\n     *    this.datePicker.formatViews = this.Views;\n     *}\n     *```\n     */\n    public set formatViews(formatViews: IFormatViews) {\n        this._formatViews = Object.assign(this._formatViews, formatViews);\n    }\n\n    /**\n     * Gets the disabled dates descriptors.\n     * ```typescript\n     * let disabledDates = this.datepicker.disabledDates;\n     * ```\n     */\n    @Input()\n    public get disabledDates(): DateRangeDescriptor[] {\n        return this._disabledDates;\n    }\n\n    /**\n     * Sets the disabled dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.disabledDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set disabledDates(value: DateRangeDescriptor[]) {\n        this._disabledDates = value;\n    }\n\n    /**\n     * Gets the special dates descriptors.\n     * ```typescript\n     * let specialDates = this.datepicker.specialDates;\n     * ```\n     */\n    @Input()\n    public get specialDates(): DateRangeDescriptor[] {\n        return this._specialDates;\n    }\n\n    /**\n     * Sets the special dates' descriptors.\n     * ```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.specialDates = [\n     *     {type: DateRangeType.Between, dateRange: [new Date(\"2020-1-1\"), new Date(\"2020-1-15\")]},\n     *     {type: DateRangeType.Weekends}];\n     *}\n     *```\n     */\n    public set specialDates(value: DateRangeDescriptor[]) {\n        this._specialDates = value;\n    }\n\n    @Input()\n    public get modalOverlaySettings(): OverlaySettings {\n        return this._modalOverlay;\n    }\n\n    public set modalOverlaySettings(value: OverlaySettings) {\n        this._modalOverlay = value;\n    }\n\n    @Input()\n    public get dropDownOverlaySettings(): OverlaySettings {\n        return this._dropDownOverlaySettings || this._defaultDropDownOverlaySettings;\n    }\n\n    public set dropDownOverlaySettings(value: OverlaySettings) {\n        this._dropDownOverlaySettings = value;\n    }\n\n    /**\n     *Returns the formatted date when `IgxDatePickerComponent` is in dialog mode.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *public selection(event){\n     *    let selectedDate = this.datePicker.displayData;\n     *    alert(selectedDate);\n     *}\n     *```\n     *```html\n     *<igx-date-picker #MyDatePicker (onSelection)=\"selection()\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    public get displayData(): string {\n        if (this.value) {\n            return this._customFormatChecker(this.formatter, this.value);\n        }\n        return '';\n    }\n\n    /**\n     hidden\n     */\n    public get transformedDate(): string {\n        if (this._value) {\n            this._transformedDate = (this._isInEditMode) ? this._getEditorDate(this._value) : this._getDisplayDate(this._value);\n            this.isEmpty = false;\n        } else {\n            this._transformedDate = (this._isInEditMode) ? DatePickerUtil.maskToPromptChars(this.inputMask) : '';\n        }\n        return this._transformedDate;\n    }\n\n    public set transformedDate(value) {\n        this._transformedDate = value;\n    }\n\n    constructor(@Inject(IgxOverlayService) private _overlayService: IgxOverlayService, public element: ElementRef,\n        private _cdr: ChangeDetectorRef, private _moduleRef: NgModuleRef<any>) { }\n\n    /**\n     * Gets the input group template.\n     * ```typescript\n     * let template = this.template();\n     * ```\n     * @memberof IgxDatePickerComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.datePickerTemplateDirective) {\n            return this.datePickerTemplateDirective.template;\n        }\n        return (this.mode === InteractionMode.Dialog) ? this.readOnlyDatePickerTemplate : this.editableDatePickerTemplate;\n    }\n\n    /**\n     * Gets the context passed to the input group template.\n     * @memberof IgxDatePickerComponent\n     */\n    get context() {\n        return {\n            disabled: this.disabled,\n            disabledDates: this.disabledDates,\n            displayData: this.displayData,\n            format: this.format,\n            isSpinLoop: this.isSpinLoop,\n            label: this.label,\n            labelVisibility: this.labelVisibility,\n            locale: this.locale,\n            mask: this.mask,\n            mode: this.mode,\n            specialDates: this.specialDates,\n            value: this.value,\n            openDialog: (target?: HTMLElement) => this.openDialog(target)\n        };\n    }\n\n    /**\n     *An @Input property that gets/sets the selected date.\n     *```typescript\n     *public date: Date = new Date();\n     *```\n     *```html\n     *<igx-date-picker [value]=\"date\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public get value(): Date {\n        return this._value;\n    }\n\n    public set value(date: Date) {\n        this._value = date;\n        this._onChangeCallback(date);\n    }\n\n    /**\n     *An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-date-picker [id]=\"'igx-date-picker-3'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-date-picker-${NEXT_ID++}`;\n\n    /**\n     *An @Input property that applies a custom formatter function on the selected or passed date.\n     *```typescript\n     *public date: Date = new Date();\n     *private dayFormatter = new Intl.DateTimeFormat(\"en\", { weekday: \"long\" });\n     *private monthFormatter = new Intl.DateTimeFormat(\"en\", { month: \"long\" });\n     *public formatter = (date: Date) => { return `You selected\n     *                     ${this.dayFormatter.format(date)},\n     *                     ${date.getDate()} ${this.monthFormatter.format(date)},\n     *                     ${date.getFullYear()}`;\n     *}\n     *```\n     *```html\n     *<igx-date-picker [value]=\"date\" [formatter]=\"formatter\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public formatter: (val: Date) => string;\n\n    /**\n     *An @Input property that disables the `IgxDatePickerComponent`.\n     *```html\n     *<igx-date-picker [disabled]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     * ```\n     */\n    @Input()\n    public disabled: boolean;\n\n    /**\n     *An @Input property that sets the orientation of the `IgxDatePickerComponent` header.\n     *```html\n     *<igx-date-picker [vertical]=\"'true'\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     *An @Input property that renders today button with custom label.\n     *```html\n     *<igx-date-picker cancelButtonLabel=\"cancel\" todayButtonLabel=\"Tomorrow\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public todayButtonLabel: string;\n\n    /**\n     *An @Input property that renders cancel button with custom label.\n     *```html\n     *<igx-date-picker cancelButtonLabel=\"Close\" todayButtonLabel=\"Today\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public cancelButtonLabel: string;\n\n    /**\n     *An @Input property that sets whether `IgxDatePickerComponent` is in dialog or drop down mode.\n     *```html\n     *<igx-date-picker mode=\"dropdown\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public mode = InteractionMode.Dialog;\n\n    /**\n     *An @Input property that sets whether the `IgxDatePickerComponent` date parts would spin continuously or stop when min/max is reached.\n     *```html\n     *<igx-date-picker [isSpinLoop]=\"false\"></igx-date-picker>\n     *```\n     */\n    @Input()\n    public isSpinLoop = true;\n\n    /**\n     * Determines the container the popup element should be attached to.\n     *\n     * ```html\n     * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n     * //..\n     * <igx-date-picker [outlet]=\"outlet\"></igx-date-picker>\n     * //..\n     * ```\n     * Where `outlet` is an instance of `IgxOverlayOutletDirective` or an `ElementRef`.\n     */\n    @Input()\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n     * @deprecated Use 'onOpened' instead.\n     *An event that is emitted when the `IgxDatePickerComponent` calendar is opened.\n     *```typescript\n     *public open(event){\n     *    alert(\"The date-picker calendar has been opened!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onOpen)=\"open($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @DeprecateProperty(`'onOpen' @Output property is deprecated. Use 'onOpened' instead.`)\n    @Output()\n    public get onOpen(): EventEmitter<IgxDatePickerComponent> {\n        return this._onOpen;\n    }\n\n    public set onOpen(val: EventEmitter<IgxDatePickerComponent>) {\n        this._onOpen = val;\n    }\n\n    /**\n     *An event that is emitted when the `IgxDatePickerComponent` calendar is opened.\n    */\n    @Output()\n    public onOpened = new EventEmitter<IgxDatePickerComponent>();\n\n    /**\n     * @deprecated Use 'onClosed' instead.\n     *\"An event that is emitted when the `IgxDatePickerComponent` is closed.\n     *```typescript\n     *public close(event){\n     *    alert(\"The date-picker has been closed!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onClose)=\"close($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @DeprecateProperty(`'onClose' @Output property is deprecated. Use 'onClosed' instead.`)\n    @Output()\n    public get onClose(): EventEmitter<IgxDatePickerComponent> {\n        return this._onClose;\n    }\n\n    public set onClose(val: EventEmitter<IgxDatePickerComponent>) {\n        this._onClose = val;\n    }\n\n    /**\n     *An event that is emitted after the `IgxDatePickerComponent` is closed.\n    */\n    @Output()\n    public onClosed = new EventEmitter<IgxDatePickerComponent>();\n\n    /**\n     * An event that is emitted when the `IgxDatePickerComponent` is being closed.\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs>();\n\n    /**\n     *An @Output property that is fired when selection is made in the calendar.\n     *```typescript\n     *public selection(event){\n     *    alert(\"A date has been selected!\");\n     *}\n     *```\n     *```html\n     *<igx-date-picker (onSelection)=\"selection($event)\" cancelButtonLabel=\"cancel\" todayButtonLabel=\"today\"></igx-date-picker>\n     *```\n     */\n    @Output()\n    public onSelection = new EventEmitter<Date>();\n\n    /**\n    *An @Output property that fires when the user types/spins to a disabled date in the date-picker editor.\n    *```typescript\n    *public onDisabledDate(event){\n    *    alert(\"This date is disabled!\");\n    *}\n    *```\n    *```html\n    *<igx-date-picker (onDisabledDate)=\"onDisabledDate($event)\"></igx-date-picker>\n    *```\n    */\n    @Output()\n    public onDisabledDate = new EventEmitter<IDatePickerDisabledDateEventArgs>();\n\n    /**\n    *An @Output property that fires when the user types/spins invalid date in the date-picker editor.\n    *```typescript\n    *public onValidationFailed(event){\n        *    alert(\"This date is not valid!\");\n        *}\n        *```\n        *```html\n        *<igx-date-picker (onValidationFailed)=\"onValidationFailed($event)\"></igx-date-picker>\n        *```\n        */\n    @Output()\n    public onValidationFailed = new EventEmitter<IDatePickerValidationFailedEventArgs>();\n\n    /*\n     * @hidden\n     */\n    @ViewChild('readOnlyDatePickerTemplate', { read: TemplateRef, static: true })\n    protected readOnlyDatePickerTemplate: TemplateRef<any>;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('editableDatePickerTemplate', { read: TemplateRef, static: true })\n    protected editableDatePickerTemplate: TemplateRef<any>;\n\n    /*\n     * @hidden\n     */\n    @ViewChild(IgxInputGroupComponent, { static: false })\n    protected inputGroup: IgxInputGroupComponent;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('editableInput', { read: ElementRef, static: false })\n    protected editableInput: ElementRef;\n\n    /*\n    * @hidden\n    */\n    @ViewChild('readonlyInput', { read: ElementRef, static: false })\n    protected readonlyInput: ElementRef;\n\n    /*\n    * @hidden\n    */\n    @ContentChild(IgxInputDirective, { static: false })\n    protected input: IgxInputDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxDatePickerTemplateDirective, { read: IgxDatePickerTemplateDirective, static: true })\n    protected datePickerTemplateDirective: IgxDatePickerTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCalendarHeaderTemplateDirective, { read: IgxCalendarHeaderTemplateDirective, static: true })\n    public headerTemplate: IgxCalendarHeaderTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCalendarSubheaderTemplateDirective, { read: IgxCalendarSubheaderTemplateDirective, static: true })\n    public subheaderTemplate: IgxCalendarSubheaderTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxDatePickerActionsDirective, { read: IgxDatePickerActionsDirective, static: false })\n    public datePickerActionsDirective: IgxDatePickerActionsDirective;\n\n    public calendar: IgxCalendarComponent;\n    public hasHeader = true;\n    public collapsed = true;\n    public displayValuePipe = new DatePickerDisplayValuePipe(this);\n    public inputValuePipe = new DatePickerInputValuePipe(this);\n    public dateFormatParts = [];\n    public rawDateString: string;\n    public inputMask: string;\n    public isEmpty = true;\n    public invalidDate = '';\n\n    private readonly spinDelta = 1;\n    private readonly defaultLocale = 'en';\n\n    private _formatOptions = {\n        day: 'numeric',\n        month: 'short',\n        weekday: 'short',\n        year: 'numeric'\n    };\n    private _formatViews = {\n        day: false,\n        month: true,\n        year: false\n    };\n    private _destroy$ = new Subject<boolean>();\n    private _componentID: string;\n    private _format: string;\n    private _value: Date;\n    private _isInEditMode: boolean;\n    private _disabledDates: DateRangeDescriptor[] = null;\n    private _specialDates: DateRangeDescriptor[] = null;\n    private _modalOverlay: OverlaySettings;\n    private _dropDownOverlaySettings: OverlaySettings;\n    private _positionSettings: PositionSettings;\n    private _defaultDropDownOverlaySettings: OverlaySettings;\n    private _modalOverlaySettings: OverlaySettings;\n    private _transformedDate;\n    private _onOpen = new EventEmitter<IgxDatePickerComponent>();\n    private _onClose = new EventEmitter<IgxDatePickerComponent>();\n\n    /**\n    * @hidden\n    */\n    @HostListener('keydown.spacebar', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    public onSpaceClick(event: KeyboardEvent) {\n        this.openDialog(this.getInputGroupElement());\n        event.preventDefault();\n    }\n\n    /**\n     *Method that sets the selected date.\n     *```typescript\n     *public date = new Date();\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *    this.datePicker.writeValue(this.date);\n     *}\n     *```\n     *@param value The date you want to select.\n     *@memberOf {@link IgxDatePickerComponent}\n     */\n    public writeValue(value: Date) {\n        this.value = value;\n        this._cdr.markForCheck();\n    }\n\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: Date) => void) { this._onChangeCallback = fn; }\n\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /** @hidden */\n    public getEditElement() {\n        const inputElement = this.editableInput || this.readonlyInput || this.input;\n        return (inputElement) ? inputElement.nativeElement : null;\n    }\n\n    /** @hidden */\n    public getInputGroupElement() {\n        return this.inputGroup ? this.inputGroup.element.nativeElement : null;\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnInit(): void {\n        this._positionSettings = {\n            openAnimation: fadeIn,\n            closeAnimation: fadeOut\n        };\n\n        this._defaultDropDownOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: false,\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            positionStrategy: new AutoPositionStrategy(this._positionSettings),\n            outlet: this.outlet\n        };\n\n        this._modalOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: true,\n            outlet: this.outlet\n        };\n\n        this._overlayService.onOpening.pipe(\n            filter((overlay) => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe((eventArgs) => {\n                this._onOpening(eventArgs);\n            });\n\n        this._overlayService.onOpened.pipe(\n            filter((overlay) => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this._onOpened();\n            });\n\n        this._overlayService.onClosed.pipe(\n            filter(overlay => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this._onClosed();\n            });\n\n        this._overlayService.onClosing.pipe(\n            filter(overlay => overlay.id === this._componentID),\n            takeUntil(this._destroy$)).subscribe((event) => {\n                this.onClosing.emit(event);\n            });\n\n        if (this.mode === InteractionMode.DropDown) {\n            this.dateFormatParts = DatePickerUtil.parseDateFormat(this.mask, this.locale);\n            if (this.mask === undefined) {\n                this.mask = DatePickerUtil.getMask(this.dateFormatParts);\n            }\n            this.inputMask = DatePickerUtil.getInputMask(this.dateFormatParts);\n        }\n    }\n\n    ngAfterViewInit() {\n        if (this.mode === InteractionMode.DropDown && this.editableInput) {\n            fromEvent(this.editableInput.nativeElement, 'keydown').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy$)\n            ).subscribe((res) => this.onKeyDown(res));\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        if (this._componentID) {\n            this._overlayService.hide(this._componentID);\n        }\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    /**\n     *Selects today's date from calendar and change the input field value, @calendar.viewDate and @calendar.value.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.triggerTodaySelection();\n     *}\n     *```\n     *@memberOf {@link IgxDatePickerComponent}\n     */\n    public triggerTodaySelection(): void {\n        const today = new Date(Date.now());\n        this.handleSelection(today);\n    }\n\n    /**\n     * Change the calendar selection and calling this method will emit the @calendar.onSelection event,\n     * which will fire @handleSelection method.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.selectDate(this.date);\n     *}\n     * ```\n     * @param date passed date that has to be set to the calendar.\n     * @memberOf {@link IgxDatePickerComponent}\n     */\n    public selectDate(date: Date): void {\n        this.value = date;\n        this.onSelection.emit(date);\n        this._onChangeCallback(date);\n    }\n\n    /**\n     * Deselects the calendar date.\n     *```typescript\n     *@ViewChild(\"MyDatePicker\")\n     *public datePicker: IgxDatePickerComponent;\n     *ngAfterViewInit(){\n     *this.datePicker.deselectDate();\n     *}\n     * ```\n     * @memberOf {@link IgxDatePickerComponent}\n     */\n    public deselectDate(): void {\n        this.value = null;\n        if (this.calendar) {\n            this.calendar.deselectDate();\n        }\n        this._onChangeCallback(null);\n    }\n\n    /**\n     * Opens the date picker drop down or dialog.\n     * @param target HTMLElement - the target element to use for positioning the drop down container according to\n     * ```html\n     * <igx-date-picker [value]=\"date\" mode=\"dropdown\" #retemplated>\n     *   <ng-template igxDatePickerTemplate let-openDialog=\"openDialog\"\n     *                let-displayData=\"displayData\">\n     *     <igx-input-group>\n     *       <input #dropDownTarget igxInput [value]=\"displayData\" />\n     *       <igx-suffix (click)=\"openDialog(dropDownTarget)\">\n     *         <igx-icon>alarm</igx-icon>\n     *       </igx-suffix>\n     *     </igx-input-group>\n     *   </ng-template>\n     * </igx-date-picker>\n     * ```\n     */\n    public openDialog(target?: HTMLElement): void {\n        if (!this.collapsed) {\n            return;\n        }\n        switch (this.mode) {\n            case InteractionMode.Dialog: {\n                this.hasHeader = true;\n                const modalOverlay = (this.modalOverlaySettings !== undefined) ? this._modalOverlay : this._modalOverlaySettings;\n                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent, modalOverlay, this._moduleRef);\n                this._overlayService.show(this._componentID);\n                break;\n            }\n            case InteractionMode.DropDown: {\n                this.hasHeader = false;\n                if (target) {\n                    this.dropDownOverlaySettings.positionStrategy.settings.target = target;\n                }\n                this._componentID = this._overlayService.attach(IgxCalendarContainerComponent,\n                    this.dropDownOverlaySettings, this._moduleRef);\n                this._overlayService.show(this._componentID);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Close the calendar.\n     *\n     * @hidden\n     */\n    public closeCalendar(): void {\n        this._overlayService.hide(this._componentID);\n    }\n\n    /**\n     * Clear the input field, date picker value and calendar selection.\n     *\n     * @hidden\n     */\n    public clear(): void {\n        this.isEmpty = true;\n        this.invalidDate = '';\n        this.deselectDate();\n        this._setCursorPosition(0);\n    }\n\n    /**\n     * Evaluates when @calendar.onSelection event was fired\n     * and update the input value.\n     *\n     * @param event selected value from calendar.\n     *\n     * @hidden\n     */\n    public handleSelection(date: Date): void {\n        if (this.value) {\n            date.setHours(this.value.getHours());\n            date.setMinutes(this.value.getMinutes());\n            date.setSeconds(this.value.getSeconds());\n            date.setMilliseconds(this.value.getMilliseconds());\n        }\n\n        this.value = date;\n        this.calendar.viewDate = date;\n        this._onChangeCallback(date);\n        this.closeCalendar();\n        this.onSelection.emit(date);\n    }\n\n    /**\n    * Evaluates when the input blur event was fired\n    * and re-calculate the date picker value.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onBlur(event): void {\n        this._isInEditMode = false;\n        this.calculateDate(event.target.value, event.type);\n    }\n\n    /**\n    * Evaluates when the input focus event was fired\n    * and re-calculate the editor text.\n    *\n    * @param event\n    * @hidden\n    */\n    public onFocus(): void {\n        this._isInEditMode = true;\n        if (this.value && this.invalidDate === '') {\n            this._transformedDate = this._getEditorDate(this.value);\n        }\n    }\n\n    /**\n    * Evaluates when the keydown event was fired for up/down keys\n    * to provide spinning of date parts.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onKeyDown(event) {\n        switch (event.key) {\n            case KEYS.UP_ARROW:\n            case KEYS.UP_ARROW_IE:\n                event.preventDefault();\n                event.stopPropagation();\n                this.spinValue(event.target.value, 1, event.type);\n                break;\n            case KEYS.DOWN_ARROW:\n            case KEYS.DOWN_ARROW_IE:\n                if (event.altKey) {\n                    this.openDialog(this.getInputGroupElement());\n                } else {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.spinValue(event.target.value, -1, event.type);\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n    * Evaluates when the mouse wheel event was fired\n    * to provide spinning of date parts.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onWheel(event) {\n        if (this._isInEditMode) {\n            event.preventDefault();\n            event.stopPropagation();\n            const sign = (event.deltaY > 0) ? -1 : 1;\n            this.spinValue(event.target.value, sign, event.type);\n        }\n    }\n\n    /**\n    * Evaluates when input event was fired in editor.\n    *\n    * @param event\n    *\n    * @hidden\n    */\n    public onInput(event) {\n        const targetValue = event.target.value;\n        const cursorPosition = this._getCursorPosition();\n        const checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, targetValue);\n        this._isInEditMode = true;\n\n        if (targetValue !== DatePickerUtil.maskToPromptChars(this.inputMask)) {\n            this.isEmpty = false;\n        }\n\n        // If all date parts are completed, change the date-picker value, stay in edit mode\n        if (checkInput === 'complete' && event.inputType !== 'deleteContentBackward') {\n            this._transformedDate = targetValue;\n            this.calculateDate(targetValue, event.type);\n            this._setCursorPosition(cursorPosition);\n        } else if (checkInput === 'partial') {\n            // While editing, if one date part is deleted, date-picker value is set to null, the remaining input stays intact.\n            this.deselectDate();\n            requestAnimationFrame(() => {\n                this.getEditElement().value = targetValue;\n                this._setCursorPosition(cursorPosition);\n            });\n        } else if (checkInput === 'empty') {\n            // Total clean-up as input is deleted.\n            this.isEmpty = true;\n            this.deselectDate();\n        }\n    }\n\n    private calculateDate(dateString: string, invokedByEvent: string): void {\n        if (dateString !== '') {\n            const prevDateValue = this.value;\n            const inputValue = (invokedByEvent === 'blur') ? this.rawDateString : dateString;\n            const newDateArray = DatePickerUtil.parseDateArray(this.dateFormatParts, prevDateValue, inputValue);\n\n            if (newDateArray.state === DateState.Valid) {\n                const newValue = newDateArray.date;\n                // Restore the time part if any\n                if (prevDateValue) {\n                    newValue.setHours(prevDateValue.getHours());\n                    newValue.setMinutes(prevDateValue.getMinutes());\n                    newValue.setSeconds(prevDateValue.getSeconds());\n                    newValue.setMilliseconds(prevDateValue.getMilliseconds());\n                }\n\n                if (this.disabledDates === null\n                    || (this.disabledDates !== null && !isDateInRanges(newValue, this.disabledDates))) {\n                    this.value = newValue;\n                    this.invalidDate = '';\n                    this._onChangeCallback(newValue);\n                } else {\n                    const args: IDatePickerDisabledDateEventArgs = {\n                        datePicker: this,\n                        currentValue: newValue,\n                    };\n                    this.onDisabledDate.emit(args);\n                }\n            } else {\n                const args: IDatePickerValidationFailedEventArgs = {\n                    datePicker: this,\n                    prevValue: prevDateValue\n                };\n                this.invalidDate = dateString;\n                this.onValidationFailed.emit(args);\n            }\n        }\n    }\n\n    private spinValue(inputValue: string, sign: number, eventType: string): void {\n        this._isInEditMode = true;\n        this.isEmpty = false;\n        const cursorPosition = this._getCursorPosition();\n\n        const modifiedInputValue =\n            DatePickerUtil.getModifiedDateInput(this.dateFormatParts, inputValue, cursorPosition, this.spinDelta * sign, this.isSpinLoop);\n\n        this.getEditElement().value = modifiedInputValue;\n        this._setCursorPosition(cursorPosition);\n\n        const checkInput = DatePickerUtil.checkForCompleteDateInput(this.dateFormatParts, modifiedInputValue);\n        if (checkInput === 'complete') {\n            this._isInEditMode = true;\n            this.calculateDate(modifiedInputValue, eventType);\n            this._setCursorPosition(cursorPosition);\n        }\n    }\n\n    private _onOpening(event: OverlayCancelableEventArgs) {\n        this._initializeCalendarContainer(event.componentRef.instance as IgxCalendarContainerComponent);\n        this.collapsed = false;\n    }\n\n    private _onOpened(): void {\n        this._onTouchedCallback();\n        this.onOpened.emit(this);\n\n        // TODO: remove this line after deprecating 'onOpen'\n        this._onOpen.emit(this);\n\n        if (this.calendar) {\n            this._focusCalendarDate();\n        }\n    }\n\n    private _onClosed(): void {\n        this.collapsed = true;\n        this._componentID = null;\n        this.onClosed.emit(this);\n\n        // TODO: remove this line after deprecating 'onClose'\n        this.onClose.emit(this);\n\n        if (this.getEditElement()) {\n            this.getEditElement().focus();\n        }\n    }\n\n    private _initializeCalendarContainer(componentInstance: IgxCalendarContainerComponent) {\n        this.calendar = componentInstance.calendar;\n        const isVertical = (this.vertical && this.mode === InteractionMode.Dialog);\n        this.calendar.hasHeader = this.hasHeader;\n        this.calendar.formatOptions = this.formatOptions;\n        this.calendar.formatViews = this.formatViews;\n        this.calendar.locale = this.locale;\n        this.calendar.vertical = isVertical;\n        this.calendar.weekStart = this.weekStart;\n        this.calendar.specialDates = this.specialDates;\n        this.calendar.disabledDates = this.disabledDates;\n        this.calendar.headerTemplate = this.headerTemplate;\n        this.calendar.subheaderTemplate = this.subheaderTemplate;\n        this.calendar.onSelection.pipe(takeUntil(this._destroy$)).subscribe((ev: Date) => this.handleSelection(ev));\n\n        if (this.value) {\n            this.calendar.value = this.value;\n            this.calendar.viewDate = this.value;\n        }\n\n        componentInstance.mode = this.mode;\n        componentInstance.vertical = isVertical;\n        componentInstance.cancelButtonLabel = this.cancelButtonLabel;\n        componentInstance.todayButtonLabel = this.todayButtonLabel;\n        componentInstance.datePickerActions = this.datePickerActionsDirective;\n\n        componentInstance.onClose.pipe(takeUntil(this._destroy$)).subscribe(() => this.closeCalendar());\n        componentInstance.onTodaySelection.pipe(takeUntil(this._destroy$)).subscribe(() => this.triggerTodaySelection());\n    }\n\n    // Focus a date, after the calendar appearance into DOM.\n    private _focusCalendarDate(): void {\n        requestAnimationFrame(() => {\n            this.calendar.daysView.focusActiveDate();\n        });\n    }\n\n    private _setLocaleToDate(value: Date): string {\n        if (isIE()) {\n            // this is a workaround fixing the following IE11 issue:\n            // IE11 has added character code 8206 (mark for RTL) to the output of toLocaleDateString() that\n            // precedes each portion that comprises the total date... For more information read this article:\n            // tslint:disable-next-line: max-line-length\n            // https://www.csgpro.com/blog/2016/08/a-bad-date-with-internet-explorer-11-trouble-with-new-unicode-characters-in-javascript-date-strings/\n            const localeDateStrIE = new Date(value.getFullYear(), value.getMonth(), value.getDate(),\n                value.getHours(), value.getMinutes(), value.getSeconds(), value.getMilliseconds());\n            return localeDateStrIE.toLocaleDateString(this.locale);\n        }\n\n        return value.toLocaleDateString(this.locale);\n    }\n\n    private _getCursorPosition(): number {\n        return this.getEditElement().selectionStart;\n    }\n\n    private _setCursorPosition(start: number, end: number = start): void {\n        requestAnimationFrame(() => {\n            this.getEditElement().setSelectionRange(start, end);\n        });\n    }\n\n    /**\n     * Apply custom user formatter upon date.\n     * @param formatter custom formatter function.\n     * @param date passed date\n     */\n    private _customFormatChecker(formatter: (_: Date) => string, date: Date) {\n        return this.formatter ? this.formatter(date) : this._setLocaleToDate(date);\n    }\n\n    /*\n    * Transforms the date according to the specified format when `IgxDatePickerComponent` is in edit mode\n    * using @angular/common formatDate method: https://angular.io/api/common/formatDate\n    * @param  value: string | number | Date\n    * @returns formatted string\n    */\n    private _getDisplayDate(value: any): string {\n        if (this.format && !this.formatter) {\n            const locale = this.locale || this.defaultLocale;\n            return formatDate(value, this.format, locale);\n        } else {\n            return this._customFormatChecker(this.formatter, value);\n        }\n    }\n\n    private _getEditorDate(value: any) {\n        const locale = this.locale || this.defaultLocale;\n        const changedValue = (value) ? formatDate(value, this.mask, locale) : '';\n        return DatePickerUtil.addPromptCharsEditMode(this.dateFormatParts, this.value, changedValue);\n    }\n\n    private _onTouchedCallback: () => void = () => { };\n\n    private _onChangeCallback: (_: Date) => void = () => { };\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDatePickerComponent, IgxCalendarContainerComponent, IgxDatePickerActionsDirective,\n        IgxDatePickerTemplateDirective, DatePickerDisplayValuePipe, DatePickerInputValuePipe],\n    exports: [IgxDatePickerComponent, IgxDatePickerTemplateDirective, IgxDatePickerActionsDirective,\n        DatePickerDisplayValuePipe, DatePickerInputValuePipe],\n    imports: [CommonModule, IgxIconModule, IgxInputGroupModule, IgxCalendarModule, IgxButtonModule, IgxRippleModule, IgxMaskModule],\n    entryComponents: [IgxCalendarContainerComponent]\n})\nexport class IgxDatePickerModule { }\n","import { DOCUMENT } from '@angular/common';\nimport { Directive, HostBinding } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-dialog-title,[igxDialogTitle]'\n})\nexport class IgxDialogTitleDirective {\n\n    @HostBinding('class.igx-dialog__window-title')\n    public defaultStyle = true;\n }\n\n/**\n * @hidden\n */\n@Directive({\n    selector: 'igx-dialog-actions,[igxDialogActions]'\n})\nexport class IgxDialogActionsDirective {\n\n    @HostBinding('class.igx-dialog__window-actions')\n    public defaultClass = true;\n }\n","import { useAnimation } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    ViewChild,\n    AfterContentInit\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxDialogActionsDirective, IgxDialogTitleDirective } from './dialog.directives';\nimport { IgxToggleModule, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { OverlaySettings, GlobalPositionStrategy, NoOpScrollStrategy, PositionSettings } from '../services';\nimport { slideInBottom, slideOutTop } from '../animations/slide/index';\nimport { IgxFocusModule } from '../directives/focus/focus.directive';\n\nlet DIALOG_ID = 0;\n/**\n * **Ignite UI for Angular Dialog Window** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/dialog.html)\n *\n * The Ignite UI Dialog Window presents a dialog window to the user which can simply display messages or display\n * more complicated visuals such as a user sign-in form.  It also provides a right and left button\n * which can be used for custom actions.\n *\n * Example:\n * ```html\n * <button (click)=\"form.open()\">Show Dialog</button>\n * <igx-dialog #form title=\"Sign In\" rightButtonLabel=\"OK\">\n *   <div>\n *     <input type=\"text\" igxInput/>\n *     <label igxLabel>Username</label>\n *   </div>\n *   <div>\n *     <input type=\"password\" igxInput/>\n *     <label igxLabel>Password</label>\n *   </div>\n * </igx-dialog>\n * ```\n */\n@Component({\n    selector: 'igx-dialog',\n    templateUrl: 'dialog-content.component.html'\n})\nexport class IgxDialogComponent implements IToggleView, OnInit, OnDestroy, AfterContentInit {\n    private static NEXT_ID = 1;\n    private static readonly DIALOG_CLASS = 'igx-dialog';\n\n    @ViewChild(IgxToggleDirective, { static: true })\n    public toggleRef: IgxToggleDirective;\n\n    /**\n    * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n    *```html\n    *<igx-dialog [id]=\"'igx-dialog-56'\" #alert title=\"Notification\" leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n    *```\n    */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-dialog-${DIALOG_ID++}`;\n\n    @Input()\n    get isModal() {\n        return this._isModal;\n    }\n\n    set isModal(val: boolean) {\n        this._overlayDefaultSettings.modal = val;\n        this._isModal = val;\n    }\n\n    /**\n    * An @Input property controlling the `title` of the dialog.\n    *```html\n    *<igx-dialog title=\"Notification\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n    *```\n    */\n    @Input()\n    public title = '';\n\n    /**\n     *  An @Input property controlling the `message` of the dialog.\n     *```html\n     *<igx-dialog message=\"Your email was sent!\" #alert leftButtonLabel=\"OK\" (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public message = '';\n\n    /**\n     * An @Input property to set the `label` of the left button of the dialog.\n     *```html\n     *<igx-dialog leftButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonLabel = '';\n\n    /**\n     * An @Input property to set the left button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     *```html\n     *<igx-dialog leftButtonType=\"raised\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonType = 'flat';\n    /**\n     * An @Input property to set the left button color. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonColor=\"yellow\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonColor = '';\n\n    /**\n     * An @Input property to set the left button `background-color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonBackgroundColor=\"black\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonBackgroundColor = '';\n\n    /**\n     * An @Input property to set the left button `ripple`. The `ripple` animates a click/tap to a component as a series of fading waves.\n     * The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog leftButtonRipple=\"green\" leftButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public leftButtonRipple = '';\n\n    /**\n     * An @Input property to set the `label` of the right button of the dialog.\n     *```html\n     *<igx-dialog rightButtonLabel=\"OKAY\" #alert title=\"Notification\"  (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonLabel = '';\n\n    /**\n     * An @Input property to set the right button `type`. The types are `flat`, `raised` and `fab`.\n     * The `flat` type button is a rectangle and doesn't have a shadow. <br>\n     * The `raised` type button is also a rectangle but has a shadow. <br>\n     * The `fab` type button is a circle with a shadow. <br>\n     * The default value is `flat`.\n     *```html\n     *<igx-dialog rightButtonType=\"fab\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonType = 'flat';\n\n    /**\n     * An @Input property to set the right button `color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog rightButtonColor=\"yellow\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonColor = '';\n\n    /**\n     * An @Input property to set the right button `background-color`. The property accepts all valid CSS color property values.\n     *```html\n     *<igx-dialog rightButtonBackgroundColor=\"black\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonBackgroundColor = '';\n\n    /**\n     * An @Input property to set the right button `ripple`.\n     *```html\n     *<igx-dialog rightButtonRipple=\"green\" rightButtonLabel=\"OKAY\" #alert (onLeftButtonSelect)=\"alert.close()\"></igx-dialog>\n     *```\n     */\n    @Input()\n    public rightButtonRipple = '';\n\n    /**\n     * An @Input property that allows you to enable the \"close on click outside the dialog\". By default it's disabled.\n     *```html\n     *<igx-dialog closeOnOutsideSelect=\"true\" leftButtonLabel=\"Cancel\" (onLeftButtonSelect)=\"dialog.close()\"\n     *rightButtonLabel=\"OK\" rightButtonRipple=\"#4CAF50\" (onRightButtonSelect)=\"onDialogOKSelected($event)\">\n     *</igx-dialog>\n     *```\n     */\n    @Input()\n    get closeOnOutsideSelect() {\n        return this._closeOnOutsideSelect;\n    }\n\n    set closeOnOutsideSelect(val: boolean) {\n        this._overlayDefaultSettings.closeOnOutsideClick = val;\n        this._closeOnOutsideSelect = val;\n    }\n\n    /**\n     * An event that is emitted when the dialog is opened.\n     *```html\n     *<igx-dialog (onOpen)=\"onDialogOpenHandler($event)\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onOpen = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the dialog is closed.\n     *```html\n     *<igx-dialog (onClose)=\"onDialogCloseHandler($event)\" title=\"Confirmation\" leftButtonLabel=\"Cancel\" rightButtonLabel=\"OK\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onClose = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the left button is clicked.\n     *```html\n     *<igx-dialog (onLeftButtonSelect)=\"onDialogOKSelected($event)\" #dialog leftButtonLabel=\"OK\" rightButtonLabel=\"Cancel\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onLeftButtonSelect = new EventEmitter<IDialogEventArgs>();\n\n    /**\n     * An event that is emitted when the right button is clicked.\n     * ```html\n     *<igx-dialog (onRightButtonSelect)=\"onDialogOKSelected($event)\"\n     *#dialog title=\"Confirmation\" (onLeftButtonSelect)=\"dialog.close()\" rightButtonLabel=\"OK\"\n     *rightButtonRipple=\"#4CAF50\" closeOnOutsideSelect=\"true\">\n     *</igx-dialog>\n     *```\n     */\n    @Output()\n    public onRightButtonSelect = new EventEmitter<IDialogEventArgs>();\n\n    private _animaitonSettings: PositionSettings = {\n        openAnimation: useAnimation(slideInBottom, { params: { fromPosition: 'translateY(100%)' } }),\n        closeAnimation: useAnimation(slideOutTop, { params: { toPosition: 'translateY(-100%)' } })\n    };\n\n    private _overlayDefaultSettings: OverlaySettings;\n    private _closeOnOutsideSelect = false;\n    private _isModal = true;\n    protected destroy$ = new Subject<boolean>();\n\n    /**\n     * @hidden\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * The default `tabindex` attribute for the component\n     *\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = -1;\n\n    private _titleId: string;\n\n    /**\n     * Returns the value of state. Possible state values are \"open\" or \"close\".\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogState = this.dialog.state;\n     *}\n     *```\n     */\n    get state(): string {\n        return this.isOpen ? 'open' : 'close';\n    }\n\n    /**\n     * Returns whether the dialog is visible to the end user.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogOpen = this.dialog.isOpen;\n     *}\n     * ```\n     */\n    @Input()\n    get isOpen() {\n        return !this.toggleRef.collapsed;\n    }\n\n    @HostBinding('class.igx-dialog--hidden')\n    get isCollapsed() {\n        return this.toggleRef.collapsed;\n    }\n\n    /**\n     *Returns the value of the role of the dialog. The valid values are `dialog`, `alertdialog`, `alert`.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogRole = this.dialog.role;\n     *}\n     * ```\n     */\n    @Input()\n    get role() {\n        if (this.leftButtonLabel !== '' && this.rightButtonLabel !== '') {\n            return 'dialog';\n        } else if (\n            this.leftButtonLabel !== '' ||\n            this.rightButtonLabel !== ''\n        ) {\n            return 'alertdialog';\n        } else {\n            return 'alert';\n        }\n    }\n\n    /**\n     *Returns the value of the title id.\n     *```typescript\n     *@ViewChild(\"MyDialog\")\n     *public dialog: IgxDialogComponent;\n     *ngAfterViewInit() {\n     *    let dialogTitle = this.dialog.titleId;\n     *}\n     * ```\n     */\n    @Input()\n    get titleId() {\n        return this._titleId;\n    }\n\n    constructor(\n        private elementRef: ElementRef,\n        @Optional() private navService: IgxNavigationService\n    ) {\n        this._titleId = IgxDialogComponent.NEXT_ID++ + '_title';\n\n        this._overlayDefaultSettings = {\n            positionStrategy: new GlobalPositionStrategy(this._animaitonSettings),\n            scrollStrategy: new NoOpScrollStrategy(),\n            modal: this.isModal,\n            closeOnOutsideClick: this.closeOnOutsideSelect\n        };\n    }\n\n    ngAfterContentInit() {\n        this.toggleRef.onClosing.pipe(takeUntil(this.destroy$)).subscribe(() => this.emitCloseFromDialog());\n    }\n\n    private emitCloseFromDialog() {\n        this.onClose.emit({ dialog: this, event: null });\n    }\n\n    /**\n     * A method that opens the dialog.\n     * @memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.open() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public open(overlaySettings: OverlaySettings = this._overlayDefaultSettings) {\n        this.toggleRef.open(overlaySettings);\n        this.onOpen.emit({ dialog: this, event: null });\n        if (!this.leftButtonLabel && !this.rightButtonLabel) {\n            this.toggleRef.element.focus();\n        }\n    }\n\n    /**\n     *A method that that closes the dialog.\n     *@memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.close() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public close() {\n        // `onClose` will emit from `toggleRef.onClosing` subscription\n        this.toggleRef.close();\n    }\n\n\n    /**\n     * A method that opens/closes the dialog.\n     *@memberOf {@link IgxDialogComponent}\n     *```html\n     *<button (click)=\"dialog.toggle() igxButton=\"raised\" igxButtonColor=\"white\" igxRipple=\"white\">Trigger Dialog</button>\n     *<igx-dialog #dialog></igx-dialog>\n     *```\n     */\n    public toggle() {\n        this.isOpen ? this.close() : this.open();\n    }\n\n    /**\n     * @hidden\n     */\n    public onDialogSelected(event) {\n        event.stopPropagation();\n        if (\n            this.isOpen &&\n            this.closeOnOutsideSelect &&\n            event.target.classList.contains(IgxDialogComponent.DIALOG_CLASS)\n        ) {\n            this.close();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onInternalLeftButtonSelect(event) {\n        this.onLeftButtonSelect.emit({ dialog: this, event });\n    }\n\n    /**\n     * @hidden\n     */\n    public onInternalRightButtonSelect(event) {\n        this.onRightButtonSelect.emit({ dialog: this, event });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        if (this.navService && this.id) {\n            this.navService.add(this.id, this);\n        }\n    }\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        if (this.navService && this.id) {\n            this.navService.remove(this.id);\n        }\n\n    }\n\n}\n\nexport interface IDialogEventArgs {\n    dialog: IgxDialogComponent;\n    event: Event;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxDialogComponent, IgxDialogTitleDirective, IgxDialogActionsDirective],\n    exports: [IgxDialogComponent, IgxDialogTitleDirective, IgxDialogActionsDirective],\n    imports: [CommonModule, IgxToggleModule, IgxButtonModule, IgxRippleModule, IgxFocusModule]\n})\nexport class IgxDialogModule { }\n","export interface ISummaryExpression {\n    fieldName: string;\n    customSummary?: any;\n}\nexport interface IgxSummaryResult {\n    key: string;\n    label: string;\n    summaryResult: any;\n}\n\nexport interface ISummaryRecord {\n    summaries: Map<string, IgxSummaryResult[]>;\n    max?: number;\n    cellIndentation?: number;\n}\n\nconst clear = (el) => el === 0 || Boolean(el);\nconst first = (arr) => arr[0];\nconst last = (arr) => arr[arr.length - 1];\n\nexport class IgxSummaryOperand {\n    /**\n     * Counts all the records in the data source.\n     * If filtering is applied, counts only the filtered records.\n     * ```typescript\n     * IgxSummaryOperand.count(dataSource);\n     * ```\n     * @memberof IgxSummaryOperand\n     */\n    public static count(data: any[]): number {\n        return data.length;\n    }\n    /**\n     * Executes the static `count` method and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomSummary extends IgxSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data?: any[]): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"test\",\n     *       label: \"Test\",\n     *       summaryResult: IgxSummaryOperand.count(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomSummary;\n     * ```\n     * @memberof IgxSummaryOperand\n     */\n    public operate(data: any[] = []): IgxSummaryResult[] {\n        return [{\n            key: 'count',\n            label: 'Count',\n            summaryResult: IgxSummaryOperand.count(data)\n        }];\n    }\n}\n\n// @dynamic\nexport class IgxNumberSummaryOperand extends IgxSummaryOperand {\n    /**\n     * Returns the minimum numeric value in the provided data records.\n     * If filtering is applied, returns the minimum value in the filtered data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.min(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static min(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => Math.min(a, b)) : 0;\n    }\n    /**\n     * Returns the maximum numeric value in the provided data records.\n     * If filtering is applied, returns the maximum value in the filtered data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.max(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static max(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => Math.max(a, b)) : 0;\n    }\n    /**\n     * Returns the sum of the numeric values in the provided data records.\n     * If filtering is applied, returns the sum of the numeric values in the data records.\n     * ```typescript\n     * IgxNumberSummaryOperand.sum(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static sum(data: any[]): number {\n        return data.length && data.filter(clear).length ? data.filter(clear).reduce((a, b) => +a + +b) : 0;\n    }\n    /**\n     * Returns the average numeric value in the data provided data records.\n     * If filtering is applied, returns the average numeric value in the filtered data records.\n     * ```typescript\n     * IgxSummaryOperand.average(data);\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public static average(data: any[]): number {\n        return data.length && data.filter(clear).length ? this.sum(data) / this.count(data) : 0;\n    }\n    /**\n     * Executes the static methods and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomNumberSummary extends IgxNumberSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data?: any[]): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"avg\",\n     *       label: \"Avg\",\n     *       summaryResult: IgxNumberSummaryOperand.average(data)\n     *     });\n     *     result.push({\n     *       key: \"max\",\n     *       label: \"Max\",\n     *       summaryResult: IgxNumberSummaryOperand.max(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomNumberSummary;\n     * ```\n     * @memberof IgxNumberSummaryOperand\n     */\n    public operate(data: any[] = []): IgxSummaryResult[] {\n        const result = super.operate(data);\n        result.push({\n            key: 'min',\n            label: 'Min',\n            summaryResult: IgxNumberSummaryOperand.min(data)\n        });\n        result.push({\n            key: 'max',\n            label: 'Max',\n            summaryResult: IgxNumberSummaryOperand.max(data)\n        });\n        result.push({\n            key: 'sum',\n            label: 'Sum',\n            summaryResult: IgxNumberSummaryOperand.sum(data)\n        });\n        result.push({\n            key: 'average',\n            label: 'Avg',\n            summaryResult: IgxNumberSummaryOperand.average(data)\n        });\n        return result;\n    }\n}\n\n// @dynamic\nexport class IgxDateSummaryOperand extends IgxSummaryOperand {\n    /**\n     * Returns the latest date value in the data records.\n     * If filtering is applied, returns the latest date value in the filtered data records.\n     * ```typescript\n     * IgxDateSummaryOperand.latest(data);\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public static latest(data: any[]) {\n        return data.length && data.filter(clear).length ?\n            first(data.filter(clear).sort((a, b) => new Date(b).valueOf() - new Date(a).valueOf())) : undefined;\n    }\n    /**\n     * Returns the earliest date value in the data records.\n     * If filtering is applied, returns the latest date value in the filtered data records.\n     * ```typescript\n     * IgxDateSummaryOperand.earliest(data);\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public static earliest(data: any[]) {\n        return data.length && data.filter(clear).length ?\n            last(data.filter(clear).sort((a, b) => new Date(b).valueOf() - new Date(a).valueOf())) : undefined;\n    }\n    /**\n     * Executes the static methods and returns `IgxSummaryResult[]`.\n     * ```typescript\n     * interface IgxSummaryResult {\n     *   key: string;\n     *   label: string;\n     *   summaryResult: any;\n     * }\n     * ```\n     * Can be overridden in the inherited classes to provide customization for the `summary`.\n     * ```typescript\n     * class CustomDateSummary extends IgxDateSummaryOperand {\n     *   constructor() {\n     *     super();\n     *   }\n     *   public operate(data?: any[]): IgxSummaryResult[] {\n     *     const result = [];\n     *     result.push({\n     *       key: \"latest\",\n     *       label: \"Latest Date\",\n     *       summaryResult: IgxDateSummaryOperand.latest(data)\n     *     });\n     *     return result;\n     *   }\n     * }\n     * this.grid.getColumnByName('ColumnName').summaries = CustomDateSummary;\n     * ```\n     * @memberof IgxDateSummaryOperand\n     */\n    public operate(data: any[] = []): IgxSummaryResult[] {\n        const result = super.operate(data);\n        result.push({\n            key: 'earliest',\n            label: 'Earliest',\n            summaryResult: IgxDateSummaryOperand.earliest(data)\n        });\n        result.push({\n            key: 'latest',\n            label: 'Latest',\n            summaryResult: IgxDateSummaryOperand.latest(data)\n        });\n        return result;\n    }\n}\n","import { Injectable, EventEmitter, NgZone } from '@angular/core';\nimport { IGridEditEventArgs } from '../grids/grid-base.component';\n\n\nexport interface GridSelectionRange {\n    rowStart: number;\n    rowEnd: number;\n    columnStart: string | number;\n    columnEnd: string | number;\n}\n\nexport interface ISelectionNode {\n    row: number;\n    column: number;\n    layout?: IMultiRowLayoutNode;\n    isSummaryRow?: boolean;\n}\n\nexport interface IMultiRowLayoutNode {\n    rowStart: number;\n    colStart: number;\n    rowEnd: number;\n    colEnd: number;\n    columnVisibleIndex: number;\n}\n\ninterface ISelectionKeyboardState {\n    node: null | ISelectionNode;\n    shift: boolean;\n    range: GridSelectionRange;\n    active: boolean;\n}\n\ninterface ISelectionPointerState extends ISelectionKeyboardState {\n    ctrl: boolean;\n    primaryButton: boolean;\n}\n\ntype SelectionState = ISelectionKeyboardState | ISelectionPointerState;\n\n\n// TODO: Refactor - export in a separate file\n\nexport class IgxRow {\n    transactionState: any;\n    state: any;\n    newData: any;\n\n    constructor(public id: any, public index: number, public data: any) {}\n\n    createEditEventArgs(): IGridEditEventArgs {\n        return {\n            rowID: this.id,\n            oldValue: { ... this.data },\n            newValue: this.newData,\n            cancel: false\n        };\n    }\n}\n\nexport class IgxCell {\n\n    primaryKey: any;\n    state: any;\n\n    constructor(\n        public id,\n        public rowIndex: number,\n        public column,\n        public value: any,\n        public editValue: any,\n        public rowData: any) {}\n\n    castToNumber(value: any): any {\n        if (this.column.dataType === 'number' && !this.column.inlineEditorTemplate) {\n            const v = parseFloat(value);\n            return !isNaN(v) && isFinite(v) ? v : 0;\n        }\n        return value;\n    }\n\n    createEditEventArgs(): IGridEditEventArgs {\n        return {\n            rowID: this.id.rowID,\n            cellID: this.id,\n            oldValue: this.value,\n            newValue: this.editValue,\n            cancel: false\n        };\n    }\n}\n\n@Injectable()\nexport class IgxGridCRUDService {\n\n    grid;\n    cell: IgxCell | null = null;\n    row: IgxRow | null = null;\n\n    createCell(cell): IgxCell {\n        return new IgxCell(cell.cellID, cell.rowIndex, cell.column, cell.value, cell.value, cell.row.rowData);\n    }\n\n    createRow(cell: IgxCell): IgxRow {\n        return new IgxRow(cell.id.rowID, cell.rowIndex, cell.rowData);\n    }\n\n    sameRow(rowIndex): boolean {\n        return this.row && this.row.index === rowIndex;\n    }\n\n    sameCell(cell: IgxCell): boolean {\n        return (this.cell.id.rowID === cell.id.rowID &&\n            this.cell.id.columnID === cell.id.columnID);\n    }\n\n    get inEditMode(): boolean {\n        return !!this.cell;\n    }\n\n    get rowEditing(): boolean {\n        return this.grid.rowEditable;\n    }\n\n    get primaryKey(): any {\n        return this.grid.primaryKey;\n    }\n\n    beginRowEdit() {\n        if (this.grid.rowEditable && (this.grid.primaryKey === undefined || this.grid.primaryKey === null)) {\n            console.warn('The grid must have a `primaryKey` specified when using `rowEditable`!');\n        }\n        this.row = this.createRow(this.cell);\n        const args = {\n            rowID: this.row.id,\n            oldValue: this.row.data,\n            cancel: false\n        };\n        this.grid.onRowEditEnter.emit(args);\n        if (args.cancel) {\n            this.endRowEdit();\n            return;\n        }\n        this.row.transactionState = this.grid.transactions.getAggregatedValue(this.row.id, true);\n        this.grid.transactions.startPending();\n        this.grid.openRowOverlay(this.row.id);\n    }\n\n\n    endRowEdit() {\n        this.row = null;\n    }\n\n    begin(cell): void {\n        this.cell = this.createCell(cell);\n        this.cell.primaryKey = this.primaryKey;\n        const args = {\n            cellID: this.cell.id,\n            rowID: this.cell.id.rowID,\n            oldValue: this.cell.value,\n            cancel: false\n        };\n\n        this.grid.onCellEditEnter.emit(args);\n\n        if (args.cancel) {\n            this.end();\n            return;\n        }\n\n\n        if (this.rowEditing) {\n            if (!this.row) {\n                this.beginRowEdit();\n                return;\n            }\n\n            if (this.row && !this.sameRow(this.cell.rowIndex)) {\n                this.grid.endEdit(true);\n                this.cell = this.createCell(cell);\n                this.beginRowEdit();\n                return;\n            }\n        } else {\n            this.endRowEdit();\n        }\n    }\n\n    end(): void {\n        this.cell = null;\n    }\n\n\n    isInEditMode(rowIndex: number, columnIndex: number): boolean {\n        if (!this.cell) {\n            return false;\n        }\n        return this.cell.column.index === columnIndex && this.cell.rowIndex === rowIndex;\n    }\n}\n\n\n@Injectable()\nexport class IgxGridSelectionService {\n\n    dragMode = false;\n    activeElement: ISelectionNode | null;\n    keyboardState = {} as ISelectionKeyboardState;\n    pointerState = {} as ISelectionPointerState;\n\n\n    selection = new Map<number, Set<number>>();\n    temp = new Map<number, Set<number>>();\n    _ranges: Set<string> = new Set<string>();\n    _selectionRange: Range;\n\n\n    /**\n     * Returns the current selected ranges in the grid from both\n     * keyboard and pointer interactions\n     */\n    get ranges(): GridSelectionRange[] {\n\n        // The last action was keyboard + shift selection -> add it\n        this.addKeyboardRange();\n\n        const ranges = Array.from(this._ranges).map(range => JSON.parse(range));\n\n        // No ranges but we have a focused cell -> add it\n        if (!ranges.length && this.activeElement) {\n            ranges.push(this.generateRange(this.activeElement));\n        }\n\n        return ranges;\n    }\n\n    get primaryButton(): boolean {\n        return this.pointerState.primaryButton;\n    }\n\n    set primaryButton(value: boolean) {\n        this.pointerState.primaryButton = value;\n    }\n\n    constructor(private zone: NgZone) {\n        this.initPointerState();\n        this.initKeyboardState();\n    }\n\n    /**\n     * Resets the keyboard state\n     */\n    initKeyboardState(): void {\n        this.keyboardState.node = null;\n        this.keyboardState.shift = false;\n        this.keyboardState.range = null;\n        this.keyboardState.active = false;\n    }\n\n    /**\n     * Resets the pointer state\n     */\n    initPointerState(): void {\n        this.pointerState.node = null;\n        this.pointerState.ctrl = false;\n        this.pointerState.shift = false;\n        this.pointerState.range = null;\n        this.pointerState.primaryButton = true;\n    }\n\n    /**\n     * Adds a single node.\n     * Single clicks | Ctrl + single clicks on cells is the usual case.\n     */\n    add(node: ISelectionNode): void {\n        this.selection.has(node.row) ? this.selection.get(node.row).add(node.column) :\n            this.selection.set(node.row, new Set<number>()).get(node.row).add(node.column);\n\n        this._ranges.add(JSON.stringify(this.generateRange(node)));\n    }\n\n    /**\n     * Adds the active keyboard range selection (if any) to the `ranges` meta.\n     */\n    addKeyboardRange(): void {\n        if (this.keyboardState.range) {\n            this._ranges.add(JSON.stringify(this.keyboardState.range));\n        }\n    }\n\n    remove(node: ISelectionNode): void {\n        if (this.selection.has(node.row)) {\n            this.selection.get(node.row).delete(node.column);\n        }\n        if (this.isActiveNode(node)) {\n            this.activeElement = null;\n        }\n        this._ranges.delete(JSON.stringify(this.generateRange(node)));\n    }\n\n    isInMap(node: ISelectionNode): boolean {\n        return (this.selection.has(node.row) && this.selection.get(node.row).has(node.column)) ||\n            (this.temp.has(node.row) && this.temp.get(node.row).has(node.column));\n    }\n\n    selected(node: ISelectionNode): boolean {\n        return this.isActiveNode(node) || this.isInMap(node);\n    }\n\n    isActiveNode(node: ISelectionNode, mrl = false): boolean {\n        if (this.activeElement) {\n            const isActive = this.activeElement.column === node.column && this.activeElement.row === node.row;\n            if (mrl) {\n                const layout = this.activeElement.layout;\n                return isActive && this.isActiveLayout(layout, node.layout);\n            }\n            return isActive;\n        }\n        return false;\n    }\n\n    isActiveLayout(current: IMultiRowLayoutNode, target: IMultiRowLayoutNode): boolean {\n        return current.columnVisibleIndex === target.columnVisibleIndex;\n    }\n\n    addRangeMeta(node: ISelectionNode, state?: SelectionState): void {\n        this._ranges.add(JSON.stringify(this.generateRange(node, state)));\n    }\n\n    removeRangeMeta(node: ISelectionNode, state?: SelectionState): void {\n        this._ranges.delete(JSON.stringify(this.generateRange(node, state)));\n    }\n\n    /**\n     * Generates a new selection range from the given `node`.\n     * If `state` is passed instead it will generate the range based on the passed `node`\n     * and the start node of the `state`.\n     */\n    generateRange(node: ISelectionNode, state?: SelectionState): GridSelectionRange {\n        if (!state) {\n            return {\n                rowStart: node.row,\n                rowEnd: node.row,\n                columnStart: node.column,\n                columnEnd: node.column\n            };\n        }\n\n        const { row, column } = state.node;\n        const rowStart = Math.min(node.row, row);\n        const rowEnd = Math.max(node.row, row);\n        const columnStart = Math.min(node.column, column);\n        const columnEnd = Math.max(node.column, column);\n\n        return { rowStart, rowEnd, columnStart, columnEnd };\n    }\n\n    /**\n     *\n     */\n    keyboardStateOnKeydown(node: ISelectionNode, shift: boolean, shiftTab: boolean): void {\n        this.keyboardState.active = true;\n        this.initPointerState();\n        this.keyboardState.shift = shift && !shiftTab;\n\n        // Kb navigation with shift and no previous node.\n        // Clear the current selection init the start node.\n        if (this.keyboardState.shift && !this.keyboardState.node) {\n            this.clear();\n            this.keyboardState.node = node;\n        }\n    }\n\n    keyboardStateOnFocus(node: ISelectionNode, emitter: EventEmitter<GridSelectionRange>, dom): void {\n        const kbState = this.keyboardState;\n\n        // Focus triggered by keyboard navigation\n        if (kbState.active) {\n            if (isChromium()) {\n                this._moveSelectionChrome(dom);\n            }\n            // Start generating a range if shift is hold\n            if (kbState.shift) {\n                this.dragSelect(node, kbState);\n                kbState.range = this.generateRange(node, kbState);\n                emitter.emit(this.generateRange(node, kbState));\n                return;\n            }\n\n            this.initKeyboardState();\n            this.clear();\n            this.add(node);\n        }\n    }\n\n    pointerDown(node: ISelectionNode, shift: boolean, ctrl: boolean): void {\n\n        this.addKeyboardRange();\n        this.initKeyboardState();\n        this.pointerState.ctrl = ctrl;\n        this.pointerState.shift = shift;\n\n        // No ctrl key pressed - no multiple selection\n        if (!ctrl) {\n            this.clear();\n        }\n\n        if (shift) {\n            // No previously 'clicked' node. Use the last active node.\n            if (!this.pointerState.node) {\n                this.pointerState.node = this.activeElement || node;\n            }\n            this.pointerDownShiftKey(node);\n            this.clearTextSelection();\n            return;\n        }\n\n        this.removeRangeMeta(node);\n        this.pointerState.node = node;\n    }\n\n    pointerDownShiftKey(node: ISelectionNode): void {\n        this.clear();\n        this.selectRange(node, this.pointerState);\n    }\n\n    mergeMap(target: Map<number, Set<number>>, source: Map<number, Set<number>>): void {\n        const iterator = source.entries();\n        let pair = iterator.next();\n        let key: number;\n        let value: Set<number>;\n\n        while (!pair.done) {\n            [key, value] = pair.value;\n            if (target.has(key)) {\n                const newValue = target.get(key);\n                value.forEach(record => newValue.add(record));\n                target.set(key, newValue);\n            } else {\n                target.set(key, value);\n            }\n            pair = iterator.next();\n        }\n    }\n\n    pointerEnter(node: ISelectionNode, event: PointerEvent): boolean {\n        // https://www.w3.org/TR/pointerevents/#the-button-property\n        this.dragMode = event.buttons === 1 && event.button === -1;\n        if (!this.dragMode) {\n            return false;\n        }\n        this.clearTextSelection();\n\n        // If the users triggers a drag-like event by first clicking outside the grid cells\n        // and then enters in the grid body we may not have a initial pointer starting node.\n        // Assume the first pointerenter node is where we start.\n        if (!this.pointerState.node) {\n            this.pointerState.node = node;\n        }\n\n        this.pointerState.ctrl ? this.selectRange(node, this.pointerState, this.temp) :\n            this.dragSelect(node, this.pointerState);\n        return true;\n    }\n\n    pointerUp(node: ISelectionNode, emitter: EventEmitter<GridSelectionRange>): boolean {\n        if (this.dragMode) {\n            this.restoreTextSelection();\n            this.addRangeMeta(node, this.pointerState);\n            this.mergeMap(this.selection, this.temp);\n            this.zone.runTask(() => emitter.emit(this.generateRange(node, this.pointerState)));\n            this.temp.clear();\n            this.dragMode = false;\n            return true;\n        }\n\n        if (this.pointerState.shift) {\n            this.clearTextSelection();\n            this.restoreTextSelection();\n            this.addRangeMeta(node, this.pointerState);\n            emitter.emit(this.generateRange(node, this.pointerState));\n            return true;\n        }\n\n        this.add(node);\n        return false;\n    }\n\n    selectRange(node: ISelectionNode, state: SelectionState, collection: Map<number, Set<number>> = this.selection): void {\n        if (collection === this.temp) {\n            collection.clear();\n        }\n        const { rowStart, rowEnd, columnStart, columnEnd } = this.generateRange(node, state);\n        for (let i = rowStart; i <= rowEnd; i++) {\n            for (let j = columnStart as number; j <= columnEnd; j++) {\n                collection.has(i) ? collection.get(i).add(j) :\n                    collection.set(i, new Set<number>()).get(i).add(j);\n            }\n        }\n    }\n\n    dragSelect(node: ISelectionNode, state: SelectionState): void {\n        if (!this.pointerState.ctrl) {\n            this.selection.clear();\n        }\n        this.selectRange(node, state);\n    }\n\n    clear(): void {\n        this.selection.clear();\n        this.temp.clear();\n        this._ranges.clear();\n    }\n\n    clearTextSelection(): void {\n        const selection = window.getSelection();\n        if (selection.rangeCount) {\n            this._selectionRange = selection.getRangeAt(0);\n            this._selectionRange.collapse(true);\n            selection.removeAllRanges();\n        }\n    }\n\n    restoreTextSelection(): void {\n        const selection = window.getSelection();\n        if (!selection.rangeCount) {\n            selection.addRange(this._selectionRange || document.createRange());\n        }\n    }\n\n    /**\n     * (â¯Â°â¡Â°ï¼â¯ï¸µ â»ââ»\n     * Chrome and Chromium don't care about the active\n     * range after keyboard navigation, thus this.\n     */\n    _moveSelectionChrome(node: Node) {\n        const selection = window.getSelection();\n        selection.removeAllRanges();\n        const range = new Range();\n        range.selectNode(node);\n        range.collapse(true);\n        selection.addRange(range);\n    }\n}\n\nexport function isChromium(): boolean {\n    return (/Chrom|e?ium/g.test(navigator.userAgent) || /Google Inc/g.test(navigator.vendor)) && !/Edge/g.test(navigator.userAgent);\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    HostBinding,\n    Input,\n    QueryList,\n    ViewChild,\n    ViewChildren\n} from '@angular/core';\nimport { IgxCheckboxComponent } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent } from './column.component';\nimport { TransactionType, State } from '../services';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxGridSelectionService, IgxGridCRUDService, IgxRow } from '../core/grid-selection';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-row',\n    templateUrl: './grid/grid-row.component.html'\n})\nexport class IgxRowComponent<T extends IgxGridBaseComponent & IGridDataBindable> implements DoCheck {\n\n    private _rowData: any;\n    /**\n     *  The data passed to the row component.\n     *\n     * ```typescript\n     * // get the row data for the first selected row\n     * let selectedRowData = this.grid.selectedRows[0].rowData;\n     * ```\n     */\n    @Input()\n    public get rowData(): any {\n        if (this.inEditMode) {\n            return Object.assign({}, this._rowData, this.grid.transactions.getAggregatedValue(this.rowID, false));\n        }\n        return this._rowData;\n    }\n\n    public set rowData(v: any) {\n        this._rowData = v;\n    }\n    /**\n     * The index of the row.\n     *\n     * ```typescript\n     * // get the index of the second selected row\n     * let selectedRowIndex = this.grid.selectedRows[1].index;\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxDirRef', { read: IgxGridForOfDirective, static: false })\n    public virtDirRow: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(forwardRef(() => IgxCheckboxComponent), { read: IgxCheckboxComponent, static: false })\n    public checkboxElement: IgxCheckboxComponent;\n\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * // get the cells of the third selected row\n     * let selectedRowCells = this.grid.selectedRows[2].cells;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxGridCellComponent))\n    public cells: QueryList<IgxGridCellComponent>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'row';\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return this.resolveClasses();\n    }\n\n    /**\n     * @hidden\n     */\n    get columns(): IgxColumnComponent[] {\n        return this.grid.visibleColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get pinnedColumns(): IgxColumnComponent[] {\n        return this.grid.pinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get unpinnedColumns(): IgxColumnComponent[] {\n        return this.grid.unpinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowSelectable(): boolean {\n        return this.grid.rowSelectable;\n    }\n\n    /**\n     * @hidden\n     */\n    public get showRowCheckboxes(): boolean {\n        return this.grid.showRowCheckboxes;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.aria-selected')\n    public isSelected: boolean;\n\n    /** @hidden */\n    public get dirty(): boolean {\n        const row: State = this.grid.transactions.getState(this.rowID);\n        if (row) {\n            return row.type === TransactionType.ADD || row.type === TransactionType.UPDATE;\n        }\n\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowDraggable(): boolean {\n        return this.grid.rowDraggable;\n    }\n\n    /** @hidden */\n    public get added(): boolean {\n        const row: State = this.grid.transactions.getState(this.rowID);\n        if (row) {\n            return row.type === TransactionType.ADD;\n        }\n\n         return false;\n    }\n\n    /** @hidden */\n    public get deleted(): boolean {\n        return this.gridAPI.row_deleted_transaction(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    public dragging = false;\n\n    // TODO: Refactor\n    public get inEditMode(): boolean {\n        if (this.grid.rowEditable) {\n            const editRowState = this.crudService.row;\n            return (editRowState && editRowState.id === this.rowID) || false;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Get a reference to the grid that contains the selected row.\n     *\n     * ```typescript\n     * handleRowSelection(event) {\n     *  // the grid on which the onRowSelectionChange event was triggered\n     *  const grid = event.row.grid;\n     * }\n     * ```\n     *\n     * ```html\n     *  <igx-grid\n     *    [data]=\"data\"\n     *    (onRowSelectionChange)=\"handleRowSelection($event)\">\n     *  </igx-grid>\n     * ```\n     */\n    get grid(): T {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets the ID of the row.\n     * A row in the grid is identified either by:\n     * - primaryKey data value,\n     * - the whole rowData, if the primaryKey is omitted.\n     *\n     * ```typescript\n     * let rowID = this.grid.selectedRows[2].rowID;\n     * ```\n     */\n    public get rowID() {\n        const primaryKey = this.grid.primaryKey;\n        return primaryKey ? this._rowData[primaryKey] : this._rowData;\n    }\n\n    /**\n     * The native DOM element representing the row. Could be null in certain environments.\n     *\n     * ```typescript\n     * // get the nativeElement of the second selected row\n     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    public focused = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public defaultCssClass = 'igx-grid__tr';\n\n    /**\n     * @hidden\n     */\n    protected _rowSelection = false;\n\n    constructor(public gridAPI: GridBaseAPIService<T>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        private selection: IgxSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) { }\n\n\n    /**\n     * @hidden\n     */\n    public onCheckboxClick(event) {\n        const newSelection = (event.checked) ?\n            this.selection.add_item(this.gridID, this.rowID) :\n            this.selection.delete_item(this.gridID, this.rowID);\n        this.grid.triggerRowSelectionChange(newSelection, this, event);\n    }\n\n    /**\n     * Updates the specified row object and the data source record with the passed value.\n     * This method emits `onEditDone` event.\n     *\n     * ```typescript\n     * // update the second selected row's value\n     * let newValue = \"Apple\";\n     * this.grid.selectedRows[1].update(newValue);\n     * ```\n     */\n    public update(value: any) {\n        const crudService = this.crudService;\n        if (crudService.inEditMode && crudService.cell.id.rowID === this.rowID) {\n            this.grid.endEdit(false);\n        }\n        const row = new IgxRow(this.rowID, this.index, this.rowData);\n        this.gridAPI.update_row(row, value);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Removes the specified row from the grid's data source.\n     * This method emits `onRowDeleted` event.\n     *\n     * ```typescript\n     * // delete the third selected row from the grid\n     * this.grid.selectedRows[2].delete();\n     * ```\n     */\n    public delete() {\n        this.grid.deleteRowById(this.rowID);\n    }\n\n    /**\n     * @hidden\n     */\n    get rowCheckboxAriaLabel() {\n        return this.grid.primaryKey ?\n            this.isSelected ? 'Deselect row with key ' + this.rowID : 'Select row with key ' + this.rowID :\n            this.isSelected ? 'Deselect row' : 'Select row';\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        this.isSelected = this.rowSelectable ?\n            this.grid.allRowsSelected ? true : this.selection.is_item_selected(this.gridID, this.rowID) :\n            this.selection.is_item_selected(this.gridID, this.rowID);\n        this.cdr.markForCheck();\n        if (this.checkboxElement) {\n            this.checkboxElement.checked = this.isSelected;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string {\n        const indexClass = this.index % 2 ? this.grid.evenRowCSS : this.grid.oddRowCSS;\n        const selectedClass = this.isSelected ? 'igx-grid__tr--selected' : '';\n        const editClass = this.inEditMode ? 'igx-grid__tr--edit' : '';\n        const dirtyClass = this.dirty ? 'igx-grid__tr--edited' : '';\n        const deletedClass = this.deleted ? 'igx-grid__tr--deleted' : '';\n        const mrlClass = this.grid.hasColumnLayouts ? 'igx-grid__tr--mrl' : '';\n        const dragClass = this.dragging ? 'igx-grid__tr--drag' : '';\n        return `${this.defaultCssClass} ${indexClass} ${selectedClass} ${editClass} ${dirtyClass}\n         ${deletedClass} ${mrlClass} ${dragClass}`.trim();\n    }\n\n    /**\n     * @hidden\n     */\n    public get resolveDragIndicatorClasses(): string {\n        const defaultDragIndicatorCssClass = 'igx-grid__drag-indicator';\n        const dragIndicatorOff = this.grid.rowDragging && !this.dragging ? 'igx-grid__drag-indicator--off' : '';\n        return `${defaultDragIndicatorCssClass} ${dragIndicatorOff}`;\n    }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { IgxColumnComponent } from './column.component';\n\n/** @hidden */\n@Injectable()\nexport class IgxColumnResizingService {\n\n    private pinnedMaxWidth: string;\n\n    /**\n     *@hidden\n     */\n    public startResizePos: number;\n    /**\n     * Indicates that a column is currently being resized.\n     */\n    public isColumnResizing: boolean;\n    /**\n     *@hidden\n     */\n    public resizeCursor: string = null;\n    /**\n     *@hidden\n     */\n    public showResizer = false;\n    /**\n     * The column being resized.\n     */\n    public column: IgxColumnComponent;\n\n    constructor(private zone: NgZone) { }\n\n    /**\n     *@hidden\n     */\n    get resizerHeight(): number {\n        let height = this.column.grid.getVisibleContentHeight();\n\n        // Column height multiplier in case there are Column Layouts. The resizer height need to take into account rowStart.\n        let columnHeightMultiplier = 1;\n        if (this.column.columnLayoutChild) {\n            columnHeightMultiplier = this.column.grid.multiRowLayoutRowSize - this.column.rowStart + 1;\n        }\n\n        if (this.column.level !== 0) {\n            height -= this.column.topLevelParent.headerGroup.height - this.column.headerGroup.height * columnHeightMultiplier;\n        }\n\n        return height;\n    }\n\n    /**\n     * Returns the minimal possible width to which the column can be resized.\n     */\n    get restrictResizeMin(): number {\n        const actualMinWidth = parseFloat(this.column.minWidth);\n        const minWidth = actualMinWidth < parseFloat(this.column.width) ? actualMinWidth : parseFloat(this.column.width);\n\n        return this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width - minWidth;\n    }\n\n    /**\n     * Returns the maximal possible width to which the column can be resized.\n     */\n    get restrictResizeMax(): number {\n        const actualWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n\n        if (this.column.pinned) {\n            const pinnedMaxWidth = this.pinnedMaxWidth =\n                this.column.grid.calcPinnedContainerMaxWidth - this.column.grid.getPinnedWidth(true) + actualWidth;\n\n            if (this.column.maxWidth && parseFloat(this.column.maxWidth) < pinnedMaxWidth) {\n                this.pinnedMaxWidth = this.column.maxWidth;\n\n                return parseFloat(this.column.maxWidth) - actualWidth;\n            } else {\n                return pinnedMaxWidth - actualWidth;\n            }\n        } else {\n            if (this.column.maxWidth) {\n                return parseFloat(this.column.maxWidth) - actualWidth;\n            } else {\n                return Number.MAX_SAFE_INTEGER;\n            }\n        }\n    }\n\n    /**\n     * Autosizes the column to the longest currently visible cell value, including the header cell.\n     * If the column has a predifined maxWidth and the autosized column width will become bigger than it,\n     * then the column is sized to its maxWidth.\n     * If the column is pinned and the autosized column width will cause the pinned area to become bigger\n     * than the maximum allowed pinned area width (80% of the total grid width), autosizing will be deismissed.\n     */\n    public autosizeColumnOnDblClick() {\n        const currentColWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n\n        const size = this.column.getLargestCellWidth();\n\n        if (this.column.pinned) {\n            const newPinnedWidth = this.column.grid.getPinnedWidth(true) - currentColWidth + parseFloat(size);\n\n            if (newPinnedWidth <= this.column.grid.calcPinnedContainerMaxWidth) {\n                this.column.width = size;\n            }\n        } else if (this.column.maxWidth && (parseFloat(size) > parseFloat(this.column.maxWidth))) {\n            this.column.width = parseFloat(this.column.maxWidth) + 'px';\n        } else if (parseFloat(size) < parseFloat(this.column.minWidth)) {\n            this.column.width = this.column.minWidth + 'px';\n        } else {\n            this.column.width = size;\n        }\n\n        this.zone.run(() => {});\n\n        this.column.grid.reflow();\n        this.column.grid.onColumnResized.emit({\n            column: this.column,\n            prevWidth: currentColWidth.toString(),\n            newWidth: this.column.width\n        });\n    }\n\n    /**\n     * Resizes the column regaridng to the column minWidth and maxWidth.\n     */\n    public resizeColumn(event: MouseEvent) {\n        this.showResizer = false;\n        const diff = event.clientX - this.startResizePos;\n\n        let currentColWidth = parseFloat(this.column.width);\n        const actualWidth = this.column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n        currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;\n\n        const colMinWidth = this.getColMinWidth(this.column);\n        const colMaxWidth = this.getColMaxWidth(this.column);\n        if (this.column.grid.hasColumnLayouts) {\n            this.resizeColumnLayoutFor(this.column, diff);\n        } else {\n            if (currentColWidth + diff < colMinWidth) {\n                this.column.width = colMinWidth + 'px';\n            } else if (colMaxWidth && (currentColWidth + diff > colMaxWidth)) {\n                this.column.width = colMaxWidth + 'px';\n            } else {\n                this.column.width = (currentColWidth + diff) + 'px';\n            }\n        }\n\n        this.zone.run(() => {});\n        this.column.grid.reflow();\n\n        if (currentColWidth !== parseFloat(this.column.width)) {\n            this.column.grid.onColumnResized.emit({\n                column: this.column,\n                prevWidth: currentColWidth.toString(),\n                newWidth: this.column.width\n            });\n        }\n\n        this.isColumnResizing = false;\n    }\n\n    protected getColMinWidth(column: IgxColumnComponent) {\n        let currentColWidth = parseFloat(column.width);\n        const actualWidth = column.headerCell.elementRef.nativeElement.getBoundingClientRect().width;\n        currentColWidth = Number.isNaN(currentColWidth) || (currentColWidth < actualWidth) ? actualWidth : currentColWidth;\n\n        const actualMinWidth = parseFloat(column.minWidth);\n        return actualMinWidth < currentColWidth ? actualMinWidth : currentColWidth;\n    }\n\n    protected getColMaxWidth(column: IgxColumnComponent) {\n        return column.pinned ? parseFloat(this.pinnedMaxWidth) : parseFloat(column.maxWidth);\n    }\n\n    protected resizeColumnLayoutFor(column: IgxColumnComponent, diff: number) {\n        const relativeColumns = column.getResizableColUnderEnd();\n        const combinedSpan = relativeColumns.reduce((acc, col) =>  acc + col.spanUsed, 0);\n\n        if (column.pinned) {\n            const pinnedWidth = this.column.grid.getPinnedWidth(true);\n            const maxPinnedWidth = this.column.grid.calcPinnedContainerMaxWidth;\n\n            if (pinnedWidth + diff > maxPinnedWidth) {\n                diff = maxPinnedWidth - pinnedWidth;\n            }\n        }\n\n        // Resize first those who might reach min/max width\n        let columnsToResize = [...relativeColumns];\n        let updatedDiff = diff;\n        let updatedCombinedSpan = combinedSpan;\n        let setMinMaxCols = false;\n        do {\n            // Cycle them until there are not ones that reach min/max size, because the diff accumulates after each cycle.\n            // This is because we can have at first 2 cols reaching min width and then after\n            // recalculating the diff there might be 1 more that reaches min width.\n            setMinMaxCols = false;\n            let newCombinedSpan = updatedCombinedSpan;\n            const newColsToResize = [];\n            columnsToResize.forEach((col) => {\n                const currentResizeWidth = parseFloat(col.target.calcWidth);\n                const resizeScaled = (diff / updatedCombinedSpan) * col.target.gridColumnSpan;\n\n                const minWidth = this.getColMinWidth(col.target);\n                const maxWidth = this.getColMaxWidth(col.target);\n                if (currentResizeWidth + resizeScaled < minWidth) {\n                    col.target.width = minWidth + 'px';\n                    updatedDiff += (currentResizeWidth - minWidth);\n                    newCombinedSpan -= col.spanUsed;\n                    setMinMaxCols = true;\n                } else if (maxWidth && (currentResizeWidth + resizeScaled > maxWidth)) {\n                    col.target.width = maxWidth + 'px';\n                    updatedDiff -= (maxWidth - currentResizeWidth);\n                    newCombinedSpan -= col.spanUsed;\n                    setMinMaxCols = true;\n                } else {\n                    // Save new ones that can be resized\n                    newColsToResize.push(col);\n                }\n            });\n\n            updatedCombinedSpan = newCombinedSpan;\n            columnsToResize = newColsToResize;\n        } while (setMinMaxCols);\n\n        // Those left that don't reach min/max size resize them normally.\n        columnsToResize.forEach((col) => {\n            const currentResizeWidth = parseFloat(col.target.calcWidth);\n            const resizeScaled = (updatedDiff / updatedCombinedSpan) * col.target.gridColumnSpan;\n            col.target.width = (currentResizeWidth + resizeScaled) + 'px';\n        });\n    }\n}\n","import { DOCUMENT, DatePipe, DecimalPipe } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    Inject,\n    Injectable,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    Pipe,\n    PipeTransform,\n    Renderer2,\n    TemplateRef,\n    LOCALE_ID,\n    AfterViewInit,\n    HostListener\n} from '@angular/core';\nimport { animationFrameScheduler, fromEvent, interval, Subject, Subscription } from 'rxjs';\nimport { map, switchMap, takeUntil, throttle, debounceTime } from 'rxjs/operators';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxDragDirective, IgxDropDirective } from '../directives/dragdrop/dragdrop.directive';\nimport { IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { ConnectedPositioningStrategy } from '../services';\nimport { VerticalAlignment, PositionSettings } from '../services/overlay/utilities';\nimport { scaleInVerBottom, scaleInVerTop } from '../animations/main';\nimport { KEYS } from '../core/utils';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxForOfSyncService } from '../directives/for-of/for_of.sync.service';\n\nconst DEFAULT_DATE_FORMAT = 'mediumDate';\nconst DEBOUNCE_TIME = 200;\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxResizeHandle]'\n})\nexport class IgxResizeHandleDirective implements AfterViewInit, OnDestroy {\n\n    /**\n     * @hidden\n     */\n    @Input('igxResizeHandle')\n    public column: IgxColumnComponent;\n\n    /**\n     * @hidden\n     */\n    private _dblClick = false;\n\n    /**\n     * @hidden\n     */\n    private destroy$ = new Subject<boolean>();\n\n    constructor(private zone: NgZone,\n               private element: ElementRef,\n               public colResizingService: IgxColumnResizingService) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        if (!this.column.columnGroup && this.column.resizable) {\n            this.zone.runOutsideAngular(() => {\n                fromEvent(this.element.nativeElement, 'mousedown').pipe(\n                    debounceTime(DEBOUNCE_TIME),\n                    takeUntil(this.destroy$)\n                ).subscribe((event: MouseEvent) => {\n\n                    if (this._dblClick) {\n                        this._dblClick = false;\n                        return;\n                    }\n\n                    if (event.button === 0) {\n                        this._onResizeAreaMouseDown(event);\n                        this.column.grid.resizeLine.resizer.onMousedown(event);\n                    }\n                });\n            });\n\n            fromEvent(this.element.nativeElement, 'mouseup').pipe(\n                debounceTime(DEBOUNCE_TIME),\n                takeUntil(this.destroy$)\n            ).subscribe(() => {\n                this.colResizingService.isColumnResizing = false;\n                this.colResizingService.showResizer = false;\n                this.column.grid.cdr.detectChanges();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseover')\n    public onMouseOver() {\n        this.colResizingService.resizeCursor = 'col-resize';\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('dblclick')\n    public onDoubleClick() {\n        this._dblClick = true;\n        this.colResizingService.column = this.column;\n        this.colResizingService.autosizeColumnOnDblClick();\n    }\n\n    /**\n     * @hidden\n     */\n    private _onResizeAreaMouseDown(event) {\n        this.colResizingService.column = this.column;\n        this.colResizingService.isColumnResizing = true;\n        this.colResizingService.startResizePos = event.clientX;\n\n        this.colResizingService.showResizer = true;\n        this.column.grid.cdr.detectChanges();\n    }\n}\n\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxResizer]'\n})\nexport class IgxColumnResizerDirective implements OnInit, OnDestroy {\n\n    @Input()\n    public restrictHResizeMin: number = Number.MIN_SAFE_INTEGER;\n\n    @Input()\n    public restrictHResizeMax: number = Number.MAX_SAFE_INTEGER;\n\n    @Output()\n    public resizeEnd = new Subject<any>();\n\n    @Output()\n    public resizeStart = new Subject<any>();\n\n    @Output()\n    public resize = new Subject<any>();\n\n    private _left;\n    private _destroy = new Subject<boolean>();\n\n    constructor(public element: ElementRef, @Inject(DOCUMENT) public document, public zone: NgZone) {\n\n        this.resizeStart.pipe(\n            map((event) => event.clientX),\n            takeUntil(this._destroy),\n            switchMap((offset) => this.resize.pipe(\n                map((event) => event.clientX - offset),\n                takeUntil(this.resizeEnd),\n                takeUntil(this._destroy)\n            ))\n        ).subscribe((pos) => {\n\n            const left = this._left + pos;\n\n            const min = this._left - this.restrictHResizeMin;\n            const max = this._left + this.restrictHResizeMax;\n\n            this.left = left < min ? min : left;\n\n            if (left > max) {\n                this.left = max;\n            }\n        });\n\n    }\n\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            fromEvent(this.document.defaultView, 'mousemove').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy)\n            ).subscribe((res) => this.onMousemove(res));\n\n            fromEvent(this.document.defaultView, 'mouseup').pipe(takeUntil(this._destroy))\n                .subscribe((res) => this.onMouseup(res));\n        });\n    }\n\n    ngOnDestroy() {\n        this._destroy.next(true);\n        this._destroy.complete();\n    }\n\n    public set left(val) {\n        requestAnimationFrame(() => this.element.nativeElement.style.left = val + 'px');\n    }\n\n    public set top(val) {\n        requestAnimationFrame(() => this.element.nativeElement.style.top = val + 'px');\n    }\n\n    onMouseup(event) {\n        this.resizeEnd.next(event);\n        this.resizeEnd.complete();\n    }\n\n    onMousedown(event) {\n        event.preventDefault();\n        const parent = this.element.nativeElement.parentElement.parentElement;\n\n        this.left = this._left = event.clientX - parent.getBoundingClientRect().left;\n        this.top = event.target.getBoundingClientRect().top - parent.getBoundingClientRect().top;\n\n        this.resizeStart.next(event);\n    }\n\n    onMousemove(event) {\n        event.preventDefault();\n        this.resize.next(event);\n    }\n}\n\n@Directive({\n    selector: '[igxFilterCellTemplate]'\n})\nexport class IgxFilterCellTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxCell]'\n})\nexport class IgxCellTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxHeader]'\n})\nexport class IgxCellHeaderTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxFooter]'\n})\nexport class IgxCellFooterTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxCellEditor]'\n})\nexport class IgxCellEditorTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n\n/**\n * @hidden\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class IgxColumnMovingService {\n    private _icon: any;\n    private _column: IgxColumnComponent;\n\n    public cancelDrop: boolean;\n    public isColumnMoving: boolean;\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n    set column(val: IgxColumnComponent) {\n        if (val) {\n            this._column = val;\n        }\n    }\n\n    get icon(): any {\n        return this._icon;\n    }\n    set icon(val: any) {\n        if (val) {\n            this._icon = val;\n        }\n    }\n}\n\n/**\n * @hidden\n */\nexport enum DropPosition {\n    BeforeDropTarget,\n    AfterDropTarget,\n    None\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxColumnMovingDrag]'\n})\nexport class IgxColumnMovingDragDirective extends IgxDragDirective implements OnDestroy {\n\n    @Input('igxColumnMovingDrag')\n    set data(val) {\n        this._column = val;\n    }\n\n    get column() {\n        return this._column;\n    }\n\n    get draggable(): boolean {\n        return this.column && (this.column.movable || (this.column.groupable && !this.column.columnGroup));\n    }\n\n    public get icon(): HTMLElement {\n        return this.cms.icon;\n    }\n\n    private subscription$: Subscription;\n    private _column: IgxColumnComponent;\n    private _ghostImageClass = 'igx-grid__drag-ghost-image';\n    private dragGhostImgIconClass = 'igx-grid__drag-ghost-image-icon';\n    private dragGhostImgIconGroupClass = 'igx-grid__drag-ghost-image-icon-group';\n\n    constructor(\n        _element: ElementRef,\n        _zone: NgZone,\n        _renderer: Renderer2,\n        _cdr: ChangeDetectorRef,\n        private cms: IgxColumnMovingService,\n    ) {\n        super(_cdr, _element, _zone, _renderer);\n    }\n\n    public ngOnDestroy() {\n        this._unsubscribe();\n    }\n\n    public onEscape(event) {\n        this.cms.cancelDrop = true;\n        this.onPointerUp(event);\n    }\n\n    public onPointerDown(event) {\n        if (!this.draggable || event.target.getAttribute('draggable') === 'false') {\n            return;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n\n        this._removeOnDestroy = false;\n        this.cms.column = this.column;\n        this.ghostImageClass = this._ghostImageClass;\n\n        super.onPointerDown(event);\n\n        this.cms.isColumnMoving = true;\n        this.column.grid.cdr.detectChanges();\n\n        const args = {\n            source: this.column\n        };\n        this.column.grid.onColumnMovingStart.emit(args);\n\n        this.subscription$ = fromEvent(this.column.grid.document.defaultView, 'keydown').subscribe((ev: KeyboardEvent) => {\n            if (ev.key === KEYS.ESCAPE || ev.key === KEYS.ESCAPE_IE) {\n                this.onEscape(ev);\n            }\n        });\n    }\n\n    public onPointerMove(event) {\n        event.preventDefault();\n        super.onPointerMove(event);\n\n        if (this._dragStarted && this.dragGhost && !this.column.grid.draggedColumn) {\n            this.column.grid.draggedColumn = this.column;\n            this.column.grid.cdr.detectChanges();\n        }\n\n        if (this.cms.isColumnMoving) {\n            const args = {\n                source: this.column,\n                cancel: false\n            };\n            this.column.grid.onColumnMoving.emit(args);\n\n            if (args.cancel) {\n                this.onEscape(event);\n            }\n        }\n    }\n\n    public onPointerUp(event) {\n        // Run it explicitly inside the zone because sometimes onPointerUp executes after the code below.\n        this.zone.run(() => {\n            super.onPointerUp(event);\n\n            this.cms.isColumnMoving = false;\n            this.column.grid.draggedColumn = null;\n            this.column.grid.cdr.detectChanges();\n        });\n\n        this._unsubscribe();\n    }\n\n    protected createDragGhost(event) {\n        super.createDragGhost(event);\n\n        let pageX, pageY;\n        if (this.pointerEventsEnabled || !this.touchEventsEnabled) {\n            pageX = event.pageX;\n            pageY = event.pageY;\n        } else {\n            pageX = event.touches[0].pageX;\n            pageY = event.touches[0].pageY;\n        }\n\n        this.dragGhost.style.height = null;\n        this.dragGhost.style.minWidth = null;\n        this.dragGhost.style.flexBasis = null;\n        this.dragGhost.style.position = null;\n\n        const icon = document.createElement('i');\n        const text = document.createTextNode('block');\n        icon.appendChild(text);\n\n        icon.classList.add('material-icons');\n        this.cms.icon = icon;\n\n        const hostElemLeft = this.dragGhostHost ? this.dragGhostHost.getBoundingClientRect().left : 0;\n        const hostElemTop = this.dragGhostHost ? this.dragGhostHost.getBoundingClientRect().top : 0;\n\n        if (!this.column.columnGroup) {\n            this.renderer.addClass(icon, this.dragGhostImgIconClass);\n\n            this.dragGhost.insertBefore(icon, this.dragGhost.firstElementChild);\n\n            this.left = this._dragStartX = pageX - ((this.dragGhost.getBoundingClientRect().width / 3) * 2) - hostElemLeft;\n            this.top = this._dragStartY = pageY - ((this.dragGhost.getBoundingClientRect().height / 3) * 2) - hostElemTop;\n        } else {\n            this.dragGhost.insertBefore(icon, this.dragGhost.childNodes[0]);\n\n            this.renderer.addClass(icon, this.dragGhostImgIconGroupClass);\n            this.dragGhost.children[0].style.paddingLeft = '0px';\n\n            this.left = this._dragStartX = pageX - ((this.dragGhost.getBoundingClientRect().width / 3) * 2) - hostElemLeft;\n            this.top = this._dragStartY = pageY - ((this.dragGhost.getBoundingClientRect().height / 3) * 2) - hostElemTop;\n        }\n    }\n\n    private _unsubscribe() {\n        if (this.subscription$) {\n            this.subscription$.unsubscribe();\n            this.subscription$ = null;\n        }\n    }\n}\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxColumnMovingDrop]'\n})\nexport class IgxColumnMovingDropDirective extends IgxDropDirective implements OnDestroy {\n    @Input('igxColumnMovingDrop')\n    set data(val: any) {\n        if (val instanceof IgxColumnComponent) {\n            this._column = val;\n        }\n\n        if (val instanceof IgxGridForOfDirective) {\n            this._hVirtDir = val;\n        }\n    }\n\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    get isDropTarget(): boolean {\n        return this._column && this._column.grid.hasMovableColumns && this.cms.column.movable &&\n            ((!this._column.pinned && this.cms.column.disablePinning) || !this.cms.column.disablePinning);\n    }\n\n    get horizontalScroll(): any {\n        if (this._hVirtDir) {\n            return this._hVirtDir;\n        }\n    }\n\n    private _dropPos: DropPosition;\n    private _dropIndicator: any = null;\n    private _lastDropIndicator: any = null;\n    private _column: IgxColumnComponent;\n    private _hVirtDir: IgxGridForOfDirective<any>;\n    private _dragLeave = new Subject<boolean>();\n    private _dropIndicatorClass = 'igx-grid__th-drop-indicator--active';\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private zone: NgZone, private cms: IgxColumnMovingService) {\n        super(elementRef, renderer, zone);\n    }\n\n    public ngOnDestroy() {\n        this._dragLeave.next(true);\n        this._dragLeave.complete();\n    }\n\n    public onDragOver(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.isDropTarget &&\n            this.cms.column !== this.column &&\n            this.cms.column.level === this.column.level &&\n            this.cms.column.parent === this.column.parent) {\n\n            if (this._lastDropIndicator) {\n                this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);\n            }\n\n            const clientRect = this.elementRef.nativeElement.getBoundingClientRect();\n            const pos = clientRect.left + clientRect.width / 2;\n\n            const parent = this.elementRef.nativeElement.parentElement;\n            if (event.detail.pageX < pos) {\n                this._dropPos = DropPosition.BeforeDropTarget;\n                this._lastDropIndicator = this._dropIndicator = parent.firstElementChild;\n            } else {\n                this._dropPos = DropPosition.AfterDropTarget;\n                this._lastDropIndicator = this._dropIndicator = parent.lastElementChild;\n            }\n\n            if (this.cms.icon.innerText !== 'block') {\n                this.renderer.addClass(this._dropIndicator, this._dropIndicatorClass);\n            }\n        }\n    }\n\n    public onDragEnter(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.column && this.cms.column.grid.id !== this.column.grid.id) {\n            this.cms.icon.innerText = 'block';\n            return;\n        }\n\n        if (this.isDropTarget &&\n            this.cms.column !== this.column &&\n            this.cms.column.level === this.column.level &&\n            this.cms.column.parent === this.column.parent) {\n\n                if (!this.column.pinned || (this.column.pinned && this.cms.column.pinned)) {\n                    this.cms.icon.innerText = 'swap_horiz';\n                }\n\n                if (!this.cms.column.pinned && this.column.pinned) {\n                    const nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);\n\n                    if (nextPinnedWidth <= this.column.grid.calcPinnedContainerMaxWidth) {\n                        this.cms.icon.innerText = 'lock';\n                    } else {\n                        this.cms.icon.innerText = 'block';\n                    }\n                }\n            } else {\n                this.cms.icon.innerText = 'block';\n            }\n\n            if (this.horizontalScroll) {\n                this.cms.icon.innerText = event.target.id === 'right' ? 'arrow_forward' : 'arrow_back';\n\n                interval(100).pipe(takeUntil(this._dragLeave)).subscribe(() => {\n                    this.cms.column.grid.wheelHandler();\n                    event.target.id === 'right' ? this.horizontalScroll.getHorizontalScroll().scrollLeft += 15 :\n                        this.horizontalScroll.getHorizontalScroll().scrollLeft -= 15;\n                });\n            }\n    }\n\n    public onDragLeave(event) {\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        this.cms.icon.innerText = 'block';\n\n        if (this._dropIndicator) {\n            this.renderer.removeClass(this._dropIndicator, this._dropIndicatorClass);\n        }\n\n        if (this.horizontalScroll) {\n            this._dragLeave.next(true);\n        }\n    }\n\n    public onDragDrop(event) {\n        event.preventDefault();\n        const drag = event.detail.owner;\n        if (!(drag instanceof IgxColumnMovingDragDirective)) {\n            return;\n        }\n\n        if (this.column && (this.cms.column.grid.id !== this.column.grid.id)) {\n            return;\n        }\n\n        if (this.horizontalScroll) {\n            this._dragLeave.next(true);\n        }\n\n        if (this.isDropTarget) {\n            const args = {\n                source: this.cms.column,\n                target: this.column\n            };\n\n            let nextPinnedWidth;\n            if (this.column.pinned && !this.cms.column.pinned) {\n                nextPinnedWidth = this.column.grid.getPinnedWidth(true) + parseFloat(this.cms.column.width);\n            }\n\n            if ((nextPinnedWidth && nextPinnedWidth > this.column.grid.calcPinnedContainerMaxWidth) ||\n                this.column.level !== this.cms.column.level ||\n                this.column.parent !== this.cms.column.parent ||\n                this.cms.cancelDrop) {\n                    this.cms.cancelDrop = false;\n                    this.column.grid.onColumnMovingEnd.emit(args);\n                    return;\n            }\n\n            this.column.grid.moveColumn(this.cms.column, this.column, this._dropPos);\n\n            this.column.grid.draggedColumn = null;\n            this.column.grid.cdr.detectChanges();\n        }\n    }\n}\n@Directive({\n    selector: '[igxGridBody]',\n    providers: [IgxForOfSyncService]\n})\nexport class IgxGridBodyDirective {}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'igxdate'\n})\nexport class IgxDatePipeComponent extends DatePipe implements PipeTransform {\n    constructor(@Inject(LOCALE_ID) locale: string) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(locale);\n    }\n    transform(value: any, locale: string): string {\n        if (value && value instanceof Date) {\n            if (locale) {\n                return super.transform(value, DEFAULT_DATE_FORMAT, undefined, locale);\n            } else {\n                return super.transform(value);\n            }\n        } else {\n            return value;\n        }\n    }\n}\n/**\n *@hidden\n */\n@Pipe({\n    name: 'igxdecimal'\n})\nexport class IgxDecimalPipeComponent extends DecimalPipe implements PipeTransform {\n    constructor(@Inject(LOCALE_ID) locale: string) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(locale);\n    }\n    transform(value: any, locale: string): string {\n        if (value && typeof value === 'number') {\n            if (locale) {\n                return super.transform(value, undefined, locale);\n            } else {\n                return super.transform(value);\n            }\n        } else {\n            return value;\n        }\n    }\n}\n\n/**\n * @hidden\n */\nexport interface ContainerPositionSettings extends PositionSettings {\n    container?: HTMLElement;\n}\n\n/**\n * @hidden\n */\nexport class ContainerPositioningStrategy extends ConnectedPositioningStrategy {\n    isTop = false;\n    isTopInitialPosition = null;\n    public settings: ContainerPositionSettings;\n    position(contentElement: HTMLElement, size: { width: number, height: number }, document?: Document, initialCall?: boolean): void {\n        const container = this.settings.container; // grid.tbody\n        const target = <HTMLElement>this.settings.target; // current grid.row\n\n        // Position of the overlay depends on the available space in the grid.\n        // If the bottom space is not enough then the the row overlay will show at the top of the row.\n        // Once shown, either top or bottom, then this position stays until the overlay is closed (isTopInitialPosition property),\n        // which means that when scrolling then overlay may hide, while the row is still visible (UX requirement).\n        this.isTop = this.isTopInitialPosition !== null ?\n            this.isTopInitialPosition :\n            container.getBoundingClientRect().bottom <\n                target.getBoundingClientRect().bottom + contentElement.getBoundingClientRect().height;\n\n        // Set width of the row editing overlay to equal row width, otherwise it fits 100% of the grid.\n        contentElement.style.width = target.clientWidth + 'px';\n        this.settings.verticalStartPoint = this.settings.verticalDirection = this.isTop ? VerticalAlignment.Top : VerticalAlignment.Bottom;\n        this.settings.openAnimation = this.isTop ? scaleInVerBottom : scaleInVerTop;\n\n        super.position(contentElement, { width: target.clientWidth, height: target.clientHeight }, document, initialCall);\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Input,\n    QueryList,\n    TemplateRef,\n    forwardRef,\n    AfterViewInit\n} from '@angular/core';\nimport { DataType } from '../data-operations/data-util';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxDateSummaryOperand, IgxNumberSummaryOperand, IgxSummaryOperand } from './summaries/grid-summary';\nimport { IgxRowComponent } from './row.component';\nimport {\n    IgxCellEditorTemplateDirective,\n    IgxCellHeaderTemplateDirective,\n    IgxCellTemplateDirective,\n    IgxFilterCellTemplateDirective\n} from './grid.common';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { DefaultSortingStrategy, ISortingStrategy } from '../data-operations/sorting-strategy';\nimport { getNodeSizeViaRange, flatten } from '../core/utils';\nimport {\n    IgxBooleanFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxDateFilteringOperand,\n    IgxStringFilteringOperand,\n    IgxFilteringOperand\n} from '../data-operations/filtering-condition';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { MRLColumnSizeInfo, MRLResizeColumnInfo } from '../data-operations/multi-row-layout.interfaces';\nimport { DisplayDensity } from '../core/displayDensity';\n\n/**\n * **Ignite UI for Angular Column** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html#columns-configuration)\n *\n * The Ignite UI Column is used within an `igx-grid` element to define what data the column will show. Features such as sorting,\n * filtering & editing are enabled at the column level.  You can also provide a template containing custom content inside\n * the column using `ng-template` which will be used for all cells within the column.\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-column',\n    template: ``\n})\nexport class IgxColumnComponent implements AfterContentInit {\n    private _filterable = true;\n    private _groupable = false;\n    /**\n     * Sets/gets the `field` value.\n     * ```typescript\n     * let columnField = this.column.field;\n     * ```\n     * ```html\n     * <igx-column [field] = \"'ID'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public field: string;\n    /**\n     * Sets/gets the `header` value.\n     * ```typescript\n     * let columnHeader = this.column.header;\n     * ```\n     * ```html\n     * <igx-column [header] = \"'ID'\"></igx-column>\n     * ```\n     *\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public header = '';\n    /**\n     * Sets/gets whether the column is sortable.\n     * Default value is `false`.\n     * ```typescript\n     * let isSortable = this.column.sortable;\n     * ```\n     * ```html\n     * <igx-column [sortable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public sortable = false;\n    /**\n     * Sets/gets whether the column is groupable.\n     * Default value is `false`.\n     * ```typescript\n     * let isGroupable = this.column.groupable;\n     * ```\n     * ```html\n     * <igx-column [groupable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get groupable() {\n        return this._groupable;\n    }\n    public set groupable(val) {\n        this._groupable = val;\n        if (this.grid) {\n            this.grid.cdr.markForCheck();\n        }\n    }\n    /**\n     * Gets whether the column is editable.\n     * Default value is `false`.\n     * ```typescript\n     * let isEditable = this.column.editable;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    get editable(): boolean {\n        // Updating the primary key when grid has transactions (incl. row edit)\n        // should not be allowed, as that can corrupt transaction state.\n        const rowEditable = this.grid && this.grid.rowEditable;\n        const hasTransactions = this.grid && this.grid.transactions.enabled;\n\n        if (this.isPrimaryColumn && (rowEditable || hasTransactions)) {\n            return false;\n        }\n\n        if (this._editable !== undefined) {\n            return this._editable;\n        } else {\n            return rowEditable;\n        }\n    }\n    /**\n     * Sets whether the column is editable.\n     * ```typescript\n     * this.column.editable = true;\n     * ```\n     * ```html\n     * <igx-column [editable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set editable(editable: boolean) {\n        this._editable = editable;\n    }\n    /**\n     * Sets/gets whether the column is filterable.\n     * Default value is `true`.\n     * ```typescript\n     * let isFilterable = this.column.filterable;\n     * ```\n     * ```html\n     * <igx-column [filterable] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get filterable() {\n        return this._filterable;\n    }\n    public set filterable(val) {\n        this._filterable = val;\n        if (this.grid) {\n            this.grid.cdr.markForCheck();\n        }\n    }\n    /**\n     * Sets/gets whether the column is resizable.\n     * Default value is `false`.\n     * ```typescript\n     * let isResizable = this.column.resizable;\n     * ```\n     * ```html\n     * <igx-column [resizable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public resizable = false;\n    /**\n     * Gets a value indicating whether the summary for the column is enabled.\n     * ```typescript\n     * let hasSummary = this.column.hasSummary;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    get hasSummary() {\n        return this._hasSummary;\n    }\n    /**\n     * Sets a value indicating whether the summary for the column is enabled.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [hasSummary] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set hasSummary(value) {\n        this._hasSummary = value;\n\n        if (this.grid) {\n            this.grid.summaryService.recalculateSummaries();\n        }\n    }\n    /**\n     * Gets whether the column is hidden.\n     * ```typescript\n     * let isHidden = this.column.hidden;\n     * ```\n     *@memberof IgxColumnComponent\n     */\n    @Input()\n    get hidden(): boolean {\n        return this._hidden;\n    }\n    /**\n     * Sets the column hidden property.\n     * Default value is `false`.\n     * ```typescript\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set hidden(value: boolean) {\n        if (this._hidden !== value) {\n            this._hidden = value;\n            if (this.grid) {\n                this.grid.resetCaches();\n                this.grid.endEdit(false);\n            }\n            // TODO: Simplify\n            this.check();\n            if (this.grid) {\n                this.grid.refreshSearch(true);\n                this.grid.summaryService.resetSummaryHeight();\n                this.grid.reflow();\n                this.grid.filteringService.refreshExpressions();\n            }\n\n            if (this.columnLayoutChild && this.parent.hidden !== value) {\n                this.parent.hidden = value;\n            }\n        }\n    }\n    /**\n     * Gets whether the hiding is disabled.\n     * ```typescript\n     * let isHidingDisabled =  this.column.disableHiding;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    get disableHiding(): boolean {\n        return this._disableHiding;\n    }\n    /**\n     * Enables/disables hiding for the column.\n     * Default value is `false`.\n     * ```typescript\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set disableHiding(value: boolean) {\n        if (this._disableHiding !== value) {\n            this._disableHiding = value;\n            this.check();\n        }\n    }\n    /**\n     * Gets whether the pinning is disabled.\n     * ```typescript\n     * let isPinningDisabled =  this.column.disablePinning;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    get disablePinning(): boolean {\n        return this._disablePinning;\n    }\n    /**\n     * Enables/disables pinning for the column.\n     * Default value is `false`.\n     * ```typescript\n     * <igx-column [pinned] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set disablePinning(value: boolean) {\n        if (this._disablePinning !== value) {\n            this._disablePinning = value;\n            this.check();\n        }\n    }\n    /**\n     * Sets/gets whether the column is movable.\n     * Default value is `false`.\n     * ```typescript\n     * let isMovable = this.column.movable;\n     * ```\n     * ```html\n     * <igx-column [movable] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public movable = false;\n    /**\n     * Gets the `width` of the column.\n     * ```typescript\n     * let columnWidth = this.column.width;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get width(): string {\n        return this.widthSetByUser ? this._width : this.defaultWidth;\n    }\n    /**\n     * Sets the `width` of the column.\n     * ```html\n     * <igx-column [width] = \"'25%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set width(value: string) {\n        if (value) {\n            this._calcWidth = null;\n            this.calcPixelWidth = NaN;\n            this.widthSetByUser = true;\n            this._width = value;\n            if (this.grid) {\n                this.cacheCalcWidth();\n                (this.grid as any)._derivePossibleWidth();\n                this.grid.cdr.markForCheck();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public get calcWidth(): any {\n        return this.getCalcWidth();\n    }\n\n    private _calcWidth = null;\n    public calcPixelWidth: number;\n\n    /**\n     * Sets/gets the maximum `width` of the column.\n     * ```typescript\n     * let columnMaxWidth = this.column.width;\n     * ```\n     * ```html\n     * <igx-column [maxWidth] = \"'75%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public maxWidth: string;\n    /**\n     * Sets/gets the minimum `width` of the column.\n     * Default value is `88`;\n     * ```typescript\n     * let columnMinWidth = this.column.minWidth;\n     * ```\n     * ```html\n     * <igx-column [minWidth] = \"'15%'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public set minWidth(value: string) {\n        const minVal = parseFloat(value);\n        if (Number.isNaN(minVal)) { return; }\n        this._defaultMinWidth = value;\n\n    }\n    public get minWidth(): string {\n        return !this._defaultMinWidth ? this.defaultMinWidth : this._defaultMinWidth;\n    }\n    /**\n     * Sets/gets the class selector of the column header.\n     * ```typescript\n     * let columnHeaderClass = this.column.headerClasses;\n     * ```\n     * ```html\n     * <igx-column [headerClasses] = \"'column-header'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public headerClasses = '';\n\n    /**\n     * Sets/gets the class selector of the column group header.\n     * ```typescript\n     * let columnHeaderClass = this.column.headerGroupClasses;\n     * ```\n     * ```html\n     * <igx-column [headerGroupClasses] = \"'column-group-header'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public headerGroupClasses = '';\n    /**\n     * Sets a conditional class selector of the column cells.\n     * Accepts an object literal, containing key-value pairs,\n     * where the key is the name of the CSS class, while the\n     * value is either a callback function that returns a boolean,\n     * or boolean, like so:\n     * ```typescript\n     * callback = (rowData, columnKey) => { return rowData[columnKey] > 6; }\n     * cellClasses = { 'className' : this.callback };\n     * ```\n     * ```html\n     * <igx-column [cellClasses] = \"cellClasses\"></igx-column>\n     * <igx-column [cellClasses] = \"{'class1' : true }\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public cellClasses: any;\n    /**\n     * Gets the column index.\n     * ```typescript\n     * let columnIndex = this.column.index;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get index(): number {\n        return this.grid.columns.indexOf(this);\n    }\n    /**\n     * When autogenerating columns, the formatter is used to format the display of the column data\n     * without modifying the underlying bound values.\n     *\n     * In this example, we check to see if the column name is Salary, and then provide a method as the column formatter\n     * to format the value into a currency string.\n     *\n     * ```typescript\n     * onColumnInit(column: IgxColumnComponent) {\n     *   if (column.field == \"Salary\") {\n     *     column.formatter = (salary => this.format(salary));\n     *   }\n     * }\n     *\n     * format(value: number) : string {\n     *   return formatCurrency(value, \"en-us\", \"$\");\n     * }\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    formatter: (value: any) => any;\n    /**\n     * Sets/gets whether the column filtering should be case sensitive.\n     * Default value is `true`.\n     * ```typescript\n     * let filteringIgnoreCase = this.column.filteringIgnoreCase;\n     * ```\n     * ```html\n     * <igx-column [filteringIgnoreCase] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public filteringIgnoreCase = true;\n    /**\n     * Sets/gets whether the column sorting should be case sensitive.\n     * Default value is `true`.\n     * ```typescript\n     * let sortingIgnoreCase = this.column.sortingIgnoreCase;\n     * ```\n     * ```html\n     * <igx-column [sortingIgnoreCase] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public sortingIgnoreCase = true;\n    /**\n     * Sets/gets the data type of the column values.\n     * Default value is `string`.\n     * ```typescript\n     * let columnDataType = this.column.dataType;\n     * ```\n     * ```html\n     * <igx-column [dataType] = \"'number'\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public dataType: DataType = DataType.String;\n    /**\n     * Gets whether the column is `pinned`.\n     * ```typescript\n     * let isPinned = this.column.pinned;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get pinned(): boolean {\n        return this._pinned;\n    }\n    /**\n     * Sets whether the column is pinned.\n     * Default value is `false`.\n     * ```html\n     * <igx-column [pinned] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set pinned(value: boolean) {\n        if (this._pinned !== value) {\n            if (this.grid && this.width && !isNaN(parseInt(this.width, 10))) {\n                value ? this.pin() : this.unpin();\n                return;\n            }\n            /* No grid/width available at initialization. `initPinning` in the grid\n               will re-init the group (if present)\n            */\n            this._pinned = value;\n        }\n    }\n    /**\n     * @deprecated\n     * Gets/Sets the `id` of the `igx-grid`.\n     * ```typescript\n     * let columnGridId = this.column.gridID;\n     * ```\n     * ```typescript\n     * this.column.gridID = 'grid-1';\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @DeprecateProperty(`The property is deprecated. Please, use \\`column.grid.id\\` instead.`)\n    public gridID: string;\n    /**\n     * Gets the column `summaries`.\n     * ```typescript\n     * let columnSummaries = this.column.summaries;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get summaries(): any {\n        return this._summaries;\n    }\n    /**\n     * Sets the column `summaries`.\n     * ```typescript\n     * this.column.summaries = IgxNumberSummaryOperand;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set summaries(classRef: any) {\n        this._summaries = new classRef();\n\n        if (this.grid) {\n            this.grid.summaryService.removeSummariesCachePerColumn(this.field);\n            (this.grid as any)._summaryPipeTrigger++;\n            this.grid.summaryService.recalculateSummaries();\n        }\n    }\n    /**\n     * Sets/gets whether the column is `searchable`.\n     * Default value is `true`.\n     * ```typescript\n     * let isSearchable =  this.column.searchable';\n     * ```\n     * ```html\n     *  <igx-column [searchable] = \"false\"></igx-column>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public searchable = true;\n    /**\n     * Gets the column `filters`.\n     * ```typescript\n     * let columnFilters = this.column.filters'\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get filters(): IgxFilteringOperand {\n        return this._filters;\n    }\n    /**\n     * Sets the column `filters`.\n     * ```typescript\n     * this.column.filters = IgxBooleanFilteringOperand.instance().\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set filters(instance: IgxFilteringOperand) {\n        this._filters = instance;\n    }\n    /**\n     * Gets the column `sortStrategy`.\n     * ```typescript\n     * let sortStrategy = this.column.sortStrategy'\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public get sortStrategy(): ISortingStrategy {\n        return this._sortStrategy;\n    }\n    /**\n     * Sets the column `sortStrategy`.\n     * ```typescript\n     * this.column.sortStrategy = new CustomSortingStrategy().\n     *\n     * class CustomSortingStrategy extends SortingStrategy {\n     * ...\n     * }\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set sortStrategy(classRef: ISortingStrategy) {\n        this._sortStrategy = classRef;\n    }\n    /**\n    * Gets the function that compares values for grouping.\n    * ```typescript\n    * let groupingComparer = this.column.groupingComparer'\n    * ```\n    * @memberof IgxColumnComponent\n    */\n    @Input()\n    public get groupingComparer(): (a: any, b: any) => number {\n        return this._groupingComparer;\n    }\n    /**\n     * Sets a custom function to compare values for grouping.\n     * Subsequent values in the sorted data that the function returns 0 for are grouped.\n     * ```typescript\n     * this.column.groupingComparer = (a: any, b: any) => { return a === b ? 0 : -1; }\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public set groupingComparer(funcRef: (a: any, b: any) => number) {\n        this._groupingComparer = funcRef;\n    }\n    /**\n     * Gets the default minimum `width` of the column.\n     * ```typescript\n     * let defaultMinWidth =  this.column.defaultMinWidth;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get defaultMinWidth(): string {\n        if (!this.grid) { return '80'; }\n        switch (this.grid.displayDensity) {\n            case DisplayDensity.cosy:\n                return '64';\n            case DisplayDensity.compact:\n                return '56';\n            default:\n                return '80';\n        }\n    }\n    /**\n     * The reference to the `igx-grid` owner.\n     * ```typescript\n     * let gridComponent = this.column.grid;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public grid: IgxGridBaseComponent;\n    /**\n     * Returns a reference to the `bodyTemplate`.\n     * ```typescript\n     * let bodyTemplate = this.column.bodyTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input('cellTemplate')\n    get bodyTemplate(): TemplateRef<any> {\n        return this._bodyTemplate;\n    }\n    /**\n     * Sets the body template.\n     * ```html\n     * <ng-template #bodyTemplate igxCell let-val>\n     *    <div style = \"background-color: yellowgreen\" (click) = \"changeColor(val)\">\n     *       <span> {{val}} </span>\n     *    </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'bodyTemplate'\", {read: TemplateRef })\n     * public bodyTemplate: TemplateRef<any>;\n     * this.column.bodyTemplate = this.bodyTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set bodyTemplate(template: TemplateRef<any>) {\n        this._bodyTemplate = template;\n        if (this.grid) {\n            this.grid.cdr.markForCheck();\n        }\n    }\n    /**\n     * Returns a reference to the header template.\n     * ```typescript\n     * let headerTemplate = this.column.headerTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    get headerTemplate(): TemplateRef<any> {\n        return this._headerTemplate;\n    }\n    /**\n     * Sets the header template.\n     * Note that the column header height is fixed and any content bigger than it will be cut off.\n     * ```html\n     * <ng-template #headerTemplate>\n     *   <div style = \"background-color:black\" (click) = \"changeColor(val)\">\n     *       <span style=\"color:red\" >{{column.field}}</span>\n     *   </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'headerTemplate'\", {read: TemplateRef })\n     * public headerTemplate: TemplateRef<any>;\n     * this.column.headerTemplate = this.headerTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set headerTemplate(template: TemplateRef<any>) {\n        this._headerTemplate = template;\n        if (this.grid) {\n            this.grid.cdr.markForCheck();\n        }\n    }\n    /**\n     * Returns a reference to the inline editor template.\n     * ```typescript\n     * let inlineEditorTemplate = this.column.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input('cellEditorTemplate')\n    get inlineEditorTemplate(): TemplateRef<any> {\n        return this._inlineEditorTemplate;\n    }\n    /**\n     * Sets the inline editor template.\n     * ```html\n     * <ng-template #inlineEditorTemplate igxCellEditor let-cell=\"cell\">\n     *     <input type=\"string\" [(ngModel)]=\"cell.value\"/>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'inlineEditorTemplate'\", {read: TemplateRef })\n     * public inlineEditorTemplate: TemplateRef<any>;\n     * this.column.inlineEditorTemplate = this.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set inlineEditorTemplate(template: TemplateRef<any>) {\n        this._inlineEditorTemplate = template;\n        if (this.grid) {\n            this.grid.cdr.markForCheck();\n        }\n    }\n    /**\n     * Returns a reference to the `filterCellTemplate`.\n     * ```typescript\n     * let filterCellTemplate = this.column.filterCellTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input('filterCellTemplate')\n    get filterCellTemplate(): TemplateRef<any> {\n        return this._filterCellTemplate;\n    }\n    /**\n     * Sets the quick filter template.\n     * ```html\n     * <ng-template #filterCellTemplate IgxFilterCellTemplate let-column=\"column\">\n     *    <input (input)=\"onInput()\">\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'filterCellTemplate'\", {read: TemplateRef })\n     * public filterCellTemplate: TemplateRef<any>;\n     * this.column.filterCellTemplate = this.filterCellTemplate;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    set filterCellTemplate(template: TemplateRef<any>) {\n        this._filterCellTemplate = template;\n    }\n    /**\n     * Gets the cells of the column.\n     * ```typescript\n     * let columnCells =  this.column.cells;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get cells(): IgxGridCellComponent[] {\n        return this.grid.rowList.filter((row) => row instanceof IgxRowComponent)\n            .map((row) => {\n                if (row.cells) {\n                    return row.cells.filter((cell) => cell.columnIndex === this.index);\n                }\n            }).reduce((a, b) => a.concat(b), []);\n    }\n    /**\n     * Gets the column visible index.\n     * If the column is not visible, returns `-1`.\n     * ```typescript\n     * let visibleColumnIndex =  this.column.visibleIndex;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get visibleIndex(): number {\n        if (!isNaN(this._vIndex)) {\n            return this._vIndex;\n        }\n        const unpinnedColumns = this.grid.unpinnedColumns.filter(c => !c.columnGroup);\n        const pinnedColumns = this.grid.pinnedColumns.filter(c => !c.columnGroup);\n        let col = this;\n        let vIndex = -1;\n\n        if (this.columnGroup) {\n            col = this.allChildren.filter(c => !c.columnGroup)[0] as any;\n        }\n        if (this.columnLayoutChild) {\n            return this.parent.childrenVisibleIndexes.find(x => x.column === this).index;\n        }\n\n        if (!this.pinned) {\n            const indexInCollection = unpinnedColumns.indexOf(col);\n            vIndex = indexInCollection === -1 ? -1 : pinnedColumns.length + indexInCollection;\n        } else {\n            vIndex = pinnedColumns.indexOf(col);\n        }\n        this._vIndex = vIndex;\n        return vIndex;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnGroup`.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnGroup() {\n        return false;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnLayout` for multi-row layout.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnLayout() {\n        return false;\n    }\n\n     /**\n     * Returns a boolean indicating if the column is a child of a `ColumnLayout` for multi-row layout.\n     * ```typescript\n     * let columnLayoutChild =  this.column.columnLayoutChild;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnLayoutChild() {\n        return this.parent && this.parent.columnLayout;\n    }\n\n    /**\n     * Returns the children columns collection.\n     * Returns an empty array if the column does not contain children columns.\n     * ```typescript\n     * let childrenColumns =  this.column.allChildren;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get allChildren(): IgxColumnComponent[] {\n        return [];\n    }\n    /**\n     * Returns the level of the column in a column group.\n     * Returns `0` if the column doesn't have a `parent`.\n     * ```typescript\n     * let columnLevel =  this.column.level;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get level() {\n        let ptr = this.parent;\n        let lvl = 0;\n\n        while (ptr) {\n            lvl++;\n            ptr = ptr.parent;\n        }\n        return lvl;\n    }\n\n    get isLastPinned(): boolean {\n        return this.grid.pinnedColumns[this.grid.pinnedColumns.length - 1] === this;\n    }\n    get gridRowSpan(): number {\n        return this.rowEnd && this.rowStart ? this.rowEnd - this.rowStart : 1;\n    }\n    get gridColumnSpan(): number {\n        return this.colEnd && this.colStart ? this.colEnd - this.colStart : 1;\n    }\n\n    /**\n     * Row index where the current field should end.\n     * The amount of rows between rowStart and rowEnd will determine the amount of spanning rows to that field\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [rowEnd]=\"2\" [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public rowEnd: number;\n\n    /**\n     * Column index where the current field should end.\n     * The amount of columns between colStart and colEnd will determine the amount of spanning columns to that field\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [colEnd]=\"3\" [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input()\n    public colEnd: number;\n\n    /**\n     * Row index from which the field is starting.\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [rowStart]=\"1\" [colStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input() rowStart: number;\n\n    /**\n     * Column index from which the field is starting.\n     * ```html\n     * <igx-column-layout>\n     *   <igx-column [colStart]=\"1\" [rowStart]=\"1\"></igx-column>\n     * </igx-column-layout>\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    @Input() colStart: number;\n\n    /**\n     * hidden\n     */\n    public defaultWidth: string;\n\n    /**\n     * hidden\n     */\n    public widthSetByUser: boolean;\n\n    /**\n     * Returns the filteringExpressionsTree of the column.\n     * ```typescript\n     * let tree =  this.column.filteringExpressionsTree;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get filteringExpressionsTree(): FilteringExpressionsTree {\n        return this.grid.filteringExpressionsTree.find(this.field) as FilteringExpressionsTree;\n    }\n    /**\n     * Sets/gets the parent column.\n     * ```typescript\n     * let parentColumn = this.column.parent;\n     * ```\n     * ```typescript\n     * this.column.parent = higherLevelColumn;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    parent = null;\n    /**\n     * Sets/gets the children columns.\n     * ```typescript\n     * let columnChildren = this.column.children;\n     * ```\n     * ```typescript\n     * this.column.children = childrenColumns;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    children: QueryList<IgxColumnComponent>;\n    /**\n     *@hidden\n     */\n    protected _unpinnedIndex;\n    /**\n     *@hidden\n     */\n    protected _pinned = false;\n    /**\n     *@hidden\n     */\n    protected _bodyTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _headerTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _inlineEditorTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _filterCellTemplate: TemplateRef<any>;\n    /**\n     *@hidden\n     */\n    protected _summaries = null;\n    /**\n     *@hidden\n     */\n    protected _filters = null;\n    /**\n     *@hidden\n     */\n    protected _sortStrategy: ISortingStrategy = DefaultSortingStrategy.instance();\n    /**\n     *@hidden\n     */\n    protected _groupingComparer: (a: any, b: any) => number;\n    /**\n     *@hidden\n     */\n    protected _hidden = false;\n    /**\n     *@hidden\n     */\n    protected _index: number;\n    /**\n     *@hidden\n     */\n    protected _disableHiding = false;\n    /**\n     *@hidden\n     */\n    protected _disablePinning = false;\n    /**\n     *@hidden\n     */\n    protected _width: string;\n    /**\n     *@hidden\n     */\n    protected _defaultMinWidth = '';\n    /**\n     *@hidden\n     */\n    protected _hasSummary = false;\n    /**\n     * @hidden\n     */\n    protected _editable: boolean;\n    /**\n     * @hidden\n     */\n    protected get isPrimaryColumn(): boolean {\n        return this.field !== undefined && this.grid !== undefined && this.field === this.grid.primaryKey;\n    }\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellTemplateDirective, { read: IgxCellTemplateDirective, static: true })\n    protected cellTemplate: IgxCellTemplateDirective;\n    /**\n     *@hidden\n     */\n    @ContentChildren(IgxCellHeaderTemplateDirective, { read: IgxCellHeaderTemplateDirective, descendants: false })\n    protected headTemplate: QueryList<IgxCellHeaderTemplateDirective>;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxCellEditorTemplateDirective, { read: IgxCellEditorTemplateDirective, static: true })\n    protected editorTemplate: IgxCellEditorTemplateDirective;\n\n    protected _vIndex = NaN;\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxFilterCellTemplateDirective, { read: IgxFilterCellTemplateDirective, static: true })\n    public filterCellTemplateDirective: IgxFilterCellTemplateDirective;\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>, public cdr: ChangeDetectorRef) { }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCaches() {\n        this._vIndex = NaN;\n        if (this.grid) {\n            this.cacheCalcWidth();\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.cellTemplate) {\n            this._bodyTemplate = this.cellTemplate.template;\n        }\n        if (this.headTemplate && this.headTemplate.length) {\n            this._headerTemplate = this.headTemplate.toArray()[0].template;\n        }\n        if (this.editorTemplate) {\n            this._inlineEditorTemplate = this.editorTemplate.template;\n        }\n        if (this.filterCellTemplateDirective) {\n            this._filterCellTemplate = this.filterCellTemplateDirective.template;\n        }\n        if (!this.summaries) {\n            switch (this.dataType) {\n                case DataType.String:\n                case DataType.Boolean:\n                    this.summaries = IgxSummaryOperand;\n                    break;\n                case DataType.Number:\n                    this.summaries = IgxNumberSummaryOperand;\n                    break;\n                case DataType.Date:\n                    this.summaries = IgxDateSummaryOperand;\n                    break;\n                default:\n                    this.summaries = IgxSummaryOperand;\n                    break;\n            }\n        }\n        if (!this.filters) {\n            switch (this.dataType) {\n                case DataType.Boolean:\n                    this.filters = IgxBooleanFilteringOperand.instance();\n                    break;\n                case DataType.Number:\n                    this.filters = IgxNumberFilteringOperand.instance();\n                    break;\n                case DataType.Date:\n                    this.filters = IgxDateFilteringOperand.instance();\n                    break;\n                case DataType.String:\n                default:\n                    this.filters = IgxStringFilteringOperand.instance();\n                    break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    getGridTemplate(isRow: boolean, isIE: boolean): string {\n        if (isRow) {\n            const rowsCount = this.grid.multiRowLayoutRowSize;\n            return isIE ?\n                `(1fr)[${rowsCount}]` :\n                `repeat(${rowsCount},1fr)`;\n        } else {\n            return this.getColumnSizesString(this.children);\n        }\n    }\n\n    public getInitialChildColumnSizes(children: QueryList<IgxColumnComponent>): Array<MRLColumnSizeInfo> {\n        const columnSizes: MRLColumnSizeInfo[] = [];\n        // find the smallest col spans\n        children.forEach(col => {\n            if (!col.colStart) {\n                return;\n            }\n            const newWidthSet =  col.widthSetByUser && columnSizes[col.colStart - 1] && !columnSizes[col.colStart - 1].widthSetByUser;\n            const newSpanSmaller = columnSizes[col.colStart - 1] && columnSizes[col.colStart - 1].colSpan > col.gridColumnSpan;\n            const bothWidthsSet = col.widthSetByUser && columnSizes[col.colStart - 1] && columnSizes[col.colStart - 1].widthSetByUser;\n            const bothWidthsNotSet = !col.widthSetByUser && columnSizes[col.colStart - 1] && !columnSizes[col.colStart - 1].widthSetByUser;\n\n            if (columnSizes[col.colStart - 1] === undefined) {\n                // If nothing is defined yet take any column at first\n                // We use colEnd to know where the column actually ends, because not always it starts where we have it set in columnSizes.\n                columnSizes[col.colStart - 1] = {\n                    ref: col,\n                    width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                    colSpan: col.gridColumnSpan,\n                    colEnd: col.colStart + col.gridColumnSpan,\n                    widthSetByUser: col.widthSetByUser\n                };\n            } else if (newWidthSet || (newSpanSmaller && ((bothWidthsSet) || (bothWidthsNotSet)))) {\n                // If a column is set already it should either not have width defined or have width with bigger span than the new one.\n\n                /**\n                 *  If replaced column has bigger span, we want to fill the remaining columns\n                 *  that the replacing column does not fill with the old one.\n                 **/\n                if (bothWidthsSet && newSpanSmaller) {\n                    // Start from where the new column set would end and apply the old column to the rest depending on how much it spans.\n                    // We have not yet replaced it so we can use it directly from the columnSizes collection.\n                    // This is where colEnd is used because the colStart of the old column is not actually i + 1.\n                    for (let i = col.colStart - 1 + col.gridColumnSpan; i < columnSizes[col.colStart - 1].colEnd - 1; i++) {\n                        if (!columnSizes[i] || !columnSizes[i].widthSetByUser) {\n                            columnSizes[i] = columnSizes[col.colStart - 1];\n                        } else {\n                            break;\n                        }\n                    }\n                }\n\n                // Replace the old column with the new one.\n                columnSizes[col.colStart - 1] = {\n                    ref: col,\n                    width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                    colSpan: col.gridColumnSpan,\n                    colEnd: col.colStart + col.gridColumnSpan,\n                    widthSetByUser: col.widthSetByUser\n                };\n            } else if (bothWidthsSet && columnSizes[col.colStart - 1].colSpan < col.gridColumnSpan) {\n                // If the column already in the columnSizes has smaller span, we still need to fill any empty places with the current col.\n                // Start from where the smaller column set would end and apply the bigger column to the rest depending on how much it spans.\n                // Since here we do not have it in columnSizes we set it as a new column keeping the same colSpan.\n                for (let i = col.colStart - 1 + columnSizes[col.colStart - 1].colSpan; i < col.colStart - 1 + col.gridColumnSpan; i++) {\n                    if (!columnSizes[i] || !columnSizes[i].widthSetByUser) {\n                        columnSizes[i] = {\n                            ref: col,\n                            width: col.widthSetByUser || this.grid.columnWidthSetByUser ? parseInt(col.calcWidth, 10) : null,\n                            colSpan: col.gridColumnSpan,\n                            colEnd: col.colStart + col.gridColumnSpan,\n                            widthSetByUser: col.widthSetByUser\n                        };\n                    } else {\n                        break;\n                    }\n                }\n            }\n        });\n\n        // Flatten columnSizes so there are not columns with colSpan > 1\n        for (let i = 0; i < columnSizes.length; i++) {\n            if (columnSizes[i] && columnSizes[i].colSpan > 1) {\n                let j = 1;\n\n                // Replace all empty places depending on how much the current column spans starting from next col.\n                for (; j < columnSizes[i].colSpan && i + j + 1 < columnSizes[i].colEnd; j++) {\n                    if (columnSizes[i + j] &&\n                        ((!columnSizes[i].width && columnSizes[i + j].width) ||\n                         (!columnSizes[i].width && !columnSizes[i + j].width && columnSizes[i + j].colSpan <= columnSizes[i].colSpan) ||\n                        (!!columnSizes[i + j].width && columnSizes[i + j].colSpan <= columnSizes[i].colSpan))) {\n                        // If we reach an already defined column that has width and the current doesn't have or\n                        // if the reached column has bigger colSpan we stop.\n                        break;\n                    } else {\n                        const width = columnSizes[i].widthSetByUser ?\n                            columnSizes[i].width / columnSizes[i].colSpan :\n                            columnSizes[i].width;\n                        columnSizes[i + j] = {\n                            ref: columnSizes[i].ref,\n                            width: width,\n                            colSpan: 1,\n                            colEnd: columnSizes[i].colEnd,\n                            widthSetByUser: columnSizes[i].widthSetByUser\n                        };\n                    }\n                }\n\n                // Update the current column width so it is divided between all columns it spans and set it to 1.\n                columnSizes[i].width = columnSizes[i].widthSetByUser ?\n                    columnSizes[i].width / columnSizes[i].colSpan :\n                    columnSizes[i].width;\n                columnSizes[i].colSpan = 1;\n\n                // Update the index based on how much we have replaced. Subtract 1 because we started from 1.\n                i += j - 1;\n            }\n        }\n\n        return columnSizes;\n    }\n\n    public getFilledChildColumnSizes(children: QueryList<IgxColumnComponent>): Array<string> {\n        const columnSizes = this.getInitialChildColumnSizes(children);\n\n        // fill the gaps if there are any\n        const result: string[] = [];\n        for (let i = 0; i < columnSizes.length; i++) {\n            if (columnSizes[i] && !!columnSizes[i].width) {\n                result.push(columnSizes[i].width + 'px');\n            } else {\n                result.push(parseInt(this.grid.getPossibleColumnWidth(), 10) + 'px');\n            }\n        }\n        return result;\n    }\n\n    protected getColumnSizesString(children: QueryList<IgxColumnComponent>): string {\n       const res = this.getFilledChildColumnSizes(children);\n       return res.join(' ');\n    }\n\n    public getResizableColUnderEnd(): MRLResizeColumnInfo[] {\n        if (this.columnLayout || !this.columnLayoutChild || this.columnGroup) {\n            return [{ target: this, spanUsed: 1 }];\n        }\n\n        const columnSized = this.getInitialChildColumnSizes(this.parent.children);\n        const targets: MRLResizeColumnInfo[] = [];\n        const colEnd = this.colEnd ? this.colEnd : this.colStart + 1;\n\n        for (let i = 0; i < columnSized.length; i++) {\n            if (this.colStart <= i + 1 && i + 1 < colEnd) {\n                targets.push({ target: columnSized[i].ref, spanUsed: 1});\n            }\n        }\n\n        const targetsSquashed: MRLResizeColumnInfo[] = [];\n        for (let j = 0; j < targets.length; j++) {\n            if (targetsSquashed.length && targetsSquashed[targetsSquashed.length - 1].target.field === targets[j].target.field) {\n                targetsSquashed[targetsSquashed.length - 1].spanUsed++;\n            } else {\n                targetsSquashed.push(targets[j]);\n            }\n        }\n\n        return targetsSquashed;\n    }\n\n    /**\n     * Pins the column at the provided index in the pinned area. Defaults to index `0` if not provided.\n     * Returns `true` if the column is successfully pinned. Returns `false` if the column cannot be pinned.\n     * Column cannot be pinned if:\n     * - Is already pinned\n     * - index argument is out of range\n     * - The pinned area exceeds 80% of the grid width\n     * ```typescript\n     * let success = this.column.pin();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public pin(index?: number): boolean {\n        // TODO: Probably should the return type of the old functions\n        // should be moved as a event parameter.\n        if (this.grid) {\n            this.grid.endEdit(true);\n        }\n        if (this._pinned) {\n            return false;\n        }\n\n        if (this.parent && !this.parent.pinned) {\n            return this.topLevelParent.pin(index);\n        }\n\n        const grid = (this.grid as any);\n        const hasIndex = index !== undefined;\n        if (hasIndex && (index < 0 || index >= grid.pinnedColumns.length)) {\n            return false;\n        }\n\n        const width = parseInt(this.width, 10);\n\n        if (!this.parent && (grid.getUnpinnedWidth(true) - width < grid.unpinnedAreaMinWidth)) {\n            return false;\n        }\n\n        this._pinned = true;\n        this._unpinnedIndex = grid._unpinnedColumns.indexOf(this);\n        index = index !== undefined ? index : grid._pinnedColumns.length;\n        const targetColumn = grid._pinnedColumns[index];\n        const args = { column: this, insertAtIndex: index, isPinned: true };\n        grid.onColumnPinning.emit(args);\n\n        if (grid._pinnedColumns.indexOf(this) === -1) {\n            grid._pinnedColumns.splice(args.insertAtIndex, 0, this);\n\n            if (grid._unpinnedColumns.indexOf(this) !== -1) {\n                grid._unpinnedColumns.splice(grid._unpinnedColumns.indexOf(this), 1);\n            }\n        }\n\n        if (hasIndex) {\n            grid._moveColumns(this, targetColumn);\n        }\n\n        if (this.columnGroup) {\n            this.allChildren.forEach(child => child.pin());\n            grid.reinitPinStates();\n        }\n\n        grid.resetCaches();\n        grid.cdr.detectChanges();\n        if (this.columnLayoutChild) {\n            this.grid.columns.filter(x => x.columnLayout).forEach( x => x.populateVisibleIndexes());\n        }\n        this.grid.filteringService.refreshExpressions();\n        this.grid.refreshSearch(true);\n        return true;\n    }\n    /**\n     * Unpins the column and place it at the provided index in the unpinned area. Defaults to index `0` if not provided.\n     * Returns `true` if the column is successfully unpinned. Returns `false` if the column cannot be unpinned.\n     * Column cannot be unpinned if:\n     * - Is already unpinned\n     * - index argument is out of range\n     * ```typescript\n     * let success = this.column.unpin();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public unpin(index?: number): boolean {\n        if (this.grid) {\n            this.grid.endEdit(true);\n        }\n        if (!this._pinned) {\n            return false;\n        }\n\n        if (this.parent && this.parent.pinned) {\n            return this.topLevelParent.unpin(index);\n        }\n\n        const grid = (this.grid as any);\n        const hasIndex = index !== undefined;\n        if (hasIndex && (index < 0 || index >= grid._unpinnedColumns.length)) {\n            return false;\n        }\n\n        index = (index !== undefined ? index :\n            this._unpinnedIndex !== undefined ? this._unpinnedIndex : this.index);\n        this._pinned = false;\n\n        const targetColumn = grid._unpinnedColumns[index];\n\n        grid._unpinnedColumns.splice(index, 0, this);\n        if (grid._pinnedColumns.indexOf(this) !== -1) {\n            grid._pinnedColumns.splice(grid._pinnedColumns.indexOf(this), 1);\n        }\n\n        if (hasIndex) {\n            grid._moveColumns(this, targetColumn);\n        }\n\n        if (this.columnGroup) {\n            this.allChildren.forEach(child => child.unpin());\n        }\n\n        grid.reinitPinStates();\n        grid.resetCaches();\n\n        const insertAtIndex = grid._unpinnedColumns.indexOf(this);\n        const args = { column: this, insertAtIndex, isPinned: false };\n        grid.onColumnPinning.emit(args);\n\n        grid.cdr.detectChanges();\n        if (this.columnLayoutChild) {\n            this.grid.columns.filter(x => x.columnLayout).forEach( x => x.populateVisibleIndexes());\n        }\n        this.grid.filteringService.refreshExpressions();\n        this.grid.refreshSearch(true);\n\n        return true;\n    }\n    /**\n     * Returns a reference to the top level parent column.\n     * ```typescript\n     * let topLevelParent =  this.column.topLevelParent;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get topLevelParent() {\n        let parent = this.parent;\n        while (parent && parent.parent) {\n            parent = parent.parent;\n        }\n        return parent;\n    }\n    /**\n     *@hidden\n     */\n    protected check() {\n        if (this.grid) {\n            this.grid.markForCheck();\n        }\n    }\n\n    /**\n     * Returns a reference to the header of the column.\n     * ```typescript\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * let headerCell = column.headerCell;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get headerCell(): IgxGridHeaderComponent {\n        return this.grid.headerCellList.find((header) => header.column === this);\n    }\n\n    /**\n    * Returns a reference to the filter cell of the column.\n    * ```typescript\n    * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n    * let filterell = column.filterell;\n    * ```\n    * @memberof IgxColumnComponent\n    */\n    get filterCell(): IgxGridFilteringCellComponent {\n        return this.grid.filterCellList.find((filterCell) => filterCell.column === this);\n    }\n\n    /**\n     * Returns a reference to the header group of the column.\n     * @memberof IgxColumnComponent\n     */\n    get headerGroup(): IgxGridHeaderGroupComponent {\n        return this.grid.headerGroupsList.find((headerGroup) => headerGroup.column === this);\n    }\n\n    /**\n     * Autosize the column to the longest currently visible cell value, including the header cell.\n     * ```typescript\n     * @ViewChild('grid') grid: IgxGridComponent;\n     *\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * column.autosize();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public autosize() {\n        if (!this.columnGroup) {\n\n            this.width = this.getLargestCellWidth();\n\n            this.grid.markForCheck();\n            this.grid.reflow();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getCalcWidth(): any {\n        if (this._calcWidth !== null && !isNaN(this.calcPixelWidth)) {\n            return this._calcWidth;\n        }\n        this.cacheCalcWidth();\n        return this._calcWidth;\n    }\n\n    /**\n     * @hidden\n     * Returns the size (in pixels) of the longest currently visible cell, including the header cell.\n     * ```typescript\n     * @ViewChild('grid') grid: IgxGridComponent;\n     *\n     * let column = this.grid.columnList.filter(c => c.field === 'ID')[0];\n     * let size = column.getLargestCellWidth();\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    public getLargestCellWidth(): string {\n        const range = this.grid.document.createRange();\n        const largest = new Map<number, number>();\n\n        if (this.cells.length > 0) {\n            let cellsContentWidths = [];\n            if (this.cells[0].nativeElement.children.length > 0) {\n                this.cells.forEach((cell) => cellsContentWidths.push(cell.calculateSizeToFit(range)));\n            } else {\n                cellsContentWidths = this.cells.map((cell) => getNodeSizeViaRange(range, cell.nativeElement));\n            }\n\n            const index = cellsContentWidths.indexOf(Math.max(...cellsContentWidths));\n            const cellStyle = this.grid.document.defaultView.getComputedStyle(this.cells[index].nativeElement);\n            const cellPadding = parseFloat(cellStyle.paddingLeft) + parseFloat(cellStyle.paddingRight) +\n                parseFloat(cellStyle.borderRightWidth);\n\n            largest.set(Math.max(...cellsContentWidths), cellPadding);\n        }\n\n        if (this.headerCell) {\n            let headerCell;\n            if (this.headerTemplate && this.headerCell.elementRef.nativeElement.children[0].children.length > 0) {\n                headerCell = Math.max(...Array.from(this.headerCell.elementRef.nativeElement.children[0].children)\n                    .map((child) => getNodeSizeViaRange(range, child)));\n            } else {\n                headerCell = getNodeSizeViaRange(range, this.headerCell.elementRef.nativeElement.children[0]);\n            }\n\n            if (this.sortable || this.filterable) {\n                headerCell += this.headerCell.elementRef.nativeElement.children[1].getBoundingClientRect().width;\n            }\n\n            const headerStyle = this.grid.document.defaultView.getComputedStyle(this.headerCell.elementRef.nativeElement);\n            const headerPadding = parseFloat(headerStyle.paddingLeft) + parseFloat(headerStyle.paddingRight) +\n                parseFloat(headerStyle.borderRightWidth);\n            largest.set(headerCell, headerPadding);\n\n        }\n\n        const largestCell = Math.max(...Array.from(largest.keys()));\n        const width = Math.ceil(largestCell + largest.get(largestCell));\n\n        if (Number.isNaN(width)) {\n            return this.width;\n        } else {\n            return width + 'px';\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public getCellWidth() {\n        const colWidth = this.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n        if (this.columnLayoutChild) {\n            return '';\n        }\n\n        if (colWidth && !isPercentageWidth) {\n\n            let cellWidth = colWidth;\n            if (typeof cellWidth !== 'string' || cellWidth.endsWith('px') === false) {\n                cellWidth += 'px';\n            }\n\n            return cellWidth;\n        } else {\n            return colWidth;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected cacheCalcWidth(): any {\n        const grid = this.gridAPI.grid;\n        const colWidth = this.width;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n        if (isPercentageWidth) {\n            this._calcWidth = parseInt(colWidth, 10) / 100 * (grid.calcWidth - grid.featureColumnsWidth);\n        } else if (!colWidth) {\n            // no width\n            this._calcWidth = this.defaultWidth || grid.getPossibleColumnWidth();\n        } else {\n            this._calcWidth = this.width;\n        }\n        this.calcPixelWidth = parseInt(this._calcWidth, 10);\n    }\n\n    /**\n     * @hidden\n     */\n    public populateVisibleIndexes() { }\n}\n\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: IgxColumnComponent, useExisting: forwardRef(() => IgxColumnGroupComponent) }],\n    selector: 'igx-column-group',\n    template: ``\n})\nexport class IgxColumnGroupComponent extends IgxColumnComponent implements AfterContentInit {\n\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent })\n    children = new QueryList<IgxColumnComponent>();\n    /**\n     * Gets the column group `summaries`.\n     * ```typescript\n     * let columnGroupSummaries = this.columnGroup.summaries;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public get summaries(): any {\n        return this._summaries;\n    }\n    /**\n     * Sets the column group `summaries`.\n     * ```typescript\n     * this.columnGroup.summaries = IgxNumberSummaryOperand;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    public set summaries(classRef: any) { }\n    /**\n     * Sets/gets whether the column group is `searchable`.\n     * Default value is `true`.\n     * ```typescript\n     * let isSearchable =  this.columnGroup.searchable;\n     * ```\n     * ```html\n     *  <igx-column-group [searchable] = \"false\"></igx-column-group>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public searchable = true;\n    /**\n     * Gets the column group `filters`.\n     * ```typescript\n     * let columnGroupFilters = this.columnGroup.filters;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    public get filters(): any {\n        return this._filters;\n    }\n    /**\n     * Sets the column group `filters`.\n     * ```typescript\n     * this.columnGroup.filters = IgxStringFilteringOperand;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    public set filters(classRef: any) { }\n\n    /**\n     * Returns a reference to the body template.\n     * ```typescript\n     * let bodyTemplate = this.columnGroup.bodyTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get bodyTemplate(): TemplateRef<any> {\n        return this._bodyTemplate;\n    }\n    /**\n     * @hidden\n     */\n    set bodyTemplate(template: TemplateRef<any>) { }\n\n    /**\n     * Returns a reference to the inline editor template.\n     * ```typescript\n     * let inlineEditorTemplate = this.columnGroup.inlineEditorTemplate;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get inlineEditorTemplate(): TemplateRef<any> {\n        return this._inlineEditorTemplate;\n    }\n    /**\n     * @hidden\n     */\n    set inlineEditorTemplate(template: TemplateRef<any>) { }\n    /**\n     * Gets the column group cells.\n     * ```typescript\n     * let columnCells = this.columnGroup.cells;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get cells(): IgxGridCellComponent[] {\n        return [];\n    }\n    /**\n     * Gets whether the column group is hidden.\n     * ```typescript\n     * let isHidden = this.columnGroup.hidden;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    get hidden() {\n        return this.allChildren.every(c => c.hidden);\n    }\n    /**\n     * Sets the column group hidden property.\n     * ```typescript\n     * <igx-column [hidden] = \"true\"></igx-column>\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.children.forEach(child => child.hidden = value);\n    }\n    /**\n     *@hidden\n     */\n    ngAfterContentInit() {\n        /*\n            @ContentChildren with descendants still returns the `parent`\n            component in the query list.\n        */\n        if (this.headTemplate && this.headTemplate.length) {\n            this._headerTemplate = this.headTemplate.toArray()[0].template;\n        }\n        this.children.reset(this.children.toArray().slice(1));\n        this.children.forEach(child => {\n            child.parent = this;\n        });\n    }\n    /**\n     * Returns the children columns collection.\n     * ```typescript\n     * let columns =  this.columnGroup.allChildren;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get allChildren(): IgxColumnComponent[] {\n        return flatten(this.children.toArray());\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnGroup`.\n     * ```typescript\n     * let isColumnGroup =  this.columnGroup.columnGroup\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get columnGroup() {\n        return true;\n    }\n    /**\n     * Returns a boolean indicating if the column is a `ColumnLayout` for multi-row layout.\n     * ```typescript\n     * let columnGroup =  this.column.columnGroup;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get columnLayout() {\n        return false;\n    }\n    /**\n     * Gets the width of the column group.\n     * ```typescript\n     * let columnGroupWidth = this.columnGroup.width;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get width() {\n        let isChildrenWidthInPercent = false, width;\n        width = `${this.children.reduce((acc, val) => {\n            if (val.hidden) {\n                return acc;\n            }\n            if (typeof val.width === 'string' && val.width.indexOf('%') !== -1) {\n                   isChildrenWidthInPercent = true;\n            }\n            return acc + parseInt(val.width, 10);\n        }, 0)}`;\n        return isChildrenWidthInPercent ? width + '%' : width;\n    }\n\n    set width(val) { }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>, public cdr: ChangeDetectorRef) {\n        // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(gridAPI, cdr);\n    }\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: IgxColumnComponent, useExisting: forwardRef(() => IgxColumnLayoutComponent) }],\n    selector: 'igx-column-layout',\n    template: ``\n})\nexport class IgxColumnLayoutComponent extends IgxColumnGroupComponent implements AfterContentInit {\n    public childrenVisibleIndexes = [];\n    /**\n     * Gets the width of the column layout.\n     * ```typescript\n     * let columnGroupWidth = this.columnGroup.width;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    get width(): any {\n        const width = this.getFilledChildColumnSizes(this.children).reduce((acc, val) => acc + parseInt(val, 10), 0);\n        return width;\n    }\n\n    set width(val: any) { }\n\n    get columnLayout() {\n        return true;\n    }\n\n    /**\n     * @hidden\n     */\n    public getCalcWidth(): any {\n        let borderWidth = 0;\n\n        if (this.headerGroup && this.headerGroup.hasLastPinnedChildColumn) {\n            const headerStyles = this.grid.document.defaultView.getComputedStyle(this.headerGroup.element.nativeElement.children[0]);\n            borderWidth = parseInt(headerStyles.borderRightWidth, 10);\n        }\n\n        return super.getCalcWidth() + borderWidth;\n    }\n\n    /**\n     * Gets the column visible index.\n     * If the column is not visible, returns `-1`.\n     * ```typescript\n     * let visibleColumnIndex =  this.column.visibleIndex;\n     * ```\n     * @memberof IgxColumnComponent\n     */\n    get visibleIndex(): number {\n        if (!isNaN(this._vIndex)) {\n            return this._vIndex;\n        }\n\n        const unpinnedColumns = this.grid.unpinnedColumns.filter(c => c.columnLayout && !c.hidden);\n        const pinnedColumns = this.grid.pinnedColumns.filter(c => c.columnLayout && !c.hidden);\n        let vIndex = -1;\n\n        if (!this.pinned) {\n            const indexInCollection = unpinnedColumns.indexOf(this);\n            vIndex = indexInCollection === -1 ? -1 : pinnedColumns.length + indexInCollection;\n        } else {\n            vIndex = pinnedColumns.indexOf(this);\n        }\n        this._vIndex = vIndex;\n        return vIndex;\n    }\n\n    /*\n     * Gets whether the column layout is hidden.\n     * ```typescript\n     * let isHidden = this.columnGroup.hidden;\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    @Input()\n    get hidden() {\n        return this._hidden;\n    }\n\n    /**\n     * Sets the column layout hidden property.\n     * ```typescript\n     * <igx-column-layout [hidden] = \"true\"></igx-column->\n     * ```\n     * @memberof IgxColumnGroupComponent\n     */\n    set hidden(value: boolean) {\n        this._hidden = value;\n        this.children.forEach(child => child.hidden = value);\n        if (this.grid && this.grid.columns && this.grid.columns.length > 0) {\n            // reset indexes in case columns are hidden/shown runtime\n            this.grid.columns.filter(x => x.columnGroup).forEach( x => x.populateVisibleIndexes());\n        }\n    }\n\n    /**\n     *@hidden\n    */\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n        if (!this.hidden) {\n            this.hidden = this.allChildren.some(x => x.hidden);\n        } else {\n            this.children.forEach(child => child.hidden = this.hidden);\n        }\n\n        this.children.forEach(child => {\n            child.disableHiding = true;\n            child.disablePinning = true;\n            child.movable = false;\n        });\n    }\n\n    /*\n     * Gets whether the group contains the last pinned child column of the column layout.\n     * ```typescript\n     * let columsHasLastPinned = this.columnLayout.hasLastPinnedChildColumn;\n     * ```\n     * @memberof IgxColumnLayoutComponent\n     */\n    get hasLastPinnedChildColumn() {\n        return this.children.some(child => child.isLastPinned);\n    }\n\n    /**\n     *@hidden\n    */\n    public populateVisibleIndexes() {\n        this.childrenVisibleIndexes = [];\n        const grid = this.gridAPI.grid;\n        const columns = grid && grid.pinnedColumns && grid.unpinnedColumns ? grid.pinnedColumns.concat(grid.unpinnedColumns) : [];\n        const orderedCols = columns\n        .filter(x => !x.columnGroup && !x.hidden)\n        .sort((a, b) => a.rowStart - b.rowStart || columns.indexOf(a.parent) - columns.indexOf(b.parent) || a.colStart - b.colStart);\n        this.children.forEach(child => {\n            const rs = child.rowStart || 1;\n            let vIndex = 0;\n            // filter out all cols with larger rowStart\n            const cols = orderedCols.filter(c =>\n                !c.columnGroup && (c.rowStart || 1) <= rs);\n            vIndex = cols.indexOf(child);\n            this.childrenVisibleIndexes.push({column: child, index: vIndex});\n        });\n    }\n\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    TemplateRef,\n    ViewChild,\n    NgZone,\n    OnInit,\n    OnDestroy,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxColumnComponent } from './column.component';\nimport { getNodeSizeViaRange, ROW_COLLAPSE_KEYS, ROW_EXPAND_KEYS, SUPPORTED_KEYS, NAVIGATION_KEYS, isIE, isLeftClick } from '../core/utils';\nimport { State } from '../services/index';\nimport { IgxGridBaseComponent, IGridEditEventArgs, IGridDataBindable } from './grid-base.component';\nimport { IgxGridSelectionService, ISelectionNode, IgxGridCRUDService } from '../core/grid-selection';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\n/**\n * Providing reference to `IgxGridCellComponent`:\n * ```typescript\n * @ViewChild('grid', { read: IgxGridComponent })\n *  public grid: IgxGridComponent;\n * ```\n * ```typescript\n *  let column = this.grid.columnList.first;\n * ```\n * ```typescript\n *  let cell = column.cells[0];\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-grid-cell',\n    templateUrl: './cell.component.html'\n})\nexport class IgxGridCellComponent implements OnInit, OnChanges, OnDestroy {\n    private _vIndex = -1;\n\n    /**\n     * Gets the column of the cell.\n     * ```typescript\n     *  let cellColumn = this.cell.column;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public column: IgxColumnComponent;\n\n    /**\n     * Gets the row of the cell.\n     * ```typescript\n     * let cellRow = this.cell.row;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public row: any;\n\n    /**\n     * Gets the data of the row of the cell.\n     * ```typescript\n     * let rowData = this.cell.rowData;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public rowData: any;\n\n    /**\n     * Sets/gets the template of the cell.\n     * ```html\n     * <ng-template #cellTemplate igxCell let-value>\n     *   <div style=\"font-style: oblique; color:blueviolet; background:red\">\n     *       <span>{{value}}</span>\n     *   </div>\n     * </ng-template>\n     * ```\n     * ```typescript\n     * @ViewChild('cellTemplate',{read: TemplateRef})\n     * cellTemplate: TemplateRef<any>;\n     * ```\n     * ```typescript\n     * this.cell.cellTemplate = this.cellTemplate;\n     * ```\n     * ```typescript\n     * let template =  this.cell.cellTemplate;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public cellTemplate: TemplateRef<any>;\n\n    /**\n     * Sets/gets the cell value.\n     * ```typescript\n     * this.cell.value = \"Cell Value\";\n     * ```\n     * ```typescript\n     * let cellValue = this.cell.value;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    public value: any;\n\n    /**\n     * Sets/gets the highlight class of the cell.\n     * Default value is `\"igx-highlight\"`.\n     * ```typescript\n     * let highlightClass = this.cell.highlightClass;\n     * ```\n     * ```typescript\n     * this.cell.highlightClass = 'igx-cell-highlight';\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public highlightClass = 'igx-highlight';\n\n    /**\n     * Sets/gets the active highlight class class of the cell.\n     * Default value is `\"igx-highlight__active\"`.\n     * ```typescript\n     * let activeHighlightClass = this.cell.activeHighlightClass;\n     * ```\n     * ```typescript\n     * this.cell.activeHighlightClass = 'igx-cell-highlight_active';\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public activeHighlightClass = 'igx-highlight__active';\n\n    /**\n     * Gets the cell formatter.\n     * ```typescript\n     * let cellForamatter = this.cell.formatter;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @Input()\n    formatter: (value: any) => any;\n\n    /**\n     * Gets the cell template context object.\n     * ```typescript\n     *  let context = this.cell.context();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get context(): any {\n        return {\n            $implicit: this.value,\n            cell: this\n        };\n    }\n\n    /**\n     * Gets the cell template.\n     * ```typescript\n     * let template = this.cell.template;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.editMode) {\n            const inlineEditorTemplate = this.column.inlineEditorTemplate;\n            return inlineEditorTemplate ? inlineEditorTemplate : this.inlineEditorTemplate;\n        }\n        if (this.cellTemplate) {\n            return this.cellTemplate;\n        }\n        return this.defaultCellTemplate;\n    }\n\n    /**\n     * Gets the `id` of the grid in which the cell is stored.\n     * ```typescript\n     * let gridId = this.cell.gridID;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get gridID(): any {\n        return this.row.gridID;\n    }\n\n    /**\n     * Gets the grid of the cell.\n     * ```typescript\n     * let grid = this.cell.grid;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets the `index` of the row where the cell is stored.\n     * ```typescript\n     * let rowIndex = this.cell.rowIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.data-rowIndex')\n    get rowIndex(): number {\n        return this.row.index;\n    }\n\n    /**\n     * Gets the `index` of the cell column.\n     * ```typescript\n     * let columnIndex = this.cell.columnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get columnIndex(): number {\n        return this.column.index;\n    }\n\n    /**\n     * Gets the visible `index` of the in which the cell is stored.\n     * ```typescript\n     * let visibleColumnIndex = this.cell.visibleColumnIndex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.data-visibleIndex')\n    @Input()\n    get visibleColumnIndex() {\n        return this.column.columnLayoutChild ? this.column.visibleIndex : this._vIndex;\n    }\n\n    set visibleColumnIndex(val) {\n        this._vIndex = val;\n    }\n\n    /**\n     * Gets the ID of the cell.\n     * ```typescript\n     * let cellID = this.cell.cellID;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public get cellID() {\n        const primaryKey = this.grid.primaryKey;\n        const rowID = primaryKey ? this.rowData[primaryKey] : this.rowData;\n        return { rowID, columnID: this.columnIndex, rowIndex: this.rowIndex };\n    }\n\n    /**\n     * Returns a reference to the nativeElement of the cell.\n     * ```typescript\n     * let cellNativeElement = this.cell.nativeElement;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    get nativeElement(): HTMLElement {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * @deprecated\n     * Use `cell.editMode` as a getter and\n     * `cell.setEditMode(true | false)` to start/exit edit mode.\n     *\n     * Gets/sets whether the cell is in edit mode.\n     * ```typescript\n     * let isCellInEditMode = this.cell.inEditMode;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @DeprecateProperty(`'inEditMode' is deprecated\\nUse 'editMode' to get the current state and 'setEditMode(boolean)' as a setter`)\n    get inEditMode(): boolean {\n        return this.editMode;\n    }\n\n    set inEditMode(value: boolean) {\n        this.setEditMode(value);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @Input()\n    @HostBinding('class.igx-grid__td--pinned-last')\n    lastPinned = false;\n\n    /**\n     * Returns whether the cell is in edit mode.\n     */\n    @Input()\n    @HostBinding('class.igx-grid__td--editing')\n    editMode = false;\n\n    /**\n     * Sets/get the `tabindex` property of the cell.\n     * Default value is `0`.\n     * ```typescript\n     * this.cell.tabindex = 1;\n     * ```\n     * ```typescript\n     * let cellTabIndex = this.cell.tabindex;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * Sets/get the `role` property of the cell.\n     * Default value is `\"gridcell\"`.\n     * ```typescript\n     * this.cell.role = 'grid-cell';\n     * ```\n     * ```typescript\n     * let cellRole = this.cell.role;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'gridcell';\n\n    /**\n     * Gets whether the cell is editable.\n     * ```typescript\n     * let isCellReadonly = this.cell.readonly;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-readonly')\n    get readonly(): boolean {\n        return !this.column.editable;\n    }\n\n    @HostBinding('style.-ms-grid-row-span')\n    get gridRowSpan(): number {\n        return this.column.gridRowSpan;\n    }\n\n    @HostBinding('style.-ms-grid-column-span')\n    get gridColumnSpan(): number {\n        return this.column.gridColumnSpan;\n    }\n\n\n    @HostBinding('style.grid-row-end')\n    get rowEnd(): number {\n        return this.column.rowEnd;\n    }\n\n    @HostBinding('style.grid-column-end')\n    get colEnd(): number {\n        return this.column.colEnd;\n    }\n\n    @HostBinding('style.-ms-grid-row')\n    @HostBinding('style.grid-row-start')\n    get rowStart(): number {\n        return this.column.rowStart;\n    }\n\n    @HostBinding('style.-ms-grid-column')\n    @HostBinding('style.grid-column-start')\n    get colStart(): number {\n        return this.column.colStart;\n    }\n\n    /**\n     * Returns a string containing the grid `id` and the column `field` concatenated by \"_\".\n     * ```typescript\n     * let describedBy = this.cell.describedBy;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-describedby')\n    get describedby(): string {\n        return `${this.row.gridID}_${this.column.field}`;\n    }\n\n    /**\n     * Gets the width of the cell.\n     * ```typescript\n     * let cellWidth = this.cell.width;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('style.min-width')\n    @HostBinding('style.max-width')\n    @HostBinding('style.flex-basis')\n    @Input()\n    width = '';\n\n    /**\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isSelected = this.cell.selected;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    @HostBinding('attr.aria-selected')\n    @HostBinding('class.igx-grid__td--selected')\n    get selected() {\n        return this.isCellSelected();\n    }\n\n    /**\n     * Selects/deselects the cell.\n     * ```typescript\n     * this.cell.selected = true.\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    set selected(val: boolean) {\n        const node = this.selectionNode;\n        val ? this.selectionService.add(node) : this.selectionService.remove(node);\n    }\n\n    @HostBinding('class.igx-grid__td--edited')\n    get dirty() {\n        if (this.grid.rowEditable) {\n            const rowCurrentState = this.grid.transactions.getAggregatedValue(this.row.rowID, false);\n            if (rowCurrentState) {\n                return rowCurrentState[this.column.field] !== undefined && rowCurrentState[this.column.field] !== null;\n            }\n        } else {\n            const rowTransaction: State = this.grid.transactions.getState(this.row.rowID);\n            return rowTransaction && rowTransaction.value && rowTransaction.value[this.column.field];\n        }\n\n        return false;\n    }\n\n    /**\n     * Sets the current edit value while a cell is in edit mode.\n     * Only for cell editing mode.\n     * ```typescript\n     * this.cell.editValue = value;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public set editValue(value) {\n        if (this.crudService.inEditMode) {\n            this.crudService.cell.editValue = value;\n        }\n    }\n\n    /**\n     * Gets the current edit value while a cell is in edit mode.\n     * Only for cell editing mode.\n     * ```typescript\n     * let editValue = this.cell.editValue;\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public get editValue() {\n        if (this.crudService.inEditMode) {\n            return this.crudService.cell.editValue;\n        }\n    }\n\n    /**\n     * Returns whether the cell is editable.\n     */\n    get editable(): boolean {\n        return this.column.editable;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostBinding('class.igx-grid__td--active')\n    public focused = false;\n\n    @ViewChild('defaultCell', { read: TemplateRef, static: true })\n    protected defaultCellTemplate: TemplateRef<any>;\n\n    @ViewChild('inlineEditor', { read: TemplateRef, static: true })\n    protected inlineEditorTemplate: TemplateRef<any>;\n\n    @ViewChild(IgxTextHighlightDirective, { read: IgxTextHighlightDirective, static: false })\n    protected set highlight(value: IgxTextHighlightDirective) {\n        this._highlight = value;\n\n        if (this._highlight && this.grid.lastSearchInfo.searchText) {\n            this._highlight.highlight(this.grid.lastSearchInfo.searchText,\n                this.grid.lastSearchInfo.caseSensitive,\n                this.grid.lastSearchInfo.exactMatch);\n            this._highlight.activateIfNecessary();\n        }\n    }\n\n    protected get highlight() {\n        return this._highlight;\n    }\n\n    protected get selectionNode(): ISelectionNode {\n        return {\n            row: this.rowIndex,\n            column: this.column.columnLayoutChild ? this.column.parent.visibleIndex : this.visibleColumnIndex,\n            layout: this.column.columnLayoutChild ? {\n                rowStart: this.column.rowStart,\n                colStart: this.column.colStart,\n                rowEnd: this.column.rowEnd,\n                colEnd: this.column.colEnd,\n                columnVisibleIndex: this.visibleColumnIndex\n            } : null\n            };\n    }\n\n    protected isInCompositionMode = false;\n    protected compositionStartHandler;\n    protected compositionEndHandler;\n    private _highlight: IgxTextHighlightDirective;\n\n\n    constructor(\n        protected selectionService: IgxGridSelectionService,\n        protected crudService: IgxGridCRUDService,\n        public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public selection: IgxSelectionAPIService,\n        public cdr: ChangeDetectorRef,\n        private element: ElementRef,\n        protected zone: NgZone) { }\n\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.addEventListener('pointerdown', this.pointerdown);\n            this.nativeElement.addEventListener('pointerenter', this.pointerenter);\n            this.nativeElement.addEventListener('pointerup', this.pointerup);\n\n            // IE 11 workarounds\n            if (isIE()) {\n                this.compositionStartHandler = () => this.isInCompositionMode = true;\n                this.compositionEndHandler = () => this.isInCompositionMode = false;\n                // Hitting Enter with IME submits and exits from edit mode instead of first closing the IME dialog\n                this.nativeElement.addEventListener('compositionstart', this.compositionStartHandler);\n                this.nativeElement.addEventListener('compositionend', this.compositionEndHandler);\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    ngOnDestroy() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.removeEventListener('pointerdown', this.pointerdown);\n            this.nativeElement.removeEventListener('pointerenter', this.pointerenter);\n            this.nativeElement.removeEventListener('pointerup', this.pointerup);\n\n            if (isIE()) {\n                this.nativeElement.removeEventListener('compositionstart', this.compositionStartHandler);\n                this.nativeElement.removeEventListener('compositionend', this.compositionEndHandler);\n            }\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    _updateCRUDStatus() {\n        if (this.editMode) {\n            return;\n        }\n\n        const crud = this.crudService;\n        const editableCell = this.crudService.cell;\n        const editMode = !!(crud.row || crud.cell);\n\n        if (this.editable && editMode && !this.row.deleted) {\n            if (editableCell) {\n                this.gridAPI.update_cell(editableCell, editableCell.editValue);\n            }\n            crud.end();\n            this.grid.cdr.markForCheck();\n            crud.begin(this);\n            return;\n        }\n\n        if (editableCell && crud.sameRow(this.rowIndex)) {\n            this.gridAPI.submit_value();\n        } else if (editMode && !crud.sameRow(this.rowIndex)) {\n            this.grid.endEdit(true);\n        }\n    }\n\n    /**\n     * Gets whether the cell is selected.\n     * ```typescript\n     * let isCellSelected = thid.cell.isCellSelected();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public isCellSelected() {\n        return this.selectionService.selected(this.selectionNode);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public ngOnChanges(changes: SimpleChanges): void {\n        if (changes.value && !changes.value.firstChange) {\n            if (this.highlight) {\n                this.highlight.lastSearchInfo.searchedText = this.grid.lastSearchInfo.searchText;\n                this.highlight.lastSearchInfo.caseSensitive = this.grid.lastSearchInfo.caseSensitive;\n                this.highlight.lastSearchInfo.exactMatch = this.grid.lastSearchInfo.exactMatch;\n            }\n        }\n    }\n\n    /**\n     * Starts/ends edit mode for the cell.\n     *\n     * ```typescript\n     * cell.setEditMode(true);\n     * ```\n     */\n    setEditMode(value: boolean): void {\n        if (this.row.deleted) {\n            return;\n        }\n        if (this.editable && value) {\n            this.gridAPI.submit_value();\n            this.crudService.begin(this);\n        } else {\n            this.gridAPI.escape_editMode();\n        }\n        this.grid.cdr.markForCheck();\n    }\n\n    /**\n     * Sets new value to the cell.\n     * ```typescript\n     * this.cell.update('New Value');\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    // TODO: Refactor\n    public update(val: any) {\n        if (this.row.deleted) {\n            return;\n        }\n        const cell = this.crudService.createCell(this);\n        const args = this.gridAPI.update_cell(cell, val);\n        if (this.crudService.cell && this.crudService.sameCell(cell)) {\n            if (args.cancel) {\n                return;\n            }\n            this.gridAPI.escape_editMode();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    pointerdown = (event: PointerEvent) => {\n        if (!isLeftClick(event)) {\n            this.selectionService.addKeyboardRange();\n            this.selectionService.initKeyboardState();\n            this.selectionService.primaryButton = false;\n            return;\n        }\n        this.selectionService.pointerDown(this.selectionNode, event.shiftKey, event.ctrlKey);\n    }\n\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    pointerenter = (event: PointerEvent) => {\n        const dragMode = this.selectionService.pointerEnter(this.selectionNode, event);\n        if (dragMode) {\n            this.grid.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    pointerup = (event: PointerEvent) => {\n        if (this.grid.hasColumnLayouts) {\n            this.grid.navigation.setStartNavigationCell(this.colStart, this.rowStart, null);\n        }\n        if (!isLeftClick(event)) { return; }\n        if (this.selectionService.pointerUp(this.selectionNode, this.grid.onRangeSelection)) {\n            this.grid.cdr.detectChanges();\n        }\n        this._updateCRUDStatus();\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('dblclick', ['$event'])\n    public onDoubleClick(event: MouseEvent) {\n        if (this.editable && !this.editMode && !this.row.deleted) {\n            this.crudService.begin(this);\n        }\n\n        this.grid.onDoubleClick.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event: MouseEvent) {\n        this.grid.onCellClick.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('contextmenu', ['$event'])\n    public onContextMenu(event: MouseEvent) {\n        this.grid.onContextMenu.emit({\n            cell: this,\n            event\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('focus', ['$event'])\n    public onFocus(event: FocusEvent) {\n        if (this.focused) {\n            return;\n        }\n\n        const node = this.selectionNode;\n        const mrl = this.grid.hasColumnLayouts;\n        this.focused = true;\n        this.row.focused = true;\n\n        if (!this.selectionService.isActiveNode(node, mrl)) {\n            this.grid.onSelection.emit({ cell: this, event });\n        }\n\n        if (this.selectionService.primaryButton) {\n            this._updateCRUDStatus();\n            this.selectionService.activeElement = node;\n        } else {\n            this.selectionService.activeElement = null;\n            if (this.crudService.inEditMode && !this.editMode) {\n                this.gridAPI.submit_value();\n            }\n        }\n\n        this.selectionService.primaryButton = true;\n        this.selectionService.keyboardStateOnFocus(node, this.grid.onRangeSelection, this.nativeElement);\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('blur')\n    public onBlur() {\n        this.focused = false;\n        this.row.focused = false;\n    }\n\n    protected handleAlt(key: string, event: KeyboardEvent) {\n        if (this.row.nativeElement.tagName.toLowerCase() === 'igx-tree-grid-row' && this.isToggleKey(key)) {\n            const collapse = (this.row as any).expanded && ROW_COLLAPSE_KEYS.has(key);\n            const expand = !(this.row as any).expanded && ROW_EXPAND_KEYS.has(key);\n            if (collapse) {\n                (this.gridAPI as any).trigger_row_expansion_toggle(this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n            } else if (expand) {\n                (this.gridAPI as any).trigger_row_expansion_toggle(this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n            }\n        }\n    }\n\n    protected handleTab(shift: boolean) {\n        if (shift) {\n            this.grid.navigation.performShiftTabKey(this.row.nativeElement, this.selectionNode);\n        } else {\n            this.grid.navigation.performTab(this.row.nativeElement, this.selectionNode);\n        }\n    }\n\n    protected handleEnd(ctrl: boolean) {\n        if (ctrl) {\n            this.grid.navigation.goToLastCell();\n        } else {\n            this.grid.navigation.onKeydownEnd(this.rowIndex, false, this.rowStart);\n        }\n    }\n\n    protected handleHome(ctrl: boolean) {\n        if (ctrl) {\n            this.grid.navigation.goToFirstCell();\n        } else {\n            this.grid.navigation.onKeydownHome(this.rowIndex, false, this.rowStart);\n        }\n    }\n\n    // TODO: Refactor\n    /**\n     *\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        const shift = event.shiftKey;\n        const ctrl = event.ctrlKey;\n        const node = this.selectionNode;\n\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n\n        const keydownArgs = { targetType: 'dataCell', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(keydownArgs);\n        if (keydownArgs.cancel) {\n            this.selectionService.clear();\n            this.selectionService.keyboardState.active = true;\n            return;\n        }\n\n        if (event.altKey) {\n            event.preventDefault();\n            this.handleAlt(key, event);\n            return;\n        }\n\n        this.selectionService.keyboardStateOnKeydown(node, shift, shift && key === 'tab');\n\n\n        if (key === 'tab') {\n            event.preventDefault();\n        }\n\n        if (this.editMode) {\n            if (NAVIGATION_KEYS.has(key)) {\n                if (this.column.inlineEditorTemplate) { return; }\n                if (['date', 'boolean'].indexOf(this.column.dataType) > -1) { return; }\n                return;\n            }\n        }\n\n        if (NAVIGATION_KEYS.has(key)) {\n            event.preventDefault();\n        }\n\n        // TODO: to be deleted when onFocusChange event is removed #4054\n        const args = { cell: this, groupRow: null, event: event, cancel: false };\n        this.grid._onFocusChange.emit(args);\n        if (args.cancel) {\n            return;\n        }\n\n        switch (key) {\n            case 'tab':\n                this.handleTab(shift);\n                break;\n            case 'end':\n                this.handleEnd(ctrl);\n                break;\n            case 'home':\n                this.handleHome(ctrl);\n                break;\n            case 'arrowleft':\n            case 'left':\n                if (ctrl) {\n                    this.grid.navigation.onKeydownHome(node.row, false, this.rowStart);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowLeft(this.nativeElement, this.selectionNode);\n                break;\n            case 'arrowright':\n            case 'right':\n                if (ctrl) {\n                    this.grid.navigation.onKeydownEnd(node.row, false, this.rowStart);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowRight(this.nativeElement, this.selectionNode);\n                break;\n            case 'arrowup':\n            case 'up':\n                if (ctrl) {\n                    this.grid.navigation.navigateTop(this.visibleColumnIndex);\n                    break;\n                }\n                this.grid.navigation.navigateUp(this.row.nativeElement, this.selectionNode);\n                break;\n            case 'arrowdown':\n            case 'down':\n                if (ctrl) {\n                    this.grid.navigation.navigateBottom(this.visibleColumnIndex);\n                    break;\n                }\n                this.grid.navigation.navigateDown(this.row.nativeElement, this.selectionNode);\n                break;\n            case 'enter':\n            case 'f2':\n                this.onKeydownEnterEditMode();\n                break;\n            case 'escape':\n            case 'esc':\n                this.onKeydownExitEditMode();\n                break;\n            case ' ':\n            case 'spacebar':\n            case 'space':\n                if (this.row.rowSelectable) {\n                    this.row.checkboxElement.toggle();\n                }\n                break;\n            default:\n                return;\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onKeydownEnterEditMode() {\n        if (this.isInCompositionMode) {\n            return;\n        }\n        if (this.column.editable && !this.row.deleted) {\n            if (this.editMode) {\n                this.grid.endEdit(true);\n                this.nativeElement.focus();\n            } else {\n                this.crudService.begin(this);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public onKeydownExitEditMode() {\n        if (this.isInCompositionMode) {\n            return;\n        }\n\n        if (this.editMode) {\n            const args = this.crudService.cell.createEditEventArgs();\n            this.grid.onCellEditCancel.emit(args);\n            if (args.cancel) {\n                return;\n            }\n            this.grid.endEdit(false);\n            this.nativeElement.focus();\n        }\n    }\n\n    /**\n     * If the provided string matches the text in the cell, the text gets highlighted.\n     * ```typescript\n     * this.cell.highlightText('Cell Value', true);\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public highlightText(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.highlight && this.column.searchable ? this.highlight.highlight(text, caseSensitive, exactMatch) : 0;\n    }\n\n    /**\n     * Clears the highlight of the text in the cell.\n     * ```typescript\n     * this.cell.clearHighLight();\n     * ```\n     * @memberof IgxGridCellComponent\n     */\n    public clearHighlight() {\n        if (this.highlight && this.column.searchable) {\n            this.highlight.clearHighlight();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public calculateSizeToFit(range: any): number {\n        return Math.max(...Array.from(this.nativeElement.children)\n            .map((child) => getNodeSizeViaRange(range, child)));\n    }\n\n    private isToggleKey(key: string): boolean {\n        return ROW_COLLAPSE_KEYS.has(key) || ROW_EXPAND_KEYS.has(key);\n    }\n}\n","import { EventEmitter, Input, Output } from '@angular/core';\n\nexport interface IValueChangedEventArgs {\n    oldValue: any;\n    newValue: any;\n}\n\n/**\n *@hidden\n */\nexport abstract class ItemPropertyValueChanged {\n    private _object: any;\n    private _propName: string;\n\n    get object() {\n        return this._object;\n    }\n\n    set object(value) {\n        if (value) {\n            this._object = value;\n        }\n    }\n\n    @Input()\n    get value() {\n        return (this.object) ? this.object[this._propName] : null;\n    }\n\n    set value(value) {\n        this.onValueChanged(value);\n    }\n\n    @Output()\n    public valueChanged = new EventEmitter<IValueChangedEventArgs>();\n\n    constructor(propName: string) {\n        this._propName = propName;\n    }\n\n    protected onValueChanged(value) {\n        const currentValue = this.value;\n        if (value !== currentValue) {\n            this.object[this._propName] = value;\n            this.valueChanged.emit({ oldValue: currentValue, newValue: value });\n        }\n    }\n}\n\n/** @hidden */\nexport class ColumnChooserItemBase extends ItemPropertyValueChanged {\n    @Input()\n    get column() {\n        return this.object;\n    }\n\n    set column(value) {\n        if (value) {\n            this.object = value;\n        }\n    }\n\n    @Input()\n    public indentation = 30;\n\n    @Input()\n    public container: any;\n\n    constructor(public prop: string) {\n        super(prop);\n    }\n\n    get name() {\n        return (this.column) ? ((this.column.header) ? this.column.header : this.column.field) : '';\n    }\n\n    get level() {\n        return this.column.level;\n    }\n\n    get calcIndent() {\n        return this.indentation * this.level;\n    }\n}\n","\nimport { Directive } from '@angular/core';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\n\nexport interface IColumnVisibilityChangedEventArgs {\n    column: any;\n    newValue: boolean;\n}\n\n/** @hidden */\n@Directive({\n    selector: '[igxColumnHidingItem]'\n})\nexport class IgxColumnHidingItemDirective extends ColumnChooserItemBase {\n\n    constructor() {\n        super('hidden');\n    }\n\n    get disabled() {\n        return this.column.disableHiding;\n    }\n}\n","import { ChangeDetectorRef, HostBinding, Input, OnDestroy } from '@angular/core';\nimport { IgxStringFilteringOperand } from '../data-operations/filtering-condition';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { FilteringStrategy } from '../data-operations/filtering-strategy';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\n\nexport enum ColumnDisplayOrder {\n    Alphabetical = 'Alphabetical',\n    DisplayOrder = 'DisplayOrder'\n}\n\nclass CustomFilteringStrategy extends FilteringStrategy {\n    public filter(data: any[], expressionsTree: IFilteringExpressionsTree): any[] {\n        const res: ColumnChooserItemBase[] = [];\n        data.forEach((item: ColumnChooserItemBase) => {\n            if (this.matchRecord(item, expressionsTree.filteringOperands[0] as IFilteringExpression)) {\n                res.push(item);\n            } else if (item.column.columnGroup) {\n                if (item.column.allChildren.findIndex((child) =>\n                    this.matchRecord(child, expressionsTree.filteringOperands[1] as IFilteringExpression) ||\n                    this.matchRecord(child, expressionsTree.filteringOperands[2] as IFilteringExpression)) > -1) {\n                    res.push(item);\n                }\n            }\n        });\n\n        return res;\n    }\n}\n\n/** @hidden */\nexport abstract class ColumnChooserBase implements OnDestroy {\n    /**\n     * Gets the grid columns that are going to be manipulated.\n     * ```typescript\n     * let gridColumns = this.columnHidingUI.columns;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n\n    @Input()\n    get columns() {\n        return this._gridColumns;\n    }\n    /**\n     * Sets the the grid columns that are going to be manipulated.\n     * ```html\n     * <igx-column-hiding [columns]=\"grid.columns\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set columns(value) {\n        if (value) {\n            this._gridColumns = value;\n            this.createColumnItems();\n            if (this.filterCriteria) {\n                this.filter();\n            }\n        }\n    }\n    /**\n     * Sets/gets the title of the column chooser.\n     * ```typescript\n     * let title =  this.columnHidingUI.title;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get title() {\n        return this._title;\n    }\n    /**\n     * ```html\n     * <igx-column-hiding [title]=\"'IgxColumnHidingComponent Title'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set title(value) {\n        this._title = (value) ? value : '';\n    }\n    /**\n     * Gets the prompt that is displayed in the filter input.\n     * ```typescript\n     * let filterColumnsPrompt =  this.columnHidingUI.filterColumnsPrompt;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get filterColumnsPrompt() {\n        return this._filterColumnsPrompt;\n    }\n    /**\n     * Sets the prompt that is going to be displayed in the filter input.\n     * ```html\n     * <igx-column-hiding [filterColumnsPrompt]=\"'Type here to search'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set filterColumnsPrompt(value) {\n        this._filterColumnsPrompt = (value) ? value : '';\n    }\n    /**\n     * Hides/ shows the filtering columns input from the UI.\n     */\n    @Input()\n    public disableFilter = false;\n    /**\n     * Gets the items of the selected columns.\n     * ```typescript\n     * let columnItems =  this.columnHidingUI.columnItems;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get columnItems() {\n        return this._currentColumns;\n    }\n    /**\n     * Gets the value which filters the columns list.\n     * ```typescript\n     * let filterCriteria =  this.columnHidingUI.filterCriteria;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get filterCriteria() {\n        return this._filterCriteria;\n    }\n\n    /**\n     * Sets the value which filters the columns list.\n     * ```html\n     *  <igx-column-hiding [filterCriteria]=\"'ID'\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set filterCriteria(value) {\n        if (!value || value.length === 0) {\n            this.clearFiltering();\n            this._filterCriteria = '';\n            this.cdr.detectChanges();\n            return;\n        } else if (this._filterCriteria && this._filterCriteria.length > value.length) {\n            this.clearFiltering();\n        }\n\n        this._filterCriteria = value;\n        this.filter();\n        this.cdr.detectChanges();\n    }\n    /**\n     * Gets the display order of the columns.\n     * ```typescript\n     * let columnDisplayOrder  =  this.columnHidingUI.columnDisplayOrder;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    get columnDisplayOrder() {\n        return this._columnDisplayOrder;\n    }\n    /**\n     * Sets the display order of the columns.\n     * ```typescript\n     * this.columnHidingUI.columnDisplayOrder = ColumnDisplayOrder.Alphabetical;\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    set columnDisplayOrder(value: ColumnDisplayOrder) {\n        if (value !== undefined) {\n            this.orderColumns(value);\n            if (this._filterCriteria.length > 0) {\n                this.filter();\n            }\n        }\n    }\n    /**\n     * Access to the columnHidingUI:\n     * ```typescript\n     * @ViewChild('column-hiding-component')\n     *  public columnHidingUI: IgxColumnHidingComponent;\n     * ```\n     * Sets/gets the max height of the column area.\n     * ```typescript\n     * let columnsAreaMaxHeight =  this.columnHidingUI.columnsAreaMaxHeight;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [columnsAreaMaxHeight]=\"200px\"></igx-column-hiding>\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @Input()\n    public columnsAreaMaxHeight = '100%';\n    /**\n     * Sets/Gets the css class selector.\n     * By default the value of the `class` attribute is `\"igx-column-hiding\"`.\n     * ```typescript\n     * let cssCLass =  this.columnHidingUI.cssClass;\n     * ```\n     * ```typescript\n     * this.columnHidingUI.cssClass = 'column-chooser';\n     * ```\n     * @memberof ColumnChooserBase\n     */\n    @HostBinding('attr.class')\n    public cssClass = 'igx-column-hiding';\n    /**\n     *@hidden\n     */\n    private _currentColumns = [];\n    /**\n     *@hidden\n     */\n    private _gridColumns = [];\n    /**\n     *@hidden\n     */\n    private _rawColumns = [];\n    /**\n     *@hidden\n     */\n    private _columnDisplayOrder = ColumnDisplayOrder.DisplayOrder;\n    /**\n     *@hidden\n     */\n    private _filterCriteria = '';\n    /**\n     *@hidden\n     */\n    private _filterColumnsPrompt = '';\n    /**\n     *@hidden\n     */\n    private _title = '';\n\n    constructor(public cdr: ChangeDetectorRef) {\n    }\n    /**\n     *@hidden\n     */\n    ngOnDestroy() {\n        for (const item of this._currentColumns) {\n            item.valueChanged.unsubscribe();\n        }\n    }\n    /**\n     *@hidden\n     */\n    private createColumnItems() {\n        if (this._gridColumns.length > 0) {\n            this._rawColumns = [];\n            this._gridColumns.forEach((column) => {\n                const item = this.createColumnItem(this, column);\n                if (item) {\n                    this._rawColumns.push(item);\n                }\n            });\n            this._currentColumns = this._rawColumns.slice(0);\n            this.orderColumns(this._columnDisplayOrder);\n        }\n    }\n    /**\n     *@hidden\n     */\n    protected abstract createColumnItem(container: any, column: any);\n    /**\n     *@hidden\n     */\n    private orderColumns(value) {\n        this._columnDisplayOrder = value;\n        if (value === ColumnDisplayOrder[ColumnDisplayOrder.Alphabetical] ||\n            value === ColumnDisplayOrder.Alphabetical) {\n            this._currentColumns = this._rawColumns.slice(0).sort((current, next) => {\n                return current.name.toLowerCase().localeCompare(next.name.toLowerCase());\n            });\n        } else {\n            this._currentColumns = this._rawColumns;\n        }\n    }\n    /**\n     *@hidden\n     */\n    protected filter() {\n        const filteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.Or);\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('name'));\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('field'));\n        filteringExpressionsTree.filteringOperands.push(this.createFilteringExpression('header'));\n\n        const strategy = new CustomFilteringStrategy();\n        this._currentColumns = strategy.filter(this._currentColumns, filteringExpressionsTree);\n    }\n    /**\n     *@hidden\n     */\n    protected createFilteringExpression(fieldName: string): IFilteringExpression {\n        return {\n            condition: IgxStringFilteringOperand.instance().condition('contains'),\n            fieldName: fieldName,\n            ignoreCase: true,\n            searchVal: this._filterCriteria\n        };\n    }\n    /**\n     *@hidden\n     */\n    protected clearFiltering() {\n        this.createColumnItems();\n    }\n}\n\n\n","import { CommonModule } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    NgModule,\n    Output,\n    OnDestroy\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IColumnVisibilityChangedEventArgs, IgxColumnHidingItemDirective } from './column-hiding-item.directive';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { ColumnChooserBase } from './column-chooser-base';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-column-hiding',\n    templateUrl: './column-hiding.component.html'\n})\nexport class IgxColumnHidingComponent extends ColumnChooserBase implements OnDestroy {\n    /**\n     * Returns a boolean indicating whether the `HIDE ALL` button is disabled.\n     * ```html\n     * <igx-column-hiding #columnHidingUI\n     *     [columns]=\"grid.columns\" [title]=\"'Column Hiding'\">\n     * </igx-column-hiding>\n     * ```\n     * ```typescript\n     * @ViewChild(\"'columnHidingUI'\")\n     * public columnHiding: IgxColumnHidingComponent;\n     * let isHideAlldisabled =  this.columnHiding.disableHideAll;\n     * ```\n     *@memberof IgxColumnHidingComponent\n     */\n    @Input()\n    get disableHideAll(): boolean {\n        if (!this.columnItems || this.columnItems.length < 1 ||\n            this.hiddenColumnsCount === this.columns.length) {\n            return true;\n        } else if (this.hidableColumns.length < 1 ||\n            this.hidableColumns.length === this.hidableColumns.filter((col) => col.value).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Returns a boolean indicating whether the `SHOW ALL` button is disabled.\n     * ```typescript\n     * let isShowAlldisabled =  this.columnHiding.disableShowAll;\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    get disableShowAll(): boolean {\n        if (!this.columnItems || this.columnItems.length < 1 ||\n            this.hiddenColumnsCount < 1 || this.hidableColumns.length < 1) {\n            return true;\n        } else if (this.hidableColumns.length === this.hidableColumns.filter((col) => !col.value).length) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    /**\n     * Sets/gets the text of the button that shows all columns if they are hidden.\n     * ```typescript\n     * let showAllButtonText =  this.columnHiding.showAllText;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [showAllText] = \"'Show Columns'\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    public showAllText = 'Show All';\n    /**\n     * Sets/gets the text of the button that hides all columns if they are shown.\n     * ```typescript\n     * let hideAllButtonText =  this.columnHiding.hideAllText;\n     * ```\n     *\n     * ```html\n     * <igx-column-hiding [hideAllText] = \"'Hide Columns'\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Input()\n    public hideAllText = 'Hide All';\n    /**\n     * An event that is emitted after the columns visibility is changed.\n     * Provides references to the `column` and the `newValue` properties as event arguments.\n     * ```html\n     *  <igx-column-hiding (onColumnVisibilityChanged) = \"onColumnVisibilityChanged($event)\"></igx-column-hiding>\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    @Output()\n    public onColumnVisibilityChanged = new EventEmitter<IColumnVisibilityChangedEventArgs>();\n    /**\n     * Gets the count of the hidden columns.\n     * ```typescript\n     * let hiddenColumnsCount =  this.columnHiding.hiddenColumnsCount;\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public get hiddenColumnsCount() {\n        return (this.columns) ? this.columns.filter((col) => col.hidden).length : 0;\n    }\n\n    constructor(public cdr: ChangeDetectorRef) {\n        super(cdr);\n    }\n\n    /**\n     *@hidden\n     */\n    public get hidableColumns() {\n        return this.columnItems.filter((col) => !col.disabled);\n    }\n\n    private destroy$ = new Subject<boolean>();\n    /**\n     *@hidden\n     */\n    protected createColumnItem(container: any, column: any) {\n        if (column.grid.hasColumnLayouts && !column.columnLayout) {\n            return null;\n        }\n        const item = new IgxColumnHidingItemDirective();\n        item.container = container;\n        item.column = column;\n\n        item.valueChanged.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.onVisibilityChanged({ column: item.column, newValue: args.newValue });\n        });\n\n        return item;\n    }\n    /**\n     * Shows all columns in the grid.\n     * ```typescript\n     * this.columnHiding.showAllColumns();\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public showAllColumns() {\n        for (const col of this.hidableColumns) {\n            col.value = false;\n        }\n    }\n    /**\n     * Hides all columns in the grid.\n     * ```typescript\n     * this.columnHiding.hideAllColumns();\n     * ```\n     * @memberof IgxColumnHidingComponent\n     */\n    public hideAllColumns() {\n        for (const col of this.hidableColumns) {\n            col.value = true;\n        }\n    }\n    /**\n     * @hidden\n     */\n    public onVisibilityChanged(args: IColumnVisibilityChangedEventArgs) {\n        this.onColumnVisibilityChanged.emit(args);\n    }\n\n    /**\n     *@hidden\n     */\n    public ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxColumnHidingComponent, IgxColumnHidingItemDirective],\n    exports: [IgxColumnHidingComponent],\n    imports: [\n        IgxButtonModule,\n        IgxCheckboxModule,\n        IgxInputGroupModule,\n        CommonModule,\n        FormsModule,\n    ]\n})\nexport class IgxColumnHidingModule {\n}\n","\nimport { CommonModule } from '@angular/common';\nimport { Directive, Component, EventEmitter, Output, NgModule, ChangeDetectorRef } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { ColumnChooserBase } from './column-chooser-base';\nimport { ColumnChooserItemBase } from './column-chooser-item-base';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\n\n@Directive({\n    selector: '[igxColumnPinningItem]'\n})\nexport class IgxColumnPinningItemDirective extends ColumnChooserItemBase {\n\n    constructor() {\n        super('pinned');\n    }\n\n    /**\n     * Returns whether a column could be pinned.\n     * It's not possible to pin a column if there is not enough space for the unpinned area.\n     * ```typescript\n     * const columnItem: IgxColumnPinningItemDirective;\n     * this.columnItem.pinnable;\n     * ```\n     */\n    get pinnable() {\n        if (this.column.grid.getUnpinnedWidth(true) - this.column.width < this.column.grid.unpinnedAreaMinWidth) {\n            return false;\n        }\n        return true;\n    }\n}\n\n@Component({\n    preserveWhitespaces: false,\n    selector: 'igx-column-pinning',\n    templateUrl: './column-pinning.component.html'\n})\nexport class IgxColumnPinningComponent extends ColumnChooserBase {\n\n    constructor(public cdr: ChangeDetectorRef) {\n        super(cdr);\n    }\n\n    /**\n     * @hidden\n     */\n    createColumnItem(container: any, column: any) {\n        if (column.level !== 0 || column.disablePinning) {\n            return null;\n        }\n        const item = new IgxColumnPinningItemDirective();\n        item.container = container;\n        item.column = column;\n        return item;\n    }\n\n    /**\n     * @hidden\n     */\n    public checkboxValueChange(event, columnItem: IgxColumnPinningItemDirective) {\n        if (event.checked && !columnItem.pinnable) {\n            event.checkbox.checked = false;\n            return false;\n        }\n        columnItem.value = !columnItem.value;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxColumnPinningComponent, IgxColumnPinningItemDirective],\n    exports: [IgxColumnPinningComponent],\n    imports: [\n        IgxCheckboxModule,\n        IgxInputGroupModule,\n        CommonModule,\n        FormsModule\n    ]\n})\nexport class IgxColumnPinningModule {\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    HostBinding,\n    Input,\n    Optional,\n    ViewChild,\n    Inject,\n    TemplateRef\n} from '@angular/core';\n\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase } from '../core/displayDensity';\nimport {\n    CsvFileTypes,\n    IgxBaseExporter,\n    IgxCsvExporterOptions,\n    IgxCsvExporterService,\n    IgxExcelExporterOptions,\n    IgxExcelExporterService,\n    AbsoluteScrollStrategy\n} from '../services/index';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxDropDownComponent } from '../drop-down/drop-down.component';\nimport { IgxColumnHidingComponent } from './column-hiding.component';\nimport { IgxColumnPinningComponent } from './column-pinning.component';\nimport { OverlaySettings, PositionSettings, HorizontalAlignment, VerticalAlignment } from '../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../services/overlay/position';\n\n/**\n * This class encapsulates the Toolbar's logic and is internally used by\n * the `IgxGridComponent`, `IgxTreeGridComponent` and `IgxHierarchicalGridComponent`.\n */\n@Component({\n    selector: 'igx-grid-toolbar',\n    templateUrl: './grid-toolbar.component.html'\n})\nexport class IgxGridToolbarComponent extends DisplayDensityBase {\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-grid-toolbar')\n    @Input()\n    public gridID: string;\n\n    /**\n     * Gets the default text shown in the filtering box.\n     * ```typescript\n     * const filterPrompt = this.grid.toolbar.filterColumnsPrompt;\n     * ```\n     */\n    @Input()\n    public get filterColumnsPrompt() {\n        return this._filterColumnsPrompt;\n    }\n\n    /**\n     * Sets the default text shown in the filtering box.\n     * ```typescript\n     * this.grid.toolbar.filterColumnsPrompt('Filter columns ...');\n     * ```\n     */\n    public set filterColumnsPrompt(value: string) {\n        this._filterColumnsPrompt = value;\n    }\n\n    private _filterColumnsPrompt = 'Filter columns list ...';\n\n    /**\n     * Gets the height for the `IgxGridToolbarComponent`'s drop down panels.\n     * ```typescript\n     * const dropdownHeight = this.grid.toolbar.defaultDropDownsMaxHeight;\n     * ```\n     */\n    @Input()\n    get defaultDropDownsMaxHeight() {\n        const gridHeight = this.grid.calcHeight;\n        return (gridHeight) ? gridHeight * 0.7 + 'px' : '100%';\n    }\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Hiding UI.\n     * ```typescript\n     * const dropdownHiding = this.grid.toolbar.columnHidingDropdown;\n     * ```\n     */\n    @ViewChild('columnHidingDropdown', { read: IgxDropDownComponent, static: false })\n    public columnHidingDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the `IgxColumnHidingComponent`.\n     * ```typescript\n     * const hidingUI = this.grid.toolbar.columnHidingUI;\n     * ```\n     */\n    @ViewChild(IgxColumnHidingComponent, { static: false })\n    public columnHidingUI: IgxColumnHidingComponent;\n\n    /**\n     * Provides a reference to the Column Hiding button.\n     * ```typescript\n     * const hidingButton = this.grid.toolbar.columnHidingButton;\n     * ```\n     */\n    @ViewChild('columnHidingButton', { static: false })\n    public columnHidingButton;\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Export button.\n     * ```typescript\n     * const exportDropdown = this.grid.toolbar.exportDropdown;\n     * ```\n     */\n    @ViewChild('exportDropdown', { read: IgxDropDownComponent, static: false })\n    public exportDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the Export button.\n     * ```typescript\n     * const exportBtn = this.grid.toolbar.exportButton;\n     * ```\n     */\n    @ViewChild('btnExport', { static: false })\n    public exportButton;\n\n    /**\n     * Provides a reference to the `IgxDropDownComponent` of the Column Pinning UI.\n     * ```typescript\n     * const dropdownPinning = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    @ViewChild('columnPinningDropdown', { read: IgxDropDownComponent, static: false })\n    public columnPinningDropdown: IgxDropDownComponent;\n\n    /**\n     * Provides a reference to the `IgxColumnPinningComponent`.\n     * ```typescript\n     * const pinningUI = this.grid.toolbar.columnPinningDropdown;\n     * ```\n     */\n    @ViewChild(IgxColumnPinningComponent, { static: false })\n    public columnPinningUI: IgxColumnPinningComponent;\n\n    /**\n     * Provides a reference to the Column Pinning button.\n     * ```typescript\n     * const pinningButton = this.grid.toolbar.columnPinningButton;\n     * ```\n     */\n    @ViewChild('columnPinningButton', { static: false })\n    public columnPinningButton;\n\n    /**\n     * Returns a reference to the `IgxGridComponent` component, hosting the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const grid = this.igxGrid1.toolbar.grid;\n     * ```\n     */\n    public get grid(): IgxGridBaseComponent {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an export button.\n     * ```typescript\n     * const exportButton = this.igxGrid1.toolbar.shouldShowExportButton;\n     * ```\n     */\n    public get shouldShowExportButton(): boolean {\n        return (this.grid != null && (this.grid.exportExcel || this.grid.exportCsv));\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an Excel export button.\n     * ```typescript\n     * const exportExcelButton = this.igxGrid1.toolbar.shouldShowExportExcelButton;\n     * ```\n     */\n    public get shouldShowExportExcelButton(): boolean {\n        return (this.grid != null && this.grid.exportExcel);\n    }\n\n    /**\n     * Returns whether the `IgxGridComponent` renders an CSV export button.\n     * ```typescript\n     * const exportCSVButton = this.igxGrid1.toolbar.shouldShowExportCsvButton;\n     * ```\n     */\n    public get shouldShowExportCsvButton(): boolean {\n        return (this.grid != null && this.grid.exportCsv);\n    }\n\n    /**\n     * Returns how many columns are pinned.\n     * ```typescript\n     * const pinnedCount = this.igxGrid1.toolbar.pinnedColumnsCount;\n     * ```\n     */\n    public get pinnedColumnsCount() {\n        return this.grid.pinnedColumns.filter(col => !col.columnLayout).length;\n    }\n\n    /**\n     * Returns the theme of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTheme = this.grid.toolbar.hostClass;\n     * ```\n     */\n\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        return this.getComponentDensityClass('igx-grid-toolbar');\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public cdr: ChangeDetectorRef,\n        @Optional() public excelExporter: IgxExcelExporterService,\n        @Optional() public csvExporter: IgxCsvExporterService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(_displayDensityOptions);\n    }\n\n    private _positionSettings: PositionSettings = {\n        horizontalDirection: HorizontalAlignment.Left,\n        horizontalStartPoint: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n\n    private _overlaySettings: OverlaySettings = {\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: true,\n        excludePositionTarget: true\n    };\n\n\n    /**\n     * Returns the title of `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarTitle = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    public getTitle(): string {\n        return this.grid != null ? this.grid.toolbarTitle : '';\n    }\n\n    /**\n     * Returns the text of the export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExportText = this.igxGrid1.toolbar.getTitle();\n     * ```\n     */\n    public getExportText(): string {\n        return this.grid != null ? this.grid.exportText : '';\n    }\n\n    /**\n     * Returns the text of the Excel export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarExcelText = this.igxGrid1.toolbar.getExportExcelText();\n     * ```\n     */\n    public getExportExcelText(): string {\n        return this.grid != null ? this.grid.exportExcelText : '';\n    }\n\n    /**\n     * Returns the text of the CSV export button of the `IgxGridToolbarComponent`.\n     * ```typescript\n     * const toolbarCSVText = this.igxGrid1.toolbar.getExportCsvText();\n     * ```\n     */\n    public getExportCsvText(): string {\n        return this.grid != null ? this.grid.exportCsvText : '';\n    }\n\n    /**\n     * Toggles the export button's dropdown menu.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportClicked();\n     * ```\n     */\n    public exportClicked() {\n        this._overlaySettings.positionStrategy.settings.target = this.exportButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.exportDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Exports the grid to excel.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToExcelClicked();\n     * ```\n     */\n    public exportToExcelClicked() {\n        this.performExport(this.excelExporter, 'excel');\n    }\n\n    /**\n     * Exports the grid to CSV.\n     * ```typescript\n     * this.igxGrid1.toolbar.exportToCsvClicked();\n     * ```\n     */\n    public exportToCsvClicked() {\n        this.performExport(this.csvExporter, 'csv');\n    }\n\n    private performExport(exp: IgxBaseExporter, exportType: string) {\n        this.exportClicked();\n\n        const fileName = 'ExportedData';\n        const options = exportType === 'excel' ?\n            new IgxExcelExporterOptions(fileName) :\n            new IgxCsvExporterOptions(fileName, CsvFileTypes.CSV);\n\n        const args = { grid: this.grid, exporter: exp, options: options, cancel: false };\n\n        this.grid.onToolbarExporting.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        exp.export(this.grid, options);\n    }\n\n    /**\n     * Toggles the Column Hiding UI.\n     * ```typescript\n     * this.grid1.toolbar.toggleColumnHidingUI();\n     * ```\n     */\n    public toggleColumnHidingUI() {\n        this._overlaySettings.positionStrategy.settings.target = this.columnHidingButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.columnHidingDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Toggles the Column Pinning UI.\n     * ```typescript\n     * this.grid1.toolbar.toggleColumnPinningUI();\n     * ```\n     */\n    public toggleColumnPinningUI() {\n        this._overlaySettings.positionStrategy.settings.target = this.columnPinningButton.nativeElement;\n        this._overlaySettings.outlet = this.grid.outletDirective;\n        this.columnPinningDropdown.toggle(this._overlaySettings);\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the\n     * `toolbar custom container` by providing references to the parent IgxGird and the toolbar itself.\n     * ```typescript\n     * const context =  this.igxGrid.toolbar.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            // $implicit: this\n            grid: this.grid,\n            toolbar: this\n        };\n    }\n\n    /** @hidden */\n    public get customContentTemplate(): TemplateRef<any> {\n        if (this.grid != null && this.grid.toolbarCustomContentTemplate != null) {\n            return this.grid.toolbarCustomContentTemplate.template;\n        } else {\n            return null;\n        }\n    }\n}\n\n/**\n * The IgxGridToolbarCustomContentDirective directive is used to mark an 'ng-template' (with\n * the 'igxToolbarCustomContent' selector) defined in the IgxGrid which is used to provide\n * custom content for cener part of the IgxGridToolbar.\n */\n@Directive({\n    selector: '[igxToolbarCustomContent]'\n})\nexport class IgxGridToolbarCustomContentDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Directive, ElementRef, forwardRef, HostListener, Inject, QueryList } from '@angular/core';\nimport { IgxGridBaseComponent } from './grid-base.component';\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEdit]'\n})\nexport class IgxRowEditTemplateDirective { }\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEditText]'\n})\nexport class IgxRowEditTextDirective { }\n\n/** @hidden */\n@Directive({\n    selector: '[igxRowEditActions]'\n})\nexport class IgxRowEditActionsDirective { }\n\n\n// TODO: Refactor circular ref, deps and logic\n/** @hidden */\n@Directive({\n    selector: `[igxRowEditTabStop]`\n})\nexport class IgxRowEditTabStopDirective {\n    private currentCellIndex: number;\n\n    private get allTabs(): QueryList<IgxRowEditTabStopDirective> {\n        return this.grid.rowEditTabs;\n    }\n\n    constructor(\n        @Inject(forwardRef(() => IgxGridBaseComponent)) private grid: IgxGridBaseComponent,\n        public element: ElementRef) {\n    }\n\n    @HostListener('keydown.Tab', [`$event`])\n    @HostListener('keydown.Shift.Tab', [`$event`])\n    public handleTab(event: KeyboardEvent): void {\n        event.stopPropagation();\n        if ((this.allTabs.last === this && !event.shiftKey) ||\n            (this.allTabs.first === this && event.shiftKey)\n        ) {\n            this.move(event);\n        }\n    }\n\n    @HostListener('keydown.Escape', [`$event`])\n    public handleEscape(event: KeyboardEvent): void {\n        this.grid.endEdit(false, event);\n        const activeNode = this.grid.selectionService.activeElement;\n        //  on right click activeNode is deleted, so we may have no one\n        if (activeNode) {\n            const cell = this.grid.navigation.getCellElementByVisibleIndex(\n                activeNode.row,\n                activeNode.layout ? activeNode.layout.columnVisibleIndex : activeNode.column);\n            cell.focus();\n        }\n    }\n\n    /**\n     * Moves focus to first/last editable cell in the editable row and put the cell in edit mode.\n     * If cell is out of view first scrolls to the cell\n     * @param event keyboard event containing information about whether SHIFT key was pressed\n     */\n    private move(event: KeyboardEvent) {\n        event.preventDefault();\n        this.currentCellIndex = event.shiftKey ? this.grid.lastEditableColumnIndex : this.grid.firstEditableColumnIndex;\n        if (!this.grid.navigation.isColumnFullyVisible(this.currentCellIndex)) {\n            this.grid.navigation.performHorizontalScrollToCell(\n                this.grid.rowInEditMode.index, this.currentCellIndex, false, this.activateCell);\n        } else {\n            this.activateCell();\n        }\n    }\n\n    /**\n     * Sets the cell in edit mode and focus its native element\n     * @param cellIndex index of the cell to activate\n     */\n    private activateCell = (): void => {\n        const cell = this.grid.rowInEditMode.cells.find(e => e.visibleColumnIndex === this.currentCellIndex);\n        cell.nativeElement.focus();\n        cell.setEditMode(true);\n        this.currentCellIndex = -1;\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    ViewChild,\n} from '@angular/core';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { IgxGridSelectionService, ISelectionNode } from '../../core/grid-selection';\nimport { ROW_COLLAPSE_KEYS, ROW_EXPAND_KEYS, SUPPORTED_KEYS } from '../../core/utils';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-groupby-row',\n    templateUrl: './groupby-row.component.html'\n})\nexport class IgxGridGroupByRowComponent {\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        private gridSelection: IgxGridSelectionService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) { }\n\n    /**\n     * @hidden\n     */\n    protected defaultCssClass = 'igx-grid__group-row';\n\n    /**\n     * @hidden\n     */\n    protected paddingIndentationCssClass = 'igx-grid__group-row--padding-level';\n\n    /**\n     * @hidden\n     */\n    @Input()\n    protected isFocused = false;\n\n    /**\n     * Returns whether the row is focused.\n     * ```\n     * let gridRowFocused = this.grid1.rowList.first.focused;\n     * ```\n     */\n    get focused(): boolean {\n        return this.isFocused;\n    }\n\n    /**\n     * An @Input property that sets the index of the row.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    /**\n     * An @Input property that sets the id of the grid the row belongs to.\n     * ```html\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * An @Input property that specifies the group record the component renders for.\n     * ```typescript\n     * <igx-grid-groupby-row [gridID]=\"id\" [index]=\"rowIndex\" [groupRow]=\"rowData\" #row></igx-grid-groupby-row>\n     * ```\n     */\n    @Input()\n    public groupRow: IGroupByRecord;\n\n    /**\n     * Returns a reference of the content of the group.\n     * ```typescript\n     * const groupRowContent = this.grid1.rowList.first.groupContent;\n     * ```\n     */\n    @ViewChild('groupContent', { static: true })\n    public groupContent: ElementRef;\n\n    /**\n     * Returns whether the group row is expanded.\n     * ```typescript\n     * const groupRowExpanded = this.grid1.rowList.first.expanded;\n     * ```\n     */\n    @HostBinding('attr.aria-expanded')\n    get expanded(): boolean {\n        return this.grid.isExpandedGroup(this.groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.aria-describedby')\n    get describedBy(): string {\n        const grRowExpr = this.groupRow.expression !== undefined ? this.groupRow.expression.fieldName : '';\n        return this.gridID + '_' + grRowExpr;\n    }\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    /**\n     * Returns a reference to the underlying HTML element.\n     * ```typescript\n     * const groupRowElement = this.nativeElement;\n     * ```\n     */\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    /**\n     * Returns the style classes applied to the group rows.\n     * ```typescript\n     * const groupCssStyles = this.grid1.rowList.first.styleClasses;\n     * ```\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        return `${this.defaultCssClass} ` + `${this.paddingIndentationCssClass}-` + this.groupRow.level +\n            (this.focused ? ` ${this.defaultCssClass}--active` : '');\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('focus')\n    public onFocus() {\n        this.isFocused = true;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('blur')\n    public onBlur() {\n        this.isFocused = false;\n    }\n\n    /**\n     * Toggles the group row.\n     * ```typescript\n     * this.grid1.rowList.first.toggle()\n     * ```\n     */\n    public toggle() {\n        const isVirtualized = !this.grid.verticalScrollContainer.dc.instance.notVirtual;\n        const groupRowIndex = this.index;\n        this.grid.toggleGroup(this.groupRow);\n        if (isVirtualized) {\n            const groupRow = this.grid.nativeElement.querySelector(`[data-rowIndex=\"${groupRowIndex}\"]`);\n            if (groupRow) {\n                groupRow.focus();\n            }\n        }\n    }\n\n    protected get selectionNode(): ISelectionNode {\n        return {\n            row: this.index,\n            column: this.gridSelection.activeElement ? this.gridSelection.activeElement.column : 0\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown', ['$event'])\n    public onKeydown(event) {\n        // TODO: Refactor\n        const key = event.key.toLowerCase();\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n        const keydownArgs = { targetType: 'groupRow', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(keydownArgs);\n        if (keydownArgs.cancel) {\n            return;\n        }\n        event.preventDefault();\n\n        if (!this.isKeySupportedInGroupRow(key, event.shiftKey, event.altKey) || event.ctrlKey) { return; }\n\n        if (this.isToggleKey(key, event.altKey)) {\n            if ((this.expanded && ROW_COLLAPSE_KEYS.has(key)) || (!this.expanded && ROW_EXPAND_KEYS.has(key))) {\n                this.toggle();\n            }\n            return;\n        }\n        // TODO: to be deleted when onFocusChange event is removed #4054\n        const args = { cell: this, groupRow: null, event: event, cancel: false };\n        this.grid._onFocusChange.emit(args);\n        if (args.cancel) { return; }\n\n        const selection = this.gridSelection;\n        selection.keyboardState.shift = event.shiftKey && !(key === 'tab');\n\n        const visibleColumnIndex = selection.activeElement && this.grid.columnList.filter(col => !col.hidden).map(c => c.visibleIndex)\n            .indexOf(selection.activeElement.column) !== -1 ? selection.activeElement.column : 0;\n        const activeNode = selection.activeElement ? Object.assign({}, selection.activeElement) : this.selectionNode;\n        activeNode.row = this.index;\n        switch (key) {\n            case 'arrowdown':\n            case 'down':\n                this.grid.navigation.navigateDown(this.nativeElement, activeNode);\n                break;\n            case 'arrowup':\n            case 'up':\n                this.grid.navigation.navigateUp(this.nativeElement, activeNode);\n                break;\n            case 'tab':\n                this.handleTabKey(event.shiftKey, activeNode);\n                break;\n        }\n    }\n\n    /**\n     * Returns a reference to the `IgxGridComponent` the `IgxGridGroupByRowComponent` belongs to.\n     * ```typescript\n     * this.grid1.rowList.first.grid;\n     * ```\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * @hidden\n     */\n    get dataType(): any {\n        return this.grid.getColumnByName(this.groupRow.expression.fieldName).dataType;\n    }\n\n    private handleTabKey(shift: boolean, activeNode: ISelectionNode) {\n        if (shift) {\n            this.grid.navigation.performShiftTabKey(this.nativeElement, activeNode);\n        } else {\n            if (this.index === this.grid.verticalScrollContainer.igxForOf.length - 1 && this.grid.rootSummariesEnabled) {\n                this.grid.navigation.onKeydownHome(0, true);\n            } else {\n                const orderedColumns = this.grid.navigation.gridOrderedColumns;\n                const lastCol = orderedColumns[orderedColumns.length - 1];\n                activeNode.column = lastCol.columnLayoutChild ? lastCol.parent.visibleIndex : lastCol.visibleIndex;\n                this.grid.navigation.performTab(this.nativeElement, activeNode);\n            }\n        }\n    }\n\n    private isKeySupportedInGroupRow(key, shift = false, alt = false) {\n        if (shift) {\n            return ['down', 'up', 'arrowdown', 'arrowup', 'tab'].indexOf(key) !== -1;\n        }\n        return this.isToggleKey(key, alt) ? true : ['down', 'up', 'arrowdown', 'arrowup', 'tab'].indexOf(key) !== -1;\n    }\n\n    private isToggleKey(key, altKey) {\n        return altKey && ['left', 'right', 'up', 'down', 'arrowleft', 'arrowright', 'arrowup', 'arrowdown'].indexOf(key) !== -1;\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { IgxGridBaseComponent, FilterMode } from './grid-base.component';\nimport { first } from 'rxjs/operators';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridGroupByRowComponent } from './grid/groupby-row.component';\nimport { ISelectionNode } from '../core/grid-selection';\nimport { IgxForOfDirective } from '../directives/for-of/for_of.directive';\n\nenum MoveDirection {\n    LEFT = 'left',\n    RIGHT = 'right'\n}\n\n/** @hidden */\n@Injectable()\nexport class IgxGridNavigationService {\n    public grid: IgxGridBaseComponent;\n\n    get displayContainerWidth() {\n        return Math.round(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth);\n    }\n\n    get displayContainerScrollLeft() {\n        return Math.round(this.grid.parentVirtDir.getHorizontalScroll().scrollLeft);\n    }\n\n    get verticalDisplayContainerElement() {\n        return this.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;\n    }\n\n    public horizontalScroll(rowIndex) {\n        let rowComp = this.grid.dataRowList.find((row) => row.index === rowIndex) || this.grid.dataRowList.first;\n        if (!rowComp) {\n            rowComp = this.grid.summariesRowList.find((row) => row.index === rowIndex);\n        }\n        return rowComp.virtDirRow;\n    }\n\n    public getColumnUnpinnedIndex(visibleColumnIndex: number) {\n        const column = this.grid.unpinnedColumns.find((col) => !col.columnGroup && col.visibleIndex === visibleColumnIndex);\n        return this.grid.pinnedColumns.length ? this.grid.unpinnedColumns.filter((c) => !c.columnGroup).indexOf(column) :\n            visibleColumnIndex;\n    }\n\n    public isColumnFullyVisible(columnIndex: number) {\n        return this.isColumnRightEdgeVisible(columnIndex) && this.isColumnLeftEdgeVisible(columnIndex);\n    }\n\n    public isColumnRightEdgeVisible(columnIndex: number) {\n        const forOfDir: IgxForOfDirective<any> = this.forOfDir();\n        if (this.isColumnPinned(columnIndex, forOfDir)) {\n            return true;\n        }\n        const index = this.getColumnUnpinnedIndex(columnIndex);\n        return this.displayContainerWidth >= forOfDir.getColumnScrollLeft(index + 1) - this.displayContainerScrollLeft;\n    }\n\n    public isColumnLeftEdgeVisible(columnIndex: number) {\n        const forOfDir = this.forOfDir();\n        if (this.isColumnPinned(columnIndex, forOfDir)) {\n            return true;\n        }\n        const index = this.getColumnUnpinnedIndex(columnIndex);\n        return this.displayContainerScrollLeft <= forOfDir.getColumnScrollLeft(index);\n    }\n\n    private forOfDir(): IgxForOfDirective<any> {\n        let forOfDir: IgxForOfDirective<any>;\n        if (this.grid.dataRowList.length > 0) {\n            forOfDir = this.grid.dataRowList.first.virtDirRow;\n        } else {\n            forOfDir = this.grid.headerContainer;\n        }\n        return forOfDir;\n    }\n\n    private isColumnPinned(columnIndex: number, forOfDir: IgxForOfDirective<any>): boolean {\n        const horizontalScroll = forOfDir.getHorizontalScroll();\n        const column = this.grid.columnList.filter(c => !c.columnGroup).find((col) => col.visibleIndex === columnIndex);\n        return (!horizontalScroll.clientWidth || column.pinned);\n    }\n\n    public get gridOrderedColumns(): IgxColumnComponent[] {\n        return [...this.grid.pinnedColumns, ...this.grid.unpinnedColumns].filter(c => !c.columnGroup);\n    }\n\n    public isRowInEditMode(rowIndex): boolean {\n        return this.grid.rowEditable && (this.grid.rowInEditMode && this.grid.rowInEditMode.index === rowIndex);\n    }\n\n    public findNextEditable(direction: string, visibleColumnIndex: number) {\n        // go trough all columns in one cycle instead of\n        // splice().reverse().find()\n        const gridColumns = this.gridOrderedColumns;\n        const start = visibleColumnIndex;\n        let end = 0;\n        let step = 0;\n        let result = -1;\n        if (direction === MoveDirection.LEFT) {\n            end = 0;\n            step = -1;\n        } else if (direction === MoveDirection.RIGHT) {\n            end = gridColumns.length - 1;\n            step = 1;\n        }\n        for (let c = start; (c * step) <= end; c += step) {\n            const column = gridColumns[c];\n            if (column.editable) {\n                result = c;\n                break;\n            }\n        }\n        return result;\n    }\n\n    public getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary = false) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        return this.grid.nativeElement.querySelector(\n            `${cellSelector}[data-rowindex=\"${rowIndex}\"][data-visibleIndex=\"${visibleColumnIndex}\"]`);\n    }\n\n    public onKeydownArrowRight(element, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            return;\n        }\n        if (this.isColumnRightEdgeVisible(visibleColumnIndex + 1)) { // if next column is fully visible or is pinned\n            if (element.classList.contains('igx-grid__td--pinned-last') || element.classList.contains('igx-grid-summary--pinned-last')) {\n                if (this.isColumnLeftEdgeVisible(visibleColumnIndex + 1)) {\n                    element.nextElementSibling.firstElementChild.focus({ preventScroll: true });\n                } else {\n                    this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n                    this.grid.parentVirtDir.onChunkLoad\n                        .pipe(first())\n                        .subscribe(() => {\n                            element.nextElementSibling.firstElementChild.focus({ preventScroll: true });\n                        });\n                    this.horizontalScroll(rowIndex).scrollTo(0);\n                }\n            } else {\n                element.nextElementSibling.focus({ preventScroll: true });\n            }\n        } else {\n            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex + 1, isSummary);\n        }\n    }\n\n    public onKeydownArrowLeft(element, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (visibleColumnIndex === 0) {\n            return;\n        }\n        const index = this.getColumnUnpinnedIndex(visibleColumnIndex - 1);\n        if (!element.previousElementSibling && this.grid.pinnedColumns.length && index === - 1) {\n            element.parentNode.previousElementSibling.focus({ preventScroll: true });\n        } else if (!this.isColumnLeftEdgeVisible(visibleColumnIndex - 1)) {\n            this.performHorizontalScrollToCell(rowIndex, visibleColumnIndex - 1, isSummary);\n        } else {\n            element.previousElementSibling.focus({ preventScroll: true });\n        }\n\n    }\n\n    public movePreviousEditable(rowIndex: number, currentColumnVisibleIndex: number) {\n        const prevEditableColumnIndex = this.findNextEditable(MoveDirection.LEFT, currentColumnVisibleIndex - 1);\n        if (prevEditableColumnIndex === -1 && this.grid.rowEditTabs.length) {\n            //  TODO: make gridAPI visible for internal use and remove cast to any\n            (this.grid as any).gridAPI.submit_value();\n            this.grid.rowEditTabs.last.element.nativeElement.focus();\n            return;\n        }\n        this.focusEditableTarget(rowIndex, prevEditableColumnIndex);\n    }\n\n    public moveNextEditable(rowIndex: number, currentColumnVisibleIndex: number) {\n        const nextEditableColumnIndex = this.findNextEditable(MoveDirection.RIGHT, currentColumnVisibleIndex + 1);\n        if (nextEditableColumnIndex === -1 && this.grid.rowEditTabs.length) {\n            //  TODO: make gridAPI visible for internal use and remove cast to any\n            (this.grid as any).gridAPI.submit_value();\n            this.grid.rowEditTabs.first.element.nativeElement.focus();\n            return;\n        }\n        this.focusEditableTarget(rowIndex, nextEditableColumnIndex);\n    }\n\n    public focusEditableTarget(rowIndex: number, columnIndex: number) {\n        if (this.isColumnFullyVisible(columnIndex)) {\n            this.getCellElementByVisibleIndex(rowIndex, columnIndex).focus();\n        } else {\n            this.performHorizontalScrollToCell(rowIndex, columnIndex);\n        }\n    }\n\n    public onKeydownHome(rowIndex, isSummary = false) {\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        const cellSelector = this.getCellSelector(0, isSummary);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n        let firstCell = rowElement.querySelector(cellSelector);\n        if (this.grid.pinnedColumns.length || this.displayContainerScrollLeft === 0) {\n            firstCell.focus({ preventScroll: true });\n        } else {\n            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.parentVirtDir.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    firstCell = rowElement.querySelector(cellSelector);\n                    firstCell.focus({ preventScroll: true });\n                });\n            this.horizontalScroll(rowIndex).scrollTo(0);\n        }\n    }\n\n    public onKeydownEnd(rowIndex, isSummary = false) {\n        const index = this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex;\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n        if (this.isColumnRightEdgeVisible(index)) {\n            const allCells = rowElement.querySelectorAll(this.getCellSelector(-1, isSummary));\n            allCells[allCells.length - 1].focus({ preventScroll: true });\n        } else {\n            this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.parentVirtDir.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    const allCells = rowElement.querySelectorAll(this.getCellSelector(-1, isSummary));\n                    allCells[allCells.length - 1].focus({ preventScroll: true });\n                });\n            this.horizontalScroll(rowIndex).scrollTo(this.getColumnUnpinnedIndex(index));\n        }\n    }\n\n    public navigateTop(visibleColumnIndex) {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        const cellSelector = this.getCellSelector(visibleColumnIndex);\n        if (verticalScroll.scrollTop === 0) {\n            const cells = this.grid.nativeElement.querySelectorAll(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            cells[0].focus();\n        } else {\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(0);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const cells = this.grid.nativeElement.querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) { cells[0].focus(); }\n                });\n        }\n    }\n\n    public navigateBottom(visibleColumnIndex) {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        const cellSelector = this.getCellSelector(visibleColumnIndex);\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {\n            const cells = this.grid.nativeElement.querySelectorAll(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            cells[cells.length - 1].focus();\n        } else {\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(this.grid.verticalScrollContainer.igxForOf.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const cells = this.grid.nativeElement.querySelectorAll(\n                        `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                    if (cells.length > 0) { cells[cells.length - 1].focus(); }\n                });\n        }\n    }\n\n    public navigateUp(rowElement, selectedNode: ISelectionNode) {\n        const currentRowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        if (currentRowIndex === 0) {\n            return;\n        }\n        const containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);\n        if (!rowElement.previousElementSibling ||\n            rowElement.previousElementSibling.offsetTop < Math.abs(containerTopOffset)) {\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(currentRowIndex - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    const tag = rowElement.tagName.toLowerCase();\n                    const rowSelector = this.getRowSelector();\n                    if (tag === rowSelector || tag === 'igx-grid-summary-row') {\n                        rowElement = this.getRowByIndex(currentRowIndex, tag);\n                    } else {\n                        rowElement = this.grid.nativeElement.querySelector(\n                            `igx-grid-groupby-row[data-rowindex=\"${currentRowIndex}\"]`);\n                    }\n                    this.focusPreviousElement(rowElement, visibleColumnIndex);\n                });\n        } else {\n            this.focusPreviousElement(rowElement, visibleColumnIndex);\n        }\n    }\n\n    protected focusPreviousElement(currentRowEl, visibleColumnIndex) {\n        this.focusElem(currentRowEl.previousElementSibling, visibleColumnIndex);\n    }\n\n    public navigateDown(rowElement, selectedNode: ISelectionNode) {\n        const currentRowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        if (currentRowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1 ||\n            (currentRowIndex === 0 && rowElement.tagName.toLowerCase() === 'igx-grid-summary-row')) {\n            // check if this is rootSummary row\n            return;\n        }\n        const rowHeight = this.grid.verticalScrollContainer.getSizeAt(currentRowIndex + 1);\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const targetEndTopOffset = rowElement.nextElementSibling ?\n            rowElement.nextElementSibling.offsetTop + rowHeight + parseInt(this.verticalDisplayContainerElement.style.top, 10) :\n            containerHeight + rowHeight;\n       this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n        if (containerHeight && containerHeight < targetEndTopOffset) {\n            const nextIndex = currentRowIndex + 1;\n            this.grid.verticalScrollContainer.scrollTo(nextIndex);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    rowElement = this.getNextRowByIndex(nextIndex);\n                    this.focusElem(rowElement, visibleColumnIndex);\n                });\n        } else {\n            this.focusNextElement(rowElement, visibleColumnIndex);\n        }\n    }\n\n    protected focusElem(rowElement, visibleColumnIndex) {\n        if (rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n            rowElement.focus();\n        } else {\n            const isSummaryRow = rowElement.tagName.toLowerCase() === 'igx-grid-summary-row';\n            if (this.isColumnFullyVisible(visibleColumnIndex)) {\n                const cellSelector = this.getCellSelector(visibleColumnIndex, isSummaryRow);\n                const cell = rowElement.querySelector(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                cell.focus();\n                return cell;\n            }\n            this.performHorizontalScrollToCell(parseInt(\n                rowElement.getAttribute('data-rowindex'), 10), visibleColumnIndex, isSummaryRow);\n        }\n    }\n\n    protected focusNextElement(rowElement, visibleColumnIndex) {\n        return this.focusElem(rowElement.nextElementSibling, visibleColumnIndex);\n    }\n\n    public goToFirstCell() {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        const horizontalScroll = this.grid.dataRowList.first.virtDirRow.getHorizontalScroll();\n        if (verticalScroll.scrollTop === 0) {\n            this.onKeydownHome(this.grid.dataRowList.first.index);\n        } else {\n            if (!horizontalScroll.clientWidth || parseInt(horizontalScroll.scrollLeft, 10) <= 1 || this.grid.pinnedColumns.length) {\n                this.navigateTop(0);\n            } else {\n               this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n                this.horizontalScroll(this.grid.dataRowList.first.index).scrollTo(0);\n                this.grid.parentVirtDir.onChunkLoad\n                    .pipe(first())\n                    .subscribe(() => {\n                        this.navigateTop(0);\n                    });\n            }\n        }\n    }\n\n    public goToLastCell() {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {\n            const rows = this.getAllRows();\n            const rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);\n            this.onKeydownEnd(rowIndex);\n        } else {\n           this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.scrollTo(this.grid.verticalScrollContainer.igxForOf.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const rows = this.getAllRows();\n                    if (rows.length > 0) {\n                        const rowIndex = parseInt(rows[rows.length - 1].getAttribute('data-rowIndex'), 10);\n                        this.onKeydownEnd(rowIndex);\n                    }\n                });\n        }\n    }\n\n    public goToLastBodyElement() {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        if (verticalScroll.scrollHeight === 0 ||\n            verticalScroll.scrollTop === verticalScroll.scrollHeight - this.grid.verticalScrollContainer.igxForContainerSize) {\n            const rowIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;\n            const row = this.grid.nativeElement.querySelector(`[data-rowindex=\"${rowIndex}\"]`);\n            if (row && row.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n                row.focus();\n                return;\n            }\n            const isSummary = (row && row.tagName.toLowerCase() === 'igx-grid-summary-row') ? true : false;\n            this.onKeydownEnd(rowIndex, isSummary);\n        } else {\n            this.grid.verticalScrollContainer.scrollTo(this.grid.verticalScrollContainer.igxForOf.length - 1);\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first()).subscribe(() => {\n                    const rowIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;\n                    const row = this.grid.nativeElement.querySelector(`[data-rowindex=\"${rowIndex}\"]`);\n                    if (row && row.tagName.toLowerCase() === 'igx-grid-groupby-row') {\n                        row.focus();\n                        return;\n                    }\n                    const isSummary = (row && row.tagName.toLowerCase() === 'igx-grid-summary-row') ? true : false;\n                    this.onKeydownEnd(rowIndex, isSummary);\n                });\n        }\n    }\n\n    public performTab(currentRowEl, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummaryRow = selectedNode.isSummaryRow;\n        if (isSummaryRow && rowIndex === 0 &&\n            this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            return;\n        }\n\n        if (this.isRowInEditMode(rowIndex)) {\n            this.moveNextEditable(rowIndex, visibleColumnIndex);\n            return;\n        }\n\n        if (this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex) {\n            const rowEl = this.grid.rowList.find(row => row.index === rowIndex + 1) ?\n                this.grid.rowList.find(row => row.index === rowIndex + 1) :\n                this.grid.summariesRowList.find(row => row.index === rowIndex + 1);\n            if (rowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1 && this.grid.rootSummariesEnabled) {\n                this.onKeydownHome(0, true);\n                return;\n            }\n            if (rowEl) {\n                this.navigateDown(currentRowEl, { row: rowIndex, column: 0 });\n            }\n        } else {\n            const cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummaryRow);\n            if (cell) {\n                this.onKeydownArrowRight(cell, selectedNode);\n            }\n        }\n    }\n\n    public moveFocusToFilterCell(toStart?: boolean) {\n        if (this.grid.filteringService.isFilterRowVisible) {\n            this.grid.filteringService.focusFilterRowCloseButton();\n            return;\n        }\n\n        const columns = this.grid.filteringService.unpinnedFilterableColumns;\n        const targetIndex = toStart ? 0 : columns.length - 1;\n        const visibleIndex = columns[targetIndex].visibleIndex;\n        const isVisible = toStart ? this.isColumnLeftEdgeVisible(visibleIndex) : this.isColumnRightEdgeVisible(visibleIndex);\n        if (isVisible) {\n            this.grid.filteringService.focusFilterCellChip(columns[targetIndex], false);\n        } else {\n            this.grid.filteringService.scrollToFilterCell(columns[targetIndex], false);\n        }\n    }\n\n    public navigatePrevFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const prevFilterableIndex = cols.indexOf(column) - 1;\n        const visibleIndex = column.visibleIndex;\n        if (visibleIndex === 0 || prevFilterableIndex < 0) {\n            // prev is not filter cell\n            const firstFiltarableCol = this.getFirstPinnedFilterableColumn();\n            if (!firstFiltarableCol || column === firstFiltarableCol) {\n                eventArgs.preventDefault();\n            }\n            return;\n        }\n        const prevColumn = cols[prevFilterableIndex];\n        const prevVisibleIndex = prevColumn.visibleIndex;\n\n        if (prevFilterableIndex >= 0 && visibleIndex > 0 && !this.isColumnLeftEdgeVisible(prevVisibleIndex) && !column.pinned) {\n            eventArgs.preventDefault();\n            this.grid.filteringService.scrollToFilterCell(prevColumn, false);\n        }\n    }\n\n    public navigateFirstCellIfPossible(eventArgs) {\n        if (this.grid.rowList.length > 0) {\n            if (this.grid.rowList.filter(row => row instanceof IgxGridGroupByRowComponent).length > 0) {\n                eventArgs.stopPropagation();\n                return;\n            }\n            this.goToFirstCell();\n        } else if (this.grid.rootSummariesEnabled) {\n            this.onKeydownHome(0, true);\n        }\n        eventArgs.preventDefault();\n    }\n\n    public navigateNextFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const nextFilterableIndex = cols.indexOf(column) + 1;\n        if (nextFilterableIndex >= this.grid.filteringService.unpinnedFilterableColumns.length) {\n            // next is not filter cell\n            this.navigateFirstCellIfPossible(eventArgs);\n            return;\n        }\n        const nextColumn = cols[nextFilterableIndex];\n        const nextVisibleIndex = nextColumn.visibleIndex;\n        if (!column.pinned && !this.isColumnRightEdgeVisible(nextVisibleIndex)) {\n            eventArgs.preventDefault();\n            this.grid.filteringService.scrollToFilterCell(nextColumn, true);\n        } else if (column === this.getLastPinnedFilterableColumn() && !this.isColumnRightEdgeVisible(nextVisibleIndex)) {\n            this.grid.filteringService.scrollToFilterCell(nextColumn, false);\n            eventArgs.stopPropagation();\n        }\n    }\n\n    private getLastPinnedFilterableColumn(): IgxColumnComponent {\n        const pinnedFilterableColums =\n            this.grid.pinnedColumns.filter(col => !(col.columnGroup) && col.filterable);\n        return pinnedFilterableColums[pinnedFilterableColums.length - 1];\n    }\n\n    private getFirstPinnedFilterableColumn(): IgxColumnComponent {\n        return this.grid.pinnedColumns.filter(col => !(col.columnGroup) && col.filterable)[0];\n    }\n\n    public performShiftTabKey(currentRowEl, selectedNode: ISelectionNode) {\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (isSummary && rowIndex === 0 && visibleColumnIndex === 0 && this.grid.rowList.length) {\n            this.goToLastBodyElement();\n            return;\n        }\n\n        if (this.isRowInEditMode(rowIndex)) {\n            this.movePreviousEditable(rowIndex, visibleColumnIndex);\n            return;\n        }\n\n        if (visibleColumnIndex === 0) {\n            if (rowIndex === 0 && this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                this.moveFocusToFilterCell();\n            } else {\n                this.navigateUp(currentRowEl,\n                    {\n                        row: rowIndex,\n                        column: this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex\n                    });\n            }\n        } else {\n            const cell = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary);\n            if (cell) {\n                this.onKeydownArrowLeft(cell, selectedNode);\n            }\n        }\n    }\n\n    public shouldPerformVerticalScroll(targetRowIndex: number, visibleColumnIndex: number): boolean {\n        const containerTopOffset = parseInt(this.verticalDisplayContainerElement.style.top, 10);\n        const targetRow = this.grid.summariesRowList.filter(s => s.index !== 0)\n            .concat(this.grid.rowList.toArray()).find(r => r.index === targetRowIndex);\n        const rowHeight = this.grid.verticalScrollContainer.getSizeAt(targetRowIndex);\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const targetEndTopOffset = targetRow ? targetRow.nativeElement.offsetTop + rowHeight + containerTopOffset :\n            containerHeight + rowHeight;\n        if (!targetRow || targetRow.nativeElement.offsetTop < Math.abs(containerTopOffset)\n            || containerHeight && containerHeight < targetEndTopOffset) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public performVerticalScrollToCell(rowIndex: number, visibleColIndex: number, cb?: () => void) {\n        this.grid.verticalScrollContainer.scrollTo(rowIndex);\n        this.grid.verticalScrollContainer.onChunkLoad\n            .pipe(first()).subscribe(() => {\n                cb();\n            });\n    }\n\n    public performHorizontalScrollToCell(\n        rowIndex: number, visibleColumnIndex: number, isSummary: boolean = false, cb?: () => void) {\n        const unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex);\n       this.getFocusableGrid().nativeElement.focus({ preventScroll: true });\n        this.grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(() => {\n                if (cb) {\n                    cb();\n                } else {\n                    const cellElement = this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary);\n                    if (cellElement) {\n                        cellElement.focus({ preventScroll: true });\n                    }\n                }\n            });\n        this.horizontalScroll(rowIndex).scrollTo(unpinnedIndex);\n    }\n\n    protected getFocusableGrid() {\n        return this.grid;\n    }\n\n    protected getRowByIndex(index, selector = this.getRowSelector()) {\n        return this.grid.nativeElement.querySelector(\n            `${selector}[data-rowindex=\"${index}\"]`);\n    }\n\n    protected getNextRowByIndex(nextIndex) {\n        return this.grid.tbody.nativeElement.querySelector(\n            `[data-rowindex=\"${nextIndex}\"]`);\n    }\n\n    private getAllRows() {\n        const selector = this.getRowSelector();\n        return this.grid.nativeElement.querySelectorAll(selector);\n    }\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false): string {\n        return isSummary ? 'igx-grid-summary-cell' : 'igx-grid-cell';\n    }\n\n    protected getRowSelector(): string {\n        return 'igx-grid-row';\n    }\n}\n","/* tslint:disable */\nexport default [\n    {\n        name: 'add_filter',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19 15v-3h-2v3h-3v2h3v3h2v-3h3v-2h-3zM5 10h10v2H5zM2 5h16v2H2zM8 15h4v2H8z\"/>\n      </svg>`\n    },\n    {\n        name: 'contains',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" id=\"Layer_1\" data-name=\"Layer 1\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 3v18h18V3zm16 16H5V5h14z\"/>\n        <path d=\"M12 11.3a4.39 4.39 0 0 0-2.54.63 2.07 2.07 0 0 0-.9 1.78 2.29 2.29 0 0 0 .66 1.74 2.63 2.63 0 0 0 1.89.63 2.39 2.39 0 0 0 1.32-.37 3.05 3.05 0 0 0 1-.93 3.72 3.72 0 0 0 .08.57c0 .19.1.38.16.58h1.79a4.51 4.51 0 0 1-.21-.88 5.57 5.57 0 0 1-.07-.93v-3.5a2.44 2.44 0 0 0-.84-2 3.34 3.34 0 0 0-2.22-.7 3.54 3.54 0 0 0-2.3.72A1.93 1.93 0 0 0 9 10.29h1.71a.93.93 0 0 1 .29-.71 1.5 1.5 0 0 1 1-.29 1.45 1.45 0 0 1 1 .35 1.3 1.3 0 0 1 .37 1v.69zm1.4 1.08v1.17a1.61 1.61 0 0 1-.71.77 2.27 2.27 0 0 1-1.21.34 1.18 1.18 0 0 1-.84-.27.92.92 0 0 1-.3-.72 1.16 1.16 0 0 1 .44-.9 1.76 1.76 0 0 1 1.22-.39z\"/>\n      </svg>`\n    },\n    {\n        name: 'does_not_contain',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21,19.74V3H4.26L2.89,1.63,1.63,2.92,3,4.29V21H19.73l1.37,1.37,1.27-1.26ZM5,19V6.28l5.28,5.27a3.19,3.19,0,0,0-.81.38,2.07,2.07,0,0,0-.9,1.78,2.29,2.29,0,0,0,.66,1.74,2.63,2.63,0,0,0,1.89.63,2.39,2.39,0,0,0,1.32-.37,3.05,3.05,0,0,0,1-.93,3.72,3.72,0,0,0,.08.57c0,.19.1.38.16.58h1L17.73,19Zm5.79-6.23a1.31,1.31,0,0,1,.45-.25l1.37,1.36.28.29a1.57,1.57,0,0,1-.19.15,2.27,2.27,0,0,1-1.21.34,1.18,1.18,0,0,1-.84-.27.92.92,0,0,1-.3-.72A1.16,1.16,0,0,1,10.79,12.77Zm2.6-1.47h-.83L10.94,9.68l.08-.1a1.5,1.5,0,0,1,1-.29,1.45,1.45,0,0,1,1,.35,1.3,1.3,0,0,1,.37,1ZM19,17.74l-3.85-3.85V10.62a2.44,2.44,0,0,0-.84-2,3.34,3.34,0,0,0-2.22-.7,3.64,3.64,0,0,0-2.24.67L6.26,5H19Z\"/>\n    </svg>`\n    },\n    {\n        name: 'all',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M2 14h8v2H2zM2 6h12v2H2zM16 17l-3-3-1.5 1.5L16 20l7-7-1.5-1.5L16 17zM2 10h12v2H2z\"/>\n      </svg>\n      `\n    },\n    {\n        name: 'empty',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 17h2v2H5zM13 17h2v2h-2zM5 13h2v2H5zM17 17h2v2h-2zM13 5h2v2h-2zM9 17h2v2H9zM17 9h2v2h-2zM17 13h2v2h-2zM17 5h2v2h-2zM5 9h2v2H5zM5 5h2v2H5zM9 5h2v2H9z\"/>\n      </svg>`\n    },\n    {\n        name: 'end_expression',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M13.14 6.76L17.49 12l-4.35 5.24 1.54 1.28L20.09 12l-5.41-6.52-1.54 1.28z\"/>\n        <path d=\"M11.91 11h2v2h-2zM7.91 11h2v2h-2zM3.91 11h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'ends_with',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 14.5h2v2H3zM11 14.5h2v2h-2zM7 14.5h2v2H7zM20.8 14.8v-3A2.1 2.1 0 0 0 20 10a3 3 0 0 0-2-.6 3 3 0 0 0-2 .6 1.7 1.7 0 0 0-.7 1.5h1.5a.8.8 0 0 1 .3-.7 1.3 1.3 0 0 1 .9-.3 1.3 1.3 0 0 1 .9.4 1.1 1.1 0 0 1 .3.8v.6H18a3.8 3.8 0 0 0-2.2.6 1.8 1.8 0 0 0-.8 1.5 2 2 0 0 0 .6 1.6 2.3 2.3 0 0 0 1.6.6 2.1 2.1 0 0 0 1.2-.4 2.8 2.8 0 0 0 .8-.8 4.3 4.3 0 0 0 .1.5l.1.5H21a4.1 4.1 0 0 1-.2-.7 5.4 5.4 0 0 1 0-1zm-1.6-.5a1.5 1.5 0 0 1-.6.7 2 2 0 0 1-1 .2 1.1 1.1 0 0 1-.8-.2.8.8 0 0 1-.2-.6 1 1 0 0 1 .3-.8 1.5 1.5 0 0 1 1.1-.3h1.2z\"/>\n      </svg>`\n    },\n    {\n        name: 'equals',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 13.5h14v2H5zM5 8.5h14v2H5z\"/>\n      </svg>`\n    },\n    {\n        name: 'greater_than_or_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5.99 19h12.02v2H5.99zM18 9.47L6 3v2.11L15.09 10 6 14.9v2.11l12-6.47V9.47z\"/>\n      </svg>`\n    },\n    {\n        name: 'greater_than',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 7.11L15.09 12 6 16.89V19l12-6.46v-1.08L6 5v2.11z\"/>\n      </svg>\n      `\n    },\n    {\n        name: 'is_after',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15 7h4v10h-4v2h6V5h-6v2zM11 3h2v18h-2zM7 5h2v2H7zM3 5h2v2H3zM3 17h2v2H3zM3 13h2v2H3zM3 9h2v2H3zM7 17h2v2H7z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_before',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M3 19h6v-2H5V7h4V5H3v14zM11 3h2v18h-2zM15 5h2v2h-2zM19 5h2v2h-2zM19 13h2v2h-2zM15 17h2v2h-2zM19 17h2v2h-2zM19 9h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_false',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M8 5a7 7 0 1 0 7 7 7 7 0 0 0-7-7zm4.31 9.79l-1.52 1.52L8 13.52l-2.79 2.79-1.52-1.52L6.48 12 3.69 9.21l1.52-1.52L8 10.48l2.79-2.79 1.52 1.52L9.52 12zM18 7a5 5 0 0 0-3 1.06 7.48 7.48 0 0 1 .49 1 3.89 3.89 0 1 1 0 5.82 8.08 8.08 0 0 1-.49 1A5 5 0 1 0 18 7z\"/>\n        <path d=\"M17.52 13.85l2.91-2.92-.78-.78-2.13 2.12-1.17-1.15-.38.37-.41.41.42.42L17 13.34l.52.51z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_not_null',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M16.58 6.07l.79-1.36-1.74-1-.78 1.35a7.5 7.5 0 0 0-7.43 12.87l-.79 1.36 1.74 1 .78-1.35a7.5 7.5 0 0 0 7.43-12.87zM6.5 12A5.5 5.5 0 0 1 12 6.5a5.65 5.65 0 0 1 1.84.32l-5.41 9.36A5.49 5.49 0 0 1 6.5 12zm5.5 5.5a5.65 5.65 0 0 1-1.84-.32l5.41-9.36A5.5 5.5 0 0 1 12 17.5z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_null',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M12 4.5a7.5 7.5 0 1 0 7.5 7.5A7.5 7.5 0 0 0 12 4.5zm0 13a5.5 5.5 0 1 1 5.5-5.5 5.5 5.5 0 0 1-5.5 5.5z\"/>\n      </svg>`\n    },\n    {\n        name: 'is_true',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19.44 14.22zM16.56 14.22zM16.56 14.22L18 12.79l1.44 1.43.78-.78L18.79 12l1.43-1.44-.78-.78L18 11.21l-1.44-1.43-.78.78L17.21 12l-1.43 1.44.78.78z\"/>\n        <path d=\"M18 7a5 5 0 0 0-3 1.06 7.48 7.48 0 0 1 .49 1 3.89 3.89 0 1 1 0 5.82 8.08 8.08 0 0 1-.49 1A5 5 0 1 0 18 7zM8 5a7 7 0 1 0 7 7 7 7 0 0 0-7-7zm-.93 10.18l-3.38-3.37 1.13-1.12 2.25 2.25 4.11-4.12 1.13 1.12z\"/>\n      </svg>`\n    },\n    {\n        name: 'last_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M17.5 14a4.48 4.48 0 1 0 4.5 4.5 4.47 4.47 0 0 0-4.5-4.5zm3.5 5.5h-4v2l-3-3 3-3v2h4zM5 9h2v2H5zM5 13h2v2H5zM10 13h2v2h-2zM5 17h2v2H5zM10 17h2v2h-2zM10 9h2v2h-2zM15 9h2v2h-2z\"/>\n        <path d=\"M4 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H7V1H5v2H4a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H4z\"/>\n      </svg>`\n    },\n    {\n        name: 'last_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 10v11H7v2h14a2 2 0 0 0 2-2V10z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M8.87 9l-2.99 3 2.99 3v-2.25h5.26v-1.5H8.87V9z\"/>\n      </svg>`\n    },\n    {\n        name: 'less_than_or_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5.99 19h12.02v2H5.99zM18 14.9L8.91 10 18 5.11V3L6 9.47v1.07l12 6.47V14.9z\"/>\n      </svg>`\n    },\n    {\n        name: 'less_than',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 12.54L18 19v-2.11L8.91 12 18 7.11V5L6 11.46v1.08z\"/>\n      </svg>`\n    },\n    {\n        name: 'next_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M20 14.76a4.5 4.5 0 1 0 2 3.74 4.47 4.47 0 0 0-2-3.74zm-2 6.74v-2h-4v-2h4v-2l3 3zM5 9h2v2H5zM5 13h2v2H5zM10 13h2v2h-2zM5 17h2v2H5zM10 17h2v2h-2zM10 9h2v2h-2zM15 9h2v2h-2z\"/>\n        <path d=\"M4 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H7V1H5v2H4a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H4z\"/>\n      </svg>`\n    },\n    {\n        name: 'next_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 21H7v2h14a2 2 0 0 0 2-2V10h-2z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M11.13 11.25H5.88v1.5h5.25V15l3-3-3-3v2.25z\"/>\n      </svg>`\n    },\n    {\n        name: 'not_empty',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M5 9h2v2H5zM9 17h2v2H9zM13 17h2v2h-2zM17 9h2v2h-2zM17 5h2v2h-2zM5 17h2v2H5zM13 5h2v2h-2zM5 13h2v2H5zM19 15v-2h-2v.47L18.53 15H19zM11 7V5H9v.46L10.54 7H11zM2.76 1.76L1.5 3.06 20.97 22.5l1.26-1.26-8.89-8.89L2.76 1.76z\"/>\n      </svg>`\n    },\n    {\n        name: 'not_equal',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M17.37 4.71l-1.74-1-2.76 4.79H5v2h6.71l-1.73 3H5v2h3.82l-2.19 3.79 1.74 1 2.76-4.79H19v-2h-6.71l1.73-3H19v-2h-3.82l2.19-3.79z\"/>\n      </svg>`\n    },\n    {\n        name: 'start_expression',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M18.1 11h2v2h-2zM10.1 11h2v2h-2z\"/>\n        <path d=\"M10.9 6.8L9.3 5.5 4 12l5.4 6.5 1.6-1.3L6.5 12 11 6.8zM14.1 11h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'starts_with',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path fill=\"none\" d=\"M4.97 13.23h3.06L6.5 9.12l-1.53 4.11z\"/>\n        <path d=\"M5.89 7.5L2 16.5h1.72l.73-1.8h4.1l.73 1.8H11l-3.89-9zM5 13.23l1.5-4.11L8 13.23zM12 14.5h2v2h-2zM20 14.5h2v2h-2zM16 14.5h2v2h-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'this_month',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M6 9h2v2H6zM6 13h2v2H6zM11 13h2v2h-2zM6 17h2v2H6zM11 17h2v2h-2zM11 9h2v2h-2zM16 9h2v2h-2zM21 14.76a4.5 4.5 0 1 0 2 3.74 4.47 4.47 0 0 0-2-3.74zm-2.94 5.41l-1.75-1.76.69-.71 1.05 1L20 16.83l.71.71z\"/>\n        <path d=\"M5 8h14v4h2V5a2 2 0 0 0-2-2h-1V1h-2v2H8V1H6v2H5a2 2 0 0 0-2 2v15a2 2 0 0 0 2 2h7v-2H5z\"/>\n      </svg>`\n    },\n    {\n        name: 'this_year',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 21H7v2h14a2 2 0 0 0 2-2V10h-2z\"/>\n        <path d=\"M19 17V5a2 2 0 0 0-2-2h-1V1h-2v2H6V1H4v2H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2zM3 17V7h14v10H3z\"/>\n        <path d=\"M8.85 13.15l-1.77-1.77-.88.89 2.65 2.65 4.95-4.96-.88-.88-4.07 4.07z\"/>\n      </svg>`\n    },\n    {\n        name: 'today',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M19 4h-1V2h-2v2H8V2H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2zm0 16H5V9h14z\"/>\n        <path d=\"M16.53 12.06L15.47 11l-4.88 4.88-2.12-2.12-1.06 1.06L10.59 18l5.94-5.94z\"/>\n      </svg>`\n    },\n    {\n        name: 'ungroup',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15 15h5v5h-5zM6 13h5v5H6zM13 6h5v5h-5zM6 6h5v5H6z\"/>\n        <path d=\"M20 2H4a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h9v-2H4V4h16v9h2V4a2 2 0 0 0-2-2z\"/>\n      </svg>`\n    },\n    {\n        name: 'yesterday',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M10.68 15.38h6.13v-1.75h-6.13V11l-3.49 3.5 3.49 3.5v-2.62z\"/>\n        <path d=\"M19 4h-1V2h-2v2H8V2H6v2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2zm0 16H5V9h14z\"/>\n      </svg>`\n    },\n    {\n        name: 'pin',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path d=\"M15.18 2.25l7.07 7.07-2.83-.01-3.54 3.55.01 4.24-3.53-3.54-5.66 5.66H5.28V17.8l5.66-5.66L7.4 8.61l4.24.01 3.55-3.54-.01-2.83z\"/>\n      </svg>`\n    },\n    {\n        name: 'unpin',\n        value: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <path fill=\"none\" d=\"M0 0h24v25H0V0z\"/>\n        <path d=\"M11.84 14.08L6.7 19.22H5.28V17.8l5.14-5.14L2 4.26 3.29 3l18 18L20 22.21zm4-.49l-5-5h.73l3.55-3.54v-2.8l7.07 7.07h-2.77l-3.54 3.54z\" />\n      </svg>`\n    }\n];\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { IgxIconService } from '../../icon/icon.service';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { IgxGridBaseComponent, IColumnResizeEventArgs, IGridDataBindable } from '../grid-base.component';\nimport icons from './svgIcons';\nimport { IFilteringExpression, FilteringLogic } from '../../data-operations/filtering-expression.interface';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { IForOfState } from '../../directives/for-of/for_of.directive';\nimport { IgxGridSortingPipe } from '../grid/grid.pipes';\nimport { IgxDatePipeComponent } from '../grid.common';\nimport { IgxColumnComponent } from '../column.component';\nimport { IFilteringOperation } from '../../data-operations/filtering-condition';\nimport { GridBaseAPIService } from '../api.service';\n\nconst FILTERING_ICONS_FONT_SET = 'filtering-icons';\n\n/**\n *@hidden\n */\nexport class ExpressionUI {\n    public expression: IFilteringExpression;\n    public beforeOperator: FilteringLogic;\n    public afterOperator: FilteringLogic;\n    public isSelected = false;\n    public isVisible = true;\n}\n\n/**\n *@hidden\n */\n@Injectable()\nexport class IgxFilteringService implements OnDestroy {\n\n    private columnsWithComplexFilter = new Set<string>();\n    private areEventsSubscribed = false;\n    private destroy$ = new Subject<boolean>();\n    private isFiltering = false;\n    private columnToExpressionsMap = new Map<string, ExpressionUI[]>();\n    private _datePipe: IgxDatePipeComponent;\n    private columnStartIndex = -1;\n\n    public gridId: string;\n    public isFilterRowVisible = false;\n    public filteredColumn: IgxColumnComponent = null;\n    public selectedExpression: IFilteringExpression = null;\n    public columnToFocus: IgxColumnComponent = null;\n    public shouldFocusNext = false;\n    public columnToMoreIconHidden = new Map<string, boolean>();\n\n    grid: IgxGridBaseComponent;\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>, private iconService: IgxIconService) {}\n\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    public get displayContainerWidth() {\n        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10);\n    }\n\n    public get displayContainerScrollLeft() {\n        return parseInt(this.grid.parentVirtDir.getHorizontalScroll().scrollLeft, 10);\n    }\n\n    public get areAllColumnsInView() {\n        return parseInt(this.grid.parentVirtDir.dc.instance._viewContainer.element.nativeElement.offsetWidth, 10) === 0;\n    }\n\n    public get unpinnedFilterableColumns() {\n        return this.grid.unpinnedColumns.filter(col => !col.columnGroup && col.filterable);\n    }\n\n    public get unpinnedColumns() {\n        return this.grid.unpinnedColumns.filter(col => !col.columnGroup);\n    }\n\n    public get datePipe(): IgxDatePipeComponent {\n        if (!this._datePipe) {\n            this._datePipe = new IgxDatePipeComponent(this.grid.locale);\n        }\n        return this._datePipe;\n    }\n\n    /**\n     * Subscribe to grid's events.\n     */\n    public subscribeToEvents() {\n        if (!this.areEventsSubscribed) {\n            this.areEventsSubscribed = true;\n\n            this.grid.onColumnResized.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IColumnResizeEventArgs) => {\n                this.updateFilteringCell(eventArgs.column);\n            });\n\n            this.grid.parentVirtDir.onChunkLoad.pipe(takeUntil(this.destroy$)).subscribe((eventArgs: IForOfState) => {\n                if (eventArgs.startIndex !== this.columnStartIndex) {\n                    this.columnStartIndex = eventArgs.startIndex;\n                    this.grid.filterCellList.forEach((filterCell) => {\n                        filterCell.updateFilterCellArea();\n                    });\n                }\n                if (this.columnToFocus) {\n                    this.focusFilterCellChip(this.columnToFocus, false);\n                    this.columnToFocus = null;\n                }\n            });\n\n            this.grid.onColumnMovingEnd.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                this.grid.filterCellList.forEach((filterCell) => {\n                    filterCell.updateFilterCellArea();\n                });\n            });\n        }\n    }\n\n    /**\n     * Internal method to create expressionsTree and filter grid used in both filter modes.\n     */\n    public filterInternal(field: string, expressions: FilteringExpressionsTree | Array<ExpressionUI> = null): void {\n        this.isFiltering = true;\n\n        let expressionsTree;\n        if (expressions instanceof FilteringExpressionsTree) {\n            expressionsTree = expressions;\n        } else {\n            expressionsTree = this.createSimpleFilteringTree(field, expressions);\n        }\n\n        if (expressionsTree.filteringOperands.length === 0) {\n            this.clearFilter(field);\n        } else {\n            this.filter(field, null, expressionsTree);\n        }\n\n        this.isFiltering = false;\n    }\n\n    /**\n     * Execute filtering on the grid.\n     */\n    public filter(field: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase?: boolean) {\n        const col = this.gridAPI.get_column_by_name(field);\n        const filteringIgnoreCase = ignoreCase || (col ? col.filteringIgnoreCase : false);\n\n        if (conditionOrExpressionTree) {\n            this.gridAPI.filter(field, value, conditionOrExpressionTree, filteringIgnoreCase);\n        } else {\n            const expressionsTreeForColumn = this.grid.filteringExpressionsTree.find(field);\n            if (!expressionsTreeForColumn) {\n                throw new Error('Invalid condition or Expression Tree!');\n            } else if (expressionsTreeForColumn instanceof FilteringExpressionsTree) {\n                this.gridAPI.filter(field, value, expressionsTreeForColumn, filteringIgnoreCase);\n            } else {\n                const expressionForColumn = expressionsTreeForColumn as IFilteringExpression;\n                this.gridAPI.filter(field, value, expressionForColumn.condition, filteringIgnoreCase);\n            }\n        }\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(col.filteringExpressionsTree));\n    }\n\n    /**\n     * Clear the filter of a given column.\n     */\n    public clearFilter(field: string): void {\n        if (field) {\n            const column = this.gridAPI.get_column_by_name(field);\n            if (!column) {\n                return;\n            }\n        }\n\n        this.isFiltering = true;\n\n        this.gridAPI.clear_filter(field);\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(null));\n\n        if (field) {\n            const expressions = this.getExpressions(field);\n            expressions.length = 0;\n        }\n\n        this.isFiltering = false;\n    }\n\n    /**\n     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.\n     */\n    public filterGlobal(value: any, condition, ignoreCase?) {\n        this.gridAPI.filter_global(value, condition, ignoreCase);\n\n        // Wait for the change detection to update filtered data through the pipes and then emit the event.\n        requestAnimationFrame(() => this.grid.onFilteringDone.emit(this.grid.filteringExpressionsTree));\n    }\n\n    /**\n     * Register filtering SVG icons in the icon service.\n     */\n    public registerSVGIcons(): void {\n        for (const icon of icons) {\n            if (!this.iconService.isSvgIconCached(icon.name, FILTERING_ICONS_FONT_SET)) {\n                this.iconService.addSvgIconFromText(icon.name, icon.value, FILTERING_ICONS_FONT_SET);\n            }\n        }\n    }\n\n    /**\n     * Returns the ExpressionUI array for a given column.\n     */\n    public getExpressions(columnId: string): ExpressionUI[] {\n        if (!this.columnToExpressionsMap.has(columnId)) {\n            const column = this.grid.columns.find((col) => col.field === columnId);\n            const expressionUIs = new Array<ExpressionUI>();\n\n            this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, expressionUIs);\n            this.columnToExpressionsMap.set(columnId, expressionUIs);\n\n            return expressionUIs;\n        }\n\n        return this.columnToExpressionsMap.get(columnId);\n    }\n\n    /**\n     * Recreates all ExpressionUIs for all columns. Executed after filtering to refresh the cache.\n     */\n    public refreshExpressions() {\n        if (!this.isFiltering) {\n            this.columnsWithComplexFilter.clear();\n\n            this.columnToExpressionsMap.forEach((value: ExpressionUI[], key: string) => {\n                const column = this.grid.columns.find((col) => col.field === key);\n                if (column) {\n                    value.length = 0;\n\n                    this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, value);\n\n                    const isComplex = this.isFilteringTreeComplex(column.filteringExpressionsTree);\n                    if (isComplex) {\n                        this.columnsWithComplexFilter.add(key);\n                    }\n\n                    this.updateFilteringCell(column);\n                } else {\n                    this.columnToExpressionsMap.delete(key);\n                }\n            });\n        }\n    }\n\n    /**\n     * Remove an ExpressionUI for a given column.\n     */\n    public removeExpression(columnId: string, indexToRemove: number) {\n        const expressionsList = this.getExpressions(columnId);\n\n        if (indexToRemove === 0 && expressionsList.length > 1) {\n            expressionsList[1].beforeOperator = null;\n        } else if (indexToRemove === expressionsList.length - 1) {\n            expressionsList[indexToRemove - 1].afterOperator = null;\n        } else {\n            expressionsList[indexToRemove - 1].afterOperator = expressionsList[indexToRemove + 1].beforeOperator;\n            expressionsList[0].beforeOperator = null;\n            expressionsList[expressionsList.length - 1].afterOperator = null;\n        }\n\n        expressionsList.splice(indexToRemove, 1);\n    }\n\n    /**\n     * Generate filtering tree for a given column from existing ExpressionUIs.\n     */\n    public createSimpleFilteringTree(columnId: string, expressionUIList = null): FilteringExpressionsTree {\n        const expressionsList = expressionUIList ? expressionUIList : this.getExpressions(columnId);\n        const expressionsTree = new FilteringExpressionsTree(FilteringLogic.Or, columnId);\n        let currAndBranch: FilteringExpressionsTree;\n        let currExpressionUI: ExpressionUI;\n\n        for (let i = 0; i < expressionsList.length; i++) {\n            currExpressionUI = expressionsList[i];\n\n            if (!currExpressionUI.expression.condition.isUnary && currExpressionUI.expression.searchVal === null) {\n                if (currExpressionUI.afterOperator === FilteringLogic.And && !currAndBranch) {\n                    currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);\n                    expressionsTree.filteringOperands.push(currAndBranch);\n                }\n                continue;\n            }\n\n            if ((currExpressionUI.beforeOperator === undefined || currExpressionUI.beforeOperator === null ||\n                 currExpressionUI.beforeOperator === FilteringLogic.Or) &&\n                currExpressionUI.afterOperator === FilteringLogic.And) {\n\n                currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);\n                expressionsTree.filteringOperands.push(currAndBranch);\n                currAndBranch.filteringOperands.push(currExpressionUI.expression);\n\n            } else if (currExpressionUI.beforeOperator === FilteringLogic.And) {\n                currAndBranch.filteringOperands.push(currExpressionUI.expression);\n            } else {\n                expressionsTree.filteringOperands.push(currExpressionUI.expression);\n                currAndBranch = null;\n            }\n        }\n\n        return expressionsTree;\n    }\n\n    /**\n     * Returns whether a complex filter is applied to a given column.\n     */\n    public isFilterComplex(columnId: string) {\n        if (this.columnsWithComplexFilter.has(columnId)) {\n            return true;\n        }\n\n        const column = this.grid.columns.find((col) => col.field === columnId);\n        const isComplex = this.isFilteringTreeComplex(column.filteringExpressionsTree);\n        if (isComplex) {\n            this.columnsWithComplexFilter.add(columnId);\n        }\n\n        return isComplex;\n    }\n\n    /**\n     * Returns the string representation of the FilteringLogic operator.\n     */\n    public getOperatorAsString(operator: FilteringLogic): any {\n        if (operator === 0) {\n            return this.grid.resourceStrings.igx_grid_filter_operator_and;\n        } else {\n            return this.grid.resourceStrings.igx_grid_filter_operator_or;\n        }\n    }\n\n    /**\n     * Generate the label of a chip from a given filtering expression.\n     */\n    public getChipLabel(expression: IFilteringExpression): any {\n        if (expression.condition.isUnary) {\n            return this.grid.resourceStrings[`igx_grid_filter_${expression.condition.name}`] || expression.condition.name;\n        } else if (expression.searchVal instanceof Date) {\n            return this.datePipe.transform(expression.searchVal, this.grid.locale);\n        } else {\n            return expression.searchVal;\n        }\n    }\n\n    /**\n     * Updates the content of a filterCell.\n     */\n    public updateFilteringCell(column: IgxColumnComponent) {\n        const filterCell = column.filterCell;\n        if (filterCell) {\n            filterCell.updateFilterCellArea();\n        }\n    }\n\n    /**\n     * Focus a chip in a filterCell.\n     */\n    public focusFilterCellChip(column: IgxColumnComponent, focusFirst: boolean) {\n        const filterCell = column.filterCell;\n        if (filterCell) {\n            filterCell.focusChip(focusFirst);\n        }\n    }\n\n    /**\n     * Focus the close button in the filtering row.\n     */\n    public focusFilterRowCloseButton() {\n        this.grid.filteringRow.closeButton.nativeElement.focus();\n    }\n\n    public get filteredData() {\n        return this.grid.filteredData;\n    }\n\n    /**\n     * Scrolls to a filterCell.\n     */\n    public scrollToFilterCell(column: IgxColumnComponent, shouldFocusNext: boolean) {\n        this.grid.nativeElement.focus({preventScroll: true});\n        this.columnToFocus = column;\n        this.shouldFocusNext = shouldFocusNext;\n\n        let currentColumnRight = 0;\n        let currentColumnLeft = 0;\n        for (let index = 0; index < this.unpinnedColumns.length; index++) {\n            currentColumnRight += parseInt(this.unpinnedColumns[index].width, 10);\n            if (this.unpinnedColumns[index] === column) {\n                currentColumnLeft = currentColumnRight - parseInt(this.unpinnedColumns[index].width, 10);\n                break;\n            }\n        }\n\n        const forOfDir = this.grid.headerContainer;\n        const width = this.displayContainerWidth + this.displayContainerScrollLeft;\n        if (shouldFocusNext) {\n            forOfDir.getHorizontalScroll().scrollLeft += currentColumnRight - width;\n        } else {\n            forOfDir.getHorizontalScroll().scrollLeft = currentColumnLeft;\n        }\n    }\n\n    private isFilteringTreeComplex(expressions: IFilteringExpressionsTree | IFilteringExpression): boolean {\n        if (!expressions) {\n            return false;\n        }\n\n        if (expressions instanceof FilteringExpressionsTree) {\n            const expressionsTree = expressions as FilteringExpressionsTree;\n            if (expressionsTree.operator === FilteringLogic.Or) {\n                const andOperatorsCount = this.getChildAndOperatorsCount(expressionsTree);\n\n                // having more that 'And' and operator in the sub-tree means that the filter could not be represented without parentheses.\n                return andOperatorsCount > 1;\n            }\n\n            let isComplex = false;\n            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                isComplex = isComplex || this.isFilteringTreeComplex(expressionsTree.filteringOperands[i]);\n            }\n\n            return isComplex;\n        }\n\n        return false;\n    }\n\n    private getChildAndOperatorsCount(expressions: IFilteringExpressionsTree): number {\n        let count = 0;\n        let operand;\n        for (let i = 0; i < expressions.filteringOperands.length; i++) {\n            operand = expressions[i];\n            if (operand instanceof FilteringExpressionsTree) {\n                if (operand.operator === FilteringLogic.And) {\n                    count++;\n                }\n\n                count = count + this.getChildAndOperatorsCount(operand);\n            }\n        }\n\n        return count;\n    }\n\n    public generateExpressionsList(expressions: IFilteringExpressionsTree | IFilteringExpression,\n        operator: FilteringLogic,\n        expressionsUIs: ExpressionUI[]): void {\n        this.generateExpressionsListRecursive(expressions, operator, expressionsUIs);\n\n        // The beforeOperator of the first expression and the afterOperator of the last expression should be null\n        if (expressionsUIs.length) {\n            expressionsUIs[expressionsUIs.length - 1].afterOperator = null;\n        }\n    }\n\n    private generateExpressionsListRecursive(expressions: IFilteringExpressionsTree | IFilteringExpression,\n                                    operator: FilteringLogic,\n                                    expressionsUIs: ExpressionUI[]): void {\n        if (!expressions) {\n            return;\n        }\n\n        if (expressions instanceof FilteringExpressionsTree) {\n            const expressionsTree = expressions as FilteringExpressionsTree;\n            for (let i = 0; i < expressionsTree.filteringOperands.length; i++) {\n                this.generateExpressionsListRecursive(expressionsTree.filteringOperands[i], expressionsTree.operator, expressionsUIs);\n            }\n            if (expressionsUIs.length) {\n                expressionsUIs[expressionsUIs.length - 1].afterOperator = operator;\n            }\n        } else {\n            const exprUI = new ExpressionUI();\n            exprUI.expression = expressions as IFilteringExpression;\n            exprUI.afterOperator = operator;\n\n            const prevExprUI = expressionsUIs[expressionsUIs.length - 1];\n            if (prevExprUI) {\n                exprUI.beforeOperator = prevExprUI.afterOperator;\n            }\n\n            expressionsUIs.push(exprUI);\n        }\n    }\n\n    public isFilteringExpressionsTreeEmpty(): boolean {\n        const expressionTree = this.grid.filteringExpressionsTree;\n        if (!expressionTree.filteringOperands || !expressionTree.filteringOperands.length) {\n            return true;\n        }\n\n        let expr: any;\n\n        for (let i = 0; i < expressionTree.filteringOperands.length; i++) {\n            expr = expressionTree.filteringOperands[i];\n\n            if ((expr instanceof FilteringExpressionsTree)) {\n                const exprTree = expr as FilteringExpressionsTree;\n                if (exprTree.filteringOperands && exprTree.filteringOperands.length) {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n","import { SimpleChanges, SimpleChange } from '@angular/core';\n\n/**\n* @hidden\n*/\nexport function WatchChanges(): PropertyDecorator {\n    return (target: any, key: string, propDesc?: PropertyDescriptor) => {\n        const privateKey = '_' + key.toString();\n        propDesc = propDesc || {\n            configurable: true,\n            enumerable: true,\n        };\n        propDesc.get = propDesc.get || (function (this: any) { return this[privateKey]; });\n        const originalSetter = propDesc.set || (function (this: any, val: any) { this[privateKey] = val; });\n\n        propDesc.set = function (this: any, val: any) {\n            const init = this._init;\n            const oldValue = this[key];\n            if (val !== oldValue || (typeof val === 'object' && val === oldValue)) {\n                originalSetter.call(this, val);\n                if (this.ngOnChanges && !init) {\n                    // in case wacthed prop changes trigger ngOnChanges manually\n                    const changes: SimpleChanges = {\n                        [key]: new SimpleChange(oldValue, val, false)\n                    };\n                    this.ngOnChanges(changes);\n               }\n            }\n        };\n        return propDesc;\n    };\n}\n","import {\n    AfterViewInit,\n    Component,\n    ChangeDetectionStrategy,\n    Input,\n    ViewChild\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { IgxFilterOptions } from '../../../directives/filter/filter.directive';\nimport { IChangeCheckboxEventArgs } from '../../../checkbox/checkbox.component';\nimport { IgxInputDirective } from '../../../directives/input/input.directive';\nimport { DisplayDensity } from '../../../core/density';\nimport { IgxForOfDirective } from '../../../directives/for-of/for_of.directive';\nimport { FilterListItem } from './grid.excel-style-filtering.component';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-search',\n    templateUrl: './excel-style-search.component.html'\n})\nexport class IgxExcelStyleSearchComponent implements AfterViewInit {\n\n    public searchValue: any;\n\n    @Input()\n    public data: FilterListItem[];\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @ViewChild('input', { read: IgxInputDirective, static: true })\n    public searchInput: IgxInputDirective;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChild(IgxForOfDirective, { static: true })\n    protected virtDir: IgxForOfDirective<any>;\n\n    constructor() { }\n\n    public ngAfterViewInit() {\n        requestAnimationFrame(() => {\n            this.virtDir.recalcUpdateSizes();\n        });\n    }\n\n    public clearInput() {\n        this.searchValue = null;\n    }\n\n    public onCheckboxChange(eventArgs: IChangeCheckboxEventArgs) {\n        const selectedIndex = this.data.indexOf(eventArgs.checkbox.value);\n        if (selectedIndex === 0) {\n            this.data.forEach(element => {\n                element.isSelected = eventArgs.checked;\n                this.data[0].indeterminate = false;\n            });\n        } else {\n            eventArgs.checkbox.value.isSelected = eventArgs.checked;\n            if (!this.data.slice(1, this.data.length).find(el => el.isSelected === false)) {\n                this.data[0].indeterminate = false;\n                this.data[0].isSelected = true;\n            } else if (!this.data.slice(1, this.data.length).find(el => el.isSelected === true)) {\n                this.data[0].indeterminate = false;\n                this.data[0].isSelected = false;\n            } else {\n                this.data[0].indeterminate = true;\n            }\n        }\n        eventArgs.checkbox.nativeCheckbox.nativeElement.blur();\n    }\n\n    public get itemSize() {\n        let itemSize = '40px';\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy: itemSize = '32px'; break;\n            case DisplayDensity.compact: itemSize = '24px'; break;\n            default: break;\n        }\n        return itemSize;\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    AfterViewInit,\n    Input,\n    Output,\n    EventEmitter,\n    ChangeDetectorRef,\n    ViewChild\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { ExpressionUI } from '../grid-filtering.service';\nimport { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';\nimport { IgxDropDownItemComponent, IgxDropDownComponent } from '../../../drop-down/index';\nimport { IgxInputGroupComponent, IgxInputDirective } from '../../../input-group/index';\nimport { DataType } from '../../../data-operations/data-util';\nimport { IFilteringOperation } from '../../../data-operations/filtering-condition';\nimport { OverlaySettings, ConnectedPositioningStrategy, CloseScrollStrategy } from '../../../services/index';\nimport { KEYS } from '../../../core/utils';\nimport { FilteringLogic } from '../../../data-operations/filtering-expression.interface';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\nexport interface ILogicOperatorChangedArgs {\n    target: ExpressionUI;\n    newValue: FilteringLogic;\n}\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-default-expression',\n    templateUrl: './excel-style-default-expression.component.html'\n})\nexport class IgxExcelStyleDefaultExpressionComponent implements AfterViewInit {\n\n    private _dropDownOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(),\n        scrollStrategy: new CloseScrollStrategy()\n    };\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public expressionUI: ExpressionUI;\n\n    @Input()\n    public expressionsList: Array<ExpressionUI>;\n\n    @Input()\n    public grid: any;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @Output()\n    public onExpressionRemoved = new EventEmitter<ExpressionUI>();\n\n    @Output()\n    public onLogicOperatorChanged = new EventEmitter<ILogicOperatorChangedArgs>();\n\n    @ViewChild('inputGroupConditions', { read: IgxInputGroupComponent, static: true })\n    protected inputGroupConditions: IgxInputGroupComponent;\n\n    @ViewChild('inputValues', { read: IgxInputDirective, static: true })\n    protected inputValuesDirective: IgxInputDirective;\n\n    @ViewChild('dropdownConditions', { read: IgxDropDownComponent, static: true })\n    protected dropdownConditions: IgxDropDownComponent;\n\n    @ViewChild('logicOperatorButtonGroup', { read: IgxButtonGroupComponent, static: false })\n    protected logicOperatorButtonGroup: IgxButtonGroupComponent;\n\n    protected get inputValuesElement() {\n        return this.inputValuesDirective;\n    }\n\n    get isLast(): boolean {\n        return this.expressionsList[this.expressionsList.length - 1] === this.expressionUI;\n    }\n\n    get isSingle(): boolean {\n        return this.expressionsList.length === 1;\n    }\n\n    get inputConditionsPlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_condition_placeholder'];\n    }\n\n    get inputValuePlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_row_placeholder'];\n    }\n\n    get type() {\n        switch (this.column.dataType) {\n            case DataType.Number:\n                return 'number';\n            default:\n                return 'text';\n        }\n    }\n\n    constructor(public cdr: ChangeDetectorRef) {}\n\n    ngAfterViewInit(): void {\n        this._dropDownOverlaySettings.outlet = this.column.grid.outletDirective;\n        this._dropDownOverlaySettings.positionStrategy.settings.target = this.inputGroupConditions.element.nativeElement;\n    }\n\n    public focus() {\n        // use requestAnimationFrame to focus the values input because when initializing the component\n        // datepicker's input group is not yet fully initialized\n        requestAnimationFrame(() => this.inputValuesElement.focus());\n    }\n\n    public isConditionSelected(conditionName: string): boolean {\n        return this.expressionUI.expression.condition && this.expressionUI.expression.condition.name === conditionName;\n    }\n\n    public getConditionName(condition: IFilteringOperation) {\n        return condition ? this.translateCondition(condition.name) : null;\n    }\n\n    public getInputWidth() {\n        return this.inputGroupConditions.element.nativeElement.offsetWidth + 'px';\n    }\n\n    get conditions() {\n        return this.column.filters.conditionList();\n    }\n\n    public translateCondition(value: string): string {\n        return this.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    public getIconName(): string {\n        if (this.column.dataType === DataType.Boolean && this.expressionUI.expression.condition === null) {\n            return this.getCondition(this.conditions[0]).iconName;\n        } else if (!this.expressionUI.expression.condition) {\n            return 'filter_list';\n        } else {\n            return this.expressionUI.expression.condition.iconName;\n        }\n    }\n\n    public toggleCustomDialogDropDown() {\n        this.dropdownConditions.toggle(this._dropDownOverlaySettings);\n    }\n\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    public onConditionsChanged(eventArgs: any) {\n        const value = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n        this.expressionUI.expression.condition = this.getCondition(value);\n\n        this.focus();\n    }\n\n    public onValuesInput(eventArgs) {\n        this.expressionUI.expression.searchVal = this.transformValue(eventArgs.target.value);\n    }\n\n    public onLogicOperatorButtonClicked(eventArgs, buttonIndex: number) {\n        if (this.logicOperatorButtonGroup.selectedButtons.length === 0) {\n            eventArgs.stopPropagation();\n            this.logicOperatorButtonGroup.selectButton(buttonIndex);\n        } else {\n            this.onLogicOperatorChanged.emit({\n                target: this.expressionUI,\n                newValue: buttonIndex as FilteringLogic\n            });\n        }\n    }\n\n    public onLogicOperatorKeyDown(eventArgs, buttonIndex: number) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.logicOperatorButtonGroup.selectButton(buttonIndex);\n            this.onLogicOperatorChanged.emit({\n                target: this.expressionUI,\n                newValue: buttonIndex as FilteringLogic\n            });\n        }\n    }\n\n    public onRemoveButtonClick() {\n        this.onExpressionRemoved.emit(this.expressionUI);\n    }\n\n    public onInputConditionsKeyDown(eventArgs) {\n        if (eventArgs.altKey && (eventArgs.key === KEYS.DOWN_ARROW || eventArgs.key === KEYS.DOWN_ARROW_IE)) {\n            this.toggleCustomDialogDropDown();\n        }\n\n        if (eventArgs.key === KEYS.TAB && eventArgs.shiftKey && this.expressionsList[0] === this.expressionUI) {\n            eventArgs.preventDefault();\n        }\n\n        event.stopPropagation();\n    }\n\n    private transformValue(value): any {\n        if (this.column.dataType === DataType.Number) {\n            value = parseFloat(value);\n        } else if (this.column.dataType === DataType.Boolean) {\n            value = Boolean(value);\n        }\n\n        return value;\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    ViewChild,\n    Input\n} from '@angular/core';\nimport { IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { IgxDatePickerComponent } from '../../../date-picker/date-picker.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-date-expression',\n    templateUrl: './excel-style-date-expression.component.html'\n})\nexport class IgxExcelStyleDateExpressionComponent extends IgxExcelStyleDefaultExpressionComponent {\n\n    @ViewChild('datePicker', { read: IgxDatePickerComponent, static: true })\n    private datePicker: IgxDatePickerComponent;\n\n    protected get inputValuesElement() {\n        return this.datePicker.getEditElement();\n    }\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    get inputDatePlaceholder(): string {\n        return this.grid.resourceStrings['igx_grid_filter_row_date_placeholder'];\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    Input,\n    ChangeDetectorRef,\n    ViewChild,\n    AfterViewInit,\n    TemplateRef,\n    ViewChildren,\n    QueryList,\n    ElementRef\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';\nimport { FilteringLogic } from '../../../data-operations/filtering-expression.interface';\nimport { DataType } from '../../../data-operations/data-util';\nimport {\n    IgxStringFilteringOperand,\n    IgxBooleanFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxDateFilteringOperand\n} from '../../../data-operations/filtering-condition';\nimport { IgxToggleDirective } from '../../../directives/toggle/toggle.directive';\nimport {\n    ConnectedPositioningStrategy,\n    OverlaySettings,\n    VerticalAlignment,\n    PositionSettings,\n    HorizontalAlignment,\n    IgxOverlayService,\n    AbsoluteScrollStrategy\n} from '../../../services/index';\nimport { ILogicOperatorChangedArgs, IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { KEYS } from '../../../core/utils';\nimport { IgxExcelStyleDateExpressionComponent } from './excel-style-date-expression.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-custom-dialog',\n    templateUrl: './excel-style-custom-dialog.component.html'\n})\nexport class IgxExcelStyleCustomDialogComponent implements AfterViewInit {\n\n    @Input()\n    public expressionsList = new Array<ExpressionUI>();\n\n    private _customDialogPositionSettings: PositionSettings = {\n        verticalDirection: VerticalAlignment.Middle,\n        horizontalDirection: HorizontalAlignment.Center,\n        horizontalStartPoint: HorizontalAlignment.Center,\n        verticalStartPoint: VerticalAlignment.Middle\n    };\n\n    private _customDialogOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(this._customDialogPositionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy()\n    };\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public selectedOperator: string;\n\n    @Input()\n    public filteringService: IgxFilteringService;\n\n    @Input()\n    public overlayComponentId: string;\n\n    @Input()\n    public overlayService: IgxOverlayService;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChildren(IgxExcelStyleDefaultExpressionComponent)\n    private expressionComponents: QueryList<IgxExcelStyleDefaultExpressionComponent>;\n\n    @ViewChildren(IgxExcelStyleDateExpressionComponent)\n    private expressionDateComponents: QueryList<IgxExcelStyleDateExpressionComponent>;\n\n    @ViewChild('toggle', { read: IgxToggleDirective, static: true })\n    public toggle: IgxToggleDirective;\n\n    @ViewChild('defaultExpressionTemplate', { read: TemplateRef, static: false })\n    protected defaultExpressionTemplate: TemplateRef<any>;\n\n    @ViewChild('dateExpressionTemplate', { read: TemplateRef, static: false })\n    protected dateExpressionTemplate: TemplateRef<any>;\n\n    @ViewChild('expressionsContainer', { static: true })\n    protected expressionsContainer: ElementRef;\n\n    constructor(private cdr: ChangeDetectorRef) {}\n\n    ngAfterViewInit(): void {\n        this._customDialogOverlaySettings.outlet = this.grid.outlet;\n    }\n\n    get template(): TemplateRef<any> {\n        if (this.column.dataType === DataType.Date) {\n            return this.dateExpressionTemplate;\n        }\n\n        return this.defaultExpressionTemplate;\n    }\n\n    get grid(): any {\n        return this.filteringService.grid;\n    }\n\n    public onCustomDialogOpening() {\n        if (this.selectedOperator) {\n            this.createInitialExpressionUIElement();\n        }\n    }\n\n    public onCustomDialogOpened() {\n        if (this.expressionComponents.first) {\n            this.expressionComponents.first.focus();\n        }\n    }\n\n    public open() {\n        this._customDialogOverlaySettings.positionStrategy.settings.target =\n            this.grid.rootGrid ? this.grid.rootGrid.nativeElement : this.grid.nativeElement;\n        this.toggle.open(this._customDialogOverlaySettings);\n    }\n\n    public onClearButtonClick() {\n        this.filteringService.clearFilter(this.column.field);\n        this.createInitialExpressionUIElement();\n        this.cdr.detectChanges();\n    }\n\n    public closeDialog() {\n        if (this.overlayComponentId) {\n            this.overlayService.hide(this.overlayComponentId);\n        }\n    }\n\n    public onApplyButtonClick() {\n        this.expressionsList = this.expressionsList.filter(\n            element => element.expression.condition &&\n            (element.expression.searchVal || element.expression.searchVal === 0 || element.expression.condition.isUnary));\n\n        if (this.expressionsList.length > 0) {\n            this.expressionsList[0].beforeOperator = null;\n            this.expressionsList[this.expressionsList.length - 1].afterOperator = null;\n        }\n\n        this.filteringService.filterInternal(this.column.field, this.expressionsList);\n        this.closeDialog();\n    }\n\n    public onAddButtonClick() {\n        const exprUI = new ExpressionUI();\n        exprUI.expression = {\n            condition: null,\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n\n        this.expressionsList[this.expressionsList.length - 1].afterOperator = FilteringLogic.And;\n        exprUI.beforeOperator = this.expressionsList[this.expressionsList.length - 1].afterOperator;\n\n        this.expressionsList.push(exprUI);\n\n        this.markChildrenForCheck();\n        this.scrollToBottom();\n    }\n\n    public onExpressionRemoved(event: ExpressionUI) {\n        const indexToRemove = this.expressionsList.indexOf(event);\n\n        if (indexToRemove === 0 && this.expressionsList.length > 1) {\n            this.expressionsList[1].beforeOperator = null;\n        } else if (indexToRemove === this.expressionsList.length - 1) {\n            this.expressionsList[indexToRemove - 1].afterOperator = null;\n        } else {\n            this.expressionsList[indexToRemove - 1].afterOperator = this.expressionsList[indexToRemove + 1].beforeOperator;\n            this.expressionsList[0].beforeOperator = null;\n            this.expressionsList[this.expressionsList.length - 1].afterOperator = null;\n        }\n\n        this.expressionsList.splice(indexToRemove, 1);\n\n        this.cdr.detectChanges();\n\n        this.markChildrenForCheck();\n    }\n\n    public onLogicOperatorChanged(event: ILogicOperatorChangedArgs) {\n        const index = this.expressionsList.indexOf(event.target);\n        event.target.afterOperator = event.newValue;\n        if (index + 1 < this.expressionsList.length) {\n            this.expressionsList[index + 1].beforeOperator = event.newValue;\n        }\n    }\n\n    public onKeyDown(eventArgs) {\n        eventArgs.stopPropagation();\n    }\n\n    public onApplyButtonKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.TAB && !eventArgs.shiftKey) {\n            eventArgs.stopPropagation();\n            eventArgs.preventDefault();\n        }\n    }\n\n    private createCondition(conditionName: string) {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return IgxBooleanFilteringOperand.instance().condition(conditionName);\n            case DataType.Number:\n                return IgxNumberFilteringOperand.instance().condition(conditionName);\n            case DataType.Date:\n                return IgxDateFilteringOperand.instance().condition(conditionName);\n            default:\n                return IgxStringFilteringOperand.instance().condition(conditionName);\n        }\n    }\n\n    private markChildrenForCheck() {\n        this.expressionComponents.forEach(x => x.cdr.markForCheck());\n        this.expressionDateComponents.forEach(x => x.cdr.markForCheck());\n    }\n\n    private createInitialExpressionUIElement() {\n        this.expressionsList = [];\n        const firstExprUI = new ExpressionUI();\n\n        firstExprUI.expression = {\n            condition: this.createCondition(this.selectedOperator),\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n        firstExprUI.afterOperator = FilteringLogic.And;\n\n        this.expressionsList.push(firstExprUI);\n\n        const secondExprUI = new ExpressionUI();\n        secondExprUI.expression = {\n            condition: null,\n            fieldName: this.column.field,\n            ignoreCase: this.column.filteringIgnoreCase,\n            searchVal: null\n        };\n\n        secondExprUI.beforeOperator = FilteringLogic.And;\n\n        this.expressionsList.push(secondExprUI);\n    }\n\n    private scrollToBottom() {\n        requestAnimationFrame(() => {\n            this.expressionsContainer.nativeElement.scrollTop = this.expressionsContainer.nativeElement.scrollHeight;\n        });\n    }\n}\n","import {\n    Component,\n    ChangeDetectionStrategy,\n    ViewChild,\n    Input\n} from '@angular/core';\nimport { IgxColumnComponent } from '../../column.component';\nimport { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-sorting',\n    templateUrl: './excel-style-sorting.component.html'\n})\nexport class IgxExcelStyleSortingComponent {\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public grid: any;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    @ViewChild('sortButtonGroup', { read: IgxButtonGroupComponent, static: true })\n    public sortButtonGroup: IgxButtonGroupComponent;\n\n    constructor() {}\n\n    public onSortButtonClicked(sortDirection) {\n        if (this.sortButtonGroup.selectedIndexes.length === 0) {\n            if (this.grid.isColumnGrouped(this.column.field)) {\n                this.selectButton(sortDirection);\n            } else {\n                this.grid.clearSort(this.column.field);\n            }\n        } else {\n            this.grid.sort({ fieldName: this.column.field, dir: sortDirection, ignoreCase: true });\n        }\n    }\n\n    public selectButton(sortDirection: number) {\n        if (sortDirection === 1) {\n            this.sortButtonGroup.selectButton(0);\n        } else {\n            this.sortButtonGroup.selectButton(1);\n        }\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    ViewChild,\n    HostBinding,\n    ChangeDetectionStrategy,\n    TemplateRef,\n    Directive,\n    OnDestroy,\n    AfterViewInit,\n    ElementRef\n} from '@angular/core';\nimport {\n    HorizontalAlignment,\n    VerticalAlignment,\n    ConnectedPositioningStrategy,\n    OverlaySettings,\n    IgxOverlayService,\n    AbsoluteScrollStrategy\n} from '../../../services/index';\nimport { IgxFilteringService, ExpressionUI } from '../grid-filtering.service';\nimport { IgxToggleDirective } from '../../../directives/toggle/toggle.directive';\nimport {\n    IFilteringOperation,\n    IgxStringFilteringOperand,\n    IgxNumberFilteringOperand,\n    IgxBooleanFilteringOperand,\n    IgxDateFilteringOperand\n} from '../../../data-operations/filtering-condition';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../../../data-operations/filtering-expressions-tree';\nimport { FilteringLogic, IFilteringExpression } from '../../../data-operations/filtering-expression.interface';\nimport { cloneArray, KEYS } from '../../../core/utils';\nimport { DataType, DataUtil } from '../../../data-operations/data-util';\nimport { IgxExcelStyleSearchComponent } from './excel-style-search.component';\nimport { IgxExcelStyleCustomDialogComponent } from './excel-style-custom-dialog.component';\nimport { Subscription, Subject } from 'rxjs';\nimport { IgxExcelStyleSortingComponent } from './excel-style-sorting.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { ISelectionEventArgs, IgxDropDownComponent } from '../../../drop-down';\nimport { IgxColumnComponent } from '../../column.component';\n\n/**\n *@hidden\n */\nexport class FilterListItem {\n    public value: any;\n    public label: any;\n    public isSelected: boolean;\n    public indeterminate: boolean;\n    public isSpecial = false;\n}\n\n@Directive({\n    selector: '[igxExcelStyleSortingTemplate]'\n})\nexport class IgxExcelStyleSortingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStyleMovingTemplate]'\n})\nexport class IgxExcelStyleMovingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStyleHidingTemplate]'\n})\nexport class IgxExcelStyleHidingTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n    selector: '[igxExcelStylePinningTemplate]'\n})\nexport class IgxExcelStylePinningTemplateDirective {\n    constructor(public template: TemplateRef<any>) {}\n}\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-excel-style-filtering',\n    templateUrl: './grid.excel-style-filtering.component.html'\n})\nexport class IgxGridExcelStyleFilteringComponent implements OnDestroy, AfterViewInit {\n    private static readonly filterOptimizationThreshold = 2;\n\n    private shouldOpenSubMenu = true;\n    private expressionsList = new Array<ExpressionUI>();\n    private destroy$ = new Subject<boolean>();\n    private containsNullOrEmpty = false;\n    private selectAllSelected = true;\n    private selectAllIndeterminate = false;\n    private filterValues = new Set<any>();\n\n    protected columnMoving = new Subscription();\n\n    public column: IgxColumnComponent;\n    public filteringService: IgxFilteringService;\n    public listData = new Array<FilterListItem>();\n    public uniqueValues = [];\n    public overlayService: IgxOverlayService;\n    public overlayComponentId: string;\n\n    private _subMenuPositionSettings = {\n        verticalStartPoint: VerticalAlignment.Top\n    };\n\n    private _subMenuOverlaySettings: OverlaySettings = {\n        closeOnOutsideClick: true,\n        modal: false,\n        positionStrategy: new ConnectedPositioningStrategy(this._subMenuPositionSettings),\n        scrollStrategy: new AbsoluteScrollStrategy()\n    };\n\n    @HostBinding('class.igx-excel-filter')\n    className = 'igx-excel-filter';\n\n    @ViewChild('dropdown', { read: ElementRef, static: true })\n    public mainDropdown: ElementRef;\n\n    @ViewChild('subMenu', { read: IgxDropDownComponent, static: true })\n    public subMenu: IgxDropDownComponent;\n\n    @ViewChild('customDialog', { read: IgxExcelStyleCustomDialogComponent, static: true })\n    public customDialog: IgxExcelStyleCustomDialogComponent;\n\n    @ViewChild('excelStyleSearch', { read: IgxExcelStyleSearchComponent, static: true })\n    protected excelStyleSearch: IgxExcelStyleSearchComponent;\n\n    @ViewChild('excelStyleSorting', { read: IgxExcelStyleSortingComponent, static: false })\n    protected excelStyleSorting: IgxExcelStyleSortingComponent;\n\n    @ViewChild('defaultExcelStyleSortingTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStyleSortingTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultExcelStyleHidingTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStyleHidingTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultExcelStyleMovingTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStyleMovingTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultExcelStylePinningTemplate', { read: TemplateRef, static: true })\n    protected defaultExcelStylePinningTemplate: TemplateRef<any>;\n\n    get grid(): any {\n        return this.filteringService.grid;\n    }\n\n    get conditions() {\n        return this.column.filters.conditionList();\n    }\n\n    get subMenuText() {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return this.grid.resourceStrings.igx_grid_excel_boolean_filter;\n            case DataType.Number:\n                return this.grid.resourceStrings.igx_grid_excel_number_filter;\n            case DataType.Date:\n                return this.grid.resourceStrings.igx_grid_excel_date_filter;\n            default:\n                return this.grid.resourceStrings.igx_grid_excel_text_filter;\n        }\n    }\n\n    constructor(private cdr: ChangeDetectorRef) {}\n\n    ngOnDestroy(): void {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n\n    ngAfterViewInit(): void {\n        this.expressionsList = new Array<ExpressionUI>();\n        this.filteringService.generateExpressionsList(this.column.filteringExpressionsTree, this.grid.filteringLogic, this.expressionsList);\n        if (this.expressionsList && this.expressionsList.length &&\n            this.expressionsList[0].expression.condition.name !== 'in') {\n            this.customDialog.expressionsList = this.expressionsList;\n        }\n        this.populateColumnData();\n\n        if (this.excelStyleSorting) {\n            const se = this.grid.sortingExpressions.find(expr => expr.fieldName === this.column.field);\n            if (se) {\n                this.excelStyleSorting.selectButton(se.dir);\n            }\n        }\n\n        requestAnimationFrame(() => {\n            this.excelStyleSearch.searchInput.nativeElement.focus();\n        });\n    }\n\n    public clearFilterClass() {\n        if (this.column.filteringExpressionsTree) {\n            return 'igx-excel-filter__actions-clear';\n        }\n\n        return 'igx-excel-filter__actions-clear--disabled';\n    }\n\n    public initialize(column: IgxColumnComponent, filteringService: IgxFilteringService, overlayService: IgxOverlayService,\n        overlayComponentId: string) {\n        this.column = column;\n        this.filteringService = filteringService;\n        this.overlayService = overlayService;\n        this.overlayComponentId = overlayComponentId;\n\n        this._subMenuOverlaySettings.outlet = this.grid.outlet;\n\n        this.columnMoving = this.grid.onColumnMoving.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.closeDropdown();\n        });\n    }\n\n    /**\n     * Returns the filtering operation condition for a given value.\n     */\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    /**\n     * Returns the translated condition name for a given value.\n     */\n    public translateCondition(value: string): string {\n        return this.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    public onPin() {\n        this.column.pinned = !this.column.pinned;\n        this.closeDropdown();\n    }\n\n    public onHide() {\n        this.column.hidden = true;\n        this.grid.onColumnVisibilityChanged.emit({ column: this.column, newValue: true });\n        this.closeDropdown();\n    }\n\n    public onTextFilterClick(eventArgs) {\n        if (this.shouldOpenSubMenu) {\n            this._subMenuOverlaySettings.positionStrategy.settings.target = eventArgs.currentTarget;\n\n            const gridRect = this.grid.nativeElement.getBoundingClientRect();\n            const dropdownRect = this.mainDropdown.nativeElement.getBoundingClientRect();\n\n            let x = dropdownRect.left + dropdownRect.width;\n            let x1 = gridRect.left + gridRect.width;\n            x += window.pageXOffset;\n            x1 += window.pageXOffset;\n            if (Math.abs(x - x1) < 200) {\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Left;\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Left;\n            } else {\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalDirection = HorizontalAlignment.Right;\n                this._subMenuOverlaySettings.positionStrategy.settings.horizontalStartPoint = HorizontalAlignment.Right;\n            }\n\n            this.subMenu.open(this._subMenuOverlaySettings);\n            this.shouldOpenSubMenu = false;\n        }\n    }\n\n    public onTextFilterKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.onTextFilterClick(eventArgs);\n        }\n    }\n\n    public onSubMenuClosed() {\n        requestAnimationFrame(() => {\n            this.shouldOpenSubMenu = true;\n        });\n    }\n\n    public onSubMenuSelection(eventArgs: ISelectionEventArgs) {\n        this.customDialog.selectedOperator = eventArgs.newSelection.value;\n        eventArgs.cancel = true;\n        this.mainDropdown.nativeElement.style.display = 'none';\n        this.subMenu.close();\n        this.customDialog.open();\n    }\n\n    private areExpressionsSelectable () {\n        if (this.expressionsList.length === 1 &&\n            (this.expressionsList[0].expression.condition.name === 'equals' ||\n             this.expressionsList[0].expression.condition.name === 'true' ||\n             this.expressionsList[0].expression.condition.name === 'false' ||\n             this.expressionsList[0].expression.condition.name === 'empty' ||\n             this.expressionsList[0].expression.condition.name === 'in')) {\n            return true;\n        }\n\n        const selectableExpressionsCount = this.expressionsList.filter(exp =>\n            (exp.beforeOperator === 1 || exp.afterOperator === 1) &&\n            (exp.expression.condition.name === 'equals' ||\n             exp.expression.condition.name === 'true' ||\n             exp.expression.condition.name === 'false' ||\n             exp.expression.condition.name === 'empty' ||\n             exp.expression.condition.name === 'in')).length;\n\n        return selectableExpressionsCount === this.expressionsList.length;\n    }\n\n    private areExpressionsValuesInTheList() {\n        if (this.column.dataType === DataType.Boolean) {\n            return true;\n        }\n\n        if (this.filterValues.size === 1) {\n            const firstValue = this.filterValues.values().next().value;\n\n            if (!firstValue && firstValue !== 0) {\n                return true;\n            }\n        }\n\n        for (let index = 0; index < this.uniqueValues.length; index++) {\n            if (this.filterValues.has(this.uniqueValues[index])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public populateColumnData() {\n        let data = this.column.gridAPI.get_all_data(this.grid.id);\n        const gridExpressionsTree: IFilteringExpressionsTree = this.grid.filteringExpressionsTree;\n        const expressionsTree = new FilteringExpressionsTree(gridExpressionsTree.operator, gridExpressionsTree.fieldName);\n\n        for (const operand of gridExpressionsTree.filteringOperands) {\n            if (operand instanceof FilteringExpressionsTree) {\n                const columnExprTree = operand as FilteringExpressionsTree;\n                if (columnExprTree.fieldName === this.column.field) {\n                    break;\n                }\n            }\n            expressionsTree.filteringOperands.push(operand);\n        }\n\n        if (expressionsTree.filteringOperands.length) {\n            const state = { expressionsTree: expressionsTree };\n            data = DataUtil.filter(cloneArray(data), state);\n        }\n\n        if (this.column.dataType === DataType.Date) {\n            this.uniqueValues = Array.from(new Set(data.map(record =>\n                record[this.column.field] ? record[this.column.field].toDateString() : record[this.column.field])));\n            this.filterValues = new Set<any>(this.expressionsList.reduce((arr, e) => {\n                if (e.expression.condition.name === 'in') {\n                    return [ ...arr, ...Array.from((e.expression.searchVal as Set<any>).values()).map(v =>\n                        new Date(v).toDateString()) ];\n                }\n                return [ ...arr, ...[e.expression.searchVal ? e.expression.searchVal.toDateString() : e.expression.searchVal] ];\n            }, []));\n        } else {\n            this.uniqueValues = Array.from(new Set(data.map(record => record[this.column.field])));\n            this.filterValues = new Set<any>(this.expressionsList.reduce((arr, e) => {\n                if (e.expression.condition.name === 'in') {\n                    return [ ...arr, ...Array.from((e.expression.searchVal as Set<any>).values()) ];\n                }\n                return [ ...arr, ...[e.expression.searchVal] ];\n            }, []));\n        }\n        this.listData = new Array<FilterListItem>();\n\n        const shouldUpdateSelection = this.areExpressionsSelectable() && this.areExpressionsValuesInTheList();\n\n        if (this.column.dataType === DataType.Boolean) {\n            this.addBooleanItems();\n        } else {\n            this.addItems(shouldUpdateSelection);\n        }\n\n        this.listData.sort((a, b) => this.sortData(a, b));\n\n        if (this.column.dataType === DataType.Date) {\n            this.uniqueValues = this.uniqueValues.map(value => new Date(value));\n        }\n\n        if (this.containsNullOrEmpty) {\n            this.addBlanksItem(shouldUpdateSelection);\n        }\n\n        this.addSelectAllItem();\n\n        this.cdr.detectChanges();\n    }\n\n    private addBooleanItems() {\n        this.selectAllSelected = true;\n        this.selectAllIndeterminate = false;\n        this.uniqueValues.forEach(element => {\n            const filterListItem = new FilterListItem();\n            if (element !== undefined && element !== null && element !== '') {\n                if (this.column.filteringExpressionsTree) {\n                    if (element === true && this.expressionsList.find(exp => exp.expression.condition.name === 'true' )) {\n                        filterListItem.isSelected = true;\n                        this.selectAllIndeterminate = true;\n                    } else if (element === false && this.expressionsList.find(exp => exp.expression.condition.name === 'false' )) {\n                            filterListItem.isSelected = true;\n                            this.selectAllIndeterminate = true;\n                    } else {\n                        filterListItem.isSelected = false;\n                    }\n                } else {\n                    filterListItem.isSelected = true;\n                }\n                filterListItem.value = element;\n                filterListItem.label = element;\n                filterListItem.indeterminate = false;\n                this.listData.push(filterListItem);\n            } else {\n                this.containsNullOrEmpty = true;\n            }\n        });\n    }\n\n    private addItems(shouldUpdateSelection: boolean) {\n        this.selectAllSelected = true;\n        this.selectAllIndeterminate = false;\n        this.uniqueValues.forEach(element => {\n            if (element !== undefined && element !== null && element !== '') {\n                const filterListItem = new FilterListItem();\n                if (this.column.filteringExpressionsTree) {\n                    if (shouldUpdateSelection) {\n                        if (this.filterValues.has(element)) {\n                            filterListItem.isSelected = true;\n                        } else {\n                            filterListItem.isSelected = false;\n                        }\n                        this.selectAllIndeterminate = true;\n                    } else {\n                        filterListItem.isSelected = false;\n                        this.selectAllSelected = false;\n                    }\n                } else {\n                    filterListItem.isSelected = true;\n                }\n                if (this.column.dataType === DataType.Date) {\n                    filterListItem.value = new Date(element);\n                    filterListItem.label = new Date(element);\n                } else {\n                    filterListItem.value = element;\n                    filterListItem.label = element;\n                }\n                filterListItem.indeterminate = false;\n                this.listData.push(filterListItem);\n            } else {\n                this.containsNullOrEmpty = true;\n            }\n        });\n    }\n\n    private addSelectAllItem() {\n        const selectAll =  new FilterListItem();\n        selectAll.isSelected = this.selectAllSelected;\n        selectAll.value = this.grid.resourceStrings.igx_grid_excel_select_all;\n        selectAll.label = this.grid.resourceStrings.igx_grid_excel_select_all;\n        selectAll.indeterminate = this.selectAllIndeterminate;\n        selectAll.isSpecial = true;\n        this.listData.unshift(selectAll);\n    }\n\n    private addBlanksItem(shouldUpdateSelection) {\n        const blanks =  new FilterListItem();\n        if (this.column.filteringExpressionsTree) {\n            if (shouldUpdateSelection) {\n                if (this.filterValues.has(null)) {\n                    blanks.isSelected = true;\n                } else {\n                    blanks.isSelected = false;\n                }\n            }\n        } else {\n            blanks.isSelected = true;\n        }\n        blanks.value = null;\n        blanks.label = this.grid.resourceStrings.igx_grid_excel_blanks;\n        blanks.indeterminate = false;\n        blanks.isSpecial = true;\n        this.listData.unshift(blanks);\n    }\n\n    private sortData(a: FilterListItem, b: FilterListItem) {\n        let valueA = a.value;\n        let valueB = b.value;\n        if (typeof(a) === DataType.String) {\n            valueA = a.value.toUpperCase();\n            valueB = b.value.toUpperCase();\n        }\n        if (valueA < valueB) {\n            return -1;\n        } else if (valueA > valueB) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    // TODO: sort members by access modifier\n\n    get sortingTemplate() {\n        if (this.grid.excelStyleSortingTemplateDirective) {\n            return this.grid.excelStyleSortingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleSortingTemplate;\n        }\n    }\n\n    get movingTemplate() {\n        if (this.grid.excelStyleMovingTemplateDirective) {\n            return this.grid.excelStyleMovingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleMovingTemplate;\n        }\n    }\n\n    get pinningTemplate() {\n        if (this.grid.excelStylePinningTemplateDirective) {\n            return this.grid.excelStylePinningTemplateDirective.template;\n        } else {\n            return this.defaultExcelStylePinningTemplate;\n        }\n    }\n\n    get hidingTemplate() {\n        if (this.grid.excelStyleHidingTemplateDirective) {\n            return this.grid.excelStyleHidingTemplateDirective.template;\n        } else {\n            return this.defaultExcelStyleHidingTemplate;\n        }\n    }\n\n    get applyButtonDisabled() {\n        return this.listData[0] && !this.listData[0].isSelected && !this.listData[0].indeterminate;\n    }\n\n    public applyFilter() {\n        const filterTree = new FilteringExpressionsTree(FilteringLogic.Or, this.column.field);\n        const selectedItems = this.listData.slice(1, this.listData.length).filter(el => el.isSelected === true);\n        const unselectedItem = this.listData.slice(1, this.listData.length).find(el => el.isSelected === false);\n\n        if (unselectedItem) {\n            if (selectedItems.length <= IgxGridExcelStyleFilteringComponent.filterOptimizationThreshold) {\n                selectedItems.forEach(element => {\n                    let condition = null;\n                    if (element.value !== null && element.value !== undefined) {\n                        if (this.column.dataType === DataType.Boolean) {\n                            condition = this.createCondition(element.value.toString());\n                        } else {\n                            condition = this.createCondition('equals');\n                        }\n                    } else {\n                        condition = this.createCondition('empty');\n                    }\n                    filterTree.filteringOperands.push({\n                        condition: condition,\n                        fieldName: this.column.field,\n                        ignoreCase: this.column.filteringIgnoreCase,\n                        searchVal: element.value\n                    });\n                });\n            } else {\n                const blanksItemIndex = selectedItems.findIndex(e => e.value === null || e.value === undefined);\n                let blanksItem: any;\n                if (blanksItemIndex >= 0) {\n                    blanksItem = selectedItems[blanksItemIndex];\n                    selectedItems.splice(blanksItemIndex, 1);\n                }\n\n                filterTree.filteringOperands.push({\n                    condition: this.createCondition('in'),\n                    fieldName: this.column.field,\n                    ignoreCase: this.column.filteringIgnoreCase,\n                    searchVal: new Set(this.column.dataType === DataType.Date ?\n                        selectedItems.map(d => new Date(d.value.getFullYear(), d.value.getMonth(), d.value.getDate()).toISOString()) :\n                        selectedItems.map(e => e.value))\n                });\n\n                if (blanksItem) {\n                    filterTree.filteringOperands.push({\n                        condition: this.createCondition('empty'),\n                        fieldName: this.column.field,\n                        ignoreCase: this.column.filteringIgnoreCase,\n                        searchVal: blanksItem.value\n                    });\n                }\n            }\n\n            this.expressionsList = new Array<ExpressionUI>();\n            this.filteringService.filterInternal(this.column.field, filterTree);\n        } else {\n            this.filteringService.clearFilter(this.column.field);\n        }\n\n        this.closeDropdown();\n    }\n\n    public closeDropdown() {\n        if (this.overlayComponentId) {\n            this.overlayService.hide(this.overlayComponentId);\n            this.overlayComponentId = null;\n        }\n    }\n\n    public onKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ESCAPE || eventArgs.key === KEYS.ESCAPE_IE) {\n            this.closeDropdown();\n        }\n        eventArgs.stopPropagation();\n    }\n\n    public clearFilter() {\n        this.filteringService.clearFilter(this.column.field);\n        this.populateColumnData();\n    }\n\n    public onClearFilterKeyDown(eventArgs) {\n        if (eventArgs.key === KEYS.ENTER) {\n            this.clearFilter();\n        }\n    }\n\n    public showCustomFilterItem(): boolean {\n        const exprTree = this.column.filteringExpressionsTree;\n        return exprTree && exprTree.filteringOperands && exprTree.filteringOperands.length &&\n            !((exprTree.filteringOperands[0] as IFilteringExpression).condition &&\n            (exprTree.filteringOperands[0] as IFilteringExpression).condition.name === 'in');\n    }\n\n    private createCondition(conditionName: string) {\n        switch (this.column.dataType) {\n            case DataType.Boolean:\n                return IgxBooleanFilteringOperand.instance().condition(conditionName);\n            case DataType.Number:\n                return IgxNumberFilteringOperand.instance().condition(conditionName);\n            case DataType.Date:\n                return IgxDateFilteringOperand.instance().condition(conditionName);\n            default:\n                return IgxStringFilteringOperand.instance().condition(conditionName);\n        }\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    DoCheck,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgZone,\n    OnInit,\n    Inject,\n    OnDestroy,\n    NgModuleRef\n} from '@angular/core';\nimport { DataType } from '../data-operations/data-util';\nimport { SortingDirection } from '../data-operations/sorting-expression.interface';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxOverlayService } from '../services/overlay/overlay';\nimport { IgxGridExcelStyleFilteringComponent } from './filtering/excel-style/grid.excel-style-filtering.component';\nimport { OverlaySettings, PositionSettings, VerticalAlignment } from '../services/overlay/utilities';\nimport { AutoPositionStrategy } from '../services/overlay/position/auto-position-strategy';\nimport { useAnimation } from '@angular/animations';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { fadeIn, fadeOut } from '../animations/main';\nimport { AbsoluteScrollStrategy } from '../services/overlay/scroll/absolute-scroll-strategy';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-header',\n    templateUrl: './grid-header.component.html'\n})\nexport class IgxGridHeaderComponent implements DoCheck, OnInit, OnDestroy {\n\n    private _componentOverlayId: string;\n    private _filterMenuPositionSettings: PositionSettings;\n    private _filterMenuOverlaySettings: OverlaySettings;\n    private _destroy$ = new Subject<boolean>();\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public gridID: string;\n\n    @HostBinding('class')\n    get styleClasses(): string {\n        const defaultClasses = [\n            'igx-grid__th--fw',\n            this.column.headerClasses\n        ];\n\n        const classList = {\n            'igx-grid__th': !this.column.columnGroup,\n            'asc': this.ascending,\n            'desc': this.descending,\n            'igx-grid__th--number': this.column.dataType === DataType.Number,\n            'igx-grid__th--sortable': this.column.sortable,\n            'igx-grid__th--filtrable': this.column.filterable && this.grid.filteringService.isFilterRowVisible,\n            'igx-grid__th--sorted': this.sorted\n        };\n\n        for (const klass of Object.keys(classList)) {\n            if (classList[klass]) {\n                defaultClasses.push(klass);\n            }\n        }\n        return defaultClasses.join(' ');\n    }\n\n    @HostBinding('style.height.rem')\n    get height() {\n        if (this.grid.hasColumnGroups) {\n            return (this.grid.maxLevelHeaderDepth + 1 - this.column.level) * this.grid.defaultRowHeight / this.grid._baseFontSize;\n        }\n        return null;\n    }\n\n    get ascending() {\n        return this.sortDirection === SortingDirection.Asc;\n    }\n\n    get descending() {\n        return this.sortDirection === SortingDirection.Desc;\n    }\n\n    get sortingIcon(): string {\n        if (this.sortDirection !== SortingDirection.None) {\n            // arrow_downward and arrow_upward\n            // are material icons ligature strings\n            return this.sortDirection === SortingDirection.Asc ? 'arrow_upward' : 'arrow_downward';\n        }\n        return 'arrow_upward';\n    }\n\n    get sorted() {\n        return this.sortDirection !== SortingDirection.None;\n    }\n\n    get filterIconClassName() {\n        return this.column.filteringExpressionsTree ? 'igx-excel-filter__icon--filtered' : 'igx-excel-filter__icon';\n    }\n\n    @HostBinding('attr.role')\n    public hostRole = 'columnheader';\n\n    @HostBinding('attr.tabindex')\n    public tabindex = -1;\n\n    @HostBinding('attr.id')\n    get headerID() {\n        return `${this.gridID}_${this.column.field}`;\n    }\n\n    protected sortDirection = SortingDirection.None;\n\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public colResizingService: IgxColumnResizingService,\n        public cdr: ChangeDetectorRef,\n        public elementRef: ElementRef,\n        public zone: NgZone,\n        private _filteringService: IgxFilteringService,\n        private _moduleRef: NgModuleRef<any>,\n        @Inject(IgxOverlayService) private _overlayService: IgxOverlayService\n    ) { }\n\n    public ngOnInit() {\n        this.initFilteringSettings();\n    }\n\n    public ngDoCheck() {\n        this.getSortDirection();\n        this.cdr.markForCheck();\n    }\n\n    ngOnDestroy(): void {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n\n        if (this._componentOverlayId) {\n            this._overlayService.hide(this._componentOverlayId);\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        if (!this.colResizingService.isColumnResizing) {\n            event.stopPropagation();\n            if (this.grid.filteringService.isFilterRowVisible) {\n                if (this.column.filterable && !this.column.columnGroup &&\n                    !this.grid.filteringService.isFilterComplex(this.column.field)) {\n                    this.grid.filteringService.filteredColumn = this.column;\n                }\n            } else if (this.column.sortable) {\n                this.triggerSort();\n            }\n        }\n    }\n\n    public onFilteringIconClick(event) {\n        event.stopPropagation();\n\n        this.toggleFilterDropdown();\n    }\n\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    protected getSortDirection() {\n        const expr = this.gridAPI.grid.sortingExpressions.find((x) => x.fieldName === this.column.field);\n        this.sortDirection = expr ? expr.dir : SortingDirection.None;\n    }\n\n    public onSortingIconClick(event) {\n        if (this.grid.filteringService.isFilterRowVisible) {\n            event.stopPropagation();\n            this.triggerSort();\n        }\n    }\n\n    private triggerSort() {\n        const groupingExpr = this.grid.groupingExpressions ?\n            this.grid.groupingExpressions.find((expr) => expr.fieldName === this.column.field) : null;\n        const sortDir = groupingExpr ?\n            this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.Asc : SortingDirection.Desc\n            : this.sortDirection + 1 > SortingDirection.Desc ? SortingDirection.None : this.sortDirection + 1;\n        this.sortDirection = sortDir;\n        this.grid.sort({ fieldName: this.column.field, dir: this.sortDirection, ignoreCase: this.column.sortingIgnoreCase,\n            strategy: this.column.sortStrategy });\n    }\n\n    private toggleFilterDropdown() {\n        if (!this._componentOverlayId) {\n            const headerTarget = this.elementRef.nativeElement;\n            const filterIconTarget = headerTarget.querySelector('.' + this.filterIconClassName);\n\n            this._filterMenuOverlaySettings.positionStrategy.settings.target = filterIconTarget;\n            this._filterMenuOverlaySettings.outlet = this.grid.outlet;\n\n            this._componentOverlayId =\n                this._overlayService.attach(IgxGridExcelStyleFilteringComponent, this._filterMenuOverlaySettings, this._moduleRef);\n            this._overlayService.show(this._componentOverlayId, this._filterMenuOverlaySettings);\n        }\n    }\n\n    private initFilteringSettings() {\n        this._filterMenuPositionSettings = {\n            verticalStartPoint: VerticalAlignment.Bottom,\n            openAnimation: useAnimation(fadeIn, {\n                params: {\n                    duration: '250ms'\n                }\n            }),\n            closeAnimation: useAnimation(fadeOut, {\n                params: {\n                    duration: '200ms'\n                }\n            })\n        };\n\n        this._filterMenuOverlaySettings = {\n            closeOnOutsideClick: true,\n            modal: false,\n            positionStrategy: new AutoPositionStrategy(this._filterMenuPositionSettings),\n            scrollStrategy: new AbsoluteScrollStrategy()\n        };\n\n        this._overlayService.onOpening.pipe(\n            filter((overlay) => overlay.id === this._componentOverlayId),\n            takeUntil(this._destroy$)).subscribe((eventArgs) => {\n                this.onOverlayOpening(eventArgs);\n            });\n\n        this._overlayService.onClosed.pipe(\n            filter(overlay => overlay.id === this._componentOverlayId),\n            takeUntil(this._destroy$)).subscribe(() => {\n                this.onOverlayClosed();\n            });\n    }\n\n    private onOverlayOpening(eventArgs) {\n        const instance = eventArgs.componentRef.instance as IgxGridExcelStyleFilteringComponent;\n        if (instance) {\n            instance.initialize(this.column, this._filteringService, this._overlayService, eventArgs.id);\n        }\n    }\n\n    private onOverlayClosed() {\n        this._componentOverlayId = null;\n    }\n}\n","import {\n    ChangeDetectorRef,\n    Component,\n    Input,\n    TemplateRef,\n    ViewChild,\n    HostBinding,\n    AfterViewInit,\n    ElementRef,\n    HostListener,\n    OnInit,\n    ChangeDetectionStrategy,\n    DoCheck\n} from '@angular/core';\nimport { IgxColumnComponent } from '../column.component';\nimport { IFilteringExpression } from '../../data-operations/filtering-expression.interface';\nimport { IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../chips';\nimport { IgxFilteringService, ExpressionUI } from './grid-filtering.service';\nimport { KEYS } from '../../core/utils';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-filtering-cell',\n    templateUrl: './grid-filtering-cell.component.html'\n})\nexport class IgxGridFilteringCellComponent implements AfterViewInit, OnInit, DoCheck {\n\n    private baseClass = 'igx-grid__filtering-cell-indicator';\n    private currentTemplate = null;\n\n    public expressionsList: ExpressionUI[];\n    public moreFiltersCount = 0;\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @ViewChild('emptyFilter', { read: TemplateRef, static: true })\n    protected emptyFilter: TemplateRef<any>;\n\n    @ViewChild('defaultFilter', { read: TemplateRef, static: true })\n    protected defaultFilter: TemplateRef<any>;\n\n    @ViewChild('complexFilter', { read: TemplateRef, static: true })\n    protected complexFilter: TemplateRef<any>;\n\n    @ViewChild('chipsArea', { read: IgxChipsAreaComponent, static: false })\n    protected chipsArea: IgxChipsAreaComponent;\n\n    @ViewChild('moreIcon', { read: ElementRef, static: false })\n    protected moreIcon: ElementRef;\n\n    @ViewChild('ghostChip', { read: IgxChipComponent, static: false })\n    protected ghostChip: IgxChipComponent;\n\n    @ViewChild('complexChip', { read: IgxChipComponent, static: false })\n    protected complexChip: IgxChipComponent;\n\n    @HostBinding('class.igx-grid__filtering-cell')\n    public cssClass = 'igx-grid__filtering-cell';\n\n    constructor(public cdr: ChangeDetectorRef, public filteringService: IgxFilteringService, public navService: IgxGridNavigationService) {\n        this.filteringService.subscribeToEvents();\n    }\n\n    ngOnInit(): void {\n        this.filteringService.columnToMoreIconHidden.set(this.column.field, true);\n    }\n\n    ngAfterViewInit(): void {\n        this.updateFilterCellArea();\n    }\n\n    public ngDoCheck() {\n        this.updateFilterCellArea();\n    }\n\n    @HostListener('keydown.tab', ['$event'])\n    public onTabKeyDown(eventArgs) {\n\n        if (this.isLastElementFocused()) {\n            this.filteringService.grid.navigation.navigateNextFilterCell(this.column, eventArgs);\n        }\n        eventArgs.stopPropagation();\n    }\n\n    @HostListener('keydown.shift.tab', ['$event'])\n    public onShiftTabKeyDown(eventArgs) {\n        if (this.isFirstElementFocused()) {\n            this.filteringService.grid.navigation.navigatePrevFilterCell(this.column, eventArgs);\n        }\n        eventArgs.stopPropagation();\n    }\n\n    /**\n     * Returns whether a chip with a given index is visible or not.\n     */\n    public isChipVisible(index: number) {\n        const expression = this.expressionsList[index];\n        return !!(expression && expression.isVisible);\n    }\n\n    /**\n     * Updates the filtering cell area.\n     */\n    public updateFilterCellArea() {\n        this.expressionsList = this.filteringService.getExpressions(this.column.field);\n        this.updateVisibleFilters();\n    }\n\n    get template(): TemplateRef<any> {\n        if (!this.column.filterable) {\n            this.currentTemplate = null;\n            return null;\n        }\n\n        if (this.column.filterCellTemplate) {\n            this.currentTemplate = this.column.filterCellTemplate;\n            return this.column.filterCellTemplate;\n        }\n\n        const expressionTree = this.column.filteringExpressionsTree;\n        if (!expressionTree || expressionTree.filteringOperands.length === 0) {\n            this.currentTemplate = this.emptyFilter;\n            return this.emptyFilter;\n        }\n\n        if (this.filteringService.isFilterComplex(this.column.field)) {\n            this.currentTemplate = this.complexFilter;\n            return this.complexFilter;\n        }\n\n        this.currentTemplate = this.defaultFilter;\n        return this.defaultFilter;\n    }\n\n    /**\n     * Gets the context passed to the filter template.\n     * @memberof IgxGridFilteringCellComponent\n     */\n    get context() {\n        return {\n            column: this.column\n        };\n    }\n\n    /**\n     * Chip clicked event handler.\n     */\n    public onChipClicked(expression?: IFilteringExpression) {\n        if (expression) {\n            this.expressionsList.forEach((item) => {\n                item.isSelected = (item.expression === expression);\n            });\n        } else if (this.expressionsList.length > 0) {\n            this.expressionsList.forEach((item) => {\n                item.isSelected = false;\n            });\n            this.expressionsList[0].isSelected = true;\n        }\n\n        const index = this.filteringService.unpinnedFilterableColumns.indexOf(this.column);\n        if (index >= 0 && !this.isColumnRightVisible(index)) {\n            this.filteringService.scrollToFilterCell(this.filteringService.unpinnedFilterableColumns[index], true);\n        } else if (index >= 0 && !this.isColumnLeftVisible(index)) {\n            this.filteringService.scrollToFilterCell(this.filteringService.unpinnedFilterableColumns[index], false);\n        }\n\n        this.filteringService.filteredColumn = this.column;\n        this.filteringService.isFilterRowVisible = true;\n        this.filteringService.selectedExpression = expression;\n    }\n\n    /**\n     * Chip removed event handler.\n     */\n    public onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI): void {\n        const indexToRemove = this.expressionsList.indexOf(item);\n        this.removeExpression(indexToRemove);\n        this.focusChip();\n    }\n\n    /**\n     * Clears the filtering.\n     */\n    public clearFiltering(): void {\n        this.filteringService.clearFilter(this.column.field);\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Chip keydown event handler.\n     */\n    public onChipKeyDown(eventArgs: KeyboardEvent, expression?: IFilteringExpression) {\n        if (eventArgs.key === KEYS.ENTER) {\n            eventArgs.preventDefault();\n            this.onChipClicked(expression);\n        }\n    }\n\n    /**\n     * Returns the filtering indicator class.\n     */\n    public filteringIndicatorClass() {\n        return {\n            [this.baseClass]: !this.isMoreIconHidden(),\n            [`${this.baseClass}--hidden`]: this.isMoreIconHidden()\n        };\n    }\n\n    /**\n     * Focus a chip depending on the current visible template.\n     */\n    public focusChip(focusFirst: boolean = false) {\n        if (this.currentTemplate === this.defaultFilter) {\n            if (focusFirst) {\n                this.focusFirstElement();\n            } else {\n                this.focusElement();\n            }\n        } else if (this.currentTemplate === this.emptyFilter) {\n            this.ghostChip.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        } else if (this.currentTemplate === this.complexFilter) {\n            this.complexChip.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        }\n    }\n\n    private removeExpression(indexToRemove: number) {\n        if (indexToRemove === 0 && this.expressionsList.length === 1) {\n            this.clearFiltering();\n            return;\n        }\n\n        this.filteringService.removeExpression(this.column.field, indexToRemove);\n\n        this.updateVisibleFilters();\n        this.filteringService.filterInternal(this.column.field);\n    }\n\n    private isMoreIconHidden(): boolean {\n        return this.filteringService.columnToMoreIconHidden.get(this.column.field);\n    }\n\n    private updateVisibleFilters() {\n        this.expressionsList.forEach((ex) => ex.isVisible = true);\n\n        if (this.moreIcon) {\n            this.filteringService.columnToMoreIconHidden.set(this.column.field, true);\n        }\n        this.cdr.detectChanges();\n\n        if (this.chipsArea && this.expressionsList.length > 1) {\n            const areaWidth = this.chipsArea.element.nativeElement.offsetWidth;\n            let viewWidth = 0;\n            const chipsAreaElements = this.chipsArea.element.nativeElement.children;\n            let visibleChipsCount = 0;\n            const moreIconWidth = this.moreIcon.nativeElement.offsetWidth -\n                parseInt(document.defaultView.getComputedStyle(this.moreIcon.nativeElement)['margin-left'], 10);\n\n            for (let index = 0; index < chipsAreaElements.length - 1; index++) {\n                if (viewWidth + chipsAreaElements[index].offsetWidth < areaWidth) {\n                    viewWidth += chipsAreaElements[index].offsetWidth;\n                    if (index % 2 === 0) {\n                        visibleChipsCount++;\n                    } else {\n                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-left'], 10);\n                        viewWidth += parseInt(document.defaultView.getComputedStyle(chipsAreaElements[index])['margin-right'], 10);\n                    }\n                } else {\n                    if (index % 2 !== 0 && viewWidth + moreIconWidth > areaWidth) {\n                        visibleChipsCount--;\n                    } else if (visibleChipsCount > 0 && viewWidth - chipsAreaElements[index - 1].offsetWidth + moreIconWidth > areaWidth) {\n                        visibleChipsCount--;\n                    }\n                    this.moreFiltersCount = this.expressionsList.length - visibleChipsCount;\n                    this.filteringService.columnToMoreIconHidden.set(this.column.field, false);\n                    break;\n                }\n            }\n\n            for (let i = visibleChipsCount; i < this.expressionsList.length; i++) {\n                this.expressionsList[i].isVisible = false;\n            }\n            this.cdr.detectChanges();\n        }\n    }\n\n    private isFirstElementFocused(): boolean {\n        return !(this.chipsArea && this.chipsArea.chipsList.length > 0 &&\n            this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`) !== document.activeElement);\n    }\n\n    private isLastElementFocused(): boolean {\n        if (this.chipsArea) {\n            if (this.isMoreIconHidden() && this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(`.igx-chip__remove`) !==\n                document.activeElement) {\n                return false;\n            } else if (!this.isMoreIconHidden() && this.moreIcon.nativeElement !== document.activeElement) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private focusFirstElement(): void {\n        if (this.chipsArea.chipsList.length > 0) {\n            this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n        } else {\n            this.moreIcon.nativeElement.focus();\n        }\n    }\n\n    private focusElement(): void {\n        if (this.filteringService.shouldFocusNext) {\n            if (!this.isMoreIconHidden() && this.chipsArea.chipsList.length === 0) {\n                this.moreIcon.nativeElement.focus();\n            } else {\n                this.chipsArea.chipsList.first.elementRef.nativeElement.querySelector(`.igx-chip__item`).focus();\n            }\n        } else {\n            if (!this.isMoreIconHidden()) {\n                this.moreIcon.nativeElement.focus();\n            } else {\n                this.chipsArea.chipsList.last.elementRef.nativeElement.querySelector(`.igx-chip__remove`).focus();\n            }\n        }\n    }\n\n    private isColumnRightVisible(columnIndex: number): boolean {\n        if (this.filteringService.areAllColumnsInView) {\n            return true;\n        }\n        let currentColumnRight = 0;\n        for (let index = 0; index < this.filteringService.unpinnedColumns.length; index++) {\n            currentColumnRight += parseInt(this.filteringService.unpinnedColumns[index].width, 10);\n            if (this.filteringService.unpinnedColumns[index] === this.filteringService.unpinnedFilterableColumns[columnIndex]) {\n                break;\n            }\n        }\n        const width = this.filteringService.displayContainerWidth + this.filteringService.displayContainerScrollLeft;\n        return currentColumnRight <= width;\n    }\n\n    private isColumnLeftVisible(columnIndex: number): boolean {\n        if (this.filteringService.areAllColumnsInView) {\n            return true;\n        }\n        let currentColumnLeft = 0;\n        for (let index = 0; index < this.filteringService.unpinnedColumns.length; index++) {\n            if (this.filteringService.unpinnedColumns[index] === this.filteringService.unpinnedFilterableColumns[columnIndex]) {\n                break;\n            }\n            currentColumnLeft += parseInt(this.filteringService.unpinnedColumns[index].width, 10);\n        }\n        return currentColumnLeft >= this.filteringService.displayContainerScrollLeft;\n    }\n}\n","import {\n    Component,\n    HostBinding,\n    Input,\n    ViewChild,\n    QueryList,\n    ViewChildren,\n    forwardRef,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    DoCheck,\n    ElementRef,\n    HostListener\n} from '@angular/core';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { isIE } from '../core/utils';\n\nconst Z_INDEX = 9999;\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-header-group',\n    templateUrl: './grid-header-group.component.html'\n})\nexport class IgxGridHeaderGroupComponent implements DoCheck {\n\n    @HostBinding('style.-ms-grid-row-span')\n    get gridRowSpan(): number {\n        return this.column.gridRowSpan;\n    }\n\n    @HostBinding('style.-ms-grid-column-span')\n    get gridColumnSpan(): number {\n        return this.column.gridColumnSpan;\n    }\n\n\n    @HostBinding('style.grid-row-end')\n    get rowEnd(): number {\n        return this.column.rowEnd;\n    }\n\n    @HostBinding('style.grid-column-end')\n    get colEnd(): number {\n        return this.column.colEnd;\n    }\n\n    @HostBinding('style.-ms-grid-row')\n    @HostBinding('style.grid-row-start')\n    get rowStart(): number {\n        return this.column.rowStart;\n    }\n\n    @HostBinding('style.-ms-grid-column')\n    @HostBinding('style.grid-column-start')\n    get colStart(): number {\n        return this.column.colStart;\n    }\n\n\n    /**\n     * Gets the column of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @Input()\n    public column: IgxColumnComponent;\n\n    /**\n     * Gets the `id` of the grid in which the header group is stored.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @Input()\n    public gridID: string;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridHeaderComponent, { static: false })\n    public headerCell: IgxGridHeaderComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridFilteringCellComponent, { static: false })\n    public filterCell: IgxGridFilteringCellComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(forwardRef(() => IgxGridHeaderGroupComponent), { read: IgxGridHeaderGroupComponent })\n    public children: QueryList<IgxGridHeaderGroupComponent>;\n\n    /**\n     * Gets the width of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @HostBinding('style.min-width')\n    @HostBinding('style.flex-basis')\n    get width() {\n        return this.grid.getHeaderGroupWidth(this.column);\n    }\n\n    /**\n     * Gets the style classes of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    @HostBinding('class')\n    get styleClasses(): string {\n        const defaultClasses = [\n            'igx-grid__thead-item',\n            this.column.headerGroupClasses\n        ];\n\n        const classList = {\n            'igx-grid__th--pinned': this.isPinned,\n            'igx-grid__th--pinned-last': this.isLastPinned,\n            'igx-grid__drag-col-header': this.isHeaderDragged,\n            'igx-grid__th--filtering': this.isFiltered\n        };\n\n        for (const className of Object.keys(classList)) {\n            if (classList[className]) {\n                defaultClasses.push(className);\n            }\n        }\n        return defaultClasses.join(' ');\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.z-index')\n    get zIndex() {\n        if (!this.column.pinned) {\n            return null;\n        }\n        return Z_INDEX - this.grid.pinnedColumns.indexOf(this.column);\n    }\n\n    /**\n     * Gets the grid of the header group.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get grid(): any {\n        return this.gridAPI.grid;\n    }\n\n    /**\n     * Gets whether the header group belongs to a column that is filtered.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isFiltered(): boolean {\n        return this.filteringService.filteredColumn === this.column;\n    }\n\n    /**\n     * Gets whether the header group is stored in the last column in the pinned area.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isLastPinned(): boolean {\n        return !this.grid.hasColumnLayouts ? this.column.isLastPinned : false;\n    }\n\n    @HostBinding('style.display')\n    get groupDisplayStyle(): string {\n        return this.grid.hasColumnLayouts && this.column.children && !isIE() ? 'flex' : '';\n    }\n\n    /**\n     * Gets whether the header group is stored in a pinned column.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isPinned(): boolean {\n        return this.column.pinned;\n    }\n\n    /**\n     * Gets whether the header group belongs to a column that is moved.\n     * @memberof IgxGridHeaderGroupComponent\n     */\n    get isHeaderDragged(): boolean {\n        return this.grid.draggedColumn ===  this.column;\n    }\n\n    /**\n     * @hidden\n     */\n    get hasLastPinnedChildColumn(): boolean {\n        return this.column.allChildren.some(child => child.isLastPinned);\n    }\n\n    /**\n     * @hidden\n     */\n    get height() {\n        return this.element.nativeElement.getBoundingClientRect().height;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mousedown', ['$event'])\n    public onMouseDown(event): void {\n        // hack for preventing text selection in IE and Edge while dragging the resizer\n        event.preventDefault();\n    }\n\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n\n    constructor(private cdr: ChangeDetectorRef,\n                public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n                public element: ElementRef,\n                public colResizingService: IgxColumnResizingService,\n                public filteringService: IgxFilteringService) { }\n}\n","import { IGridResourceStrings, GridResourceStringsEN } from './grid-resources';\nimport { ITimePickerResourceStrings, TimePickerResourceStringsEN } from './time-picker-resources';\nimport { cloneValue } from '../utils';\n\nexport interface IResourceStrings extends IGridResourceStrings, ITimePickerResourceStrings {}\n\n/**\n * @hidden\n */\nexport const CurrentResourceStrings = {\n    GridResStrings: cloneValue(GridResourceStringsEN),\n    TimePickerResStrings: cloneValue(TimePickerResourceStringsEN)\n};\n\nfunction updateResourceStrings(currentStrings: IResourceStrings, newStrings: IResourceStrings ) {\n    for (const key of Object.keys(newStrings)) {\n        if (key in currentStrings) {\n            currentStrings[key] = newStrings[key];\n        }\n    }\n}\n\n/**\n * Changes the resource strings for all components in the application\n * ```\n * @param resourceStrings to be applied\n */\nexport function changei18n(resourceStrings: IResourceStrings) {\n    for (const key of Object.keys(CurrentResourceStrings)) {\n        updateResourceStrings(CurrentResourceStrings[key], resourceStrings);\n    }\n}\n\n/**\n * Returns current resource strings for all components\n */\nexport function getCurrentResourceStrings(): IResourceStrings {\n    return {\n            ...CurrentResourceStrings.GridResStrings,\n            ...CurrentResourceStrings.TimePickerResStrings\n    };\n}\n","export interface IGridResourceStrings {\n    igx_grid_groupByArea_message?: string;\n    igx_grid_emptyFilteredGrid_message?: string;\n    igx_grid_emptyGrid_message?: string;\n    igx_grid_filter?: string;\n    igx_grid_filter_row_close?: string;\n    igx_grid_filter_row_reset?: string;\n    igx_grid_filter_row_placeholder?: string;\n    igx_grid_filter_row_boolean_placeholder?: string;\n    igx_grid_filter_row_date_placeholder?: string;\n    igx_grid_filter_operator_and?: string;\n    igx_grid_complex_filter?: string;\n    igx_grid_filter_operator_or?: string;\n    igx_grid_filter_contains?: string;\n    igx_grid_filter_doesNotContain?: string;\n    igx_grid_filter_startsWith?: string;\n    igx_grid_filter_endsWith?: string;\n    igx_grid_filter_equals?: string;\n    igx_grid_filter_doesNotEqual?: string;\n    igx_grid_filter_empty?: string;\n    igx_grid_filter_notEmpty?: string;\n    igx_grid_filter_null?: string;\n    igx_grid_filter_notNull?: string;\n    igx_grid_filter_before?: string;\n    igx_grid_filter_after?: string;\n    igx_grid_filter_today?: string;\n    igx_grid_filter_yesterday?: string;\n    igx_grid_filter_thisMonth?: string;\n    igx_grid_filter_lastMonth?: string;\n    igx_grid_filter_nextMonth?: string;\n    igx_grid_filter_thisYear?: string;\n    igx_grid_filter_lastYear?: string;\n    igx_grid_filter_nextYear?: string;\n    igx_grid_filter_greaterThan?: string;\n    igx_grid_filter_lessThan?: string;\n    igx_grid_filter_greaterThanOrEqualTo?: string;\n    igx_grid_filter_lessThanOrEqualTo?: string;\n    igx_grid_filter_true?: string;\n    igx_grid_filter_false?: string;\n    igx_grid_filter_all?: string;\n    igx_grid_filter_condition_placeholder?: string;\n    igx_grid_summary_count?: string;\n    igx_grid_summary_min?: string;\n    igx_grid_summary_max?: string;\n    igx_grid_summary_sum?: string;\n    igx_grid_summary_average?: string;\n    igx_grid_summary_earliest?: string;\n    igx_grid_summary_latest?: string;\n    igx_grid_excel_filter_moving_left?: string;\n    igx_grid_excel_filter_moving_left_short?: string;\n    igx_grid_excel_filter_moving_right?: string;\n    igx_grid_excel_filter_moving_right_short?: string;\n    igx_grid_excel_filter_moving_header?: string;\n    igx_grid_excel_filter_sorting_asc?: string;\n    igx_grid_excel_filter_sorting_asc_short?: string;\n    igx_grid_excel_filter_sorting_desc?: string;\n    igx_grid_excel_filter_sorting_desc_short?: string;\n    igx_grid_excel_filter_sorting_header?: string;\n    igx_grid_excel_filter_clear?: string;\n    igx_grid_excel_custom_dialog_add?: string;\n    igx_grid_excel_custom_dialog_clear?: string;\n    igx_grid_excel_custom_dialog_header?: string;\n    igx_grid_excel_cancel?: string;\n    igx_grid_excel_apply?: string;\n    igx_grid_excel_search_placeholder?: string;\n    igx_grid_excel_select_all?: string;\n    igx_grid_excel_blanks?: string;\n    igx_grid_excel_hide?: string;\n    igx_grid_excel_pin?: string;\n    igx_grid_excel_unpin?: string;\n    igx_grid_excel_text_filter?: string;\n    igx_grid_excel_number_filter?: string;\n    igx_grid_excel_date_filter?: string;\n    igx_grid_excel_boolean_filter?: string;\n    igx_grid_excel_custom_filter?: string;\n    igx_grid_paginator_label?: string;\n}\n\nexport const GridResourceStringsEN: IGridResourceStrings = {\n    igx_grid_groupByArea_message: 'Drag a column header and drop it here to group by that column.',\n    igx_grid_emptyFilteredGrid_message: 'No records found.',\n    igx_grid_emptyGrid_message: 'Grid has no data.',\n    igx_grid_filter: 'Filter',\n    igx_grid_filter_row_close: 'Close',\n    igx_grid_filter_row_reset: 'Reset',\n    igx_grid_filter_row_placeholder: 'Add filter value',\n    igx_grid_filter_row_boolean_placeholder: 'All',\n    igx_grid_filter_row_date_placeholder: 'Pick up date',\n    igx_grid_filter_operator_and: 'And',\n    igx_grid_filter_operator_or: 'Or',\n    igx_grid_complex_filter: 'Complex Filter',\n    igx_grid_filter_contains: 'Contains',\n    igx_grid_filter_doesNotContain: 'Does Not Contain',\n    igx_grid_filter_startsWith: 'Starts With',\n    igx_grid_filter_endsWith: 'Ends With',\n    igx_grid_filter_equals: 'Equals',\n    igx_grid_filter_doesNotEqual: 'Does Not Equal',\n    igx_grid_filter_empty: 'Empty',\n    igx_grid_filter_notEmpty: 'Not Empty',\n    igx_grid_filter_null: 'Null',\n    igx_grid_filter_notNull: 'Not Null',\n    igx_grid_filter_before: 'Before',\n    igx_grid_filter_after: 'After',\n    igx_grid_filter_today: 'Today',\n    igx_grid_filter_yesterday: 'Yesterday',\n    igx_grid_filter_thisMonth: 'This Month',\n    igx_grid_filter_lastMonth: 'Last Month',\n    igx_grid_filter_nextMonth: 'Next Month',\n    igx_grid_filter_thisYear: 'This Year',\n    igx_grid_filter_lastYear: 'Last Year',\n    igx_grid_filter_nextYear: 'Next Year',\n    igx_grid_filter_greaterThan: 'Greater Than',\n    igx_grid_filter_lessThan: 'Less Than',\n    igx_grid_filter_greaterThanOrEqualTo: 'Greater Than Or Equal To',\n    igx_grid_filter_lessThanOrEqualTo: 'Less Than Or Equal To',\n    igx_grid_filter_true: 'True',\n    igx_grid_filter_false: 'False',\n    igx_grid_filter_all: 'All',\n    igx_grid_filter_condition_placeholder: 'Select filter',\n    igx_grid_summary_count: 'Count',\n    igx_grid_summary_min: 'Min',\n    igx_grid_summary_max: 'Max',\n    igx_grid_summary_sum: 'Sum',\n    igx_grid_summary_average: 'Avg',\n    igx_grid_summary_earliest: 'Earliest',\n    igx_grid_summary_latest: 'Latest',\n    igx_grid_excel_filter_moving_left: 'move left',\n    igx_grid_excel_filter_moving_left_short: 'left',\n    igx_grid_excel_filter_moving_right: 'move right',\n    igx_grid_excel_filter_moving_right_short: 'right',\n    igx_grid_excel_filter_moving_header: 'move',\n    igx_grid_excel_filter_sorting_asc: 'ascending',\n    igx_grid_excel_filter_sorting_asc_short: 'asc',\n    igx_grid_excel_filter_sorting_desc: 'descending',\n    igx_grid_excel_filter_sorting_desc_short: 'desc',\n    igx_grid_excel_filter_sorting_header: 'sort',\n    igx_grid_excel_filter_clear: 'Clear column filters',\n    igx_grid_excel_custom_dialog_add: 'add filter',\n    igx_grid_excel_custom_dialog_clear: 'Clear filter',\n    igx_grid_excel_custom_dialog_header: 'Custom auto-filter on column: ',\n    igx_grid_excel_cancel: 'cancel',\n    igx_grid_excel_apply: 'apply',\n    igx_grid_excel_search_placeholder: 'Search',\n    igx_grid_excel_select_all: 'Select All',\n    igx_grid_excel_blanks: '(Blanks)',\n    igx_grid_excel_hide: 'Hide column',\n    igx_grid_excel_pin: 'Pin column',\n    igx_grid_excel_unpin: 'Unpin column',\n    igx_grid_excel_text_filter: 'Text filter',\n    igx_grid_excel_number_filter: 'Number filter',\n    igx_grid_excel_date_filter: 'Date filter',\n    igx_grid_excel_boolean_filter: 'Boolean filter',\n    igx_grid_excel_custom_filter: 'Custom filter...',\n    igx_grid_paginator_label: 'Items per page'\n};\n","export interface ITimePickerResourceStrings {\n    igx_time_picker_ok?: string;\n    igx_time_picker_cancel?: string;\n}\n\nexport const TimePickerResourceStringsEN: ITimePickerResourceStrings = {\n    igx_time_picker_ok: 'OK',\n    igx_time_picker_cancel: 'Cancel'\n};\n","import { Injectable} from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneArray } from '../../core/utils';\n\n/** @hidden */\n@Injectable()\nexport class IgxGridSummaryService {\n    protected summaryCacheMap: Map<string, Map<string, any[]>> = new Map<string, Map<string, IgxSummaryResult[]>>();\n    public grid;\n    public rootSummaryID = 'igxGridRootSummary';\n    public summaryHeight = 0;\n    public maxSummariesLenght = 0;\n    public groupingExpressions = [];\n    public retriggerRootPipe = 0;\n    public deleteOperation = false;\n\n    public recalculateSummaries() {\n        this.resetSummaryHeight();\n        this.grid.calculateGridHeight();\n        this.grid.cdr.detectChanges();\n    }\n\n    public clearSummaryCache(args?) {\n        if (!this.summaryCacheMap.size) { return; }\n        if (!args) {\n            this.summaryCacheMap.clear();\n            if (this.grid && this.grid.rootSummariesEnabled) {\n                this.retriggerRootPipe++;\n            }\n            return;\n        }\n        if (args.data) {\n            const rowID = this.grid.primaryKey ? args.data[this.grid.primaryKey] : args.data;\n            this.removeSummaries(rowID);\n        }\n        if (args.rowID !== undefined && args.rowID !== null) {\n            let columnName = args.cellID ? this.grid.columnList.find(col => col.index === args.cellID.columnID).field : undefined;\n            if (columnName && this.grid.rowEditable) { return; }\n\n            const isGroupedColumn = this.grid.groupingExpressions &&\n                    this.grid.groupingExpressions.map(expr => expr.fieldName).indexOf(columnName) !== -1;\n            if (columnName && isGroupedColumn ) {\n                columnName = undefined;\n            }\n            this.removeSummaries(args.rowID, columnName);\n        }\n    }\n\n    public removeSummaries(rowID, columnName?) {\n        this.deleteSummaryCache(this.rootSummaryID, columnName);\n        if (this.summaryCacheMap.size === 1 && this.summaryCacheMap.has(this.rootSummaryID)) { return; }\n        if (this.isTreeGrid) {\n            if (this.grid.transactions.enabled && this.deleteOperation) {\n                this.deleteOperation = false;\n                // TODO: this.removeChildRowSummaries(rowID, columnName);\n                this.summaryCacheMap.clear();\n                return;\n            }\n            this.removeAllTreeGridSummaries(rowID, columnName);\n        } else if (this.isHierarchicalGrid) {\n            if (this.grid.transactions.enabled && this.deleteOperation) {\n                this.deleteOperation = false;\n                this.summaryCacheMap.clear();\n            }\n        } else {\n           const summaryIds = this.getSummaryID(rowID, this.grid.groupingExpressions);\n           summaryIds.forEach(id => {\n               this.deleteSummaryCache(id, columnName);\n           });\n        }\n    }\n\n    public removeSummariesCachePerColumn(columnName) {\n        this.summaryCacheMap.forEach((cache) => {\n            if (cache.get(columnName)) {\n                cache.delete(columnName);\n            }\n        });\n        if (this.grid.rootSummariesEnabled) {  this.retriggerRootPipe++; }\n    }\n\n    public calcMaxSummaryHeight() {\n        if (this.summaryHeight) {\n            return this.summaryHeight;\n        }\n        if (!this.grid.data) {return this.summaryHeight = 0; }\n        let maxSummaryLength = 0;\n        this.grid.columnList.filter((col) => col.hasSummary && !col.hidden).forEach((column) => {\n            const getCurrentSummaryColumn = column.summaries.operate([]).length;\n            if (getCurrentSummaryColumn) {\n                if (maxSummaryLength < getCurrentSummaryColumn) {\n                    maxSummaryLength = getCurrentSummaryColumn;\n                }\n            }\n        });\n        this.maxSummariesLenght = maxSummaryLength;\n        this.summaryHeight =  maxSummaryLength * this.grid.defaultSummaryHeight;\n        return this.summaryHeight;\n    }\n\n    public calculateSummaries(rowID, data) {\n        let rowSummaries = this.summaryCacheMap.get(rowID);\n        if (!rowSummaries) {\n            rowSummaries = new Map<string, IgxSummaryResult[]>();\n            this.summaryCacheMap.set(rowID, rowSummaries);\n        }\n        if (!this.hasSummarizedColumns || !data) {return rowSummaries; }\n        this.grid.columnList.filter(col => col.hasSummary).forEach((column) => {\n            if (!rowSummaries.get(column.field)) {\n                const columnValues = data.map(record => record[column.field]);\n                rowSummaries.set(column.field,\n                    column.summaries.operate(columnValues));\n            }\n        });\n        return rowSummaries;\n    }\n\n    public resetSummaryHeight() {\n        this.summaryHeight = 0;\n        (this.grid as any)._summaryPipeTrigger++;\n        if (this.grid.rootSummariesEnabled) {\n            this.retriggerRootPipe++;\n        }\n    }\n\n    public updateSummaryCache(groupingArgs) {\n        if (this.summaryCacheMap.size === 0 || !this.hasSummarizedColumns) { return; }\n        if (this.groupingExpressions.length === 0) {\n            this.groupingExpressions = groupingArgs.expressions.map(record => record.fieldName);\n            return;\n        }\n        if (groupingArgs.length === 0) {\n            this.groupingExpressions = [];\n            this.clearSummaryCache();\n            return;\n        }\n        this.compareGroupingExpressions(this.groupingExpressions, groupingArgs);\n        this.groupingExpressions = groupingArgs.expressions.map(record => record.fieldName);\n    }\n\n    public get hasSummarizedColumns(): boolean {\n        const summarizedColumns = this.grid.columnList.filter(col => col.hasSummary && !col.hidden);\n        return summarizedColumns.length > 0;\n    }\n\n    private deleteSummaryCache(id, columnName) {\n        if (this.summaryCacheMap.get(id)) {\n            const filteringApplied = columnName && this.grid.filteringExpressionsTree &&\n                    this.grid.filteringExpressionsTree.filteringOperands.map((expr) => expr.fieldName).indexOf(columnName) !== -1;\n            if (columnName && this.summaryCacheMap.get(id).get(columnName) && !filteringApplied) {\n                this.summaryCacheMap.get(id).delete(columnName);\n            } else {\n                this.summaryCacheMap.delete(id);\n            }\n            if (id === this.rootSummaryID && this.grid.rootSummariesEnabled) {\n                this.retriggerRootPipe++;\n            }\n        }\n    }\n\n    private getSummaryID(rowID, groupingExpressions) {\n        if (groupingExpressions.length === 0) { return []; }\n        const summaryIDs = [];\n        let data = this.grid.data;\n        if (this.grid.transactions.enabled) {\n            data = DataUtil.mergeTransactions(\n                cloneArray(this.grid.data),\n                this.grid.transactions.getAggregatedChanges(true),\n                this.grid.primaryKey\n            );\n        }\n        const rowData = this.grid.primaryKey ? data.find(rec => rec[this.grid.primaryKey] === rowID) : rowID;\n        let id = '{ ';\n        groupingExpressions.forEach(expr => {\n            id += `'${expr.fieldName}': '${rowData[expr.fieldName]}'`;\n                summaryIDs.push(id.concat(' }'));\n                id += ', ';\n        });\n        return summaryIDs;\n    }\n\n    private removeAllTreeGridSummaries(rowID, columnName?) {\n        let row = this.grid.records.get(rowID);\n        if (!row) { return; }\n        row = row.children ? row : row.parent;\n        while (row) {\n            rowID = row.rowID;\n            this.deleteSummaryCache(rowID, columnName);\n            row = row.parent;\n        }\n    }\n\n    // TODO: remove only deleted rows\n    private removeChildRowSummaries(rowID, columnName?) {\n    }\n\n    private compareGroupingExpressions(current, groupingArgs) {\n        const newExpressions = groupingArgs.expressions.map(record => record.fieldName);\n        const removedCols = groupingArgs.ungroupedColumns;\n        if (current.length <= newExpressions.length) {\n            const newExpr = newExpressions.slice(0, current.length).toString();\n            if (current.toString() !== newExpr) {\n                this.clearSummaryCache();\n            }\n        } else {\n            const currExpr = current.slice(0, newExpressions.length).toString();\n            if (currExpr !== newExpressions.toString()) {\n                this.clearSummaryCache();\n                return;\n            }\n            removedCols.map(col => col.field).forEach(colName => {\n                this.summaryCacheMap.forEach((cache, id) => {\n                   if (id.indexOf(colName) !== -1) {\n                       this.summaryCacheMap.delete(id);\n                   }});\n            });\n        }\n    }\n\n    private get isTreeGrid() {\n        return this.grid.nativeElement.tagName.toLowerCase() === 'igx-tree-grid';\n    }\n\n    private get isHierarchicalGrid() {\n        return this.grid.nativeElement.tagName.toLowerCase() === 'igx-hierarchical-grid';\n    }\n\n}\n","import { Component, Input, HostBinding, HostListener, ChangeDetectionStrategy, ElementRef } from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { IgxColumnComponent } from '../column.component';\nimport { DataType } from '../../data-operations/data-util';\nimport { IgxGridSelectionService, ISelectionNode } from '../../core/grid-selection';\nimport { SUPPORTED_KEYS } from '../../core/utils';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-summary-cell',\n    templateUrl: './summary-cell.component.html'\n})\nexport class IgxSummaryCellComponent {\n\n    @Input()\n    public summaryResults: IgxSummaryResult[];\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public firstCellIndentation = 0;\n\n    @Input()\n    public hasSummary = false;\n\n    @Input()\n    public density;\n\n    constructor(private element: ElementRef, private selectionService: IgxGridSelectionService) {\n    }\n\n    @Input()\n    @HostBinding('attr.data-rowIndex')\n    public rowIndex: number;\n\n    @HostBinding('attr.data-visibleIndex')\n    get visibleColumnIndex(): number {\n        return this.column.visibleIndex;\n    }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('attr.aria-describedby')\n    public get describeby() {\n        return `Summary_${this.column.field}`;\n    }\n\n    @HostBinding('class.igx-grid-summary--active')\n    public focused: boolean;\n\n    @HostListener('focus')\n    public onFocus() {\n        this.focused = true;\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.focused = false;\n    }\n\n    protected get selectionNode(): ISelectionNode {\n        return {\n            row: this.rowIndex,\n            column: this.column.columnLayoutChild ? this.column.parent.visibleIndex : this.visibleColumnIndex,\n            isSummaryRow: true\n        };\n    }\n\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        // TODO: Refactor\n        const key = event.key.toLowerCase();\n        const ctrl = event.ctrlKey;\n        const shift = event.shiftKey;\n\n        if (!SUPPORTED_KEYS.has(key)) {\n            return;\n        }\n        event.stopPropagation();\n        const args = { targetType: 'summaryCell', target: this, event: event, cancel: false };\n        this.grid.onGridKeydown.emit(args);\n        if (args.cancel) {\n            return;\n        }\n        event.preventDefault();\n\n        if (!this.isKeySupportedInCell(key, ctrl)) { return; }\n\n        this.selectionService.keyboardState.shift = shift && !(key === 'tab');\n        const row = this.getRowElementByIndex(this.rowIndex);\n        switch (key) {\n            case 'tab':\n                if (shift) {\n                    this.grid.navigation.performShiftTabKey(row, this.selectionNode);\n                    break;\n                }\n                this.grid.navigation.performTab(row, this.selectionNode);\n                break;\n            case 'arrowleft':\n            case 'home':\n            case 'left':\n                if (ctrl || key === 'home') {\n                    this.grid.navigation.onKeydownHome(this.rowIndex, true);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowLeft(this.nativeElement, this.selectionNode);\n                break;\n            case 'end':\n            case 'arrowright':\n            case 'right':\n                if (ctrl || key === 'end') {\n                    this.grid.navigation.onKeydownEnd(this.rowIndex, true);\n                    break;\n                }\n                this.grid.navigation.onKeydownArrowRight(this.nativeElement, this.selectionNode);\n                break;\n            case 'arrowup':\n            case 'up':\n                    this.grid.navigation.navigateUp(row, this.selectionNode);\n                break;\n            case 'arrowdown':\n            case 'down':\n                    this.grid.navigation.navigateDown(row, this.selectionNode);\n                break;\n        }\n    }\n\n    @HostBinding('style.min-width')\n    @HostBinding('style.max-width')\n    @HostBinding('style.flex-basis')\n    get width() {\n        return this.column.getCellWidth();\n    }\n\n    get nativeElement(): any {\n        return this.element.nativeElement;\n    }\n\n    get columnDatatype(): DataType {\n        return this.column.dataType;\n    }\n\n    get itemHeight() {\n        return this.column.grid.defaultSummaryHeight;\n    }\n\n    /**\n    * @hidden\n    */\n    public get grid() {\n        return (this.column.grid as any);\n    }\n\n    private getRowElementByIndex(rowIndex) {\n        const summaryRows = this.grid.summariesRowList.toArray();\n        return summaryRows.find((sr) => sr.dataRowIndex === rowIndex).nativeElement;\n    }\n\n    private isKeySupportedInCell(key, ctrl) {\n        if (ctrl) {\n           return ['arrowup', 'arrowdown', 'up', 'down', 'end', 'home'].indexOf(key) === -1;\n        }\n        return ['down', 'up', 'left', 'right', 'arrowdown', 'arrowup', 'arrowleft', 'arrowright', 'home', 'end', 'tab'].indexOf(key) !== -1;\n    }\n\n    public translateSummary(summary: IgxSummaryResult): string {\n        return this.grid.resourceStrings[`igx_grid_summary_${summary.key}`] || summary.label;\n    }\n}\n","import {\n    Component,\n    Input,\n    ViewChildren,\n    QueryList,\n    HostBinding,\n    ViewChild,\n    ElementRef,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    DoCheck\n} from '@angular/core';\nimport { IgxSummaryResult } from './grid-summary';\nimport { IgxSummaryCellComponent } from './summary-cell.component';\nimport { IgxGridForOfDirective } from '../../directives/for-of/for_of.directive';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';\n\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-summary-row',\n    templateUrl: './summary-row.component.html',\n    providers: [IgxForOfSyncService]\n})\nexport class IgxSummaryRowComponent implements DoCheck  {\n\n    @Input()\n    public summaries: Map<string, IgxSummaryResult[]>;\n\n    @Input()\n    public gridID;\n\n    @Input()\n    public index: number;\n\n    @Input()\n    public firstCellIndentation = -1;\n\n    @HostBinding('attr.data-rowIndex')\n    get dataRowIndex() {\n        return this.index;\n    }\n\n    get minHeight() {\n        return this.grid.summaryService.calcMaxSummaryHeight() - 1;\n    }\n\n    @ViewChildren(IgxSummaryCellComponent, { read: IgxSummaryCellComponent })\n    public summaryCells: QueryList<IgxSummaryCellComponent>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxDirRef', { read: IgxGridForOfDirective, static: false })\n    public virtDirRow: IgxGridForOfDirective<any>;\n\n    constructor(public gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n                public element: ElementRef,\n                public cdr: ChangeDetectorRef) {}\n\n    public ngDoCheck() {\n        this.cdr.markForCheck();\n    }\n\n    public get grid() {\n        return this.gridAPI.grid;\n    }\n\n    public get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    public getColumnSummaries(columnName) {\n        if (!this.summaries.get(columnName)) {\n            return [];\n        }\n        return this.summaries.get(columnName);\n\n    }\n\n    /**\n     * @hidden\n     */\n    public get pinnedColumns(): IgxColumnComponent[] {\n        return this.grid.pinnedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    public get unpinnedColumns(): IgxColumnComponent[] {\n        return this.grid.unpinnedColumns;\n    }\n}\n","import { Directive, Input, Output, EventEmitter, ElementRef, OnDestroy, NgZone, OnInit } from '@angular/core';\nimport { interval, Observable, Subscription, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nexport enum DragScrollDirection {\n    NONE,\n    LEFT,\n    TOP,\n    RIGHT,\n    BOTTOM,\n    TOPLEFT,\n    TOPRIGHT,\n    BOTTOMLEFT,\n    BOTTOMRIGHT\n}\n\n\n@Directive({\n    selector: '[igxGridDragSelect]'\n})\nexport class IgxGridDragSelectDirective implements OnInit, OnDestroy {\n    _activeDrag: boolean;\n\n    @Input('igxGridDragSelect')\n    get activeDrag(): boolean {\n        return this._activeDrag;\n    }\n\n    set activeDrag(val: boolean) {\n        if (val !== this._activeDrag) {\n            this.unsubscribe();\n            this._activeDrag = val;\n        }\n    }\n\n    @Output()\n    onDragStop = new EventEmitter<boolean>();\n\n    @Output()\n    onDragScroll = new EventEmitter<DragScrollDirection>();\n\n    get nativeElement(): HTMLElement {\n        return this.ref.nativeElement;\n    }\n\n    get clientRect(): ClientRect {\n        return this.nativeElement.getBoundingClientRect();\n    }\n\n    protected end$ = new Subject<any>();\n    protected lastDirection = DragScrollDirection.NONE;\n    protected _interval$: Observable<any>;\n    protected _sub: Subscription;\n\n    constructor(private ref: ElementRef, private zone: NgZone) {\n        this._interval$ = interval(100).pipe(\n            takeUntil(this.end$),\n            filter(() => this.activeDrag)\n        );\n    }\n\n    ngOnInit() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.addEventListener('pointerover', this.startDragSelection);\n            this.nativeElement.addEventListener('pointerleave', this.stopDragSelection);\n        });\n    }\n\n    ngOnDestroy() {\n        this.zone.runOutsideAngular(() => {\n            this.nativeElement.removeEventListener('pointerover', this.startDragSelection);\n            this.nativeElement.removeEventListener('pointerleave', this.stopDragSelection);\n        });\n        this.unsubscribe();\n        this.end$.complete();\n    }\n\n\n    startDragSelection = (ev: PointerEvent) => {\n        if (!this.activeDrag) {\n            return;\n        }\n        const x = ev.clientX;\n        const y = ev.clientY;\n        const direction = this._measureDimensions(x, y);\n        if (direction === this.lastDirection) {\n            return;\n        }\n        this.unsubscribe();\n        this._sub = this._interval$.subscribe(() => this.onDragScroll.emit(direction));\n        this.lastDirection = direction;\n    }\n\n    stopDragSelection = () => {\n        if (!this.activeDrag) {\n            return;\n        }\n        this.onDragStop.emit(false);\n        this.unsubscribe();\n        this.lastDirection = DragScrollDirection.NONE;\n    }\n\n    _measureDimensions(x: number, y: number): DragScrollDirection {\n        let direction: DragScrollDirection;\n\n        const rect = this.clientRect;\n        const RATIO = 0.15;\n        const offsetX = Math.trunc(x - rect.left);\n        const offsetY = Math.trunc(y - rect.top);\n\n        const left = offsetX <= rect.width * RATIO;\n        const right = offsetX >= rect.width * (1 - RATIO);\n        const top = offsetY <= rect.height * RATIO;\n        const bottom = offsetY >= rect.height * (1 - RATIO);\n\n        if (top && left) {\n            direction = DragScrollDirection.TOPLEFT;\n        } else if (top && right) {\n            direction = DragScrollDirection.TOPRIGHT;\n        } else if (bottom && left) {\n            direction = DragScrollDirection.BOTTOMLEFT;\n        } else if (bottom && right) {\n            direction = DragScrollDirection.BOTTOMRIGHT;\n        } else if (top) {\n            direction = DragScrollDirection.TOP;\n        } else if (bottom) {\n            direction = DragScrollDirection.BOTTOM;\n        } else if (left) {\n            direction = DragScrollDirection.LEFT;\n        } else if (right) {\n            direction = DragScrollDirection.RIGHT;\n        } else {\n            direction = DragScrollDirection.NONE;\n        }\n\n        return direction;\n\n    }\n\n    protected unsubscribe() {\n        if (this._sub) {\n            this._sub.unsubscribe();\n        }\n    }\n}\n","import {\n    Directive, EmbeddedViewRef, Input, OnChanges, ChangeDetectorRef,\n    SimpleChange, SimpleChanges, TemplateRef, ViewContainerRef, NgModule, NgZone, ViewRef, Output, EventEmitter\n} from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\n/**\n * @hidden\n */\n@Directive({ selector: '[igxTemplateOutlet]' })\nexport class IgxTemplateOutletDirective implements OnChanges {\n    private _viewRef !: EmbeddedViewRef<any>;\n\n    /**\n    * The embedded views cache. Collection is key-value paired.\n    * Key is the template id, value is the embedded view for the related template.\n    */\n    private _embeddedViewsMap: Map<string, EmbeddedViewRef<any>> = new Map();\n\n    @Input() public igxTemplateOutletContext !: Object;\n\n    @Input() public igxTemplateOutlet !: TemplateRef<any>;\n\n    @Output()\n    public onViewCreated = new EventEmitter<IViewChangeEventArgs>();\n\n    @Output()\n    public onViewMoved = new EventEmitter<IViewChangeEventArgs>();\n\n    @Output()\n    public onCachedViewLoaded = new EventEmitter<ICachedViewLoadedEventArgs>();\n\n    constructor(public _viewContainerRef: ViewContainerRef, private _zone: NgZone, public cdr: ChangeDetectorRef) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const actionType: TemplateOutletAction = this._getActionType(changes);\n        switch (actionType) {\n            case TemplateOutletAction.CreateView: this._recreateView(); break;\n            case TemplateOutletAction.MoveView: this._moveView(); break;\n            case TemplateOutletAction.UseCachedView: this._useCachedView(); break;\n            case TemplateOutletAction.UpdateViewContext: this._updateExistingContext(this.igxTemplateOutletContext); break;\n        }\n    }\n\n    public cleanCache() {\n        this._embeddedViewsMap.forEach((item) => {\n            if (!item.destroyed) {\n                item.destroy();\n            }\n        });\n        this._embeddedViewsMap.clear();\n    }\n\n    public cleanView(tmplID) {\n        const embView = this._embeddedViewsMap.get(tmplID);\n        if (embView) {\n            embView.destroy();\n            this._embeddedViewsMap.delete(tmplID);\n        }\n    }\n\n    private _recreateView() {\n        // detach old and create new\n        if (this._viewRef) {\n            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n        }\n        if (this.igxTemplateOutlet) {\n            this._viewRef = this._viewContainerRef.createEmbeddedView(\n                this.igxTemplateOutlet, this.igxTemplateOutletContext);\n            this.onViewCreated.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n            const tmplId = this.igxTemplateOutletContext['templateID'];\n            if (tmplId) {\n                // if context contains a template id, check if we have a view for that template already stored in the cache\n                // if not create a copy and add it to the cache in detached state.\n                // Note: Views in detached state do not appear in the DOM, however they remain stored in memory.\n                const res = this._embeddedViewsMap.get(this.igxTemplateOutletContext['templateID']);\n                if (!res) {\n                    this._embeddedViewsMap.set(this.igxTemplateOutletContext['templateID'], this._viewRef);\n                }\n            }\n        }\n    }\n\n    private _moveView() {\n        // using external view and inserting it in current view.\n        const view = this.igxTemplateOutletContext['moveView'];\n        const owner = this.igxTemplateOutletContext['owner'];\n        if (view !== this._viewRef) {\n            if (owner._viewContainerRef.indexOf(view) !== -1) {\n                // detach in case view it is attached somewhere else at the moment.\n                owner._viewContainerRef.detach(owner._viewContainerRef.indexOf(view));\n            }\n            if (this._viewRef && this._viewContainerRef.indexOf(this._viewRef) !== -1) {\n                this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n            }\n            this._viewRef = view;\n            this._viewContainerRef.insert(view, 0);\n            this._updateExistingContext(this.igxTemplateOutletContext);\n            this.onViewMoved.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext });\n        }\n    }\n    private _useCachedView() {\n        // use view for specific template cached in the current template outlet\n        const tmplID = this.igxTemplateOutletContext['templateID'];\n        const cachedView = tmplID ?\n            this._embeddedViewsMap.get(tmplID) :\n            null;\n        // if view exists, but template has been changed and there is a view in the cache with the related template\n        // then detach old view and insert the stored one with the matching template\n        // after that update its context.\n        this._viewContainerRef.detach(this._viewContainerRef.indexOf(this._viewRef));\n        this._viewRef = cachedView;\n        const oldContext = this._cloneContext(cachedView.context);\n        this._viewContainerRef.insert(this._viewRef, 0);\n        this._updateExistingContext(this.igxTemplateOutletContext);\n        this.onCachedViewLoaded.emit({ owner: this, view: this._viewRef, context: this.igxTemplateOutletContext, oldContext });\n    }\n\n    private _shouldRecreateView(changes: SimpleChanges): boolean {\n        const ctxChange = changes['igxTemplateOutletContext'];\n        return !!changes['igxTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));\n    }\n\n    private _hasContextShapeChanged(ctxChange: SimpleChange): boolean {\n        const prevCtxKeys = Object.keys(ctxChange.previousValue || {});\n        const currCtxKeys = Object.keys(ctxChange.currentValue || {});\n\n        if (prevCtxKeys.length === currCtxKeys.length) {\n            for (const propName of currCtxKeys) {\n                if (prevCtxKeys.indexOf(propName) === -1) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    private _updateExistingContext(ctx: Object): void {\n        for (const propName of Object.keys(ctx)) {\n            (<any>this._viewRef.context)[propName] = (<any>this.igxTemplateOutletContext)[propName];\n        }\n    }\n\n    private _cloneContext(ctx: any): any {\n        const clone = {};\n        for (const propName of Object.keys(ctx)) {\n            clone[propName] = ctx[propName];\n        }\n        return clone;\n    }\n\n    private _getActionType(changes: SimpleChanges) {\n        const movedView = this.igxTemplateOutletContext['moveView'];\n        const tmplID = this.igxTemplateOutletContext['templateID'];\n        const cachedView = tmplID ?\n            this._embeddedViewsMap.get(tmplID) :\n            null;\n        const shouldRecreate = this._shouldRecreateView(changes);\n        if (movedView) {\n            // view is moved from external source\n            return TemplateOutletAction.MoveView;\n        } else if (shouldRecreate && cachedView) {\n            // should recreate (template or context change) and there is a matching template in cache\n            return TemplateOutletAction.UseCachedView;\n        } else if (!this._viewRef || shouldRecreate) {\n            // no view or should recreate\n            return TemplateOutletAction.CreateView;\n        } else if (this.igxTemplateOutletContext) {\n            // has context, update context\n            return TemplateOutletAction.UpdateViewContext;\n        }\n    }\n}\nenum TemplateOutletAction {\n    CreateView,\n    MoveView,\n    UseCachedView,\n    UpdateViewContext\n}\n\nexport interface IViewChangeEventArgs {\n    owner: IgxTemplateOutletDirective;\n    view: EmbeddedViewRef<any>;\n    context: any;\n}\n\nexport interface ICachedViewLoadedEventArgs extends IViewChangeEventArgs {\n    oldContext: any;\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTemplateOutletDirective],\n    entryComponents: [],\n    exports: [IgxTemplateOutletDirective],\n    imports: [CommonModule]\n})\n\nexport class IgxTemplateOutletModule {\n}\n","import { ChangeDetectionStrategy, Component, ViewChild } from '@angular/core';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxColumnResizerDirective } from './grid.common';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-column-resizer',\n    templateUrl: './grid-column-resizer.component.html'\n})\nexport class IgxGridColumnResizerComponent {\n    constructor(public colResizingService: IgxColumnResizingService) { }\n\n    @ViewChild(IgxColumnResizerDirective, { static: true })\n    public resizer: IgxColumnResizerDirective;\n}\n","import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    QueryList,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    ChangeDetectionStrategy\n} from '@angular/core';\nimport { DataType } from '../../data-operations/data-util';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxDropDownComponent, ISelectionEventArgs } from '../../drop-down/index';\nimport { IFilteringOperation } from '../../data-operations/filtering-condition';\nimport { FilteringLogic, IFilteringExpression } from '../../data-operations/filtering-expression.interface';\nimport { HorizontalAlignment, VerticalAlignment, OverlaySettings } from '../../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../../services/overlay/position/connected-positioning-strategy';\nimport { IChipSelectEventArgs, IBaseChipEventArgs, IgxChipsAreaComponent, IgxChipComponent } from '../../chips';\nimport { ExpressionUI } from './grid-filtering.service';\nimport { IgxDropDownItemComponent } from '../../drop-down/drop-down-item.component';\nimport { IgxFilteringService } from './grid-filtering.service';\nimport { KEYS, isEdge } from '../../core/utils';\nimport { AbsoluteScrollStrategy } from '../../services/overlay/scroll';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-filtering-row',\n    templateUrl: './grid-filtering-row.component.html'\n})\nexport class IgxGridFilteringRowComponent implements AfterViewInit {\n\n    private _positionSettings = {\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Bottom\n    };\n\n    private _conditionsOverlaySettings: OverlaySettings = {\n        excludePositionTarget: true,\n        closeOnOutsideClick: true,\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)\n    };\n\n    private _operatorsOverlaySettings: OverlaySettings = {\n        excludePositionTarget: true,\n        closeOnOutsideClick: true,\n        modal: false,\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        positionStrategy: new ConnectedPositioningStrategy(this._positionSettings)\n    };\n\n    private chipsAreaWidth: number;\n    private chipAreaScrollOffset = 0;\n    private _column = null;\n    private isKeyPressed = false;\n    private isComposing = false;\n    private _cancelChipClick = false;\n\n    public showArrows: boolean;\n    public expression: IFilteringExpression;\n    public expressionsList: Array<ExpressionUI>;\n\n    @Input()\n    get column(): IgxColumnComponent {\n        return this._column;\n    }\n\n    set column(val) {\n        if (val) {\n            this._column = val;\n\n            this.expressionsList = this.filteringService.getExpressions(this._column.field);\n\n            this.resetExpression();\n\n            this.chipAreaScrollOffset = 0;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    @Input()\n    get value(): any {\n        return this.expression ? this.expression.searchVal : null;\n    }\n\n    set value(val) {\n        if (!val && val !== 0) {\n            this.expression.searchVal = null;\n            this.showHideArrowButtons();\n        } else {\n            this.expression.searchVal = this.transformValue(val);\n            if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {\n                this.addExpression(true);\n            }\n        }\n\n        this.filter();\n    }\n\n    @ViewChild('defaultFilterUI', { read: TemplateRef, static: true })\n    protected defaultFilterUI: TemplateRef<any>;\n\n    @ViewChild('defaultDateUI', { read: TemplateRef, static: true })\n    protected defaultDateUI: TemplateRef<any>;\n\n    @ViewChild('input', { read: ElementRef, static: false })\n    protected input: ElementRef;\n\n    @ViewChild('inputGroupConditions', { read: IgxDropDownComponent, static: true })\n    protected dropDownConditions: IgxDropDownComponent;\n\n    @ViewChild('chipsArea', { read: IgxChipsAreaComponent, static: true })\n    protected chipsArea: IgxChipsAreaComponent;\n\n    @ViewChildren('operators', { read: IgxDropDownComponent })\n    protected dropDownOperators: QueryList<IgxDropDownComponent>;\n\n    @ViewChild('inputGroup', { read: ElementRef, static: false })\n    protected inputGroup: ElementRef;\n\n    @ViewChild('inputGroupPrefix', { read: ElementRef, static: false })\n    protected inputGroupPrefix: ElementRef;\n\n    @ViewChild('container', { static: true })\n    protected container: ElementRef;\n\n    @ViewChild('operand', { static: false })\n    protected operand: ElementRef;\n\n    @ViewChild('closeButton', { static: true })\n    public closeButton: ElementRef;\n\n    @HostBinding('class.igx-grid__filtering-row')\n    public cssClass = 'igx-grid__filtering-row';\n\n    constructor(public filteringService: IgxFilteringService, public element: ElementRef, public cdr: ChangeDetectorRef) { }\n\n    ngAfterViewInit() {\n        this._conditionsOverlaySettings.outlet = this.column.grid.outletDirective;\n        this._operatorsOverlaySettings.outlet = this.column.grid.outletDirective;\n\n        this.input.nativeElement.focus();\n    }\n\n    @HostListener('keydown.shift.tab', ['$event'])\n    @HostListener('keydown.tab', ['$event'])\n    public onTabKeydown(event) {\n        event.stopPropagation();\n        if (document.activeElement === this.closeButton.nativeElement && !event.shiftKey) {\n            this.filteringService.grid.navigation.navigateFirstCellIfPossible(event);\n        }\n    }\n\n    @HostListener('keydown.esc', ['$event'])\n    public onEscKeydown(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        this.close();\n    }\n\n    get disabled(): boolean {\n        return !(this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0);\n    }\n\n    get template(): TemplateRef<any> {\n        if (this.column.dataType === DataType.Date) {\n            return this.defaultDateUI;\n        }\n\n        return this.defaultFilterUI;\n    }\n\n    get type() {\n        switch (this.column.dataType) {\n            case DataType.String:\n            case DataType.Boolean:\n                return 'text';\n            case DataType.Number:\n                return 'number';\n        }\n    }\n\n    get conditions(): any {\n        return this.column.filters.conditionList();\n    }\n\n    get isUnaryCondition(): boolean {\n        if (this.expression.condition) {\n            return this.expression.condition.isUnary;\n        } else {\n            return true;\n        }\n    }\n\n    get placeholder(): string {\n        if (this.expression.condition && this.expression.condition.isUnary) {\n            return this.filteringService.getChipLabel(this.expression);\n        } else if (this.column.dataType === DataType.Date) {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_date_placeholder;\n        } else if (this.column.dataType === DataType.Boolean) {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_boolean_placeholder;\n        } else {\n            return this.filteringService.grid.resourceStrings.igx_grid_filter_row_placeholder;\n        }\n    }\n\n    /**\n     * Event handler for keydown on the input group's prefix.\n     */\n    public onPrefixKeyDown(event: KeyboardEvent) {\n        if ((event.key === KEYS.ENTER || event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE) && this.dropDownConditions.collapsed) {\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n            event.stopImmediatePropagation();\n        } else if (event.key === KEYS.TAB) {\n            if (event.shiftKey) {\n                event.preventDefault();\n                event.stopPropagation();\n            } else if (!this.dropDownConditions.collapsed) {\n                this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n            }\n        }\n    }\n\n    /**\n     * Event handler for keydown on the input.\n     */\n    public onInputKeyDown(event: KeyboardEvent) {\n        this.isKeyPressed = true;\n\n        if (this.column.dataType === DataType.Boolean) {\n            if (event.key === KEYS.ENTER || event.key === KEYS.SPACE || event.key === KEYS.SPACE_IE) {\n                this.inputGroupPrefix.nativeElement.focus();\n                this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n                event.stopPropagation();\n                return;\n            }\n        }\n\n        if (event.key === KEYS.ENTER) {\n            if (this.isComposing) {\n                return;\n            }\n            this.commitInput();\n        } else if (event.altKey && (event.key === KEYS.DOWN_ARROW || event.key === KEYS.DOWN_ARROW_IE)) {\n            this.inputGroupPrefix.nativeElement.focus();\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n        } else if (event.key === KEYS.ESCAPE || event.key === KEYS.ESCAPE_IE) {\n            event.preventDefault();\n            this.close();\n        }\n        event.stopPropagation();\n    }\n\n    /**\n     * Event handler for keyup on the input.\n     */\n    public onInputKeyUp(eventArgs) {\n        this.isKeyPressed = false;\n    }\n\n    /**\n     * Event handler for input on the input.\n     */\n    public onInput(eventArgs) {\n        // The 'iskeyPressed' flag is needed for a case in IE, because the input event is fired on focus and for some reason,\n        // when you have a japanese character as a placeholder, on init the value here is empty string .\n        if (isEdge() || this.isKeyPressed || eventArgs.target.value) {\n            this.value = eventArgs.target.value;\n        }\n    }\n\n    /**\n     * Event handler for compositionstart on the input.\n     */\n    public onCompositionStart() {\n        this.isComposing = true;\n    }\n\n    /**\n     * Event handler for compositionend on the input.\n     */\n    public onCompositionEnd() {\n        this.isComposing = false;\n    }\n\n    /**\n     * Event handler for input click event.\n     */\n    public onInputClick() {\n        if (this.column.dataType === DataType.Boolean && this.dropDownConditions.collapsed) {\n            this.inputGroupPrefix.nativeElement.focus();\n            this.toggleConditionsDropDown(this.inputGroupPrefix.nativeElement);\n        }\n    }\n\n    /**\n     * Event handler for datepicker's close.\n     */\n    public datePickerClose() {\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Returns the filtering operation condition for a given value.\n     */\n    public getCondition(value: string): IFilteringOperation {\n        return this.column.filters.condition(value);\n    }\n\n    /**\n     * Returns the translated condition name for a given value.\n     */\n    public translateCondition(value: string): string {\n        return this.filteringService.grid.resourceStrings[`igx_grid_filter_${this.getCondition(value).name}`] || value;\n    }\n\n    /**\n     * Returns the icon name of the current condition.\n     */\n    public getIconName(): string {\n        if (this.column.dataType === DataType.Boolean && this.expression.condition === null) {\n            return this.getCondition(this.conditions[0]).iconName;\n        } else {\n            return this.expression.condition.iconName;\n        }\n    }\n\n    /**\n     * Returns whether a given condition is selected in dropdown.\n     */\n    public isConditionSelected(conditionName: string): boolean {\n        if (this.expression.condition) {\n            return this.expression.condition.name === conditionName;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Clears the current filtering.\n     */\n    public clearFiltering() {\n        this.filteringService.clearFilter(this.column.field);\n        this.resetExpression();\n        if (this.input) {\n            this.input.nativeElement.focus();\n        }\n        this.cdr.detectChanges();\n\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    /**\n     * Commits the value of the input.\n     */\n    public commitInput() {\n        this.expressionsList.forEach(ex => ex.isSelected = false);\n        this.chipsArea.chipsList.forEach(chip => chip.selected = false);\n\n        let indexToDeselect = -1;\n        for (let index = 0; index < this.expressionsList.length; index++) {\n            const expression = this.expressionsList[index].expression;\n            if (expression.searchVal === null && !expression.condition.isUnary) {\n                indexToDeselect = index;\n            }\n        }\n        if (indexToDeselect !== -1) {\n            this.removeExpression(indexToDeselect, this.expression);\n        }\n        this.resetExpression();\n        this.scrollChipsWhenAddingExpression();\n    }\n\n    /**\n     * Clears the value of the input.\n     */\n    public clearInput() {\n        this.value = null;\n    }\n\n    /**\n     * Event handler for keydown on clear button.\n     */\n    public onClearKeyDown(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            this.clearInput();\n            this.input.nativeElement.focus();\n        }\n    }\n\n    /**\n     * Event handler for click on clear button.\n     */\n    public onClearClick() {\n        this.clearInput();\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Event handler for keydown on commit button.\n     */\n    public onCommitKeyDown(eventArgs: KeyboardEvent) {\n        if (eventArgs.key === KEYS.ENTER || eventArgs.key === KEYS.SPACE || eventArgs.key === KEYS.SPACE_IE) {\n            eventArgs.preventDefault();\n            this.commitInput();\n            this.input.nativeElement.focus();\n        }\n    }\n\n    /**\n     * Event handler for click on commit button.\n     */\n    public onCommitClick() {\n        this.commitInput();\n        this.input.nativeElement.focus();\n    }\n\n    /**\n     * Event handler for focusout on the input group.\n     */\n    public onInputGroupFocusout() {\n        if (!this.value && this.value !== 0) {\n            return;\n        }\n        requestAnimationFrame(() => {\n            const focusedElement = document.activeElement;\n            if (!(focusedElement && this.inputGroup.nativeElement.contains(focusedElement)) &&\n                this.dropDownConditions.collapsed) {\n                this.commitInput();\n            }\n        });\n    }\n\n    /**\n     * Closes the filtering edit row.\n     */\n    public close() {\n        if (this.expressionsList.length === 1 &&\n            this.expressionsList[0].expression.searchVal === null &&\n            this.expressionsList[0].expression.condition.isUnary === false) {\n            this.filteringService.getExpressions(this.column.field).pop();\n        } else {\n            this.expressionsList.forEach((item) => {\n                if (item.expression.searchVal === null && !item.expression.condition.isUnary) {\n                    this.filteringService.removeExpression(this.column.field, this.expressionsList.indexOf(item));\n                }\n            });\n        }\n\n        this.filteringService.isFilterRowVisible = false;\n\n        this.filteringService.updateFilteringCell(this.column);\n        this.filteringService.focusFilterCellChip(this.column, true);\n\n        this.filteringService.filteredColumn = null;\n        this.filteringService.selectedExpression = null;\n        this.cdr.detectChanges();\n\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    /*\n    * noop\n    */\n    public noop() {}\n\n    /**\n     *  Event handler for date picker's selection.\n     */\n    public onDateSelected(value: Date) {\n        this.value = value;\n        this.commitInput();\n    }\n\n    /**\n     * Opens the conditions dropdown.\n     */\n    public toggleConditionsDropDown(target: any) {\n        this._conditionsOverlaySettings.positionStrategy.settings.target = target;\n        this.dropDownConditions.toggle(this._conditionsOverlaySettings);\n    }\n\n    /**\n     * Opens the logic operators dropdown.\n     */\n    public toggleOperatorsDropDown(eventArgs, index) {\n        this._operatorsOverlaySettings.positionStrategy.settings.target = eventArgs.target.parentElement;\n        this.dropDownOperators.toArray()[index].toggle(this._operatorsOverlaySettings);\n    }\n\n    /**\n     * Event handler for change event in conditions dropdown.\n     */\n    public onConditionsChanged(eventArgs) {\n        const value = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n        this.expression.condition = this.getCondition(value);\n        if (this.expression.condition.isUnary) {\n            // update grid's filtering on the next cycle to ensure the drop-down is closed\n            // if the drop-down is not closed this event handler will be invoked multiple times\n            requestAnimationFrame(() => this.unaryConditionChangedCallback());\n        } else {\n            requestAnimationFrame(() => this.conditionChangedCallback());\n        }\n\n        if (this.input) {\n            // Add requestAnimationFrame becasue of an issue in IE, where you are still able to write in the input,\n            // if it has been focused and then set to readonly.\n            requestAnimationFrame(() => this.input.nativeElement.focus());\n        }\n    }\n\n\n    public onChipPointerdown(args, chip: IgxChipComponent) {\n        const activeElement = document.activeElement;\n        this._cancelChipClick = chip.selected && activeElement && this.inputGroup.nativeElement.contains(activeElement);\n    }\n\n    public onChipClick(args, chip: IgxChipComponent) {\n        if (this._cancelChipClick) {\n            return;\n        }\n\n        this._cancelChipClick = false;\n        chip.selected = !chip.selected;\n    }\n\n    /**\n     *  Event handler for chip selected event.\n     */\n    public onChipSelected(eventArgs: IChipSelectEventArgs, expression: IFilteringExpression) {\n        if (eventArgs.selected) {\n            if (this.chipsArea.chipsList) {\n                this.chipsArea.chipsList.forEach((chip) => {\n                    if (chip !== eventArgs.owner) {\n                        chip.selected = false;\n                    }\n                });\n            }\n            this.expression = expression;\n\n            if (this.input) {\n                this.input.nativeElement.focus();\n            }\n        } else if (this.expression === expression) {\n            this.resetExpression();\n        }\n    }\n\n    /**\n     * Event handler for chip keydown event.\n     */\n    public onChipKeyDown(eventArgs: KeyboardEvent, chip: IgxChipComponent) {\n        if (eventArgs.key === KEYS.ENTER) {\n            eventArgs.preventDefault();\n            chip.selected = !chip.selected;\n        }\n    }\n\n    /**\n     * Scrolls the first chip into view if the tab key is pressed on the left arrow.\n     */\n    public onLeftArrowKeyDown(event) {\n        if (event.key === KEYS.TAB) {\n            this.chipAreaScrollOffset = 0;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    /**\n     * Event handler for chip removed event.\n     */\n    public onChipRemoved(eventArgs: IBaseChipEventArgs, item: ExpressionUI) {\n        const indexToRemove = this.expressionsList.indexOf(item);\n        this.removeExpression(indexToRemove, item.expression);\n\n        this.scrollChipsOnRemove();\n    }\n\n    /**\n     * Event handler for logic operator changed event.\n     */\n    public onLogicOperatorChanged(eventArgs: ISelectionEventArgs, expression: ExpressionUI) {\n        if (eventArgs.oldSelection) {\n            expression.afterOperator = (eventArgs.newSelection as IgxDropDownItemComponent).value;\n            this.expressionsList[this.expressionsList.indexOf(expression) + 1].beforeOperator = expression.afterOperator;\n\n            // update grid's filtering on the next cycle to ensure the drop-down is closed\n            // if the drop-down is not closed this event handler will be invoked multiple times\n            requestAnimationFrame(() => this.filter());\n        }\n    }\n\n    /**\n     * Scrolls the chips into the chip area when left or right arrows are pressed.\n     */\n    public scrollChipsOnArrowPress(arrowPosition: string) {\n        let count = 0;\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        const containerRect = this.container.nativeElement.getBoundingClientRect();\n\n        if (arrowPosition === 'right') {\n            for (let index = 0; index < chipAraeChildren.length; index++) {\n                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().right) < Math.ceil(containerRect.right)) {\n                    count++;\n                }\n            }\n\n            if (count < chipAraeChildren.length) {\n                this.chipAreaScrollOffset -= Math.ceil(chipAraeChildren[count].getBoundingClientRect().right) -\n                    Math.ceil(containerRect.right) + 1;\n                this.transform(this.chipAreaScrollOffset);\n            }\n        }\n\n        if (arrowPosition === 'left') {\n            for (let index = 0; index < chipAraeChildren.length; index++) {\n                if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().left) < Math.ceil(containerRect.left)) {\n                    count++;\n                }\n            }\n\n            if (count > 0) {\n                this.chipAreaScrollOffset += Math.ceil(containerRect.left) -\n                    Math.ceil(chipAraeChildren[count - 1].getBoundingClientRect().left) + 1;\n                this.transform(this.chipAreaScrollOffset);\n            }\n        }\n    }\n\n    private showHideArrowButtons() {\n        requestAnimationFrame(() => {\n            if (this.filteringService.isFilterRowVisible) {\n                const containerWidth = this.container.nativeElement.getBoundingClientRect().width;\n                this.chipsAreaWidth = this.chipsArea.element.nativeElement.getBoundingClientRect().width;\n\n                this.showArrows = this.chipsAreaWidth >= containerWidth && this.isColumnFiltered;\n\n                // TODO: revise the cdr.detectChanges() usage here\n                this.cdr.detectChanges();\n            }\n        });\n    }\n\n    private transformValue(value): any {\n        if (this.column.dataType === DataType.Number) {\n            value = parseFloat(value);\n        } else if (this.column.dataType === DataType.Boolean) {\n            value = Boolean(value);\n        }\n\n        return value;\n    }\n\n    private addExpression(isSelected: boolean) {\n        const exprUI = new ExpressionUI();\n        exprUI.expression = this.expression;\n        exprUI.beforeOperator = this.expressionsList.length > 0 ? FilteringLogic.And : null;\n        exprUI.isSelected = isSelected;\n\n        this.expressionsList.push(exprUI);\n\n        const length = this.expressionsList.length;\n        if (this.expressionsList[length - 2]) {\n            this.expressionsList[length - 2].afterOperator = this.expressionsList[length - 1].beforeOperator;\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private removeExpression(indexToRemove: number, expression: IFilteringExpression) {\n        if (indexToRemove === 0 && this.expressionsList.length === 1) {\n            this.clearFiltering();\n            return;\n        }\n\n        this.filteringService.removeExpression(this.column.field, indexToRemove);\n\n        this.filter();\n\n        if (this.expression === expression) {\n            this.resetExpression();\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private resetExpression() {\n        this.expression = {\n            fieldName: this.column.field,\n            condition: null,\n            searchVal: null,\n            ignoreCase: this.column.filteringIgnoreCase\n        };\n\n        if (this.column.dataType !== DataType.Boolean) {\n            this.expression.condition = this.getCondition(this.conditions[0]);\n        }\n\n        if (this.column.dataType === DataType.Date && this.input) {\n            this.input.nativeElement.value = null;\n        }\n\n        this.showHideArrowButtons();\n    }\n\n    private scrollChipsWhenAddingExpression() {\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        if (!chipAraeChildren || chipAraeChildren.length === 0) {\n            return;\n        }\n\n        const containerRectRight = Math.ceil(this.container.nativeElement.getBoundingClientRect().right);\n\n        const lastChipRectRight = Math.ceil(chipAraeChildren[chipAraeChildren.length - 1].getBoundingClientRect().right);\n        if (lastChipRectRight >= containerRectRight) {\n            this.chipAreaScrollOffset -= lastChipRectRight - containerRectRight;\n            this.transform(this.chipAreaScrollOffset);\n        }\n    }\n\n    /**\n     * @hidden\n     * Resets the chips area\n     * @memberof IgxGridFilteringRowComponent\n     */\n    public resetChipsArea() {\n        this.chipAreaScrollOffset = 0;\n        this.transform(this.chipAreaScrollOffset);\n        this.showHideArrowButtons();\n    }\n\n    private transform(offset: number) {\n        requestAnimationFrame(() => {\n            this.chipsArea.element.nativeElement.style.transform = `translate(${offset}px)`;\n        });\n    }\n\n    private scrollChipsOnRemove() {\n        let count = 0;\n        const chipAraeChildren = this.chipsArea.element.nativeElement.children;\n        const containerRect = this.container.nativeElement.getBoundingClientRect();\n\n        for (let index = 0; index < chipAraeChildren.length; index++) {\n            if (Math.ceil(chipAraeChildren[index].getBoundingClientRect().left) < Math.ceil(containerRect.left)) {\n                count++;\n            }\n        }\n\n        if (count <= 2) {\n            this.chipAreaScrollOffset = 0;\n        } else {\n            const dif = chipAraeChildren[count].id === 'chip' ? count - 2 : count - 1;\n            this.chipAreaScrollOffset += Math.ceil(containerRect.left) - Math.ceil(chipAraeChildren[dif].getBoundingClientRect().left) + 1;\n        }\n\n        this.transform(this.chipAreaScrollOffset);\n    }\n\n    private conditionChangedCallback() {\n        if (!!this.expression.searchVal || this.expression.searchVal === 0) {\n            this.filter();\n        } else if (this.value) {\n            this.value = null;\n        }\n    }\n\n    private unaryConditionChangedCallback() {\n        if (this.value) {\n            this.value = null;\n        }\n        if (this.expressionsList.find(item => item.expression === this.expression) === undefined) {\n            this.addExpression(true);\n        }\n        this.filter();\n    }\n\n    private filter() {\n        this.filteringService.filterInternal(this.column.field);\n    }\n\n    private get isColumnFiltered() {\n        return this.column.filteringExpressionsTree && this.column.filteringExpressionsTree.filteringOperands.length > 0;\n    }\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectorRef,\n    ComponentFactoryResolver,\n    ContentChildren,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    IterableChangeRecord,\n    IterableDiffers,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    ViewContainerRef,\n    InjectionToken,\n    Optional,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil, first, filter } from 'rxjs/operators';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { cloneArray, isEdge, isNavigationKey, CancelableEventArgs, flatten, mergeObjects, isIE } from '../core/utils';\nimport { DataType } from '../data-operations/data-util';\nimport { FilteringLogic, IFilteringExpression } from '../data-operations/filtering-expression.interface';\nimport { IGroupByRecord } from '../data-operations/groupby-record.interface';\nimport { ISortingExpression } from '../data-operations/sorting-expression.interface';\nimport { IForOfState, IgxGridForOfDirective } from '../directives/for-of/for_of.directive';\nimport { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';\nimport {\n    IgxBaseExporter,\n    IgxExporterOptionsBase,\n    AbsoluteScrollStrategy,\n    HorizontalAlignment,\n    VerticalAlignment,\n    IgxOverlayService\n} from '../services/index';\nimport { IgxCheckboxComponent } from './../checkbox/checkbox.component';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IColumnVisibilityChangedEventArgs } from './column-hiding-item.directive';\nimport { IgxColumnComponent } from './column.component';\nimport { ISummaryExpression } from './summaries/grid-summary';\nimport { DropPosition, ContainerPositioningStrategy, IgxDecimalPipeComponent, IgxDatePipeComponent } from './grid.common';\nimport { IgxGridToolbarComponent } from './grid-toolbar.component';\nimport { IgxRowComponent } from './row.component';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxOverlayOutletDirective, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { FilteringExpressionsTree, IFilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';\nimport { IFilteringOperation } from '../data-operations/filtering-condition';\nimport { Transaction, TransactionType, TransactionService, State } from '../services/index';\nimport {\n    IgxRowEditTemplateDirective,\n    IgxRowEditTabStopDirective,\n    IgxRowEditTextDirective,\n    IgxRowEditActionsDirective\n} from './grid.rowEdit.directive';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase, DisplayDensity } from '../core/displayDensity';\nimport { IgxGridRowComponent } from './grid';\nimport { IgxFilteringService } from './filtering/grid-filtering.service';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { WatchChanges } from './watch-changes';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { IgxGridToolbarCustomContentDirective } from './grid-toolbar.component';\nimport { IGridResourceStrings } from '../core/i18n/grid-resources';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { IgxGridSummaryService } from './summaries/grid-summary.service';\nimport { IgxSummaryRowComponent } from './summaries/summary-row.component';\nimport { IgxGridSelectionService, GridSelectionRange, IgxGridCRUDService, IgxRow, IgxCell } from '../core/grid-selection';\nimport { DragScrollDirection } from './drag-select.directive';\nimport { ICachedViewLoadedEventArgs, IgxTemplateOutletDirective } from '../directives/template-outlet/template_outlet.directive';\nimport {\n    IgxExcelStyleSortingTemplateDirective,\n    IgxExcelStylePinningTemplateDirective,\n    IgxExcelStyleHidingTemplateDirective,\n    IgxExcelStyleMovingTemplateDirective\n} from './filtering/excel-style/grid.excel-style-filtering.component';\nimport { IgxGridColumnResizerComponent } from './grid-column-resizer.component';\nimport { IgxGridFilteringRowComponent } from './filtering/grid-filtering-row.component';\nimport { IgxDragIndicatorIconDirective } from './row-drag.directive';\nimport { IgxDragDirective } from '../directives/dragdrop/dragdrop.directive';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { CharSeparatedValueData } from '../services/csv/char-separated-value-data';\n\nconst MINIMUM_COLUMN_WIDTH = 136;\nconst FILTER_ROW_HEIGHT = 50;\n\n// By default row editing overlay outlet is inside grid body so that overlay is hidden below grid header when scrolling.\n// In cases when grid has 1-2 rows there isn't enough space in grid body and row editing overlay should be shown above header.\n// Default row editing overlay height is higher then row height that is why the case is valid also for row with 2 rows.\n// More accurate calculation is not possible, cause row editing overlay is still not shown and we don't know its height,\n// but in the same time we need to set row editing overlay outlet before opening the overlay itself.\nconst MIN_ROW_EDITING_COUNT_THRESHOLD = 2;\n\nexport const IgxGridTransaction = new InjectionToken<string>('IgxGridTransaction');\n\nexport interface IGridClipboardEvent {\n    data: any[];\n    cancel: boolean;\n}\n\nexport interface IGridCellEventArgs {\n    cell: IgxGridCellComponent;\n    event: Event;\n}\n\nexport interface IGridEditEventArgs extends CancelableEventArgs {\n    rowID: any;\n    cellID?: {\n        rowID: any,\n        columnID: any,\n        rowIndex: number\n    };\n    oldValue: any;\n    newValue?: any;\n    event?: Event;\n}\n\nexport interface IPinColumnEventArgs {\n    column: IgxColumnComponent;\n    insertAtIndex: number;\n    isPinned: boolean;\n}\n\nexport interface IPageEventArgs {\n    previous: number;\n    current: number;\n}\n\nexport interface IRowDataEventArgs {\n    data: any;\n}\n\nexport interface IColumnResizeEventArgs {\n    column: IgxColumnComponent;\n    prevWidth: string;\n    newWidth: string;\n}\n\nexport interface IRowSelectionEventArgs {\n    oldSelection: any[];\n    newSelection: any[];\n    row?: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n    event?: Event;\n}\n\nexport interface ISearchInfo {\n    searchText: string;\n    caseSensitive: boolean;\n    exactMatch: boolean;\n    activeMatchIndex: number;\n    matchInfoCache: any[];\n}\n\nexport interface IGridToolbarExportEventArgs {\n    grid: IgxGridBaseComponent;\n    exporter: IgxBaseExporter;\n    options: IgxExporterOptionsBase;\n    cancel: boolean;\n}\n\nexport interface IColumnMovingStartEventArgs {\n    source: IgxColumnComponent;\n}\n\nexport interface IColumnMovingEventArgs {\n    source: IgxColumnComponent;\n    cancel: boolean;\n}\n\nexport interface IColumnMovingEndEventArgs {\n    source: IgxColumnComponent;\n    target: IgxColumnComponent;\n}\n\n// TODO: to be deleted when onFocusChange event is removed #4054\nexport interface IFocusChangeEventArgs {\n    cell: IgxGridCellComponent;\n    event: Event;\n    cancel: boolean;\n}\n\nexport interface IGridKeydownEventArgs {\n    targetType: GridKeydownTargetType;\n    target: Object;\n    event: Event;\n    cancel: boolean;\n}\n\nexport interface ICellPosition {\n    rowIndex: number;\n    visibleColumnIndex: number;\n}\nexport interface IGridDataBindable {\n    data: any[];\n    filteredData: any[];\n}\n\nexport interface IRowDragEndEventArgs {\n    owner: IgxDragDirective;\n    dragData: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n    animation: boolean;\n}\n\nexport interface IRowDragStartEventArgs extends CancelableEventArgs {\n    owner: IgxDragDirective;\n    dragData: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n}\n\nexport enum GridSummaryPosition {\n    top = 'top',\n    bottom = 'bottom'\n}\n\nexport enum GridSummaryCalculationMode {\n    rootLevelOnly = 'rootLevelOnly',\n    childLevelsOnly = 'childLevelsOnly',\n    rootAndChildLevels = 'rootAndChildLevels'\n}\n\nexport enum FilterMode {\n    quickFilter = 'quickFilter',\n    excelStyleFilter = 'excelStyleFilter'\n}\n\nexport enum GridKeydownTargetType {\n    dataCell = 'dataCell',\n    summaryCell = 'summaryCell',\n    groupRow = 'groupRow',\n    hierarchicalRow = 'hierarchicalRow'\n}\n\nexport abstract class IgxGridBaseComponent extends DisplayDensityBase implements\n    OnInit, OnChanges, OnDestroy, AfterContentInit, AfterViewInit {\n    private _scrollWidth: number;\n    protected _init = true;\n\n    public get scrollWidth() {\n        return this._scrollWidth;\n    }\n\n    private _resourceStrings = CurrentResourceStrings.GridResStrings;\n    private _emptyGridMessage = null;\n    private _emptyFilteredGridMessage = null;\n    private _isLoading = false;\n    private _locale = null;\n    private _observer: MutationObserver;\n    protected _destroyed = false;\n    private overlayIDs = [];\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n    */\n    @Input()\n    set resourceStrings(value: IGridResourceStrings) {\n        this._resourceStrings = Object.assign({}, this._resourceStrings, value);\n    }\n\n    /**\n     * An accessor that returns the resource strings.\n    */\n    get resourceStrings(): IGridResourceStrings {\n        return this._resourceStrings;\n    }\n\n    /**\n     * An @Input property that autogenerates the `IgxGridComponent` columns.\n     * The default value is false.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public autoGenerate = false;\n\n    public abstract id: string;\n\n    /**\n     * An @Input property that sets a custom template when the `IgxGridComponent` is empty.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [emptyGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public emptyGridTemplate: TemplateRef<any>;\n\n    /**\n     * An @Input property that sets a custom template when the `IgxGridComponent` is loading.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [loadingGridTemplate]=\"myTemplate\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public loadingGridTemplate: TemplateRef<any>;\n\n    @WatchChanges()\n    @Input()\n    public get filteringLogic() {\n        return this._filteringExpressionsTree.operator;\n    }\n\n    /**\n     * Sets the filtering logic of the `IgxGridComponent`.\n     * The default is AND.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [filteringLogic]=\"filtering\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set filteringLogic(value: FilteringLogic) {\n        this._filteringExpressionsTree.operator = value;\n    }\n\n    /**\n     * Returns the filtering state of `IgxGridComponent`.\n     * ```typescript\n     * let filteringExpressionsTree = this.grid.filteringExpressionsTree;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get filteringExpressionsTree() {\n        return this._filteringExpressionsTree;\n    }\n\n    /**\n     * Sets the filtering state of the `IgxGridComponent`.\n     * ```typescript\n     * const logic = new FilteringExpressionsTree(FilteringLogic.And, \"ID\");\n     * logic.filteringOperands = [\n     *     {\n     *          condition: IgxNumberFilteringOperand.instance().condition('greaterThan'),\n     *          fieldName: 'ID',\n     *          searchVal: 1\n     *     }\n     * ];\n     * this.grid.filteringExpressionsTree = (logic);\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set filteringExpressionsTree(value) {\n        if (value && value instanceof FilteringExpressionsTree) {\n            const val = (value as FilteringExpressionsTree);\n            for (let index = 0; index < val.filteringOperands.length; index++) {\n                if (!(val.filteringOperands[index] instanceof FilteringExpressionsTree)) {\n                    const newExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And, val.filteringOperands[index].fieldName);\n                    newExpressionsTree.filteringOperands.push(val.filteringOperands[index] as IFilteringExpression);\n                    val.filteringOperands[index] = newExpressionsTree;\n                }\n            }\n\n            // clone the filtering expression tree in order to trigger the filtering pipe\n            const filteringExpressionTreeClone = new FilteringExpressionsTree(value.operator, value.fieldName);\n            filteringExpressionTreeClone.filteringOperands = value.filteringOperands;\n            this._filteringExpressionsTree = filteringExpressionTreeClone;\n\n            if (this.filteringService.isFilteringExpressionsTreeEmpty()) {\n                this.filteredData = null;\n            }\n\n            this.filteringService.refreshExpressions();\n            this.summaryService.clearSummaryCache();\n            this.markForCheck();\n        }\n    }\n\n    /**\n     * Returns the locale of the grid.\n     * If not set, returns browser's language.\n     */\n    @Input()\n    get locale(): string {\n        if (this._locale) {\n            return this._locale;\n        } else {\n            return 'en';\n        }\n    }\n\n    /**\n     * Sets the locale of the grid.\n     */\n    set locale(value) {\n        this._locale = value;\n    }\n\n    /**\n     * Returns whether the paging feature is enabled/disabled.\n     * The default state is disabled (false).\n     * ```\n     * const paging = this.grid.paging;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get paging(): boolean {\n        return this._paging;\n    }\n\n    /**\n     * Enables/Disables the paging feature.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [autoGenerate]=\"true\" [paging]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set paging(value: boolean) {\n        this._paging = value;\n        this._pipeTrigger++;\n\n        if (this._ngAfterViewInitPassed) {\n            this.cdr.detectChanges();\n            this.calculateGridHeight();\n            this.cdr.detectChanges();\n        }\n    }\n\n    /**\n     * Returns the current page index.\n     * ```html\n     * let gridPage = this.grid.page;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get page(): number {\n        return this._page;\n    }\n\n    /**\n     * Sets the current page index.\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [page]=\"5\" [autoGenerate]=\"true\"></igx-grid>\n     */\n    set page(val: number) {\n        if (val === this._page || val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n\n        this.onPagingDone.emit({ previous: this._page, current: val });\n        this._page = val;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns the number of visible items per page of the `IgxGridComponent`.\n     * The default is 15.\n     * ```html\n     * let itemsPerPage = this.grid.perPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get perPage(): number {\n        return this._perPage;\n    }\n\n    /**\n     * Sets the number of visible items per page of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [paging]=\"true\" [perPage]=\"5\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set perPage(val: number) {\n        if (val < 0) {\n            return;\n        }\n\n        this.selectionService.clear();\n        this._perPage = val;\n        this.page = 0;\n        this.endEdit(true);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * You can provide a custom `ng-template` for the pagination UI of the grid.\n     * ```html\n     * <igx-grid #grid [paging]=\"true\" [myTemplate]=\"myTemplate\" [height]=\"'305px'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public paginationTemplate: TemplateRef<any>;\n\n    /**\n     * Returns whether the column hiding UI for the `IgxGridComponent` is enabled.\n     * By default it is disabled (false).\n     * ```typescript\n     * let gridColHiding = this.grid.columnHiding;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get columnHiding() {\n        return this._columnHiding;\n    }\n\n    /**\n     * Sets whether the column hiding UI for the `IgxGridComponent` is enabled.\n     * In order for the UI to work, you need to enable the toolbar as shown in the example below.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\" [showToolbar]=\"true\" [columnHiding]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set columnHiding(value) {\n        if (this._columnHiding !== value) {\n            this._columnHiding = value;\n            if (this.gridAPI.grid) {\n                this.markForCheck();\n                if (this._ngAfterViewInitPassed) {\n                    this.calculateGridSizes();\n                }\n            }\n        }\n    }\n\n    /**\n     * Sets whether the `IgxGridRowComponent` selection is enabled.\n     * By default it is set to false.\n     * ```typescript\n     * let rowSelectable = this.grid.rowSelectable;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get rowSelectable(): boolean {\n        return this._rowSelection;\n    }\n\n    /**\n     * Sets whether rows can be selected.\n     * ```html\n     * <igx-grid #grid [showToolbar]=\"true\" [rowSelectable]=\"true\" [columnHiding]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set rowSelectable(val: boolean) {\n        this._rowSelection = val;\n        if (this.gridAPI.grid && this.columnList) {\n\n            // should selection persist?\n            this.allRowsSelected = false;\n            this.deselectAllRows();\n            this.calculateGridSizes();\n            this.cdr.markForCheck();\n        }\n    }\n\n    @Input()\n    get rowDraggable(): boolean {\n        return this._rowDrag;\n    }\n\n    /**\n     * Sets whether rows can be moved.\n     * ```html\n     * <igx-grid #grid [rowDraggable]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set rowDraggable(val: boolean) {\n        this._rowDrag = val;\n        if (this.gridAPI.grid && this.columnList) {\n            this.calculateGridSizes();\n            this.cdr.markForCheck();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public rowDragging = false;\n\n\n    /**\n * Sets whether the `IgxGridRowComponent` is editable.\n * By default it is set to false.\n * ```typescript\n * let rowEditable = this.grid.rowEditable;\n * ```\n * @memberof IgxGridBaseComponent\n */\n    @WatchChanges()\n    @Input()\n    get rowEditable(): boolean {\n        return this._rowEditable;\n    }\n    /**\n    * Sets whether rows can be edited.\n    * ```html\n    * <igx-grid #grid [showToolbar]=\"true\" [rowEditable]=\"true\" [primaryKey]=\"'ProductID'\" [columnHiding]=\"true\"></igx-grid>\n    * ```\n    * @memberof IgxGridBaseComponent\n    */\n    set rowEditable(val: boolean) {\n        if (this.gridAPI.grid) {\n            this.refreshGridState();\n        }\n        this._rowEditable = val;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns the height of the `IgxGridComponent`.\n     * ```typescript\n     * let gridHeight = this.grid.height;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @HostBinding('style.height')\n    @Input()\n    public get height() {\n        return this._height;\n    }\n\n    /**\n     * Sets the height of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set height(value: string) {\n        if (this._height !== value) {\n            this._height = value;\n            this._autoSize = false;\n            this.nativeElement.style.height = value;\n        }\n    }\n\n    /**\n     * Returns the width of the `IgxGridComponent`.\n     * ```typescript\n     * let gridWidth = this.grid.width;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @HostBinding('style.width')\n    @Input()\n    get width() {\n        return this._width;\n    }\n    set width(value) {\n        if (this._width !== value) {\n            this._width = value;\n            this.nativeElement.style.width = value;\n        }\n    }\n\n    /**\n     * Returns the width of the header of the `IgxGridComponent`.\n     * ```html\n     * let gridHeaderWidth = this.grid.headerWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get headerWidth() {\n        return parseInt(this.width, 10) - 17;\n    }\n\n    /**\n     * An @Input property that adds styling classes applied to all even `IgxGridRowComponent`s in the grid.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-even-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public evenRowCSS = 'igx-grid__tr--even';\n\n    /**\n     * An @Input property that adds styling classes applied to all odd `IgxGridRowComponent`s in the grid.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [evenRowCSS]=\"'igx-grid--my-odd-class'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public oddRowCSS = 'igx-grid__tr--odd';\n\n    /**\n     * Returns the row height.\n     * ```typescript\n     * const rowHeight = this.grid.rowHeight;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get rowHeight() {\n        return this._rowHeight ? this._rowHeight : this.defaultRowHeight;\n    }\n\n    /**\n     * Sets the row height.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [rowHeight]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set rowHeight(value) {\n        this._rowHeight = parseInt(value, 10);\n    }\n\n    /**\n     * An @Input property that sets the default width of the `IgxGridComponent`'s columns.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [columnWidth]=\"100\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get columnWidth(): string {\n        return this._columnWidth;\n    }\n    public set columnWidth(value: string) {\n        this._columnWidth = value;\n        this.columnWidthSetByUser = true;\n    }\n\n    /**\n     * An @Input property that sets the primary key of the `IgxGridComponent`.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [showToolbar]=\"true\" [primaryKey]=\"'ProductID'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public primaryKey;\n\n    /**\n     * An @Input property that sets the message displayed when there are no records.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    set emptyGridMessage(value: string) {\n        this._emptyGridMessage = value;\n    }\n\n    /**\n     * An accessor that returns the message displayed when there are no records.\n    */\n    get emptyGridMessage(): string {\n        return this._emptyGridMessage || this.resourceStrings.igx_grid_emptyGrid_message;\n    }\n\n    /**\n     * An @Input property that sets whether the grid is going to show loading indicator.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [isLoading]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    set isLoading(value: boolean) {\n        this._isLoading = value;\n        if (this.gridAPI.grid) {\n            this.markForCheck();\n        }\n    }\n\n    /**\n     * An accessor that returns whether the grid is showing loading indicator.\n     */\n    get isLoading(): boolean {\n        return this._isLoading;\n    }\n\n    /**\n     * A property that allows the columns to be auto-generated once again after the initialization of the grid.\n     * This will allow to bind the grid to remote data and having auto-generated columns at the same time.\n     * Note that after generating the columns, this property would be disabled to avoid re-creating\n     * columns each time a new data is assigned.\n     * ```typescript\n     *  this.grid.shouldGenerate = true;\n     *  this.remoteData = this.remoteService.remoteData;\n     * ```\n     */\n    public shouldGenerate: boolean;\n\n    /**\n     * An @Input property that sets the message displayed when there are no records and the grid is filtered.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [emptyGridMessage]=\"'The grid is empty'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    set emptyFilteredGridMessage(value: string) {\n        this._emptyFilteredGridMessage = value;\n    }\n\n    /**\n     * An accessor that returns the message displayed when there are no records and the grid is filtered.\n    */\n    get emptyFilteredGridMessage(): string {\n        return this._emptyFilteredGridMessage || this.resourceStrings.igx_grid_emptyFilteredGrid_message;\n    }\n\n    /**\n     * An @Input property that sets the title to be displayed in the built-in column hiding UI.\n     * ```html\n     * <igx-grid [showToolbar]=\"true\" [columnHiding]=\"true\" columnHidingTitle=\"Column Hiding\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public columnHidingTitle = '';\n\n    /**\n     * Returns if the built-in column pinning UI should be shown in the toolbar.\n     * ```typescript\n     *  let colPinning = this.grid.columnPinning;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get columnPinning() {\n        return this._columnPinning;\n    }\n\n    /**\n     * Sets if the built-in column pinning UI should be shown in the toolbar.\n     * By default it's disabled.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set columnPinning(value) {\n        if (this._columnPinning !== value) {\n            this._columnPinning = value;\n            if (this.gridAPI.grid) {\n                this.markForCheck();\n                if (this._ngAfterViewInitPassed) {\n                    this.calculateGridSizes();\n                }\n            }\n        }\n    }\n\n    /**\n     * An @Input property that sets the title to be displayed in the UI of the column pinning.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [columnPinning]=\"'true\" [columnPinningTitle]=\"'Column Hiding'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    public columnPinningTitle = '';\n\n    /**\n     * Returns if the filtering is enabled.\n     * ```typescript\n     *  let filtering = this.grid.allowFiltering;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get allowFiltering() {\n        return this._allowFiltering;\n    }\n\n    /**\n     * Sets if the filtering is enabled.\n     * By default it's disabled.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [allowFiltering]=\"'true\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set allowFiltering(value) {\n        if (this._allowFiltering !== value) {\n            this._allowFiltering = value;\n            if (this.calcHeight) {\n                this.calcHeight += value ? -FILTER_ROW_HEIGHT : FILTER_ROW_HEIGHT;\n            }\n            if (this._ngAfterViewInitPassed) {\n                if (this.maxLevelHeaderDepth) {\n                    this.theadRow.nativeElement.style.height = `${(this.maxLevelHeaderDepth + 1) * this.defaultRowHeight +\n                        (value && this.filterMode === FilterMode.quickFilter ? FILTER_ROW_HEIGHT : 0) + 1}px`;\n                }\n            }\n\n            this.filteringService.isFilterRowVisible = false;\n            this.filteringService.filteredColumn = null;\n\n            this.filteringService.registerSVGIcons();\n            if (this.gridAPI.grid) {\n                this.markForCheck();\n            }\n        }\n    }\n\n    /**\n     * Returns the filter mode.\n     * ```typescript\n     *  let filtering = this.grid.filterMode;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get filterMode() {\n        return this._filterMode;\n    }\n\n    /**\n     * Sets filter mode.\n     * By default it's set to FilterMode.quickFilter.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [filterMode]=\"'quickFilter'\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set filterMode(value) {\n        this._filterMode = value;\n    }\n\n    /**\n     * Returns the summary position.\n     * ```typescript\n     *  let summaryPosition = this.grid.summaryPosition;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get summaryPosition() {\n        return this._summaryPosition;\n    }\n\n    /**\n     * Sets summary position.\n     * By default it is bottom.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" summaryPosition=\"top\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set summaryPosition(value) {\n        this._summaryPosition = value;\n        if (this.gridAPI.grid) {\n            this.markForCheck();\n        }\n    }\n\n    /**\n     * Returns the summary calculation mode.\n     * ```typescript\n     *  let summaryCalculationMode = this.grid.summaryCalculationMode;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Input()\n    get summaryCalculationMode() {\n        return this._summaryCalculationMode;\n    }\n\n    /**\n     * Sets summary calculation mode.\n     * By default it is rootAndChildLevels which means the summaries are calculated for the root level and each child level.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" summaryCalculationMode=\"rootLevelOnly\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set summaryCalculationMode(value) {\n        this._summaryCalculationMode = value;\n        if (this.gridAPI.grid) {\n            this.summaryService.resetSummaryHeight();\n            this.endEdit(true);\n            this.calculateGridHeight();\n            this.cdr.markForCheck();\n        }\n    }\n\n    /**\n     * Emitted when `IgxGridCellComponent` is clicked. Returns the `IgxGridCellComponent`.\n     * ```html\n     * <igx-grid #grid (onCellClick)=\"onCellClick($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellClick(e){\n     *     alert(\"The cell has been clicked!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onCellClick = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when `IgxGridCellComponent` is selected. Returns the `IgxGridCellComponent`.\n     * ```html\n     * <igx-grid #grid (onSelection)=\"onCellSelect($event)\" [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellSelect(e){\n     *     alert(\"The cell has been selected!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onSelection = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     *  Emitted when `IgxGridRowComponent` is selected.\n     * ```html\n     * <igx-grid #grid (onRowSelectionChange)=\"onRowClickChange($event)\" [data]=\"localData\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * public onCellClickChange(e){\n     *     alert(\"The selected row has been changed!\");\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowSelectionChange = new EventEmitter<IRowSelectionEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` is pinned.\n     * The index that the column is inserted at may be changed through the `insertAtIndex` property.\n     * ```typescript\n     * public columnPinning(event) {\n     *     if (event.column.field === \"Name\") {\n     *       event.insertAtIndex = 0;\n     *     }\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnPinning = new EventEmitter<IPinColumnEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent`\n     * editing has been performed in the grid and the values have **not** been submitted (e.g. `Esc` key was pressed).\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      newValue: object,\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editCancel(event: IGridEditEventArgs){\n     *    const rowID: IgxColumnComponent = event.rowID;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEditCancel)=\"editCancel($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onCellEditCancel = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent` enters edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editStart(event: IGridEditEventArgs){\n     *    const value: IgxColumnComponent = event.newValue;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEditEnter)=\"editStart($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onCellEditEnter = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when `IgxGridCellComponent` editing has been performed in the grid.\n     * Event is fired after editing is completed, when the cell is exiting edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      cellID: {\n     *          columnID: int,\n     *          rowID: int,\n     *          rowIndex: int\n     *      }\n     *      newValue: object,\n     *      oldValue: object,\n     *      rowID: int\n     *  }\n     *\n     * ```typescript\n     * editDone(event: IGridEditEventArgs){\n     *    const value: IgxColumnComponent = event.newValue;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid3 (onCellEdit)=\"editDone($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onCellEdit = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" a row enters edit mode.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEditEnter)=\"editStart($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * ```typescript\n     *      editStart(event: IGridEditEventArgs) {\n     *          const editedRowObj = event.oldValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onRowEditEnter = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" & `endEdit(true)` is called.\n     * Emitted when changing rows during edit mode, selecting an un-editable cell in the edited row,\n     * performing paging operation, column resizing, pinning, moving or hitting  `Done`\n     * button inside of the rowEditingOverlay, or hitting the `Enter` key while editing a cell.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      newValue: <rowObj>,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEdit)=\"editDone($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     *\n     * ```typescript\n     *      editDone(event: IGridEditEventArgs) {\n     *          const originalRowObj = event.oldValue;\n     *          const updatedRowObj = event.newValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowEdit = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * An @Output property emitting an event when [rowEditable]=\"true\" & `endEdit(false)` is called.\n     * Emitted when changing hitting `Esc` key during cell editing and when click on the `Cancel` button\n     * in the row editing overlay.\n     * This event is cancelable.\n     *\n     * args: IGridEditEventArgs = {\n     *      cancel: bool,\n     *      newValue: <rowObj>,\n     *      oldValue: <rowObj>,\n     *      rowID: int\n     *  }\n     *\n     * Bind to the event in markup as follows:\n     * ```html\n     * <igx-grid #grid3 (onRowEditCancel)=\"editCancel($event)\" [data]=\"remote | async\" (onSortingDone)=\"process($event)\"\n     *          [primaryKey]=\"'ProductID'\" [rowSelectable]=\"true\" [rowEditable]=\"true\">\n     *          <igx-column [sortable]=\"true\" [field]=\"'ProductID'\"></igx-column>\n     *          <igx-column [editable]=\"true\" [field]=\"'ProductName'\"></igx-column>\n     *          <igx-column [sortable]=\"true\" [field]=\"'UnitsInStock'\" [header]=\"'Units in Stock'\"></igx-column>\n     * </igx-grid>\n     * ```\n     * ```typescript\n     *      editCancel(emitted: { row: IgxGridRowComponent, newValue: any, oldValue: any }): void {\n     *          const originalRowObj = event.oldValue;\n     *          const updatedRowObj = event.newValue;\n     *          const cancelValue = event.cancel;\n     *          const rowID = event.rowID;\n     *      }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowEditCancel = new EventEmitter<IGridEditEventArgs>();\n\n    /**\n     * Emitted when a grid column is initialized. Returns the column object.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [onColumnInit]=\"initColumns($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * ```typescript\n     * initColumns(event: IgxColumnComponent) {\n     * const column: IgxColumnComponent = event;\n     *       column.filterable = true;\n     *       column.sortable = true;\n     *       column.editable = true;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnInit = new EventEmitter<IgxColumnComponent>();\n\n    /**\n     * Emitted when sorting is performed through the UI. Returns the sorting expression.\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onSortingDone)=\"sortingDone($event)\"></igx-grid>\n     * ```\n     * ```typescript\n     * sortingDone(event: SortingDirection){\n     *     const sortingDirection = event;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onSortingDone = new EventEmitter<ISortingExpression | Array<ISortingExpression>>();\n\n    /**\n     * Emitted when filtering is performed through the UI.\n     * Returns the filtering expressions tree of the column for which filtering was performed.\n     * ```typescript\n     * filteringDone(event: IFilteringExpressionsTree){\n     *     const filteringTree = event;\n     *}\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onFilteringDone)=\"filteringDone($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onFilteringDone = new EventEmitter<IFilteringExpressionsTree>();\n\n    /**\n     * Emitted when paging is performed. Returns an object consisting of the previous and next pages.\n     * ```typescript\n     * pagingDone(event: IPageEventArgs){\n     *     const paging = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [height]=\"'305px'\" [autoGenerate]=\"true\" (onPagingDone)=\"pagingDone($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onPagingDone = new EventEmitter<IPageEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridRowComponent` is being added to the `IgxGridComponent` through the API.\n     * Returns the data for the new `IgxGridRowComponent` object.\n     * ```typescript\n     * rowAdded(event: IRowDataEventArgs){\n     *    const rowInfo = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowAdded)=\"rowAdded($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowAdded = new EventEmitter<IRowDataEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridRowComponent` is deleted through the `IgxGridComponent` API.\n     * Returns an `IRowDataEventArgs` object.\n     * ```typescript\n     * rowDeleted(event: IRowDataEventArgs){\n     *    const rowInfo = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onRowDeleted)=\"rowDeleted($event)\" [height]=\"'305px'\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onRowDeleted = new EventEmitter<IRowDataEventArgs>();\n\n    /**\n     * Emitted when a new chunk of data is loaded from virtualization.\n     * ```typescript\n     *  <igx-grid #grid [data]=\"localData\" [autoGenerate]=\"true\" (onDataPreLoad)='handleDataPreloadEvent()'></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onDataPreLoad = new EventEmitter<IForOfState>();\n\n    /**\n     * Emitted when `IgxColumnComponent` is resized.\n     * Returns the `IgxColumnComponent` object's old and new width.\n     * ```typescript\n     * resizing(event: IColumnResizeEventArgs){\n     *     const grouping = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onColumnResized)=\"resizing($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnResized = new EventEmitter<IColumnResizeEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridCellComponent` is right clicked. Returns the `IgxGridCellComponent` object.\n     * ```typescript\n     * contextMenu(event: IGridCellEventArgs){\n     *     const resizing = event;\n     *     console.log(resizing);\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onContextMenu)=\"contextMenu($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onContextMenu = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when a `IgxGridCellComponent` is double clicked. Returns the `IgxGridCellComponent` object.\n     * ```typescript\n     * dblClick(event: IGridCellEventArgs){\n     *     const dblClick = event;\n     *     console.log(dblClick);\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onDoubleClick)=\"dblClick($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onDoubleClick = new EventEmitter<IGridCellEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` visibility is changed. Args: { column: any, newValue: boolean }\n     * ```typescript\n     * visibilityChanged(event: IColumnVisibilityChangedEventArgs){\n     *    const visiblity = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnVisibilityChanged)=\"visibilityChanged($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnVisibilityChanged = new EventEmitter<IColumnVisibilityChangedEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` moving starts. Returns the moved `IgxColumnComponent` object.\n     * ```typescript\n     * movingStart(event: IColumnMovingStartEventArgs){\n     *     const movingStarts = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingStart)=\"movingStart($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMovingStart = new EventEmitter<IColumnMovingStartEventArgs>();\n\n    /**\n     * Emitted throughout the `IgxColumnComponent` moving operation.\n     * Returns the source and target `IgxColumnComponent` objects. This event is cancelable.\n     * ```typescript\n     * moving(event: IColumnMovingEventArgs){\n     *     const moving = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMoving)=\"moving($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMoving = new EventEmitter<IColumnMovingEventArgs>();\n\n    /**\n     * Emitted when `IgxColumnComponent` moving ends.\n     * Returns the source and target `IgxColumnComponent` objects.\n     * ```typescript\n     * movingEnds(event: IColumnMovingEndEventArgs){\n     *     const movingEnds = event;\n     * }\n     * ```\n     * ```html\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" (onColumnMovingEnd)=\"movingEnds($event)\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onColumnMovingEnd = new EventEmitter<IColumnMovingEndEventArgs>();\n\n    /**\n     * @deprecated you should use onGridKeydown event\n     */\n    @Output()\n    @DeprecateProperty('onFocusChange event is deprecated. Use onGridKeydown event instead.')\n    public get onFocusChange(): EventEmitter<IFocusChangeEventArgs> {\n        return this._onFocusChange;\n    }\n\n    public set onFocusChange(val: EventEmitter<IFocusChangeEventArgs>) {\n        this._onFocusChange = val;\n    }\n\n    /**\n     * Emitted when keydown is triggered over element inside grid's body.\n     * This event is fired only if the key combination is supported in the grid.\n     * Return the target type, target object and the original event. This event is cancelable.\n     * ```typescript\n     * customKeydown(args: IGridKeydownEventArgs) {\n     *  const keydownEvent = args.event;\n     * }\n     * ```\n     * ```html\n     *  <igx-grid (onGridKeydown)=\"customKeydown($event)\"></igx-grid>\n     * ```\n     */\n    @Output()\n    public onGridKeydown = new EventEmitter<IGridKeydownEventArgs>();\n\n    /**\n     * Emitted when start dragging a row.\n     * Return the dragged row.\n     */\n    @Output()\n    public onRowDragStart = new EventEmitter<IRowDragStartEventArgs>();\n\n    /**\n     * Emitted when dropping a row.\n     * Return the dropped row.\n     */\n    @Output()\n    public onRowDragEnd = new EventEmitter<IRowDragEndEventArgs>();\n\n    /**\n     * Emitted when a copy operation is executed.\n     * Fired only if copy behavior is enabled through the [`clipboardOptions`]{@link IgxGridBaseComponent#clipboardOptions}.\n     */\n    @Output()\n    onGridCopy = new EventEmitter<IGridClipboardEvent>();\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxGridColumnResizerComponent, { static: false })\n    public resizeLine: IgxGridColumnResizerComponent;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent, descendants: true })\n    public columnList: QueryList<IgxColumnComponent>;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleSortingTemplateDirective, { read: IgxExcelStyleSortingTemplateDirective, static: true })\n    public excelStyleSortingTemplateDirective: IgxExcelStyleSortingTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleMovingTemplateDirective, { read: IgxExcelStyleMovingTemplateDirective, static: true })\n    public excelStyleMovingTemplateDirective: IgxExcelStyleMovingTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStyleHidingTemplateDirective, { read: IgxExcelStyleHidingTemplateDirective, static: true })\n    public excelStyleHidingTemplateDirective: IgxExcelStyleHidingTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxExcelStylePinningTemplateDirective, { read: IgxExcelStylePinningTemplateDirective, static: true })\n    public excelStylePinningTemplateDirective: IgxExcelStylePinningTemplateDirective;\n\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxGridHeaderGroupComponent, { read: IgxGridHeaderGroupComponent })\n    public headerGroups: QueryList<IgxGridHeaderGroupComponent>;\n\n    /**\n     * A list of all `IgxGridHeaderGroupComponent`.\n     * ```typescript\n     * const headerGroupsList = this.grid.headerGroupsList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get headerGroupsList(): IgxGridHeaderGroupComponent[] {\n        return this.headerGroups ? flatten(this.headerGroups.toArray()) : [];\n    }\n\n    /**\n     * A list of all `IgxGridHeaderComponent`.\n     * ```typescript\n     * const headers = this.grid.headerCellList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get headerCellList(): IgxGridHeaderComponent[] {\n        return this.headerGroupsList.map((headerGroup) => headerGroup.headerCell).filter((headerCell) => headerCell);\n    }\n\n    /**\n     * A list of all `IgxGridFilteringCellComponent`.\n     * ```typescript\n     * const filterCells = this.grid.filterCellList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get filterCellList(): IgxGridFilteringCellComponent[] {\n        return this.headerGroupsList.map((headerGroup) => headerGroup.filterCell).filter((filterCell) => filterCell);\n    }\n\n    @ViewChildren('row')\n    private _rowList: QueryList<IgxGridRowComponent>;\n\n    @ViewChildren('summaryRow', { read: IgxSummaryRowComponent })\n    protected _summaryRowList: QueryList<IgxSummaryRowComponent>;\n\n    public get summariesRowList() {\n        const res = new QueryList<any>();\n        if (!this._summaryRowList) {\n            return res;\n        }\n        const sumList = this._summaryRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        });\n        res.reset(sumList);\n        return res;\n    }\n\n    /**\n     * A list of `IgxGridRowComponent`.\n     * ```typescript\n     * const rowList = this.grid.rowList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public get rowList() {\n        const res = new QueryList<any>();\n        if (!this._rowList) {\n            return res;\n        }\n        const rList = this._rowList\n            .filter((item) => {\n                return item.element.nativeElement.parentElement !== null;\n            })\n            .sort((a, b) => {\n                return a.index - b.index;\n            });\n        res.reset(rList);\n        return res;\n    }\n\n    @ViewChildren(IgxRowComponent, { read: IgxRowComponent })\n    private _dataRowList: QueryList<IgxRowComponent<IgxGridBaseComponent>>;\n\n    /**\n     * A list of `IgxGridRowComponent`, currently rendered.\n     * ```typescript\n     * const dataList = this.grid.dataRowList;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public get dataRowList(): QueryList<IgxRowComponent<IgxGridBaseComponent>> {\n        const res = new QueryList<IgxRowComponent<IgxGridBaseComponent>>();\n        if (!this._dataRowList) {\n            return res;\n        }\n        const rList = this._dataRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        }).sort((a, b) => {\n            return a.index - b.index;\n        });\n        res.reset(rList);\n        return res;\n    }\n\n    /**\n     * A template reference for the template when the filtered `IgxGridComponent` is empty.\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('emptyFilteredGrid', { read: TemplateRef, static: true })\n    public emptyFilteredGridTemplate: TemplateRef<any>;\n\n    /**\n     * A template reference for the template when the `IgxGridComponent` is empty.\n     * ```\n     * const emptyTempalte = this.grid.emptyGridTemplate;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('defaultEmptyGrid', { read: TemplateRef, static: true })\n    public emptyGridDefaultTemplate: TemplateRef<any>;\n\n    @ViewChild('defaultLoadingGrid', { read: TemplateRef, static: true })\n    public loadingGridDefaultTemplate: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('scrollContainer', { read: IgxGridForOfDirective, static: true })\n    public parentVirtDir: IgxGridForOfDirective<any>;\n\n    /**\n     * Returns the template which will be used by the toolbar to show custom content.\n     * ```typescript\n     * let customContentTemplate = this.grid.toolbarCustomContentTemplate;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    public get toolbarCustomContentTemplate(): IgxGridToolbarCustomContentDirective {\n        return this.toolbarCustomContentTemplates.first;\n    }\n\n    @ContentChildren(IgxGridToolbarCustomContentDirective, { read: IgxGridToolbarCustomContentDirective, descendants: false })\n    public toolbarCustomContentTemplates: QueryList<IgxGridToolbarCustomContentDirective>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('verticalScrollContainer', { read: IgxGridForOfDirective, static: true })\n    public verticalScrollContainer: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('verticalScrollHolder', { read: IgxGridForOfDirective, static: true })\n    public verticalScroll: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('scr', { read: ElementRef, static: true })\n    public scr: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('footer', { read: ElementRef, static: false })\n    public footer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerContainer', { read: IgxGridForOfDirective, static: false })\n    public headerContainer: IgxGridForOfDirective<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerCheckboxContainer', { static: false })\n    public headerCheckboxContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerDragContainer', { static: false })\n    public headerDragContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerGroupContainer', { static: false })\n    public headerGroupContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerCheckbox', { read: IgxCheckboxComponent, static: false })\n    public headerCheckbox: IgxCheckboxComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('filteringRow', { read: IgxGridFilteringRowComponent, static: false })\n    public filteringRow: IgxGridFilteringRowComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('theadRow', { static: true })\n    public theadRow: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('tbody', { static: true })\n    public tbody: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('tfoot', { static: true })\n    public tfoot: ElementRef;\n\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxFilteringOverlayOutlet', { read: IgxOverlayOutletDirective, static: true })\n    protected _outletDirective: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden\n     */\n    public get outletDirective() {\n        return this._outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('igxRowEditingOverlayOutlet', { read: IgxOverlayOutletDirective, static: true })\n    public rowEditingOutletDirective: IgxOverlayOutletDirective;\n\n    /**\n     * @hidden\n    */\n    @ViewChildren(IgxTemplateOutletDirective, { read: IgxTemplateOutletDirective })\n    public tmpOutlets: QueryList<any>;\n\n\n    /**\n     * @hidden\n     */\n    public get rowOutletDirective() {\n        return this.rowEditingOutletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    public get parentRowOutletDirective() {\n        return null;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef, static: true })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultRowEditTemplate', { read: TemplateRef, static: true })\n    private defaultRowEditTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxRowEditTemplateDirective, { read: TemplateRef, static: true })\n    public rowEditCustom: TemplateRef<any>;\n\n    /** @hidden */\n    public get rowEditContainer(): TemplateRef<any> {\n        return this.rowEditCustom ? this.rowEditCustom : this.defaultRowEditTemplate;\n    }\n    /** @hidden */\n    @ContentChild(IgxRowEditTextDirective, { read: TemplateRef, static: true })\n    public rowEditText: TemplateRef<any>;\n    /** @hidden */\n    @ContentChild(IgxRowEditActionsDirective, { read: TemplateRef, static: true })\n    public rowEditActions: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    public get rowInEditMode(): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        const editRowState = this.crudService.row;\n        return editRowState !== null ? this.rowList.find(e => e.rowID === editRowState.id) : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public get firstEditableColumnIndex(): number {\n        const index = this.navigation.gridOrderedColumns.findIndex(e => e.editable);\n        return index !== -1 ? index : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public get lastEditableColumnIndex(): number {\n        const orderedColumns = this.navigation.gridOrderedColumns;\n        const index = orderedColumns.reverse().findIndex(e => e.editable);\n        return index !== -1 ? orderedColumns.length - 1 - index : null;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxRowEditTabStopDirective)\n    public rowEditTabsDEFAULT: QueryList<IgxRowEditTabStopDirective>;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowEditTabStopDirective)\n    public rowEditTabsCUSTOM: QueryList<IgxRowEditTabStopDirective>;\n\n    /**\n     * @hidden\n     * TODO: Nav service logic doesn't handle 0 results from this querylist\n     */\n    public get rowEditTabs(): QueryList<IgxRowEditTabStopDirective> {\n        return this.rowEditTabsCUSTOM.length ? this.rowEditTabsCUSTOM : this.rowEditTabsDEFAULT;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxToggleDirective, { static: false })\n    public rowEditingOverlay: IgxToggleDirective;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    get hostClass(): string {\n        return this.getComponentDensityClass('igx-grid');\n    }\n\n    get bannerClass(): string {\n        const position = this.rowEditPositioningStrategy.isTop ? 'igx-banner__border-top' : 'igx-banner__border-bottom';\n        return `${this.getComponentDensityClass('igx-banner')} ${position}`;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public hostRole = 'grid';\n\n    /**\n     * @hidden\n     */\n    get pipeTrigger(): number {\n        return this._pipeTrigger;\n    }\n\n    /**\n     * @hidden\n     */\n    get summaryPipeTrigger(): number {\n        return this._summaryPipeTrigger;\n    }\n\n    /**\n     * Returns the sorting state of the `IgxGridComponent`.\n     * ```typescript\n     * const sortingState = this.grid.sortingExpressions;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get sortingExpressions(): ISortingExpression[] {\n        return this._sortingExpressions;\n    }\n\n    /**\n     * Sets the sorting state of the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.sortingExpressions = [{\n     *     fieldName: \"ID\",\n     *     dir: SortingDirection.Desc,\n     *     ignoreCase: true\n     * }];\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set sortingExpressions(value: ISortingExpression[]) {\n        this._sortingExpressions = cloneArray(value);\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    get maxLevelHeaderDepth() {\n        if (this._maxLevelHeaderDepth === null) {\n            this._maxLevelHeaderDepth = this.hasColumnLayouts ?\n                this.columnList.reduce((acc, col) => Math.max(acc, col.rowStart), 0) :\n                this.columnList.reduce((acc, col) => Math.max(acc, col.level), 0);\n        }\n        return this._maxLevelHeaderDepth;\n    }\n\n    /**\n     * Returns the number of hidden `IgxColumnComponent`.\n     * ```typescript\n     * const hiddenCol = this.grid.hiddenColumnsCount;\n     * ``\n     */\n    get hiddenColumnsCount() {\n        return this.columnList.filter((col) => col.columnGroup === false && col.hidden === true).length;\n    }\n\n    /**\n     * Returns the text to be displayed inside the toggle button\n     * for the built-in column hiding UI of the`IgxColumnComponent`.\n     * ```typescript\n     * const hiddenColText = this.grid.hiddenColumnsText;\n     * ``\n     */\n    @WatchChanges()\n    @Input()\n    get hiddenColumnsText() {\n        return this._hiddenColumnsText;\n    }\n\n    /**\n     * Sets the text to be displayed inside the toggle button\n     * for the built-in column hiding UI of the`IgxColumnComponent`.\n     * ```typescript\n     * <igx-grid [columnHiding]=\"true\" [showToolbar]=\"true\" [hiddenColumnsText]=\"'Hidden Columns'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set hiddenColumnsText(value) {\n        this._hiddenColumnsText = value;\n\n    }\n\n    /**\n     * Returns the text to be displayed inside the toggle button\n     * for the built-in column pinning UI of the`IgxColumnComponent`.\n     * ```typescript\n     * const pinnedText = this.grid.pinnedColumnsText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    get pinnedColumnsText() {\n        return this._pinnedColumnsText;\n    }\n\n    /**\n     * Sets the text to be displayed inside the toggle button\n     * for the built-in column pinning UI of the`IgxColumnComponent`.\n     * ```html\n     * <igx-grid [pinnedColumnsText]=\"'PinnedCols Text\" [data]=\"data\" [width]=\"'100%'\" [height]=\"'500px'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    set pinnedColumnsText(value) {\n        this._pinnedColumnsText = value;\n    }\n\n    /**\n     * Get transactions service for the grid.\n     */\n    get transactions(): TransactionService<Transaction, State> {\n        return this._transactions;\n    }\n\n    /**\n     * @hidden\n    */\n    public columnsWithNoSetWidths = null;\n\n    /* Toolbar related definitions */\n    private _showToolbar = false;\n    private _exportExcel = false;\n    private _exportCsv = false;\n    private _toolbarTitle: string = null;\n    private _exportText: string = null;\n    private _exportExcelText: string = null;\n    private _exportCsvText: string = null;\n    private _rowEditable = false;\n    private _currentRowState: any;\n    private _filteredSortedData = null;\n    /**\n     * @hidden\n    */\n    public get currentRowState(): any {\n        return this._currentRowState;\n    }\n\n    /**\n     * Provides access to the `IgxToolbarComponent`.\n     * ```typescript\n     * const gridToolbar = this.grid.toolbar;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @ViewChild('toolbar', { read: IgxGridToolbarComponent, static: false })\n    public toolbar: IgxGridToolbarComponent = null;\n\n    @ViewChild('toolbar', { read: ElementRef, static: false })\n    private toolbarHtml: ElementRef = null;\n\n    /**\n     * Returns whether the `IgxGridComponent`'s toolbar is shown or hidden.\n     * ```typescript\n     * const toolbarGrid = this.grid.showToolbar;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get showToolbar(): boolean {\n        return this._showToolbar;\n    }\n\n    /**\n     * Shows or hides the `IgxGridComponent`'s toolbar.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" ></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set showToolbar(newValue: boolean) {\n        if (this._showToolbar !== newValue) {\n            this._showToolbar = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the toolbar's title.\n     * ```typescript\n     * const toolbarTitle  = this.grid.toolbarTitle;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get toolbarTitle(): string {\n        return this._toolbarTitle;\n    }\n\n    /**\n     * Sets the toolbar's title.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [toolbarTitle]=\"'My Grid'\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set toolbarTitle(newValue: string) {\n        if (this._toolbarTitle !== newValue) {\n            this._toolbarTitle = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns whether the option for exporting to MS Excel is enabled or disabled.\n     * ```typescript\n     * cosnt excelExporter = this.grid.exportExcel;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportExcel(): boolean {\n        return this.getExportExcel();\n    }\n\n    /**\n     * Enable or disable the option for exporting to MS Excel.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportExcel(newValue: boolean) {\n        if (this._exportExcel !== newValue) {\n            this._exportExcel = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns whether the option for exporting to CSV is enabled or disabled.\n     * ```typescript\n     * const exportCsv = this.grid.exportCsv;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportCsv(): boolean {\n        return this.getExportCsv();\n    }\n\n    /**\n     * Enable or disable the option for exporting to CSV.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [autoGenerate]=\"true\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportCsv(newValue: boolean) {\n        if (this._exportCsv !== newValue) {\n            this._exportCsv = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the main export button.\n     * ```typescript\n     * const exportText = this.grid.exportText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportText(): string {\n        return this._exportText;\n    }\n\n    /**\n     * Sets the textual content for the main export button.\n     * ```html\n     * <igx-grid [data]=\"localData\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportText(newValue: string) {\n        if (this._exportText !== newValue) {\n            this._exportText = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the MS Excel export button.\n     * ```typescript\n     * const excelText = this.grid.exportExcelText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportExcelText(): string {\n        return this._exportExcelText;\n    }\n\n    /**\n     * Sets the textual content for the MS Excel export button.\n     * ```html\n     * <igx-grid [exportExcelText]=\"'My Excel Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportCsv]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportExcelText(newValue: string) {\n        if (this._exportExcelText !== newValue) {\n            this._exportExcelText = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Returns the textual content for the CSV export button.\n     * ```typescript\n     * const csvText = this.grid.exportCsvText;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @WatchChanges()\n    @Input()\n    public get exportCsvText(): string {\n        return this._exportCsvText;\n    }\n\n    /**\n     * Sets the textual content for the CSV export button.\n     * ```html\n     * <igx-grid [exportCsvText]=\"'My Csv Exporter\" [showToolbar]=\"true\" [exportText]=\"'My Exporter'\" [exportExcel]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public set exportCsvText(newValue: string) {\n        if (this._exportCsvText !== newValue) {\n            this._exportCsvText = newValue;\n            this.cdr.markForCheck();\n            if (this._ngAfterViewInitPassed) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    /**\n     * Controls the copy behavior of the grid.\n     */\n    @Input()\n    clipboardOptions = {\n        /**\n         * Enables/disables the copy behavior\n         */\n        enabled: true,\n        /**\n         * Include the columns headers in the clipboard output.\n         */\n        copyHeaders: true,\n        /**\n         * Apply the columns formatters (if any) on the data in the clipboard output.\n         */\n        copyFormatters: true,\n        /**\n         * The separator used for formatting the copy output. Defaults to `\\t`.\n         */\n        separator: '\\t'\n    };\n\n    /**\n     * @hidden\n     */\n    public rowEditMessage;\n\n    /**\n     * Emitted when an export process is initiated by the user.\n     * ```typescript\n     * toolbarExporting(event: IGridToolbarExportEventArgs){\n     *     const toolbarExporting = event;\n     * }\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    @Output()\n    public onToolbarExporting = new EventEmitter<IGridToolbarExportEventArgs>();\n\n    /* End of toolbar related definitions */\n\n    /**\n     * Emitted when making a range selection either through\n     * drag selection or through keyboard selection.\n     */\n    @Output()\n    onRangeSelection = new EventEmitter<GridSelectionRange>();\n\n    /**\n     * @hidden\n     */\n    public pagingState;\n    /**\n     * @hidden\n     */\n    public calcWidth: number;\n    /**\n     * @hidden\n     */\n    public calcHeight = 0;\n    /**\n     * @hidden\n     */\n    public tfootHeight: number;\n    /**\n     * @hidden\n     */\n    public chipsGoupingExpressions = [];\n    /**\n     * @hidden\n     */\n    public summariesHeight: number;\n\n    /**\n     * @hidden\n     */\n    public draggedColumn: IgxColumnComponent;\n\n    /**\n     * @hidden\n     */\n    public allRowsSelected = false;\n\n    /**\n     * @hidden\n     */\n    public disableTransitions = false;\n\n    /**\n     * @hidden\n     */\n    public lastSearchInfo: ISearchInfo = {\n        searchText: '',\n        caseSensitive: false,\n        exactMatch: false,\n        activeMatchIndex: 0,\n        matchInfoCache: []\n    };\n\n    /**\n     * @hidden\n     */\n    public columnWidthSetByUser = false;\n\n    abstract data: any[];\n    abstract filteredData: any[];\n    // abstract dataLength;\n\n    /**\n     * @hidden\n     */\n    protected destroy$ = new Subject<any>();\n\n    /**\n     * @hidden\n     */\n    protected _perPage = 15;\n    /**\n     * @hidden\n     */\n    protected _page = 0;\n    /**\n     * @hidden\n     */\n    protected _paging = false;\n    /**\n     * @hidden\n     */\n    protected _rowSelection = false;\n    /**\n     * @hidden\n     */\n    protected _rowDrag = false;\n    /**\n     * @hidden\n     */\n    protected _pipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _summaryPipeTrigger = 0;\n    /**\n     * @hidden\n     */\n    protected _columns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _pinnedColumns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _unpinnedColumns: IgxColumnComponent[] = [];\n    /**\n     * @hidden\n     */\n    protected _filteringExpressionsTree: IFilteringExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);\n    /**\n     * @hidden\n     */\n    protected _sortingExpressions: Array<ISortingExpression> = [];\n    /**\n     * @hidden\n     */\n    protected _maxLevelHeaderDepth = null;\n    /**\n     * @hidden\n     */\n    protected _columnHiding = false;\n    /**\n     * @hidden\n     */\n    protected _columnPinning = false;\n    /**\n     * @hidden\n     */\n    protected _keydownListener = null;\n    /**\n     * @hidden\n     */\n    protected _vScrollListener = null;\n    /**\n     * @hidden\n     */\n    protected _hScrollListener = null;\n    /**\n     * @hidden\n     */\n    protected _wheelListener = null;\n    protected _allowFiltering = false;\n    protected _filterMode = FilterMode.quickFilter;\n    private resizeHandler;\n    private columnListDiffer;\n    private _hiddenColumnsText = '';\n    private _pinnedColumnsText = '';\n    private _height = '100%';\n    private _width = '100%';\n    protected _autoSize = false;\n    private _rowHeight;\n    protected _ngAfterViewInitPassed = false;\n    protected _baseFontSize: number;\n    private _horizontalForOfs;\n    private _multiRowLayoutRowSize = 1;\n\n    // Caches\n    private _totalWidth = NaN;\n    private _pinnedVisible = [];\n    private _unpinnedVisible = [];\n    private _pinnedWidth = NaN;\n    private _unpinnedWidth = NaN;\n    private _visibleColumns = [];\n    private _columnGroups = false;\n\n    private _columnWidth: string;\n\n    protected _defaultTargetRecordNumber = 10;\n    protected _onFocusChange = new EventEmitter<IFocusChangeEventArgs>();\n\n    private _summaryPosition = GridSummaryPosition.bottom;\n    private _summaryCalculationMode = GridSummaryCalculationMode.rootAndChildLevels;\n\n    private rowEditPositioningStrategy = new ContainerPositioningStrategy({\n        horizontalDirection: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Bottom,\n        closeAnimation: null\n    });\n\n    private rowEditSettings = {\n        scrollStrategy: new AbsoluteScrollStrategy(),\n        modal: false,\n        closeOnOutsideClick: false,\n        outlet: this.rowOutletDirective,\n        positionStrategy: this.rowEditPositioningStrategy\n    };\n\n    private verticalScrollHandler(event) {\n        this.verticalScrollContainer.onScroll(event);\n        if (isEdge()) { this.wheelHandler(false); }\n        this.disableTransitions = true;\n\n        this.zone.run(() => {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.verticalScrollContainer.onChunkLoad.emit(this.verticalScrollContainer.state);\n            });\n\n            if (this.rowEditable) {\n                this.changeRowEditingOverlayStateOnScroll(this.rowInEditMode);\n            }\n            this.disableTransitions = false;\n        });\n\n        this.hideOverlays();\n    }\n\n    private horizontalScrollHandler(event) {\n        const scrollLeft = event.target.scrollLeft;\n        if (isEdge()) { this.wheelHandler(true); }\n        this.headerContainer.onHScroll(scrollLeft);\n        this._horizontalForOfs.forEach(vfor => vfor.onHScroll(scrollLeft));\n        this.cdr.markForCheck();\n\n        this.zone.run(() => {\n            this.zone.onStable.pipe(first()).subscribe(() => {\n                this.parentVirtDir.onChunkLoad.emit(this.headerContainer.state);\n            });\n        });\n\n        this.hideOverlays();\n    }\n\n    /**\n    * @hidden\n    * @internal\n    */\n    public hideOverlays() {\n        this.overlayIDs.forEach(overlayID => {\n            this.overlayService.hide(overlayID);\n            this.overlayService.onClosed.pipe(\n                filter(o => o.id === overlayID),\n                takeUntil(this.destroy$)).subscribe(() => {\n                    this.nativeElement.focus();\n                });\n        });\n    }\n\n    private keydownHandler(event) {\n        const key = event.key.toLowerCase();\n        // TODO: Move in a separate handler on the `grid body`.\n        // if (event.ctrlKey && key === 'c' && isIE()) {\n        //     this.copyHandler(null, true);\n        // }\n        if ((isNavigationKey(key) && event.keyCode !== 32) || key === 'tab' || key === 'pagedown' || key === 'pageup') {\n            event.preventDefault();\n            if (key === 'pagedown') {\n                this.verticalScrollContainer.scrollNextPage();\n                this.nativeElement.focus();\n            } else if (key === 'pageup') {\n                this.verticalScrollContainer.scrollPrevPage();\n                this.nativeElement.focus();\n            }\n        }\n    }\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        public crudService: IgxGridCRUDService,\n        private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        public selection: IgxSelectionAPIService,\n        @Inject(IgxGridTransaction) protected _transactions: TransactionService<Transaction, State>,\n        private elementRef: ElementRef,\n        private zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        public cdr: ChangeDetectorRef,\n        protected resolver: ComponentFactoryResolver,\n        protected differs: IterableDiffers,\n        protected viewRef: ViewContainerRef,\n        public navigation: IgxGridNavigationService,\n        public filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n        this.cdr.detach();\n        this.resizeHandler = () => {\n            this.zone.run(() => this.calculateGridSizes());\n        };\n    }\n\n    _setupServices() {\n        this.gridAPI.grid = this;\n        this.crudService.grid = this;\n        this.navigation.grid = this;\n        this.filteringService.grid = this;\n        this.summaryService.grid = this;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this._init) { return; }\n        const { height, width } = changes;\n        if (height || width) {\n            this.calculateGridSizes();\n        }\n    }\n\n    _setupListeners() {\n        const destructor = takeUntil(this.destroy$);\n\n        this.onRowAdded.pipe(destructor).subscribe(args => this.refreshGridState(args));\n        this.onRowDeleted.pipe(destructor).subscribe(args => {\n            this.summaryService.deleteOperation = true;\n            this.summaryService.clearSummaryCache(args);\n        });\n        this.transactions.onStateUpdate.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.summaryService.clearSummaryCache();\n            this._pipeTrigger++;\n            this.markForCheck();\n            if (this.transactions.getAggregatedChanges(false).length === 0) {\n                // Needs better check, calling 'transactions.clear()' will also trigger this\n                if (this.gridAPI.atInexistingPage()) {\n                    this.page--;\n                }\n            }\n        });\n\n        this.onPagingDone.pipe(destructor).subscribe(() => {\n            this.endEdit(true);\n            this.selectionService.clear();\n            this.selectionService.activeElement = null;\n        });\n\n        this.onColumnMoving.pipe(destructor).subscribe(() => this.endEdit(true));\n        this.onColumnResized.pipe(destructor).subscribe(() => this.endEdit(true));\n\n        this.overlayService.onOpened.pipe(takeUntil(this.destroy$)).subscribe((event) => {\n            if (this.overlayService.getOverlayById(event.id).settings.outlet === this.outletDirective &&\n                this.overlayIDs.indexOf(event.id) < 0) {\n                this.overlayIDs.push(event.id);\n            }\n        });\n        this.overlayService.onClosed.pipe(takeUntil(this.destroy$)).subscribe((event) => {\n            const ind = this.overlayIDs.indexOf(event.id);\n            if (ind !== -1) {\n                this.overlayIDs.splice(ind, 1);\n            }\n        });\n    }\n\n    // TODO: Refactor\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this._setupServices();\n        this._setupListeners();\n        this.columnListDiffer = this.differs.find([]).create(null);\n        this.calcWidth = this.width && this.width.indexOf('%') === -1 ? parseInt(this.width, 10) : 0;\n        this.shouldGenerate = this.autoGenerate;\n        this._scrollWidth = this.getScrollWidth();\n    }\n\n    protected setupColumns() {\n        if (this.autoGenerate) {\n            this.autogenerateColumns();\n        }\n\n        this.initColumns(this.columnList, (col: IgxColumnComponent) => this.onColumnInit.emit(col));\n\n        this.columnListDiffer.diff(this.columnList);\n        this.markForCheck();\n        this.resetCaches();\n\n        this.columnList.changes\n            .pipe(takeUntil(this.destroy$))\n            .subscribe((change: QueryList<IgxColumnComponent>) => { this.onColumnsChanged(change); });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetColumnsCaches() {\n        this.columnList.forEach(column => column.resetCaches());\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetForOfCache() {\n        const firstVirtRow = this.dataRowList.first;\n        if (firstVirtRow) {\n            firstVirtRow.virtDirRow.assumeMaster();\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetColumnCollections() {\n        this._visibleColumns.length = 0;\n        this._pinnedVisible.length = 0;\n        this._unpinnedVisible.length = 0;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCachedWidths() {\n        this._unpinnedWidth = NaN;\n        this._pinnedWidth = NaN;\n        this._totalWidth = NaN;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public resetCaches() {\n        this.resetForOfCache();\n        this.resetColumnsCaches();\n        this.resetColumnCollections();\n        this.resetCachedWidths();\n        this._columnGroups = this.columnList.some(col => col.columnGroup);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        this.setupColumns();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this.zone.runOutsideAngular(() => {\n            this.document.defaultView.addEventListener('resize', this.resizeHandler);\n            this._keydownListener = this.keydownHandler.bind(this);\n            this.nativeElement.addEventListener('keydown', this._keydownListener);\n        });\n        this.initPinning();\n\n        this.onDensityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            requestAnimationFrame(() => {\n                this.summaryService.summaryHeight = 0;\n                this.endEdit(true);\n                this.reflow();\n                this.verticalScrollContainer.recalcUpdateSizes();\n            });\n        });\n        this._ngAfterViewInitPassed = true;\n        this.calculateGridSizes();\n\n        // In some rare cases we get the AfterViewInit before the grid is added to the DOM\n        // and as a result we get 0 width and can't size ourselves properly.\n        // In order to prevent that add a mutation observer that watches if we have been added.\n        if (!this.isAttachedToDom) {\n            const config = { childList: true, subtree: true };\n            const callback = (mutationsList) => {\n                const childListHasChanged = mutationsList.filter((mutation) => {\n                    return mutation.type === 'childList';\n                }).length > 0;\n                if (childListHasChanged && this.isAttachedToDom) {\n                    this._autoSize = false;\n                    this.reflow();\n                    this._observer.disconnect();\n                    this._observer = null;\n                }\n            };\n\n            this._observer = new MutationObserver(callback);\n            this._observer.observe(this.document.body, config);\n        }\n\n        this._dataRowList.changes.pipe(takeUntil(this.destroy$)).subscribe(list =>\n            this._horizontalForOfs = this.combineForOfCollections(list.toArray()\n                .filter(item => item.element.nativeElement.parentElement !== null), this._summaryRowList)\n        );\n        this._summaryRowList.changes.pipe(takeUntil(this.destroy$)).subscribe(summaryList =>\n            this._horizontalForOfs - this.combineForOfCollections(this._dataRowList, summaryList.toArray()\n                .filter(item => item.element.nativeElement.parentElement !== null)));\n\n        this.zone.runOutsideAngular(() => {\n            this._vScrollListener = this.verticalScrollHandler.bind(this);\n            this.verticalScrollContainer.getVerticalScroll().addEventListener('scroll', this._vScrollListener);\n        });\n\n        this.zone.runOutsideAngular(() => {\n            this._hScrollListener = this.horizontalScrollHandler.bind(this);\n            this.parentVirtDir.getHorizontalScroll().addEventListener('scroll', this._hScrollListener);\n        });\n        this._horizontalForOfs = this.combineForOfCollections(this._dataRowList, this._summaryRowList);\n        const vertScrDC = this.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;\n        vertScrDC.addEventListener('scroll', (evt) => { this.scrollHandler(evt); });\n        vertScrDC.addEventListener('wheel', () => { this.wheelHandler(); });\n        vertScrDC.addEventListener('touchmove', () => { this.wheelHandler(); });\n\n        this.verticalScrollContainer.onDataChanging.pipe(takeUntil(this.destroy$)).subscribe(($event) => {\n            this.calculateGridHeight();\n            $event.containerSize = this.calcHeight;\n        });\n        this.verticalScrollContainer.onDataChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            requestAnimationFrame(() => {\n                if (!this._destroyed) {\n                    this.reflow();\n                }\n            });\n        });\n        this._init = false;\n        this.cdr.reattach();\n    }\n\n    private combineForOfCollections(dataList, summaryList) {\n        return dataList.map(row => row.virtDirRow).concat(summaryList.map(row => row.virtDirRow));\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this.tmpOutlets.forEach((tmplOutlet) => {\n            tmplOutlet.cleanCache();\n        });\n        this.zone.runOutsideAngular(() => {\n            this.document.defaultView.removeEventListener('resize', this.resizeHandler);\n            this.nativeElement.removeEventListener('keydown', this._keydownListener);\n            this.verticalScrollContainer.getVerticalScroll().removeEventListener('scroll', this._vScrollListener);\n            this.parentVirtDir.getHorizontalScroll().removeEventListener('scroll', this._hScrollListener);\n            const vertScrDC = this.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement;\n            vertScrDC.removeEventListener('scroll', (evt) => { this.scrollHandler(evt); });\n            vertScrDC.removeEventListener('wheel', () => { this.wheelHandler(); });\n        });\n        if (this._observer) {\n            this._observer.disconnect();\n        }\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this._destroyed = true;\n    }\n\n    /**\n     * @hidden\n     */\n    public dataLoading(event) {\n        this.onDataPreLoad.emit(event);\n    }\n\n    /**\n     * Toggles the specified column's visibility.\n     * ```typescript\n     * this.grid1.toggleColumnVisibility({\n     *       column: this.grid1.columns[0],\n     *       newValue: true\n     * });\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public toggleColumnVisibility(args: IColumnVisibilityChangedEventArgs) {\n        const col = args.column ? this.columnList.find((c) => c === args.column) : undefined;\n\n        if (!col) {\n            return;\n        }\n\n        col.hidden = args.newValue;\n        this.onColumnVisibilityChanged.emit(args);\n\n        this.markForCheck();\n    }\n\n    /**\n     * Returns the native element of the `IgxGridComponent`.\n     * ```typescript\n     * const nativeEl = this.grid.nativeElement.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get outlet() {\n        return this.outletDirective;\n    }\n\n    /**\n     * Returns the `IgxGridComponent`'s rows height.\n     * ```typescript\n     * const rowHeigh = this.grid.defaultRowHeight;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get defaultRowHeight(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 40;\n            case DisplayDensity.compact:\n                return 32;\n            default:\n                return 50;\n        }\n    }\n\n    get defaultSummaryHeight(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 30;\n            case DisplayDensity.compact:\n                return 24;\n            default:\n                return 36;\n        }\n    }\n\n    /**\n     * Returns the `IgxGridHeaderGroupComponent`'s minimum allowed width.\n     * Used internally for restricting header group component width.\n     * The values below depend on the header cell default right/left padding values.\n\t * @memberof IgxGridBaseComponent\n     */\n    get defaultHeaderGroupMinWidth(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 32;\n            case DisplayDensity.compact:\n                return 24;\n            default:\n                return 48;\n        }\n    }\n\n    public paginatorClassName(): string {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 'igx-grid-paginator--cosy';\n            case DisplayDensity.compact:\n                return 'igx-grid-paginator--compact';\n            default:\n                return 'igx-grid-paginator';\n        }\n    }\n\n    public paginatorSelectDisplayDensity(): string {\n        if (this.displayDensity === DisplayDensity.comfortable) {\n            return DisplayDensity.cosy;\n        }\n        return DisplayDensity.compact;\n    }\n\n    /**\n     * Returns the maximum width of the container for the pinned `IgxColumnComponent`s.\n     * The width is 80% of the total grid width.\n     * ```typescript\n     * const maxPinnedColWidth = this.grid.calcPinnedContainerMaxWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get calcPinnedContainerMaxWidth(): number {\n        return (this.calcWidth * 80) / 100;\n    }\n\n    /**\n     * Returns the minimum width of the container for the unpinned `IgxColumnComponent`s.\n     * The width is 20% of the total grid width.\n     * ```typescript\n     * const minUnpinnedColWidth = this.grid.unpinnedAreaMinWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedAreaMinWidth(): number {\n        return (this.calcWidth * 20) / 100;\n    }\n\n    /**\n     * Returns the current width of the container for the pinned `IgxColumnComponent`s.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get pinnedWidth() {\n        if (!isNaN(this._pinnedWidth)) { return this._pinnedWidth; }\n        this._pinnedWidth = this.getPinnedWidth();\n        return this._pinnedWidth;\n    }\n\n    /**\n     * Returns the current width of the container for the unpinned `IgxColumnComponent`s.\n     * ```typescript\n     * const unpinnedWidth = this.grid.getUnpinnedWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedWidth() {\n        if (!isNaN(this._unpinnedWidth)) { return this._unpinnedWidth; }\n        this._unpinnedWidth = this.getUnpinnedWidth();\n        return this._unpinnedWidth;\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * TODO: Update for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public get featureColumnsWidth() {\n        return this.getFeatureColumnsWidth();\n    }\n\n    /**\n     * @hidden\n     */\n    get summariesMargin() {\n        return this.featureColumnsWidth;\n    }\n\n    /**\n     * Returns an array of `IgxColumnComponent`s.\n     * ```typescript\n     * const colums = this.grid.columns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get columns(): IgxColumnComponent[] {\n        return this._columns;\n    }\n\n    /**\n     * Returns an array of the pinned `IgxColumnComponent`s.\n     * ```typescript\n     * const pinnedColumns = this.grid.pinnedColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get pinnedColumns(): IgxColumnComponent[] {\n        if (this._pinnedVisible.length) {\n            return this._pinnedVisible;\n        }\n        this._pinnedVisible = this._pinnedColumns.filter(col => !col.hidden);\n        return this._pinnedVisible;\n    }\n\n    /**\n     * Returns an array of unpinned `IgxColumnComponent`s.\n     * ```typescript\n     * const unpinnedColumns = this.grid.unpinnedColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get unpinnedColumns(): IgxColumnComponent[] {\n        if (this._unpinnedVisible.length) {\n            return this._unpinnedVisible;\n        }\n        this._unpinnedVisible = this._unpinnedColumns.filter((col) => !col.hidden);\n        return this._unpinnedVisible;\n    }\n\n    /**\n     * Returns the `width` to be set on `IgxGridHeaderGroupComponent`.\n\t * @memberof IgxGridBaseComponent\n     */\n    public getHeaderGroupWidth(column: IgxColumnComponent): string {\n        if (this.hasColumnLayouts) {\n            return '';\n        }\n        const colWidth = column.width;\n        const minWidth = this.defaultHeaderGroupMinWidth;\n        const isPercentageWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1;\n\n        if (!isPercentageWidth && parseInt(column.width, 10) < minWidth) {\n            return minWidth.toString();\n        }\n\n        return column.width;\n    }\n\n    /**\n     * Returns the `IgxColumnComponent` by field name.\n     * ```typescript\n     * const myCol = this.grid1.getColumnByName(\"ID\");\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public getColumnByName(name: string): IgxColumnComponent {\n        return this.columnList.find((col) => col.field === name);\n    }\n\n    /**\n     * Returns the `IgxColumnComponent` by index.\n     * ```typescript\n     * const myRow = this.grid1.getRowByIndex(1);\n     * ```\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public getRowByIndex(index: number): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        return this.gridAPI.get_row_by_index(index);\n    }\n\n    /**\n     * Returns `IgxGridRowComponent` object by the specified primary key .\n     * Requires that the `primaryKey` property is set.\n     * ```typescript\n     * const myRow = this.grid1.getRowByKey(\"cell5\");\n     * ```\n     * @param keyValue\n     * @memberof IgxGridBaseComponent\n     */\n    public getRowByKey(keyValue: any): IgxRowComponent<IgxGridBaseComponent & IGridDataBindable> {\n        return this.gridAPI.get_row_by_key(keyValue);\n    }\n\n    /**\n     * Returns an array of visible `IgxColumnComponent`s.\n     * ```typescript\n     * const visibleColumns = this.grid.visibleColumns.\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get visibleColumns(): IgxColumnComponent[] {\n        if (this._visibleColumns.length) {\n            return this._visibleColumns;\n        }\n        this._visibleColumns = this.columnList.filter(c => !c.hidden);\n        return this._visibleColumns;\n    }\n\n    /**\n     * Returns the `IgxGridCellComponent` that matches the conditions.\n     * ```typescript\n     * const myCell = this.grid1.getCellByColumn(2,\"UnitPrice\");\n     * ```\n     * @param rowIndex\n     * @param columnField\n     * @memberof IgxGridBaseComponent\n     */\n    public getCellByColumn(rowIndex: number, columnField: string): IgxGridCellComponent {\n        const columnId = this.columnList.map((column) => column.field).indexOf(columnField);\n        if (columnId !== -1) {\n            return this.gridAPI.get_cell_by_index(rowIndex, columnId);\n        }\n    }\n\n    /**\n     * Returns an `IgxGridCellComponent` object by the specified primary key and column field.\n     * Requires that the primaryKey property is set.\n     * ```typescript\n     * grid.getCellByKey(1, 'index');\n     * ```\n     * @param rowSelector match any rowID\n     * @param columnField\n     * @memberof IgxGridBaseComponent\n     */\n    public getCellByKey(rowSelector: any, columnField: string): IgxGridCellComponent {\n        return this.gridAPI.get_cell_by_key(rowSelector, columnField);\n    }\n\n    /**\n     * Returns the total number of pages.\n     * ```typescript\n     * const totalPages = this.grid.totalPages;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalPages(): number {\n        if (this.pagingState) {\n            return this.pagingState.metadata.countPages;\n        }\n        return -1;\n    }\n\n    /**\n     * Returns if the current page is the first page.\n     * ```typescript\n     * const firstPage = this.grid.isFirstPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get isFirstPage(): boolean {\n        return this.page === 0;\n    }\n\n    /**\n     * Goes to the next page of the `IgxGridComponent`, if the grid is not already at the last page.\n     * ```typescript\n     * this.grid1.nextPage();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public nextPage(): void {\n        if (!this.isLastPage) {\n            this.page += 1;\n        }\n    }\n\n    /**\n     * Goes to the previous page of the `IgxGridComponent`, if the grid is not already at the first page.\n     * ```typescript\n     * this.grid1.previousPage();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public previousPage(): void {\n        if (!this.isFirstPage) {\n            this.page -= 1;\n        }\n    }\n\n    /**\n     * Returns the total number of records.\n     * Only functions when paging is enabled.\n     * ```typescript\n     * const totalRecords = this.grid.totalRecords;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalRecords(): number {\n        if (this.pagingState) {\n            return this.pagingState.metadata.countRecords;\n        }\n    }\n\n    /**\n     * Returns if the current page is the last page.\n     * ```typescript\n     * const lastPage = this.grid.isLastPage;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get isLastPage(): boolean {\n        return this.page + 1 >= this.totalPages;\n    }\n\n    /**\n     * Returns the total width of the `IgxGridComponent`.\n     * ```typescript\n     * const gridWidth = this.grid.totalWidth;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get totalWidth(): number {\n        if (!isNaN(this._totalWidth)) { return this._totalWidth; }\n        // Take only top level columns\n        const cols = this.visibleColumns.filter(col => col.level === 0 && !col.pinned);\n        let totalWidth = 0;\n        let i = 0;\n        for (i; i < cols.length; i++) {\n            totalWidth += parseInt(cols[i].calcWidth, 10) || 0;\n        }\n        this._totalWidth = totalWidth;\n        return totalWidth;\n    }\n\n    get showRowCheckboxes(): boolean {\n        return this.rowSelectable && this.columns.length > this.hiddenColumnsCount;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _moveColumns(from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition) {\n        const list = this.columnList.toArray();\n        const fromIndex = list.indexOf(from);\n        let toIndex = list.indexOf(to);\n\n        if (pos === DropPosition.BeforeDropTarget) {\n            toIndex--;\n            if (toIndex < 0) {\n                toIndex = 0;\n            }\n        }\n\n        if (pos === DropPosition.AfterDropTarget) {\n            toIndex++;\n        }\n\n        list.splice(toIndex, 0, ...list.splice(fromIndex, 1));\n        const newList = this._resetColumnList(list);\n        this.columnList.reset(newList);\n        this.columnList.notifyOnChanges();\n        this._columns = this.columnList.toArray();\n    }\n\n    /**\n     * @hidden\n     */\n    protected _resetColumnList(list?) {\n        if (!list) {\n            list = this.columnList.toArray();\n        }\n        let newList = [];\n        list.filter(c => c.level === 0).forEach(p => {\n            newList.push(p);\n            if (p.columnGroup) {\n                newList = newList.concat(p.allChildren);\n            }\n        });\n        return newList;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _reorderPinnedColumns(from: IgxColumnComponent, to: IgxColumnComponent, position: DropPosition) {\n        const pinned = this._pinnedColumns;\n        let dropIndex = pinned.indexOf(to);\n\n        if (to.columnGroup) {\n            dropIndex += to.allChildren.length;\n        }\n\n        if (position === DropPosition.BeforeDropTarget) {\n            dropIndex--;\n        }\n\n        if (position === DropPosition.AfterDropTarget) {\n            dropIndex++;\n        }\n\n        pinned.splice(dropIndex, 0, ...pinned.splice(pinned.indexOf(from), 1));\n    }\n\n    /**\n     * @hidden\n     */\n    protected _moveChildColumns(parent: IgxColumnComponent, from: IgxColumnComponent, to: IgxColumnComponent, pos: DropPosition) {\n        const buffer = parent.children.toArray();\n        const fromIndex = buffer.indexOf(from);\n        let toIndex = buffer.indexOf(to);\n\n        if (pos === DropPosition.BeforeDropTarget) {\n            toIndex--;\n        }\n\n        if (pos === DropPosition.AfterDropTarget) {\n            toIndex++;\n        }\n\n        buffer.splice(toIndex, 0, ...buffer.splice(fromIndex, 1));\n        parent.children.reset(buffer);\n    }\n    /**\n     * Moves a column to the specified drop target.\n     * ```typescript\n     * grid.moveColumn(compName, persDetails);\n     * ```\n\t  * @memberof IgxGridBaseComponent\n\t  */\n    public moveColumn(column: IgxColumnComponent, dropTarget: IgxColumnComponent, pos: DropPosition = DropPosition.None) {\n\n        let position = pos;\n        const fromIndex = column.visibleIndex;\n        const toIndex = dropTarget.visibleIndex;\n\n        if (pos === DropPosition.BeforeDropTarget && fromIndex < toIndex) {\n            position = DropPosition.BeforeDropTarget;\n        } else if (pos === DropPosition.AfterDropTarget && fromIndex > toIndex) {\n            position = DropPosition.AfterDropTarget;\n        } else {\n            position = DropPosition.None;\n        }\n\n\n        if ((column.level !== dropTarget.level) ||\n            (column.topLevelParent !== dropTarget.topLevelParent)) {\n            return;\n        }\n\n        this.endEdit(true);\n        if (column.level) {\n            this._moveChildColumns(column.parent, column, dropTarget, position);\n        }\n\n        if (dropTarget.pinned && column.pinned) {\n            this._reorderPinnedColumns(column, dropTarget, position);\n        }\n\n        if (dropTarget.pinned && !column.pinned) {\n            column.pin();\n            this._reorderPinnedColumns(column, dropTarget, position);\n        }\n\n        if (!dropTarget.pinned && column.pinned) {\n            column.unpin();\n\n            const list = this.columnList.toArray();\n            const fi = list.indexOf(column);\n            const ti = list.indexOf(dropTarget);\n\n            if (pos === DropPosition.BeforeDropTarget && fi < ti) {\n                position = DropPosition.BeforeDropTarget;\n            } else if (pos === DropPosition.AfterDropTarget && fi > ti) {\n                position = DropPosition.AfterDropTarget;\n            } else {\n                position = DropPosition.None;\n            }\n        }\n\n        this._moveColumns(column, dropTarget, position);\n        this.cdr.detectChanges();\n        if (this.hasColumnLayouts) {\n            this.columns.filter(x => x.columnLayout).forEach(x => x.populateVisibleIndexes());\n        }\n\n        const args = {\n            source: column,\n            target: dropTarget\n        };\n\n        this.onColumnMovingEnd.emit(args);\n    }\n\n    /**\n     * Goes to the desired page index.\n     * ```typescript\n     * this.grid1.paginate(1);\n     * ```\n     * @param val\n     * @memberof IgxGridBaseComponent\n     */\n    public paginate(val: number): void {\n        if (val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n\n        this.page = val;\n    }\n\n    /**\n     * Manually marks the `IgxGridComponent` for change detection.\n     * ```typescript\n     * this.grid1.markForCheck();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public markForCheck() {\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Creates a new `IgxGridRowComponent` and adds the data record to the end of the data source.\n     * ```typescript\n     * const record = {\n     *     ID: this.grid1.data[this.grid1.data.length - 1].ID + 1,\n     *     Name: this.newRecord\n     * };\n     * this.grid1.addRow(record);\n     * ```\n     * @param data\n     * @memberof IgxGridBaseComponent\n     */\n    public addRow(data: any): void {\n        // commit pending states prior to adding a row\n        this.endEdit(true);\n        this.gridAPI.addRowToData(data);\n\n        this.onRowAdded.emit({ data });\n        this._pipeTrigger++;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Removes the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * Requires that the `primaryKey` property is set.\n     * The method accept rowSelector as a parameter, which is the rowID.\n     * ```typescript\n     * this.grid1.deleteRow(0);\n     * ```\n     * @param rowSelector\n     * @memberof IgxGridBaseComponent\n     */\n    public deleteRow(rowSelector: any): void {\n        if (this.primaryKey !== undefined && this.primaryKey !== null) {\n            this.deleteRowById(rowSelector);\n        }\n    }\n\n    /** @hidden */\n    public deleteRowById(rowId: any) {\n        this.gridAPI.deleteRowById(rowId);\n    }\n\n    /**\n     * @hidden\n     */\n    protected deleteRowFromData(rowID: any, index: number) {\n        //  if there is a row (index !== 0) delete it\n        //  if there is a row in ADD or UPDATE state change it's state to DELETE\n        if (index !== -1) {\n            if (this.transactions.enabled) {\n                const transaction: Transaction = { id: rowID, type: TransactionType.DELETE, newValue: null };\n                this.transactions.add(transaction, this.data[index]);\n            } else {\n                this.data.splice(index, 1);\n            }\n        } else {\n            const state: State = this.transactions.getState(rowID);\n            this.transactions.add({ id: rowID, type: TransactionType.DELETE, newValue: null }, state && state.recordRef);\n        }\n    }\n\n    /**\n     * Updates the `IgxGridRowComponent` and the corresponding data record by primary key.\n     * Requires that the `primaryKey` property is set.\n     * ```typescript\n     * this.gridWithPK.updateCell('Updated', 1, 'ProductName');\n     * ```\n     * @param value the new value which is to be set.\n     * @param rowSelector corresponds to rowID.\n     * @param column corresponds to column field.\n     * @memberof IgxGridBaseComponent\n     */\n    public updateCell(value: any, rowSelector: any, column: string): void {\n        if (this.isDefined(this.primaryKey)) {\n            const col = this.columnList.toArray().find(c => c.field === column);\n            if (col) {\n                // Simplify\n                const rowData = this.gridAPI.getRowData(rowSelector);\n                const index = this.gridAPI.get_row_index_in_data(rowSelector);\n                // If row passed is invalid\n                if (index < 0) {\n                    return;\n                }\n                const id = {\n                    rowID: rowSelector,\n                    columnID: col.index,\n                    rowIndex: index\n                };\n\n                const cell = new IgxCell(id, index, col, rowData[col.field], rowData[col.field], rowData);\n                const args = this.gridAPI.update_cell(cell, value);\n\n                if (this.crudService.cell && this.crudService.sameCell(cell)) {\n                    if (args.cancel) {\n                        return;\n                    }\n                    this.gridAPI.escape_editMode();\n                }\n\n                this.cdr.markForCheck();\n            }\n        }\n    }\n\n    /**\n     * Updates the `IgxGridRowComponent`, which is specified by\n     * rowSelector parameter and the data source record with the passed value.\n     * This method will apply requested update only if primary key is specified in the grid.\n     * ```typescript\n     * grid.updateRow({\n     *       ProductID: 1, ProductName: 'Spearmint', InStock: true, UnitsInStock: 1, OrderDate: new Date('2005-03-21')\n     *   }, 1);\n     * ```\n     * @param value\n     * @param rowSelector correspond to rowID\n     * @memberof IgxGridBaseComponent\n     */\n    public updateRow(value: any, rowSelector: any): void {\n        if (this.isDefined(this.primaryKey)) {\n            const editableCell = this.crudService.cell;\n            if (editableCell && editableCell.id.rowID === rowSelector) {\n                this.gridAPI.escape_editMode();\n            }\n            const row = new IgxRow(rowSelector, -1, this.gridAPI.getRowData(rowSelector));\n            this.gridAPI.update_row(row, value);\n            this.cdr.markForCheck();\n        }\n    }\n\n    /**\n     * Sort a single `IgxColumnComponent`.\n     * Sort the `IgxGridComponent`'s `IgxColumnComponent` based on the provided array of sorting expressions.\n     * ```typescript\n     * this.grid.sort({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public sort(expression: ISortingExpression | Array<ISortingExpression>): void {\n        this.endEdit(false);\n        if (expression instanceof Array) {\n            this.gridAPI.sort_multiple(expression);\n        } else {\n            this.gridAPI.sort(expression);\n        }\n        this.onSortingDone.emit(expression);\n    }\n\n    /**\n     * Filters a single `IgxColumnComponent`.\n     * ```typescript\n     * public filter(term) {\n     *      this.grid.filter(\"ProductName\", term, IgxStringFilteringOperand.instance().condition(\"contains\"));\n     * }\n     * ```\n     * @param name\n     * @param value\n     * @param conditionOrExpressionTree\n     * @param ignoreCase\n     * @memberof IgxGridBaseComponent\n     */\n    public filter(name: string, value: any, conditionOrExpressionTree?: IFilteringOperation | IFilteringExpressionsTree,\n        ignoreCase?: boolean) {\n        this.filteringService.filter(name, value, conditionOrExpressionTree, ignoreCase);\n    }\n\n    /**\n     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.\n     * ```typescript\n     * grid.filterGlobal('some', IgxStringFilteringOperand.instance().condition('contains'));\n     * ```\n     * @param value\n     * @param condition\n     * @param ignoreCase\n     * @memberof IgxGridBaseComponent\n     */\n    public filterGlobal(value: any, condition, ignoreCase?) {\n        this.filteringService.filterGlobal(value, condition, ignoreCase);\n    }\n\n    /**\n     * Enables summaries for the specified column and applies your customSummary.\n     * If you do not provide the customSummary, then the default summary for the column data type will be applied.\n     * ```typescript\n     * grid.enableSummaries([{ fieldName: 'ProductName' }, { fieldName: 'ID' }]);\n     * ```\n     * Enable summaries for the listed columns.\n     * ```typescript\n     * grid.enableSummaries('ProductName');\n     * ```\n     * @param rest\n     * @memberof IgxGridBaseComponent\n     */\n    public enableSummaries(...rest) {\n        if (rest.length === 1 && Array.isArray(rest[0])) {\n            this._multipleSummaries(rest[0], true);\n        } else {\n            this._summaries(rest[0], true, rest[1]);\n        }\n        this.calculateGridHeight();\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Disable summaries for the specified column.\n     * ```typescript\n     * grid.disableSummaries('ProductName');\n     * ```\n     *\n     * Disable summaries for the listed columns.\n     * ```typescript\n     * grid.disableSummaries([{ fieldName: 'ProductName' }]);\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public disableSummaries(...rest) {\n        if (rest.length === 1 && Array.isArray(rest[0])) {\n            this._disableMultipleSummaries(rest[0]);\n        } else {\n            this._summaries(rest[0], false);\n        }\n    }\n\n    /**\n     * If name is provided, clears the filtering state of the corresponding `IgxColumnComponent`,\n     * otherwise clears the filtering state of all `IgxColumnComponent`s.\n     * ```typescript\n     * this.grid.clearFilter();\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public clearFilter(name?: string) {\n        this.filteringService.clearFilter(name);\n    }\n\n    /**\n     * If name is provided, clears the sorting state of the corresponding `IgxColumnComponent`,\n     * otherwise clears the sorting state of all `IgxColumnComponent`.\n     * ```typescript\n     * this.grid.clearSort();\n     * ```\n     * @param name\n     * @memberof IgxGridBaseComponent\n     */\n    public clearSort(name?: string) {\n        if (!name) {\n            this.sortingExpressions = [];\n            return;\n        }\n        if (!this.gridAPI.get_column_by_name(name)) {\n            return;\n        }\n        this.gridAPI.clear_sort(name);\n    }\n\n    /**\n     * @hidden\n     */\n    public refreshGridState(args?) {\n        this.endEdit(true);\n        this.summaryService.clearSummaryCache(args);\n    }\n\n    // TODO: We have return values here. Move them to event args ??\n\n    /**\n     * Pins a column by field name. Returns whether the operation is successful.\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public pinColumn(columnName: string | IgxColumnComponent, index?): boolean {\n        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);\n        return col.pin(index);\n    }\n\n    /**\n     * Unpins a column by field name. Returns whether the operation is successful.\n     * ```typescript\n     * this.grid.pinColumn(\"ID\");\n     * ```\n     * @param columnName\n     * @param index\n     * @memberof IgxGridBaseComponent\n     */\n    public unpinColumn(columnName: string | IgxColumnComponent, index?): boolean {\n        const col = columnName instanceof IgxColumnComponent ? columnName : this.getColumnByName(columnName);\n        return col.unpin(index);\n    }\n\n\n    /**\n     * Recalculates grid width/height dimensions. Should be run when changing DOM elements dimentions manually that affect the grid's size.\n     * ```typescript\n     * this.grid.reflow();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public reflow() {\n        this.calculateGridSizes();\n    }\n\n    /**\n     * Finds the next occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * Returns how many times the grid contains the string.\n     * ```typescript\n     * this.grid.findNext(\"financial\");\n     * ```\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value  (defaults to false).\n     * @memberof IgxGridBaseComponent\n     */\n    public findNext(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.find(text, 1, caseSensitive, exactMatch);\n    }\n\n    /**\n     * Finds the previous occurrence of a given string in the grid and scrolls to the cell if it isn't visible.\n     * Returns how many times the grid contains the string.\n     * ```typescript\n     * this.grid.findPrev(\"financial\");\n     * ````\n     * @param text the string to search.\n     * @param caseSensitive optionally, if the search should be case sensitive (defaults to false).\n     * @param exactMatch optionally, if the text should match the entire value (defaults to false).\n     * @memberof IgxGridBaseComponent\n     */\n    public findPrev(text: string, caseSensitive?: boolean, exactMatch?: boolean): number {\n        return this.find(text, -1, caseSensitive, exactMatch);\n    }\n\n    /**\n     * Reapplies the existing search.\n     * Returns how many times the grid contains the last search.\n     * ```typescript\n     * this.grid.refreshSearch();\n     * ```\n     * @param updateActiveInfo\n     * @memberof IgxGridBaseComponent\n     */\n    public refreshSearch(updateActiveInfo?: boolean): number {\n        if (this.lastSearchInfo.searchText) {\n            this.rebuildMatchCache();\n\n            if (updateActiveInfo) {\n                const activeInfo = IgxTextHighlightDirective.highlightGroupsMap.get(this.id);\n                this.lastSearchInfo.matchInfoCache.forEach((match, i) => {\n                    if (match.column === activeInfo.column &&\n                        match.row === activeInfo.row &&\n                        match.index === activeInfo.index) {\n                        this.lastSearchInfo.activeMatchIndex = i;\n                    }\n                });\n            }\n\n            return this.find(this.lastSearchInfo.searchText, 0, this.lastSearchInfo.caseSensitive, this.lastSearchInfo.exactMatch, false);\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Removes all the highlights in the cell.\n     * ```typescript\n     * this.grid.clearSearch();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public clearSearch() {\n        this.lastSearchInfo = {\n            searchText: '',\n            caseSensitive: false,\n            exactMatch: false,\n            activeMatchIndex: 0,\n            matchInfoCache: []\n        };\n\n        this.rowList.forEach((row) => {\n            if (row.cells) {\n                row.cells.forEach((c) => {\n                    c.clearHighlight();\n                });\n            }\n        });\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has sortable columns.\n     * ```typescript\n     * const sortableGrid = this.grid.hasSortableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasSortableColumns(): boolean {\n        return this.columnList.some((col) => col.sortable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has editable columns.\n     * ```typescript\n     * const editableGrid = this.grid.hasEditableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasEditableColumns(): boolean {\n        return this.columnList.some((col) => col.editable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has fiterable columns.\n     * ```typescript\n     * const filterableGrid = this.grid.hasFilterableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasFilterableColumns(): boolean {\n        return this.columnList.some((col) => col.filterable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has summarized columns.\n     * ```typescript\n     * const summarizedGrid = this.grid.hasSummarizedColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasSummarizedColumns(): boolean {\n        return this.summaryService.hasSummarizedColumns;\n    }\n\n    /**\n     * @hidden\n     */\n    get rootSummariesEnabled(): boolean {\n        return this.summaryCalculationMode !== GridSummaryCalculationMode.childLevelsOnly;\n    }\n    /**\n     * Returns if the `IgxGridComponent` has moveable columns.\n     * ```typescript\n     * const movableGrid = this.grid.hasMovableColumns;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasMovableColumns(): boolean {\n        return this.columnList && this.columnList.some((col) => col.movable);\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has column groups.\n     * ```typescript\n     * const groupGrid = this.grid.hasColumnGroups;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get hasColumnGroups(): boolean {\n        return this._columnGroups;\n    }\n    /**\n     * Returns if the `IgxGridComponent` has column layouts for multi-row layout definition.\n     * ```typescript\n     * const layoutGrid = this.grid.hasColumnLayouts;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public get hasColumnLayouts() {\n        return !!this.columnList.some(col => col.columnLayout);\n    }\n\n    /**\n     * Returns an array of the selected `IgxGridCellComponent`s.\n     * ```typescript\n     * const selectedCells = this.grid.selectedCells;\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    get selectedCells(): IgxGridCellComponent[] | any[] {\n        if (this.dataRowList) {\n            return this.dataRowList.map((row) => row.cells.filter((cell) => cell.selected))\n                .reduce((a, b) => a.concat(b), []);\n        }\n        return [];\n    }\n\n    /**\n     * @hidden\n     */\n    get multiRowLayoutRowSize() {\n        return this._multiRowLayoutRowSize;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get rowBasedHeight() {\n        return this.dataLength * this.rowHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected get isPercentWidth() {\n        return this.width && this.width.indexOf('%') !== -1;\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public get isPercentHeight() {\n        return this._height && this._height.indexOf('%') !== -1;\n    }\n\n    /**\n     * @hidden\n     * Sets columns defaultWidth property\n     */\n    protected _derivePossibleWidth() {\n        if (!this.columnWidthSetByUser) {\n            this._columnWidth = this.getPossibleColumnWidth();\n            this.columnList.forEach((column: IgxColumnComponent) => {\n                if (this.hasColumnLayouts && parseInt(this._columnWidth, 10)) {\n                    const columnWidthCombined = parseInt(this._columnWidth, 10) * (column.colEnd ? column.colEnd - column.colStart : 1);\n                    column.defaultWidth = columnWidthCombined + 'px';\n                } else {\n                    column.defaultWidth = this._columnWidth;\n                    column.resetCaches();\n                }\n            });\n            this.resetCachedWidths();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected get defaultTargetBodyHeight(): number {\n        const allItems = this.dataLength;\n        return this.renderedRowHeight * Math.min(this._defaultTargetRecordNumber,\n            this.paging ? Math.min(allItems, this.perPage) : allItems);\n    }\n\n    /**\n     * @hidden @internal\n     * The rowHeight input is bound to min-height css prop of rows that adds a 1px border in all cases\n     */\n    public get renderedRowHeight(): number {\n        return this.rowHeight + 1;\n    }\n\n    /**\n     * @hidden\n     * Sets TBODY height i.e. this.calcHeight\n     */\n    protected calculateGridHeight() {\n        if (this.maxLevelHeaderDepth) {\n            this._baseFontSize = parseFloat(getComputedStyle(this.document.documentElement).getPropertyValue('font-size'));\n            let minSize = (this.maxLevelHeaderDepth + 1) * this.defaultRowHeight / this._baseFontSize;\n            if (this._allowFiltering && this._filterMode === FilterMode.quickFilter) {\n                minSize += (FILTER_ROW_HEIGHT + 1) / this._baseFontSize;\n            }\n            this.theadRow.nativeElement.style.minHeight = `${minSize}rem`;\n        }\n        this.summariesHeight = 0;\n        if (this.hasSummarizedColumns && this.rootSummariesEnabled) {\n            this.summariesHeight = this.summaryService.calcMaxSummaryHeight();\n        }\n\n        this.calcHeight = this._calculateGridBodyHeight();\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupAreaHeight(): number {\n        return 0;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getToolbarHeight(): number {\n        let toolbarHeight = 0;\n        if (this.showToolbar && this.toolbarHtml != null) {\n            toolbarHeight = this.toolbarHtml.nativeElement.firstElementChild ?\n                this.toolbarHtml.nativeElement.offsetHeight : 0;\n        }\n        return toolbarHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getPagingHeight(): number {\n        let pagingHeight = 0;\n        if (this.footer) {\n            pagingHeight = this.footer.nativeElement.firstElementChild ?\n                this.footer.nativeElement.offsetHeight : 0;\n        }\n        return pagingHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _calculateGridBodyHeight(): number {\n        if (!this._height) {\n            return null;\n        }\n        const footerBordersAndScrollbars = this.tfoot.nativeElement.offsetHeight -\n            this.tfoot.nativeElement.clientHeight;\n        let gridHeight;\n        const computed = this.document.defaultView.getComputedStyle(this.nativeElement);\n        const toolbarHeight = this.getToolbarHeight();\n        const pagingHeight = this.getPagingHeight();\n        const groupAreaHeight = this.getGroupAreaHeight();\n        const renderedHeight = toolbarHeight + this.theadRow.nativeElement.offsetHeight +\n            this.summariesHeight + pagingHeight + groupAreaHeight + footerBordersAndScrollbars +\n            this.scr.nativeElement.clientHeight;\n\n        if (this.isPercentHeight) {\n            /*height in %*/\n            if (!this.nativeElement.parentElement ||\n                this.nativeElement.parentElement.clientHeight === renderedHeight) {\n                /* parent element is sized by the rendered elements which means\n                the grid should attempt a content-box style rendering */\n                this._autoSize = true;\n            }\n            if (this._autoSize || computed.getPropertyValue('height').indexOf('%') !== -1) {\n                const bodyHeight = this.getDataBasedBodyHeight();\n                return bodyHeight > 0 ? bodyHeight : null;\n            }\n            gridHeight = parseInt(computed.getPropertyValue('height'), 10);\n        } else {\n            gridHeight = parseInt(this._height, 10);\n        }\n        const height = Math.abs(gridHeight - renderedHeight);\n\n        if (height === 0 || isNaN(gridHeight)) {\n            const bodyHeight = this.defaultTargetBodyHeight;\n            return bodyHeight > 0 ? bodyHeight : null;\n        }\n\n        return height;\n    }\n\n    public get outerWidth() {\n        return this.hasVerticalSroll() ? this.calcWidth + this.scrollWidth : this.calcWidth;\n    }\n\n    /**\n     * @hidden\n     * Gets the visible content height that includes header + tbody + footer.\n     */\n    public getVisibleContentHeight() {\n        let height = this.theadRow.nativeElement.clientHeight + this.tbody.nativeElement.clientHeight;\n        if (this.hasSummarizedColumns) {\n            height += this.tfoot.nativeElement.clientHeight;\n        }\n        return height;\n    }\n\n    /**\n     * @hidden\n     */\n    public getPossibleColumnWidth(baseWidth: number = null) {\n        let computedWidth;\n        if (baseWidth !== null) {\n            computedWidth = baseWidth;\n        } else {\n            computedWidth = this.calcWidth ||\n                parseInt(this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width'), 10);\n        }\n\n        if (this.showRowCheckboxes) {\n            computedWidth -= this.headerCheckboxContainer ? this.headerCheckboxContainer.nativeElement.offsetWidth : 0;\n        }\n\n        const visibleChildColumns = this.visibleColumns.filter(c => !c.columnGroup);\n\n\n        // Column layouts related\n        let visibleCols = [];\n        const columnBlocks = this.visibleColumns.filter(c => c.columnGroup);\n        const colsPerBlock = columnBlocks.map(block => block.getInitialChildColumnSizes(block.children));\n        const combinedBlocksSize = colsPerBlock.reduce((acc, item) => acc + item.length, 0);\n        colsPerBlock.forEach(blockCols => visibleCols = visibleCols.concat(blockCols));\n        //\n\n        const columnsWithSetWidths = this.hasColumnLayouts ?\n            visibleCols.filter(c => c.widthSetByUser) :\n            visibleChildColumns.filter(c => c.widthSetByUser);\n\n        const columnsToSize = this.hasColumnLayouts ?\n            combinedBlocksSize - columnsWithSetWidths.length :\n            visibleChildColumns.length - columnsWithSetWidths.length;\n\n        const sumExistingWidths = columnsWithSetWidths\n            .reduce((prev, curr) => {\n                const colWidth = curr.width;\n                const widthValue = parseInt(colWidth, 10);\n                const currWidth = colWidth && typeof colWidth === 'string' && colWidth.indexOf('%') !== -1 ?\n                    widthValue / 100 * computedWidth :\n                    widthValue;\n                return prev + currWidth;\n            }, 0);\n\n        const columnWidth = Math.floor(!Number.isFinite(sumExistingWidths) ?\n            Math.max(computedWidth / columnsToSize, MINIMUM_COLUMN_WIDTH) :\n            Math.max((computedWidth - sumExistingWidths) / columnsToSize, MINIMUM_COLUMN_WIDTH));\n\n        return columnWidth.toString();\n    }\n\n    /**\n     * @hidden\n     * Sets grid width i.e. this.calcWidth\n     */\n    protected calculateGridWidth() {\n        let width;\n        const computed = this.document.defaultView.getComputedStyle(this.nativeElement);\n        const el = this.document.getElementById(this.nativeElement.id);\n\n        if (this.isPercentWidth) {\n            /* width in %*/\n            width = computed.getPropertyValue('width').indexOf('%') === -1 ?\n                parseInt(computed.getPropertyValue('width'), 10) : null;\n        } else {\n            width = parseInt(this.width, 10);\n        }\n\n        if (!width && el) {\n            width = el.offsetWidth;\n        }\n\n\n        if (!width) {\n            width = this.columnList.reduce((sum, item) => sum + parseInt((item.width || item.defaultWidth), 10), 0);\n        }\n\n        if (this.hasVerticalSroll()) {\n            width -= this.scrollWidth;\n        }\n        if (Number.isFinite(width) && width !== this.calcWidth) {\n            this.calcWidth = width;\n            this.cdr.detectChanges();\n        }\n        this._derivePossibleWidth();\n    }\n\n    public hasVerticalSroll() {\n        if (!this._ngAfterViewInitPassed) { return false; }\n        const isScrollable = this.verticalScrollContainer.isScrollable();\n        return !!(this.calcWidth && this.verticalScrollContainer.igxForOf &&\n            this.verticalScrollContainer.igxForOf.length > 0 &&\n            isScrollable);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected getDataBasedBodyHeight(): number {\n        return !this.data || (this.data.length < this._defaultTargetRecordNumber) ?\n            0 : this.defaultTargetBodyHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected onColumnsChanged(change: QueryList<IgxColumnComponent>) {\n        const diff = this.columnListDiffer.diff(change);\n        if (diff) {\n            let added = false;\n            let removed = false;\n\n            this.initColumns(this.columnList);\n\n\n            diff.forEachAddedItem((record: IterableChangeRecord<IgxColumnComponent>) => {\n                this.onColumnInit.emit(record.item);\n                added = true;\n            });\n\n            diff.forEachRemovedItem((record: IterableChangeRecord<IgxColumnComponent>) => {\n                // Clear Filtering\n                this.gridAPI.clear_filter(record.item.field);\n\n                // Clear Sorting\n                this.gridAPI.clear_sort(record.item.field);\n                removed = true;\n            });\n\n            this.resetCaches();\n\n            if (added || removed) {\n                this.summaryService.clearSummaryCache();\n                this.calculateGridSizes();\n            }\n        }\n        this.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    protected calculateGridSizes() {\n        /*\n            TODO: (R.K.) This layered lasagne should be refactored\n            ASAP. The reason I have to reset the caches so many times is because\n            after teach `detectChanges` call they are filled with invalid\n            state. Of course all of this happens midway through the grid\n            sizing process which of course, uses values from the caches, thus resulting\n            in a broken layout.\n        */\n        this.resetCaches();\n        const hasScroll = this.hasVerticalSroll();\n        this.calculateGridWidth();\n        this.resetCaches();\n        this.cdr.detectChanges();\n        this.calculateGridHeight();\n\n        if (this.rowEditable) {\n            this.repositionRowEditingOverlay(this.rowInEditMode);\n        }\n\n        if (this.filteringService.isFilterRowVisible) {\n            this.filteringRow.resetChipsArea();\n        }\n\n        this.cdr.detectChanges();\n        this.resetCaches();\n        // in case scrollbar has appeared recalc to size correctly.\n        if (hasScroll !== this.hasVerticalSroll()) {\n            this.calculateGridWidth();\n            this.cdr.detectChanges();\n            this.resetCaches();\n        }\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * Method used to override the calculations.\n     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public getFeatureColumnsWidth() {\n        let width = 0;\n\n        if (this.headerCheckboxContainer) {\n            width += this.headerCheckboxContainer.nativeElement.getBoundingClientRect().width;\n        }\n        if (this.headerDragContainer) {\n            width += this.headerDragContainer.nativeElement.getBoundingClientRect().width;\n        }\n        return width;\n    }\n\n    /**\n     * Gets calculated width of the pinned area.\n     * ```typescript\n     * const pinnedWidth = this.grid.getPinnedWidth();\n     * ```\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxGridBaseComponent\n     */\n    public getPinnedWidth(takeHidden = false) {\n        const fc = takeHidden ? this._pinnedColumns : this.pinnedColumns;\n        let sum = 0;\n        for (const col of fc) {\n            if (col.level === 0) {\n                sum += parseInt(col.calcWidth, 10);\n            }\n        }\n        sum += this.featureColumnsWidth;\n\n        return sum;\n    }\n\n    /**\n     * @hidden\n     * Gets calculated width of the unpinned area\n     * @param takeHidden If we should take into account the hidden columns in the pinned area.\n     * @memberof IgxGridBaseComponent\n     */\n    protected getUnpinnedWidth(takeHidden = false) {\n        let width = this.isPercentWidth ?\n            this.calcWidth :\n            parseInt(this.width, 10);\n        if (this.hasVerticalSroll() && !this.isPercentWidth) {\n            width -= this.scrollWidth;\n        }\n        return width - this.getPinnedWidth(takeHidden);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _summaries(fieldName: string, hasSummary: boolean, summaryOperand?: any) {\n        const column = this.gridAPI.get_column_by_name(fieldName);\n        if (column) {\n            column.hasSummary = hasSummary;\n            if (summaryOperand) {\n                if (this.rootSummariesEnabled) { this.summaryService.retriggerRootPipe++; }\n                column.summaries = summaryOperand;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected _multipleSummaries(expressions: ISummaryExpression[], hasSummary: boolean) {\n        expressions.forEach((element) => {\n            this._summaries(element.fieldName, hasSummary, element.customSummary);\n        });\n    }\n    /**\n     * @hidden\n     */\n    protected _disableMultipleSummaries(expressions) {\n        expressions.forEach((column) => {\n            const columnName = column && column.fieldName ? column.fieldName : column;\n            this._summaries(columnName, false);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveDataTypes(rec) {\n        if (typeof rec === 'number') {\n            return DataType.Number;\n        } else if (typeof rec === 'boolean') {\n            return DataType.Boolean;\n        } else if (typeof rec === 'object' && rec instanceof Date) {\n            return DataType.Date;\n        }\n        return DataType.String;\n    }\n\n    private getScrollWidth() {\n        const div = document.createElement('div');\n        const style = div.style;\n        style.width = '100px';\n        style.height = '100px';\n        style.position = 'absolute';\n        style.top = '-10000px';\n        style.top = '-10000px';\n        style.overflow = 'scroll';\n        document.body.appendChild(div);\n        const scrollWidth = div.offsetWidth - div.clientWidth;\n        document.body.removeChild(div);\n        return scrollWidth;\n    }\n\n    /**\n     * @hidden\n     */\n    protected autogenerateColumns() {\n        const data = this.gridAPI.get_data();\n        const factory = this.resolver.resolveComponentFactory(IgxColumnComponent);\n        const fields = this.generateDataFields(data);\n        const columns = [];\n\n        fields.forEach((field) => {\n            const ref = this.viewRef.createComponent(factory, null, this.viewRef.injector);\n            ref.instance.field = field;\n            ref.instance.dataType = this.resolveDataTypes(data[0][field]);\n            ref.changeDetectorRef.detectChanges();\n            columns.push(ref.instance);\n        });\n\n        this.columnList.reset(columns);\n        if (data && data.length > 0) {\n            this.shouldGenerate = false;\n        }\n    }\n\n    protected generateDataFields(data: any[]): string[] {\n        return Object.keys(data && data.length !== 0 ? data[0] : []);\n    }\n\n    /**\n     * @hidden\n     */\n    onlyTopLevel(arr) {\n        return arr.filter(c => c.level === 0);\n    }\n\n    /**\n     * @hidden\n     */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        // XXX: Deprecate index\n        this._columnGroups = this.columnList.some(col => col.columnGroup);\n        if (this.hasColumnLayouts) {\n            // Set overall row layout size\n            this.columnList.forEach((col) => {\n                if (col.columnLayout) {\n                    const layoutSize = col.children ?\n                        col.children.reduce((acc, val) => Math.max(val.rowStart + val.gridRowSpan - 1, acc), 1) :\n                        1;\n                    this._multiRowLayoutRowSize = Math.max(layoutSize, this._multiRowLayoutRowSize);\n                }\n            });\n        }\n        if (this.hasColumnLayouts && this.hasColumnGroups) {\n            // invalid configuration - multi-row and column groups\n            // remove column groups\n            const columnLayoutColumns = this.columnList.filter((col) => col.columnLayout || col.columnLayoutChild);\n            this.columnList.reset(columnLayoutColumns);\n        }\n        this._maxLevelHeaderDepth = null;\n        this._columns = this.columnList.toArray();\n        collection.forEach((column: IgxColumnComponent) => {\n            column.grid = this;\n            column.defaultWidth = this.columnWidth;\n\n            if (cb) {\n                cb(column);\n            }\n        });\n\n        this.reinitPinStates();\n\n        if (this.hasColumnLayouts) {\n            collection.forEach((column: IgxColumnComponent) => {\n                column.populateVisibleIndexes();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected reinitPinStates() {\n        this._pinnedColumns = (this.hasColumnGroups) ? this.columnList.filter((c) => c.pinned) :\n            this.columnList.filter((c) => c.pinned).sort((a, b) => this._pinnedColumns.indexOf(a) - this._pinnedColumns.indexOf(b));\n        this._unpinnedColumns = this.columnList.filter((c) => !c.pinned);\n    }\n\n    /**\n     * @hidden\n     */\n    public isColumnGrouped(fieldName: string): boolean {\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    public onHeaderCheckboxClick(event, filteredData) {\n        this.allRowsSelected = event.checked;\n        const newSelection =\n            event.checked ?\n                filteredData ?\n                    this.selection.add_items(this.id, this.selection.get_all_ids(filteredData, this.primaryKey)) :\n                    this.selection.get_all_ids(this.gridAPI.get_all_data(true), this.primaryKey) :\n                filteredData ?\n                    this.selection.delete_items(this.id, this.selection.get_all_ids(filteredData, this.primaryKey)) :\n                    this.selection.get_empty();\n        this.triggerRowSelectionChange(newSelection, null, event, event.checked);\n        this.checkHeaderCheckboxStatus(event.checked);\n    }\n\n    /**\n     * @hidden\n     */\n    get headerCheckboxAriaLabel() {\n        return this._filteringExpressionsTree.filteringOperands.length > 0 ?\n            this.headerCheckbox && this.headerCheckbox.checked ? 'Deselect all filtered' : 'Select all filtered' :\n            this.headerCheckbox && this.headerCheckbox.checked ? 'Deselect all' : 'Select all';\n    }\n\n    /**\n     * @hidden\n     */\n    public checkHeaderCheckboxStatus(headerStatus?: boolean) {\n        if (headerStatus === undefined) {\n            const filteredData = this.filteringService.filteredData;\n            const dataLength = filteredData ? filteredData.length : this.dataLength;\n            this.allRowsSelected = this.selection.are_all_selected(this.id, dataLength);\n            if (this.headerCheckbox) {\n                this.headerCheckbox.indeterminate = !this.allRowsSelected && !this.selection.are_none_selected(this.id);\n                if (!this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.checked =\n                        this.allRowsSelected;\n                }\n            }\n            this.cdr.markForCheck();\n        } else if (this.headerCheckbox) {\n            this.headerCheckbox.checked = headerStatus !== undefined ? headerStatus : false;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public filteredItemsStatus(componentID: string, filteredData: any[], primaryKey?) {\n        const currSelection = this.selection.get(componentID);\n        let atLeastOneSelected = false;\n        let notAllSelected = false;\n        if (currSelection) {\n            for (const key of Object.keys(filteredData)) {\n                const dataItem = primaryKey ? filteredData[key][primaryKey] : filteredData[key];\n                if (currSelection.has(dataItem)) {\n                    atLeastOneSelected = true;\n                    if (notAllSelected) {\n                        return 'indeterminate';\n                    }\n                } else {\n                    notAllSelected = true;\n                    if (atLeastOneSelected) {\n                        return 'indeterminate';\n                    }\n                }\n            }\n        }\n        return atLeastOneSelected ? 'allSelected' : 'noneSelected';\n    }\n\n    /**\n     * @hidden\n     */\n    public updateHeaderCheckboxStatusOnFilter(data) {\n        if (!data) {\n            this.checkHeaderCheckboxStatus();\n            return;\n        }\n        switch (this.filteredItemsStatus(this.id, data, this.primaryKey)) {\n            case 'allSelected': {\n                if (!this.allRowsSelected) {\n                    this.allRowsSelected = true;\n                }\n                if (this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.indeterminate = false;\n                }\n                break;\n            }\n            case 'noneSelected': {\n                if (this.allRowsSelected) {\n                    this.allRowsSelected = false;\n                }\n                if (this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.indeterminate = false;\n                }\n                break;\n            }\n            default: {\n                if (!this.headerCheckbox.indeterminate) {\n                    this.headerCheckbox.indeterminate = true;\n                }\n                if (this.allRowsSelected) {\n                    this.allRowsSelected = false;\n                }\n                break;\n            }\n        }\n    }\n\n    /**\n     * Get current selection state.\n     * Returns an array with selected rows' IDs (primaryKey or rowData)\n     * ```typescript\n     * const selectedRows = this.grid.selectedRows();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public selectedRows(): any[] {\n        let selection: Set<any>;\n        selection = this.selection.get(this.id);\n        return selection ? Array.from(selection) : [];\n    }\n\n    /**\n     * Select specified rows by ID.\n     * ```typescript\n     * this.grid.selectRows([1,2,5], true);\n     * ```\n     * @param rowIDs\n     * @param clearCurrentSelection if true clears the current selection\n     * @memberof IgxGridBaseComponent\n     */\n    public selectRows(rowIDs: any[], clearCurrentSelection?: boolean) {\n        let newSelection: Set<any>;\n        let selectableRows = [];\n        if (this.transactions.enabled) {\n            selectableRows = rowIDs.filter(e => !this.gridAPI.row_deleted_transaction(e));\n        } else {\n            selectableRows = rowIDs;\n        }\n        newSelection = this.selection.add_items(this.id, selectableRows, clearCurrentSelection);\n        this.triggerRowSelectionChange(newSelection);\n    }\n\n    /**\n     * Deselect specified rows by ID.\n     * ```typescript\n     * this.grid.deselectRows([1,2,5]);\n     * ```\n     * @param rowIDs\n     * @memberof IgxGridBaseComponent\n     */\n    public deselectRows(rowIDs: any[]) {\n        let newSelection: Set<any>;\n        newSelection = this.selection.delete_items(this.id, rowIDs);\n        this.triggerRowSelectionChange(newSelection);\n    }\n\n    /**\n     * Selects all rows\n     * Note: If filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     * ```typescript\n     * this.grid.selectAllRows();\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public selectAllRows() {\n        this.triggerRowSelectionChange(this.selection.get_all_ids(this.gridAPI.get_all_data(true), this.primaryKey));\n    }\n\n    /**\n     * Deselects all rows\n     * ```typescript\n     * this.grid.deselectAllRows();\n     * ```\n     * Note: If filtering is in place, selectAllRows() and deselectAllRows() select/deselect all filtered rows.\n     */\n    public deselectAllRows() {\n        this.triggerRowSelectionChange(this.selection.get_empty());\n    }\n\n    clearCellSelection(): void {\n        this.selectionService.clear();\n        this.selectionService.activeElement = null;\n        this.cdr.markForCheck();\n    }\n\n    dragScroll(dir: DragScrollDirection): void {\n        const scrollDelta = 48;\n        const horizontal = this.parentVirtDir.getHorizontalScroll();\n        const vertical = this.verticalScrollContainer.getVerticalScroll();\n        switch (dir) {\n            case DragScrollDirection.LEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                break;\n            case DragScrollDirection.RIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                break;\n            case DragScrollDirection.TOP:\n                vertical.scrollTop -= scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOM:\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOMLEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.BOTTOMRIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                vertical.scrollTop += scrollDelta;\n                break;\n            case DragScrollDirection.TOPLEFT:\n                horizontal.scrollLeft -= scrollDelta;\n                vertical.scrollTop -= scrollDelta;\n                break;\n            case DragScrollDirection.TOPRIGHT:\n                horizontal.scrollLeft += scrollDelta;\n                vertical.scrollTop -= scrollDelta;\n                break;\n            default:\n                return;\n        }\n        this.wheelHandler();\n    }\n\n    isDefined(arg: any): boolean {\n        return arg !== undefined && arg !== null;\n    }\n\n    selectRange(arg: GridSelectionRange | GridSelectionRange[] | null | undefined): void {\n        if (!this.isDefined(arg)) {\n            this.clearCellSelection();\n            return;\n        }\n        if (arg instanceof Array) {\n            arg.forEach(range => this.setSelection(range));\n        } else {\n            this.setSelection(arg);\n        }\n        this.cdr.markForCheck();\n    }\n\n    columnToVisibleIndex(field: string | number): number {\n        const visibleColumns = this.visibleColumns;\n        if (typeof field === 'number') {\n            return field;\n        }\n        return visibleColumns.find(column => column.field === field).visibleIndex;\n    }\n\n\n    setSelection(range: GridSelectionRange): void {\n        const startNode = { row: range.rowStart, column: this.columnToVisibleIndex(range.columnStart) };\n        const endNode = { row: range.rowEnd, column: this.columnToVisibleIndex(range.columnEnd) };\n\n        this.selectionService.pointerState.node = startNode;\n        this.selectionService.selectRange(endNode, this.selectionService.pointerState);\n        this.selectionService.addRangeMeta(endNode, this.selectionService.pointerState);\n        this.selectionService.initPointerState();\n    }\n\n    getSelectedRanges(): GridSelectionRange[] {\n        return this.selectionService.ranges;\n    }\n\n\n    protected extractDataFromSelection(source: any[], formatters = false, headers = false): any[] {\n        let columnsArray: IgxColumnComponent[];\n        let record = {};\n        const selectedData = [];\n\n        const selectionMap = Array.from(this.selectionService.selection)\n            .filter((tuple) => tuple[0] < source.length);\n\n\n        for (const [row, set] of selectionMap) {\n            if (!source[row]) {\n                continue;\n            }\n            const temp = Array.from(set);\n            for (const each of temp) {\n                columnsArray = this.getSelectableColumnsAt(each);\n                columnsArray.forEach((col) => {\n                    if (col) {\n                        const key = headers ? col.header || col.field : col.field;\n                        record[key] = formatters && col.formatter ? col.formatter(source[row][col.field])\n                        : source[row][col.field];\n                    }\n                });\n            }\n            if (Object.keys(record).length) {\n                selectedData.push(record);\n            }\n            record = {};\n        }\n        return selectedData;\n    }\n\n    protected getSelectableColumnsAt(index) {\n        if (this.hasColumnLayouts) {\n            const visibleLayoutColumns = this.visibleColumns\n            .filter(col => col.columnLayout)\n            .sort((a, b) => a.visibleIndex - b.visibleIndex);\n            const colLayout = visibleLayoutColumns[index];\n            return colLayout ? colLayout.children.toArray() : [];\n        } else {\n            const visibleColumns = this.visibleColumns\n            .filter(col => !col.columnGroup)\n            .sort((a, b) => a.visibleIndex - b.visibleIndex);\n            return [ visibleColumns[index] ];\n        }\n    }\n\n    /**\n     *\n     * Returns an array of the current cell selection in the form of `[{ column.field: cell.value }, ...]`.\n     * If `formatters` is enabled, the cell value will be formatted by its respective column formatter (if any).\n     * If `headers` is enabled, it will use the column header (if any) instead of the column field.\n     */\n    getSelectedData(formatters = false, headers = false) {\n        const source = this.verticalScrollContainer.igxForOf;\n        return this.extractDataFromSelection(source, formatters, headers);\n    }\n\n    /**\n     * @hidden\n     */\n    public triggerRowSelectionChange(newSelectionAsSet: Set<any>, row?: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>,\n        event?: Event, headerStatus?: boolean) {\n        const oldSelectionAsSet = this.selection.get(this.id);\n        const oldSelection = oldSelectionAsSet ? Array.from(oldSelectionAsSet) : [];\n        const newSelection = newSelectionAsSet ? Array.from(newSelectionAsSet) : [];\n        const args: IRowSelectionEventArgs = { oldSelection, newSelection, row, event };\n        this.onRowSelectionChange.emit(args);\n        newSelectionAsSet = this.selection.get_empty();\n        for (let i = 0; i < args.newSelection.length; i++) {\n            newSelectionAsSet.add(args.newSelection[i]);\n        }\n        this.selection.set(this.id, newSelectionAsSet);\n        this.checkHeaderCheckboxStatus(headerStatus);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollHandler(event) {\n        this.parentVirtDir.getHorizontalScroll().scrollLeft += event.target.scrollLeft;\n        this.verticalScrollContainer.getVerticalScroll().scrollTop += event.target.scrollTop;\n        event.target.scrollLeft = 0;\n        event.target.scrollTop = 0;\n    }\n\n    copyHandlerIE() {\n        if (isIE()) {\n            this.copyHandler(null, true);\n        }\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public copyHandler(event, ie11 = false) {\n        if (!this.clipboardOptions.enabled || this.crudService.inEditMode) {\n            return;\n        }\n\n        const data = this.getSelectedData(this.clipboardOptions.copyFormatters, this.clipboardOptions.copyHeaders);\n        const ev = { data, cancel: false } as IGridClipboardEvent;\n        this.onGridCopy.emit(ev);\n\n        if (ev.cancel) {\n             return;\n        }\n\n        const transformer = new CharSeparatedValueData(ev.data, this.clipboardOptions.separator);\n        let result = transformer.prepareData();\n\n        if (!this.clipboardOptions.copyHeaders) {\n            result = result.substring(result.indexOf('\\n') + 1);\n        }\n\n        if (ie11) {\n            (window as any).clipboardData.setData('Text', result);\n            return;\n        }\n\n        event.preventDefault();\n\n        /* Necessary for the hiearachical case but will probably have to\n           change how getSelectedData is propagated in the hiearachical grid\n        */\n        event.stopPropagation();\n        event.clipboardData.setData('text/plain', result);\n    }\n\n    /**\n     * This method allows you to navigate to a position\n     * in the grid based on provided `rowindex` and `visibleColumnIndex`,\n     * also to execute a custom logic over the target element,\n     * through a callback function that accepts { targetType: GridKeydownTargetType, target: Object }\n     * ```typescript\n     *  this.grid.navigateTo(10, 3, (args) => { args.target.nativeElement.focus(); });\n     * ```\n\t * @memberof IgxGridBaseComponent\n     */\n    public navigateTo(rowIndex: number, visibleColIndex = -1, cb: Function = null) {\n        if (rowIndex < 0 || rowIndex > this.verticalScrollContainer.igxForOf.length - 1\n            || (visibleColIndex !== -1 && this.columnList.map(col => col.visibleIndex).indexOf(visibleColIndex) === -1)) {\n            return;\n        }\n        this.wheelHandler();\n        if (this.verticalScrollContainer.igxForOf.slice(rowIndex, rowIndex + 1).find(rec => rec.expression || rec.childGridsData)) {\n            visibleColIndex = -1;\n        }\n        if (visibleColIndex === -1 || this.navigation.isColumnFullyVisible(visibleColIndex)) {\n            if (this.navigation.shouldPerformVerticalScroll(rowIndex, visibleColIndex)) {\n                this.navigation.performVerticalScrollToCell(rowIndex, visibleColIndex,\n                    () => { this.executeCallback(rowIndex, visibleColIndex, cb); });\n            } else {\n                this.executeCallback(rowIndex, visibleColIndex, cb);\n            }\n        } else {\n            this.navigation.performHorizontalScrollToCell(rowIndex, visibleColIndex, false,\n                () => { this.executeCallback(rowIndex, visibleColIndex, cb); });\n        }\n    }\n\n    /**\n    * Returns `ICellPosition` which defines the next cell,\n    * according to the current position, that match specific criteria.\n    * You can pass callback function as a third parameter of `getPreviousCell` method.\n    * The callback function accepts IgxColumnComponent as a param\n    * ```typescript\n    *  const nextEditableCellPosition = this.grid.getNextCell(0, 3, (column) => column.editable);\n    * ```\n    * @memberof IgxGridBaseComponent\n    */\n    public getNextCell(currRowIndex: number, curVisibleColIndex: number,\n        callback: (IgxColumnComponent) => boolean = null): ICellPosition {\n        const columns = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0);\n\n        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n        }\n        const colIndexes = callback ? columns.filter((col) => callback(col)).map(editCol => editCol.visibleIndex).sort((a, b) => a - b) :\n            columns.map(editCol => editCol.visibleIndex).sort((a, b) => a - b);\n        const nextCellIndex = colIndexes.find(index => index > curVisibleColIndex);\n        if (this.verticalScrollContainer.igxForOf.slice(currRowIndex, currRowIndex + 1)\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData) && nextCellIndex !== undefined) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: nextCellIndex };\n        } else {\n            if (colIndexes.length === 0 || this.getNextDataRowIndex(currRowIndex) === currRowIndex) {\n                return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n            } else {\n                return { rowIndex: this.getNextDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0] };\n            }\n        }\n    }\n\n    /**\n    * Returns `ICellPosition` which defines the previous cell,\n    * according to the current position, that match specific criteria.\n    * You can pass callback function as a third parameter of `getPreviousCell` method.\n    * The callback function accepts IgxColumnComponent as a param\n    * ```typescript\n    *  const previousEditableCellPosition = this.grid.getPreviousCell(0, 3, (column) => column.editable);\n    * ```\n    * @memberof IgxGridBaseComponent\n    */\n    public getPreviousCell(currRowIndex: number, curVisibleColIndex: number,\n        callback: (IgxColumnComponent) => boolean = null): ICellPosition {\n        const columns = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0);\n\n        if (!this.isValidPosition(currRowIndex, curVisibleColIndex)) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n        }\n        const colIndexes = callback ? columns.filter((col) => callback(col)).map(editCol => editCol.visibleIndex).sort((a, b) => b - a) :\n            columns.map(editCol => editCol.visibleIndex).sort((a, b) => b - a);\n        const prevCellIndex = colIndexes.find(index => index < curVisibleColIndex);\n        if (this.verticalScrollContainer.igxForOf.slice(currRowIndex, currRowIndex + 1)\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData) && prevCellIndex !== undefined) {\n            return { rowIndex: currRowIndex, visibleColumnIndex: prevCellIndex };\n        } else {\n            if (colIndexes.length === 0 || this.getPrevDataRowIndex(currRowIndex) === currRowIndex) {\n                return { rowIndex: currRowIndex, visibleColumnIndex: curVisibleColIndex };\n            } else {\n                return { rowIndex: this.getPrevDataRowIndex(currRowIndex), visibleColumnIndex: colIndexes[0] };\n            }\n        }\n    }\n\n    private executeCallback(rowIndex, visibleColIndex = -1, cb: Function = null) {\n        if (!cb) { return; }\n        let targetType, target;\n        const row = this.summariesRowList.filter(s => s.index !== 0).concat(this.rowList.toArray()).find(r => r.index === rowIndex);\n        if (!row) { return; }\n        switch (row.nativeElement.tagName.toLowerCase()) {\n            case 'igx-grid-groupby-row':\n                targetType = GridKeydownTargetType.groupRow;\n                target = row;\n                break;\n            case 'igx-grid-summary-row':\n                targetType = GridKeydownTargetType.summaryCell;\n                target = visibleColIndex !== -1 ?\n                    row.summaryCells.find(c => c.visibleColumnIndex === visibleColIndex) : row.summaryCells.first;\n                break;\n            case 'igx-child-grid-row':\n                targetType = GridKeydownTargetType.hierarchicalRow;\n                target = row;\n                break;\n            default:\n                targetType = GridKeydownTargetType.dataCell;\n                target = visibleColIndex !== -1 ? row.cells.find(c => c.visibleColumnIndex === visibleColIndex) : row.cells.first;\n                break;\n        }\n        const args = { targetType: targetType, target: target };\n        cb(args);\n    }\n\n    private getPrevDataRowIndex(currentRowIndex): number {\n        if (currentRowIndex <= 0) { return currentRowIndex; }\n\n        const prevRow = this.verticalScrollContainer.igxForOf.slice(0, currentRowIndex).reverse()\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData);\n        return prevRow ? this.verticalScrollContainer.igxForOf.indexOf(prevRow) : currentRowIndex;\n    }\n\n    private getNextDataRowIndex(currentRowIndex): number {\n        if (currentRowIndex === this.verticalScrollContainer.igxForOf.length) { return currentRowIndex; }\n\n        const nextRow = this.verticalScrollContainer.igxForOf.slice(currentRowIndex + 1, this.verticalScrollContainer.igxForOf.length)\n            .find(rec => !rec.expression && !rec.summaries && !rec.childGridsData);\n        return nextRow ? this.verticalScrollContainer.igxForOf.indexOf(nextRow) : currentRowIndex;\n    }\n\n    private isValidPosition(rowIndex, colIndex): boolean {\n        const rows = this.summariesRowList.filter(s => s.index !== 0).concat(this.rowList.toArray()).length;\n        const cols = this.columnList.filter(col => !col.columnGroup && col.visibleIndex >= 0).length;\n        if (rows < 1 || cols < 1) { return false; }\n        if (rowIndex > -1 && rowIndex < this.verticalScrollContainer.igxForOf.length &&\n            colIndex > - 1 && colIndex <= this.unpinnedColumns[this.unpinnedColumns.length - 1].visibleIndex) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @hidden\n     */\n    public wheelHandler(isScroll = false) {\n        if (document.activeElement &&\n            // tslint:disable-next-line:no-bitwise\n            (document.activeElement.compareDocumentPosition(this.tbody.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS ||\n                // tslint:disable-next-line:no-bitwise\n                (document.activeElement.compareDocumentPosition(this.tfoot.nativeElement) & Node.DOCUMENT_POSITION_CONTAINS && isScroll))) {\n            (document.activeElement as HTMLElement).blur();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public trackColumnChanges(index, col) {\n        return col.field + col._calcWidth;\n    }\n\n    private find(text: string, increment: number, caseSensitive?: boolean, exactMatch?: boolean, scroll?: boolean) {\n        if (!this.rowList) {\n            return 0;\n        }\n\n        this.endEdit(false);\n\n        if (!text) {\n            this.clearSearch();\n            return 0;\n        }\n\n        const caseSensitiveResolved = caseSensitive ? true : false;\n        const exactMatchResolved = exactMatch ? true : false;\n        let rebuildCache = false;\n\n        if (this.lastSearchInfo.searchText !== text ||\n            this.lastSearchInfo.caseSensitive !== caseSensitiveResolved ||\n            this.lastSearchInfo.exactMatch !== exactMatchResolved) {\n            this.lastSearchInfo = {\n                searchText: text,\n                activeMatchIndex: 0,\n                caseSensitive: caseSensitiveResolved,\n                exactMatch: exactMatchResolved,\n                matchInfoCache: []\n            };\n\n            rebuildCache = true;\n        } else {\n            this.lastSearchInfo.activeMatchIndex += increment;\n        }\n\n        if (rebuildCache) {\n            this.rowList.forEach((row) => {\n                if (row.cells) {\n                    row.cells.forEach((c) => {\n                        c.highlightText(text, caseSensitiveResolved, exactMatchResolved);\n                    });\n                }\n            });\n\n            this.rebuildMatchCache();\n        }\n\n        if (this.lastSearchInfo.activeMatchIndex >= this.lastSearchInfo.matchInfoCache.length) {\n            this.lastSearchInfo.activeMatchIndex = 0;\n        } else if (this.lastSearchInfo.activeMatchIndex < 0) {\n            this.lastSearchInfo.activeMatchIndex = this.lastSearchInfo.matchInfoCache.length - 1;\n        }\n\n        if (this.lastSearchInfo.matchInfoCache.length) {\n            const matchInfo = this.lastSearchInfo.matchInfoCache[this.lastSearchInfo.activeMatchIndex];\n            this.lastSearchInfo = { ...this.lastSearchInfo };\n\n            if (scroll !== false) {\n                this.scrollTo(matchInfo.row, matchInfo.column);\n            }\n\n            IgxTextHighlightDirective.setActiveHighlight(this.id, {\n                column: matchInfo.column,\n                row: matchInfo.row,\n                index: matchInfo.index,\n            });\n\n        } else {\n            IgxTextHighlightDirective.clearActiveHighlight(this.id);\n        }\n\n        return this.lastSearchInfo.matchInfoCache.length;\n    }\n\n    /**\n     * Returns an array containing the filtered sorted data.\n     * ```typescript\n     * const filteredSortedData = this.grid1.filteredSortedData;\n     * ```\n     * @memberof IgxGridBaseComponent\n     */\n    get filteredSortedData(): any[] {\n        return this._filteredSortedData;\n    }\n    set filteredSortedData(value: any[]) {\n        this._filteredSortedData = value;\n        this.refreshSearch(true);\n    }\n\n    /**\n     * @hidden\n     */\n    protected initPinning() {\n        let currentPinnedWidth = 0;\n        const pinnedColumns = [];\n        const unpinnedColumns = [];\n        const newUnpinnedCols = [];\n\n        this.calculateGridWidth();\n        this.resetCaches();\n        // When a column is a group or is inside a group, pin all related.\n        this._pinnedColumns.forEach(col => {\n            if (col.parent) {\n                col.parent.pinned = true;\n            }\n            if (col.columnGroup) {\n                col.children.forEach(child => child.pinned = true);\n            }\n        });\n\n        // Make sure we don't exceed unpinned area min width and get pinned and unpinned col collections.\n        // We take into account top level columns (top level groups and non groups).\n        // If top level is unpinned the pinning handles all children to be unpinned as well.\n        for (let i = 0; i < this._columns.length; i++) {\n            if (this._columns[i].pinned && !this._columns[i].parent) {\n                // Pinned column. Check if with it the unpinned min width is exceeded.\n                const colWidth = parseInt(this._columns[i].width, 10);\n                if (currentPinnedWidth + colWidth > this.calcWidth - this.unpinnedAreaMinWidth) {\n                    // unpinned min width is exceeded. Unpin the columns and add it to the unpinned collection.\n                    this._columns[i].pinned = false;\n                    unpinnedColumns.push(this._columns[i]);\n                    newUnpinnedCols.push(this._columns[i]);\n                } else {\n                    // unpinned min width is not exceeded. Keep it pinned and add it to the pinned collection.\n                    currentPinnedWidth += colWidth;\n                    pinnedColumns.push(this._columns[i]);\n                }\n            } else if (this._columns[i].pinned && this._columns[i].parent) {\n                if (this._columns[i].topLevelParent.pinned) {\n                    pinnedColumns.push(this._columns[i]);\n                } else {\n                    this._columns[i].pinned = false;\n                    unpinnedColumns.push(this._columns[i]);\n                }\n            } else {\n                unpinnedColumns.push(this._columns[i]);\n            }\n        }\n\n        if (newUnpinnedCols.length) {\n            console.warn(\n                'igxGrid - The pinned area exceeds maximum pinned width. ' +\n                'The following columns were unpinned to prevent further issues:' +\n                newUnpinnedCols.map(col => '\"' + col.header + '\"').toString() + '. For more info see our documentation.'\n            );\n        }\n\n        // Assign the applicaple collections.\n        this._pinnedColumns = pinnedColumns;\n        this._unpinnedColumns = unpinnedColumns;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number, inCollection = this.filteredSortedData): void {\n        let delayScrolling = false;\n\n        if (this.paging && typeof (row) !== 'number') {\n            const rowIndex = inCollection.indexOf(row);\n            const page = Math.floor(rowIndex / this.perPage);\n\n            if (this.page !== page) {\n                delayScrolling = true;\n                this.page = page;\n            }\n        }\n\n        if (delayScrolling) {\n            this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(() => {\n                this.scrollDirective(this.verticalScrollContainer,\n                    typeof (row) === 'number' ? row : this.verticalScrollContainer.igxForOf.indexOf(row));\n            });\n        } else {\n            this.scrollDirective(this.verticalScrollContainer,\n                typeof (row) === 'number' ? row : this.verticalScrollContainer.igxForOf.indexOf(row));\n        }\n\n        this.scrollToHorizontally(column);\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollToHorizontally(column: any | number) {\n        let columnIndex = typeof column === 'number' ? column : this.getColumnByName(column).visibleIndex;\n        const scrollRow = this.rowList.find(r => r.virtDirRow);\n        const virtDir = scrollRow ? scrollRow.virtDirRow : null;\n        if (this.pinnedColumns.length) {\n            if (columnIndex >= this.pinnedColumns.length) {\n                columnIndex -= this.pinnedColumns.length;\n                this.scrollDirective(virtDir, columnIndex);\n            }\n        } else {\n            this.scrollDirective(virtDir, columnIndex);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollDirective(directive: IgxGridForOfDirective<any>, goal: number): void {\n        if (!directive) {\n            return;\n        }\n        // directive.onChunkLoad.pipe(first())\n        //     .subscribe(() => requestAnimationFrame(() => this.cdr.detectChanges()));\n        directive.scrollTo(goal);\n    }\n\n    private rebuildMatchCache() {\n        this.lastSearchInfo.matchInfoCache = [];\n\n        const caseSensitive = this.lastSearchInfo.caseSensitive;\n        const exactMatch = this.lastSearchInfo.exactMatch;\n        const searchText = caseSensitive ? this.lastSearchInfo.searchText : this.lastSearchInfo.searchText.toLowerCase();\n        const data = this.filteredSortedData;\n        const columnItems = this.visibleColumns.filter((c) => !c.columnGroup).sort((c1, c2) => c1.visibleIndex - c2.visibleIndex);\n\n        const numberPipe = new IgxDecimalPipeComponent(this.locale);\n        const datePipe = new IgxDatePipeComponent(this.locale);\n        data.forEach((dataRow) => {\n            columnItems.forEach((c) => {\n                const value = c.formatter ? c.formatter(dataRow[c.field]) :\n                    c.dataType === 'number' ? numberPipe.transform(dataRow[c.field], this.locale) :\n                        c.dataType === 'date' ? datePipe.transform(dataRow[c.field], this.locale)\n                            : dataRow[c.field];\n                if (value !== undefined && value !== null && c.searchable) {\n                    let searchValue = caseSensitive ? String(value) : String(value).toLowerCase();\n\n                    if (exactMatch) {\n                        if (searchValue === searchText) {\n                            this.lastSearchInfo.matchInfoCache.push({\n                                row: dataRow,\n                                column: c.field,\n                                index: 0,\n                            });\n                        }\n                    } else {\n                        let occurenceIndex = 0;\n                        let searchIndex = searchValue.indexOf(searchText);\n\n                        while (searchIndex !== -1) {\n                            this.lastSearchInfo.matchInfoCache.push({\n                                row: dataRow,\n                                column: c.field,\n                                index: occurenceIndex++,\n                            });\n\n                            searchValue = searchValue.substring(searchIndex + searchText.length);\n                            searchIndex = searchValue.indexOf(searchText);\n                        }\n                    }\n                }\n            });\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public isExpandedGroup(_group: IGroupByRecord): boolean {\n        return undefined;\n    }\n\n    protected changeRowEditingOverlayStateOnScroll(row: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>) {\n        if (!this.rowEditable || !this.rowEditingOverlay || this.rowEditingOverlay.collapsed) {\n            return;\n        }\n        if (!row) {\n            this.toggleRowEditingOverlay(false);\n        } else {\n            this.repositionRowEditingOverlay(row);\n        }\n    }\n\n    openRowOverlay(id) {\n        this.configureRowEditingOverlay(id, this.rowList.length <= MIN_ROW_EDITING_COUNT_THRESHOLD);\n\n        this.rowEditingOverlay.open(this.rowEditSettings);\n        this.rowEditPositioningStrategy.isTopInitialPosition = this.rowEditPositioningStrategy.isTop;\n        this._wheelListener = this.rowEditingWheelHandler.bind(this);\n        this.rowEditingOverlay.element.addEventListener('wheel', this._wheelListener);\n    }\n\n    /**\n     * @hidden\n     */\n    public closeRowEditingOverlay() {\n        this.rowEditingOverlay.element.removeEventListener('wheel', this._wheelListener);\n        this.rowEditPositioningStrategy.isTopInitialPosition = null;\n        this.rowEditingOverlay.close();\n        this.rowEditingOverlay.element.parentElement.style.display = '';\n    }\n\n    /**\n     * @hidden\n     */\n    public toggleRowEditingOverlay(show) {\n        const rowStyle = this.rowEditingOverlay.element.style;\n        if (show) {\n            rowStyle.display = 'block';\n        } else {\n            rowStyle.display = 'none';\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public repositionRowEditingOverlay(row: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>) {\n        if (!this.rowEditingOverlay.collapsed) {\n            const rowStyle = this.rowEditingOverlay.element.parentElement.style;\n            if (row) {\n                rowStyle.display = '';\n                this.configureRowEditingOverlay(row.rowID);\n                this.rowEditingOverlay.reposition();\n            } else {\n                rowStyle.display = 'none';\n            }\n        }\n    }\n\n    private configureRowEditingOverlay(rowID: any, useOuter = false) {\n        this.rowEditSettings.outlet = useOuter ? this.parentRowOutletDirective : this.rowOutletDirective;\n        this.rowEditPositioningStrategy.settings.container = this.tbody.nativeElement;\n        const targetRow = this.gridAPI.get_row_by_key(rowID);\n        if (!targetRow) {\n            return;\n        }\n        this.rowEditPositioningStrategy.settings.target = targetRow.element.nativeElement;\n        this.toggleRowEditingOverlay(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public get rowChangesCount() {\n        if (!this.crudService.row) {\n            return 0;\n        }\n        const rowChanges = this.transactions.getAggregatedValue(this.crudService.row.id, false);\n        return rowChanges ? Object.keys(rowChanges).length : 0;\n    }\n\n    protected writeToData(rowIndex: number, value: any) {\n        mergeObjects(this.gridAPI.get_all_data()[rowIndex], value);\n    }\n\n    endRowTransaction(commit: boolean, row: IgxRow) {\n        row.newData = this.transactions.getAggregatedValue(row.id, true);\n\n        let args = row.createEditEventArgs();\n\n        if (!commit) {\n            this.onRowEditCancel.emit(args);\n            this.transactions.endPending(false);\n        } else {\n            args = this.gridAPI.update_row(row, row.newData);\n        }\n        if (args.cancel) {\n            this.transactions.startPending();\n            return;\n        }\n        this.crudService.endRowEdit();\n        this.closeRowEditingOverlay();\n    }\n\n    // TODO: Refactor\n    /**\n     * Finishes the row transactions on the current row.\n     * If `commit === true`, passes them from the pending state to the data (or transaction service)\n     *\n     * Binding to the event\n     * ```html\n     * <button igxButton (click)=\"grid.endEdit(true)\">Commit Row</button>\n     * ```\n     * @param commit\n     */\n    public endEdit(commit = true, event?: Event) {\n        const row = this.crudService.row;\n        const cell = this.crudService.cell;\n\n        // TODO: Merge the crudService with wht BaseAPI service\n        if (!row && !cell) { return; }\n\n        commit ? this.gridAPI.submit_value() : this.gridAPI.escape_editMode();\n\n        if (!this.rowEditable || this.rowEditingOverlay && this.rowEditingOverlay.collapsed || !row) {\n            return;\n        }\n\n        this.endRowTransaction(commit, row);\n\n        const activeCell = this.selectionService.activeElement;\n        if (event && activeCell) {\n            const rowIndex = activeCell.row;\n            const visibleColIndex = activeCell.layout ? activeCell.layout.columnVisibleIndex : activeCell.column;\n            this.navigateTo(rowIndex, visibleColIndex, (c) => {\n                if (c.targetType === GridKeydownTargetType.dataCell && c.target) {\n                    c.target.nativeElement.focus();\n                }\n            });\n        }\n    }\n    /**\n     * @hidden\n     */\n    private rowEditingWheelHandler(event: WheelEvent) {\n        if (event.deltaY > 0) {\n            this.verticalScrollContainer.scrollNext();\n        } else {\n            this.verticalScrollContainer.scrollPrev();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public get dataWithAddedInTransactionRows() {\n        const result = <any>cloneArray(this.gridAPI.get_all_data());\n        if (this.transactions.enabled) {\n            result.push(...this.transactions.getAggregatedChanges(true)\n                .filter(t => t.type === TransactionType.ADD)\n                .map(t => t.newValue));\n        }\n\n        return result;\n    }\n\n    public get dataLength() {\n        return this.transactions.enabled ? this.dataWithAddedInTransactionRows.length : this.gridAPI.get_all_data().length;\n    }\n\n    public hasHorizontalScroll() {\n        return this.totalWidth - this.unpinnedWidth > 0;\n    }\n\n    protected _restoreVirtState(row) {\n        // check virtualization state of data record added from cache\n        // in case state is no longer valid - update it.\n        const rowForOf = row.virtDirRow;\n        const gridScrLeft = rowForOf.getHorizontalScroll().scrollLeft;\n        const left = -parseInt(rowForOf.dc.instance._viewContainer.element.nativeElement.style.left, 10);\n        const actualScrollLeft = left + rowForOf.getColumnScrollLeft(rowForOf.state.startIndex);\n        if (gridScrLeft !== actualScrollLeft) {\n            rowForOf.onHScroll(gridScrLeft);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportExcel(): boolean {\n        return this._exportExcel;\n    }\n\n    /**\n     * @hidden\n     */\n    protected getExportCsv(): boolean {\n        return this._exportCsv;\n    }\n\n    /**\n    * @hidden\n    */\n    public isSummaryRow(rowData): boolean {\n        return rowData.summaries && (rowData.summaries instanceof Map);\n    }\n\n    /**\n     * @hidden\n     */\n    protected get isAttachedToDom(): boolean {\n        return this.document.body.contains(this.nativeElement);\n    }\n\n\n\n    /**\n     * @hidden\n     */\n    public cachedViewLoaded(args: ICachedViewLoadedEventArgs) {\n        if (args.context['templateID'] === 'dataRow' && args.context['$implicit'] === args.oldContext['$implicit']) {\n            args.view.detectChanges();\n            const row = this.getRowByIndex(args.context.index);\n            if (row && row.cells) {\n                row.cells.forEach((c) => {\n                    c.highlightText(\n                        this.lastSearchInfo.searchText,\n                        this.lastSearchInfo.caseSensitive,\n                        this.lastSearchInfo.exactMatch);\n                });\n            }\n        }\n        if (this.hasHorizontalScroll()) {\n            const tmplId = args.context.templateID;\n            const index = args.context.index;\n            args.view.detectChanges();\n            const row = tmplId === 'dataRow' ? this.getRowByIndex(index) : null;\n            const summaryRow = tmplId === 'summaryRow' ? this.summariesRowList.toArray().find((sr) => sr.dataRowIndex === index) : null;\n            if (row && row instanceof IgxRowComponent) {\n                this._restoreVirtState(row);\n            } else if (summaryRow) {\n                this._restoreVirtState(summaryRow);\n            }\n        }\n    }\n}\n\n\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'igx-grid-footer',\n    template: '<ng-content></ng-content>'\n})\nexport class IgxGridFooterComponent {\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\n\n@Pipe({\n    name: 'igxGridSummaryDataPipe',\n    pure: true\n})\nexport class IgxSummaryDataPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    transform(id: string, trigger: number = 0) {\n        const summaryService = this.gridAPI.grid.summaryService;\n        return summaryService.calculateSummaries(\n            summaryService.rootSummaryID,\n            this.gridAPI.get_summary_data()\n        );\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n@Directive({\n    selector: '[igxProcessBarText]'\n})\nexport class IgxProcessBarTextTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Renderer2,\n    ViewChild,\n    ContentChild\n} from '@angular/core';\nimport { IgxProcessBarTextTemplateDirective } from './progressbar.common';\n\nconst ONE_PERCENT = 0.01;\nconst MIN_VALUE = 0;\n\nexport enum IgxTextAlign {\n    START = 'start',\n    CENTER = 'center',\n    END = 'end'\n}\n\nexport enum IgxProgressType {\n    DANGER = 'danger',\n    INFO = 'info',\n    WARNING = 'warning',\n    SUCCESS = 'success'\n}\n\nexport interface IChangeProgressEventArgs {\n    previousValue: number;\n    currentValue: number;\n}\n\nexport abstract class BaseProgress {\n    /**\n     * @hidden\n     */\n    private requestAnimationId: number = undefined;\n\n    /**\n     * @hidden\n     */\n    protected _valueInPercent = MIN_VALUE;\n    /**\n     * @hidden\n     */\n    protected _max = 100;\n    /**\n     * @hidden\n     */\n    protected _value = MIN_VALUE;\n    /**\n     * @hidden\n     */\n    protected _animate = true;\n\n    /**\n     * @hidden\n     */\n    protected _step;\n\n    /**\n     *Returns the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     *public valuePercent(event){\n     *    let percentValue = this.progressBar.valueInPercent;\n     *    alert(percentValue);\n     *}\n     *```\n     */\n    public get valueInPercent(): number {\n        return this._valueInPercent;\n    }\n\n    /**\n     *Sets the `IgxLinearProgressBarComponent`/`IgxCircularProgressBarComponent` value in percentage.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent; // IgxCircularProgressBarComponent\n     *    public setValue(event){\n     *    this.progressBar.valueInPercent = 56;\n     *}\n     * //...\n     *```\n     *```html\n     *<button igxButton=\"fab\" igxRipple=\"\" (click)=\"setValue()\">setValue</button>\n     *```\n     */\n    public set valueInPercent(value: number) {\n        this._valueInPercent = value;\n    }\n\n    /**\n     * @hidden\n     */\n    protected runAnimation(val: number, step: number) {\n        this.requestAnimationId = requestAnimationFrame(\n            () => this.updateProgressSmoothly.call(this, val, step));\n    }\n\n    /**\n     * @hidden\n     */\n    protected updateProgressSmoothly(val: number, step: number) {\n        this._value += step;\n        const passedValue = convertInPercentage(val, this._max);\n        const progressValue = convertInPercentage(this._value, this._max);\n        if (this.valueInPercent === passedValue) {\n            this.updateProgress(val);\n            cancelAnimationFrame(this.requestAnimationId);\n        } else if (this.isInLimitRange(progressValue, passedValue, step)) {\n            this.updateProgress(val);\n            cancelAnimationFrame(this.requestAnimationId);\n        } else {\n            this.valueInPercent = progressValue;\n            this.requestAnimationId = requestAnimationFrame(() => this.updateProgressSmoothly.call(this, val, step));\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected updateProgressDirectly(val: number) {\n        this._value = val;\n        this.valueInPercent = convertInPercentage(this._value, this._max);\n    }\n\n    /**\n     * @hidden\n     */\n    protected directionFlow(currentValue: number, prevValue: number, step: number): number {\n        if (currentValue < prevValue) {\n            return step;\n        }\n\n        return -step;\n    }\n\n    /**\n     * @hidden\n     */\n    private isInLimitRange(val: number, comparator: number, step: number) {\n        return this.isExceedingUpperLimit(val, comparator, step) || this.isExceedingLowerLimit(val, comparator, step);\n    }\n\n    /**\n     * @hidden\n     *\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingUpperLimit(val: number, comparator: number, step: number) {\n        return val > comparator && step > 0;\n    }\n\n    /**\n     * @hidden\n     *\n     * @param val\n     * @param comparator\n     * @param step\n     */\n    private isExceedingLowerLimit(val: number, comparator: number, step: number) {\n        return val < comparator && step < 0;\n    }\n\n    /**\n     * @hidden\n     * @param step\n     */\n    private updateProgress(val: number) {\n        this._value = val;\n        this.valueInPercent = convertInPercentage(this._value, this._max);\n    }\n}\nlet NEXT_LINEAR_ID = 0;\nlet NEXT_CIRCULAR_ID = 0;\n@Component({\n    selector: 'igx-linear-bar',\n    templateUrl: 'templates/linear-bar.component.html'\n})\nexport class IgxLinearProgressBarComponent extends BaseProgress {\n\n    /**\n     *Animation on progress `IgxLinearProgressBarComponent`. By default it is set to true.\n     *```html\n     *<igx-linear-bar [animate]=\"false\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    set animate(animate: boolean) {\n        this._animate = animate;\n    }\n\n    /**\n     *Returns whether the `IgxLinearProgressBarComponent` has animation true/false.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public animationStatus(event) {\n     *    let animationStatus = this.progressBar.animate;\n     *    alert(animationStatus);\n     *}\n     *```\n     */\n    get animate(): boolean {\n        return this._animate;\n    }\n\n    /**\n     *Set maximum value that can be passed. By default it is set to 100.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('attr.aria-valuemax')\n    @Input()\n    set max(maxNum: number) {\n        this._max = maxNum;\n    }\n\n    /**\n     *Returns the the maximum progress value of the `IgxLinearProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public maxValue(event) {\n     *    let max = this.progressBar.max;\n     *    alert(max);\n     *}\n     *```\n     */\n    get max() {\n        return this._max;\n    }\n\n    /**\n     *Returns the value which update the progress indicator of the `IgxLinearProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public stepValue(event) {\n     *    let step = this.progressBar.step;\n     *    alert(step);\n     *}\n     *```\n     */\n    @Input()\n    get step(): number {\n        if (this._step) {\n            return this._step;\n        }\n\n        return this._max * ONE_PERCENT;\n    }\n\n    /**\n     *Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-linear-bar>\n     *```\n     */\n    set step(val: number) {\n        this._step = Number(val);\n    }\n\n    constructor() {\n        super();\n    }\n\n    @HostBinding('attr.aria-valuemin')\n    public valueMin = 0;\n\n    @HostBinding('class.igx-linear-bar')\n    public cssClass = 'igx-linear-bar';\n\n    /**\n     *Set `IgxLinearProgressBarComponent` to have striped style. By default it is set to false.\n     *```html\n     *<igx-linear-bar [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('class.igx-linear-bar--striped')\n    @Input()\n    public striped = false;\n\n    /**\n     *Set `IgxLinearProgressBarComponent` to have indeterminate. By default it is set to false.\n     *```html\n     *<igx-linear-bar [indeterminate]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @HostBinding('class.igx-linear-bar--indeterminate')\n    @Input()\n    public indeterminate = false;\n\n    /**An @Input property that sets the value of the `role` attribute. If not provided it will be automatically set to `progressbar`.\n     * ```html\n     *<igx-linear-bar role=\"progressbar\"></igx-linear-bar>\n     * ```\n     */\n    @HostBinding('attr.role')\n    @Input()\n    public role = 'progressbar';\n\n    /**An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     *<igx-linear-bar [id]=\"'igx-linear-bar-55'\" [striped]=\"true\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-linear-bar-${NEXT_LINEAR_ID++}`;\n\n    /**\n     *Set the position that defines where the text is aligned.\n     Possible options - `IgxTextAlign.START` (default), `IgxTextAlign.CENTER`, `IgxTextAlign.END`.\n     *```typescript\n     *public positionCenter: IgxTextAlign;\n     *public ngOnInit() {\n     *    this.positionCenter = IgxTextAlign.CENTER;\n     *}\n     * //...\n     *```\n     * ```html\n     *<igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textAlign: IgxTextAlign = IgxTextAlign.START;\n\n    /**\n     *Set the text to be visible. By default it is set to true.\n     * ```html\n     *<igx-linear-bar type=\"default\" [textVisibility]=\"false\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textVisibility = true;\n\n    /**\n     *Set the position that defines if the text should be aligned above the progress line. By default is set to false.\n     *```html\n     *<igx-linear-bar type=\"danger\" [textTop]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public textTop = false;\n\n    /**\n     *Set a custom text that is displayed according to the defined position.\n     * ```html\n     *<igx-linear-bar type=\"warning\" [text]=\"'Custom text'\" [textAlign]=\"positionCenter\" [striped]=\"true\"></igx-linear-bar>\n     *```\n     */\n    @Input()\n    public text: string;\n\n    /**\n     *Set type of the `IgxLinearProgressBarComponent`. Possible options - `default`, `success`, `info`, `warning`, and `danger`.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"100\" [value]=\"0\" type=\"danger\"></igx-linear-bar>\n     *```\n     */\n\n    @Input()\n    public type = 'default';\n\n     /**\n     *Returns value that indicates the current `IgxLinearProgressBarComponent` position.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxLinearProgressBarComponent;\n     *public getValue(event) {\n     *    let value = this.progressBar.value;\n     *    alert(value);\n     *}\n     *```\n     */\n    @HostBinding('attr.aria-valuenow')\n    @Input()\n    get value(): number {\n        return this._value;\n    }\n\n    /**\n     *Set value that indicates the current `IgxLinearProgressBarComponent` position.\n     *```html\n     *<igx-linear-bar [striped]=\"false\" [max]=\"200\" [value]=\"50\"></igx-linear-bar>\n     *```\n     */\n    set value(val) {\n        val = Number(val);\n        if (this._value === val || this.indeterminate) {\n            return;\n        }\n\n        const valueInRange = getValueInProperRange(val, this.max);\n        if (isNaN(valueInRange)) {\n            return;\n        }\n        const changedValues = {\n            currentValue: valueInRange,\n            previousValue: this._value\n        };\n\n        const updateValue = super.directionFlow(this._value, val, this.step);\n        if (this._animate && val >= this.step) {\n            super.runAnimation(valueInRange, updateValue);\n        } else {\n            super.updateProgressDirectly(valueInRange);\n        }\n\n        this.onProgressChanged.emit(changedValues);\n    }\n\n    /**\n     *An event, which is triggered after a progress is changed.\n     *```typescript\n     *public progressChange(event) {\n     *    alert(\"Progress made!\");\n     *}\n     * //...\n     *```\n     *```html\n     *<igx-linear-bar (onProgressChanged)=\"progressChange($event)\" type=\"success\">\n     *```\n     */\n    @Output() public onProgressChanged = new EventEmitter<IChangeProgressEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--danger')\n    public get danger() {\n        return this.type === IgxProgressType.DANGER;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--info')\n    public get info() {\n        return this.type === IgxProgressType.INFO;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--warning')\n    public get warning() {\n        return this.type === IgxProgressType.WARNING;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-linear-bar--success')\n    public get success() {\n        return this.type === IgxProgressType.SUCCESS;\n    }\n}\n\n@Component({\n    selector: 'igx-circular-bar',\n    templateUrl: 'templates/circular-bar.component.html'\n})\nexport class IgxCircularProgressBarComponent extends BaseProgress {\n\n    private readonly STROKE_OPACITY_DVIDER = 100;\n    private readonly STROKE_OPACITY_ADDITION = .2;\n\n    /** @hidden */\n    @HostBinding('class.igx-circular-bar')\n    public cssClass = 'igx-circular-bar';\n\n    /**\n     *An event, which is triggered after a progress is changed.\n     *```typescript\n     *public progressChange(event) {\n     *    alert(\"Progress made!\");\n     *}\n     * //...\n     *```\n     *```html\n     *<igx-circular-bar [value]=\"currentValue\" (onProgressChanged)=\"progressChange($event)\"></igx-circular-bar>\n     *```\n     */\n    @Output()\n    public onProgressChanged = new EventEmitter<IChangeProgressEventArgs>();\n\n    /**\n     *An @Input property that sets the value of `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-circular-bar [id]=\"'igx-circular-bar-55'\" [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-circular-bar-${NEXT_CIRCULAR_ID++}`;\n\n    /**\n     *An @Input property that sets the value of the `indeterminate` attribute. If not provided it will be automatically set to false.\n     *```html\n     *<igx-circular-bar [indeterminate]=\"true\"></igx-circular-bar>\n     *```\n     */\n    @HostBinding('class.igx-circular-bar--indeterminate')\n    @Input()\n    public indeterminate = false;\n\n    /**\n     *Sets the text visibility. By default it is set to true.\n     *```html\n     *<igx-circular-bar [textVisibility]=\"false\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    public textVisibility = true;\n\n    /**\n     * Sets/gets the text to be displayed inside the `igxCircularBar`.\n     *```html\n     *<igx-circular-bar text=\"Progress\"></igx-circular-bar>\n     *```\n     *```typescript\n     *let text = this.circularBar.text;\n     *```\n     */\n    @Input()\n    public text: string;\n\n    @ContentChild(IgxProcessBarTextTemplateDirective, { read: IgxProcessBarTextTemplateDirective, static: true })\n    public textTemplate: IgxProcessBarTextTemplateDirective;\n\n    /**\n     * @hidden\n    */\n    public get context(): any {\n        return {\n            $implicit: { value: this.value, valueInPercent: this.valueInPercent, max: this.max }\n        };\n    }\n\n    /**\n    *Animation on progress `IgxCircularProgressBarComponent`. By default it is set to true.\n     *```html\n     *<igx-circular-bar [animate]=\"false\" [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    set animate(animate: boolean) {\n        this._animate = animate;\n    }\n\n    /**\n     *Returns whether the `IgxCircularProgressBarComponent` has animation true/false.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public animationStatus(event) {\n     *    let animationStatus = this.progressBar.animate;\n     *    alert(animationStatus);\n     *}\n     *```\n     */\n    get animate(): boolean {\n        return this._animate;\n    }\n\n    /**\n     *Set maximum value that can be passed. By default it is set to 100.\n     *```html\n     *<igx-circular-bar [max]=\"200\" [value]=\"0\"></igx-circular-bar>\n     *```\n     */\n    @Input()\n    set max(maxNum: number) {\n        this._max = maxNum;\n    }\n\n    /**\n     *Returns the the maximum progress value of the `IgxCircularProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public maxValue(event) {\n     *    let max = this.progressBar.max;\n     *    alert(max);\n     *}\n     *```\n     *```html\n     *<igx-circular-bar [max]=\"245\" [animate]=\"false\" [value]=\"currentValue\"></igx-circular-bar>\n     *```\n     */\n    get max(): number {\n        return this._max;\n    }\n\n    /**\n     *Returns the value which update the progress indicator of the `IgxCircularProgressBarComponent`.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public stepValue(event) {\n     *    let step = this.progressBar.step;\n     *    alert(step);\n     *}\n     *```\n     */\n    @Input()\n    get step(): number {\n        if (this._step) {\n            return this._step;\n        }\n\n        return this._max * ONE_PERCENT;\n    }\n\n    /**\n     *Sets the value by which progress indicator is updated. By default it is 1% of the maximum value.\n     *```html\n     *<igx-circular-bar [striped]=\"false\" [max]=\"200\" [value]=\"0\" [step]=\"1\"></igx-circular-bar>\n     *```\n    */\n    set step(val: number) {\n        this._step = Number(val);\n    }\n\n    /**\n     *Returns value that indicates the current `IgxCircularProgressBarComponent` position.\n     *```typescript\n     *@ViewChild(\"MyProgressBar\")\n     *public progressBar: IgxCircularProgressBarComponent;\n     *public getValue(event) {\n     *    let value = this.progressBar.value;\n     *    alert(value);\n     *}\n     *```\n     *```html\n     *<button igxButton=\"fab\" igxRipple=\"\" (click)=\"getValue()\">Click</button>\n     *```\n     */\n    @Input()\n    get value(): number {\n        return this._value;\n    }\n\n    /**\n     *Set value that indicates the current `IgxCircularProgressBarComponent` position.\n     *```html\n     *<igx-circular-bar [value]=\"50\"></igx-circular-bar>\n     *```\n     */\n    set value(val: number) {\n        val = Number(val);\n        if (this._value === val || this.indeterminate) {\n            return;\n        }\n\n        const valueInProperRange = getValueInProperRange(val, this.max);\n        if (isNaN(valueInProperRange)) {\n            return;\n        }\n\n        const changedValues = {\n            currentValue: valueInProperRange,\n            previousValue: this._value\n        };\n\n        const updateValue = super.directionFlow(this._value, val, this.step);\n        if (this.animate && val >= this.step) {\n            super.runAnimation(valueInProperRange, updateValue);\n        } else {\n            this.updateProgressDirectly(valueInProperRange);\n        }\n\n        this.onProgressChanged.emit(changedValues);\n    }\n\n    private _circleRadius = 46;\n    private _circumference = 2 * Math.PI * this._circleRadius;\n\n    @ViewChild('circle', { static: true }) private _svgCircle: ElementRef;\n\n    constructor(private renderer: Renderer2) {\n        super();\n    }\n\n    /**\n     * @hidden\n     */\n    public updateProgressSmoothly(val: number, step: number) {\n        // Set frames for the animation\n        const FRAMES = [{\n            strokeDashoffset: this.getProgress(this._value),\n            strokeOpacity: (this._value / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION\n        }, {\n            strokeDashoffset: this.getProgress(this.valueInPercent),\n            strokeOpacity: (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION\n        }];\n        this._svgCircle.nativeElement.animate(FRAMES, {\n            easing: 'ease-out',\n            fill: 'forwards'\n        });\n\n        super.updateProgressSmoothly(val, step);\n    }\n\n    /**\n     * @hidden\n    */\n    public get textContent(): string {\n        return this.text;\n    }\n\n    /**\n     * @hidden\n    */\n    public updateProgressDirectly(val: number) {\n        super.updateProgressDirectly(val);\n\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke-dashoffset',\n            this.getProgress(this.valueInPercent));\n\n        this.renderer.setStyle(\n            this._svgCircle.nativeElement,\n            'stroke-opacity',\n            (this.valueInPercent / this.STROKE_OPACITY_DVIDER) + this.STROKE_OPACITY_ADDITION);\n    }\n\n    private getProgress(percentage: number) {\n        return this._circumference - (percentage * this._circumference / 100);\n    }\n}\n\nexport function getValueInProperRange(value: number, max: number, min = 0): number {\n    return Math.max(Math.min(value, max), min);\n}\n\nexport function convertInPercentage(value: number, max: number) {\n    return Math.floor(100 * value / max);\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxLinearProgressBarComponent, IgxCircularProgressBarComponent, IgxProcessBarTextTemplateDirective],\n    exports: [IgxLinearProgressBarComponent, IgxCircularProgressBarComponent, IgxProcessBarTextTemplateDirective],\n    imports: [CommonModule]\n})\nexport class IgxProgressBarModule {\n}\n","import { Component } from '@angular/core';\nimport { IgxDropDownGroupComponent } from '../drop-down/index';\n\n/**\n * The `<igx-select-item>` is a container intended for row items in\n * a `<igx-select>` container.\n */\n@Component({\n    selector: 'igx-select-item-group',\n    template: `\n        <label id=\"{{labelId}}\">{{ label }}</label>\n        <ng-content select=\"igx-select-item\"></ng-content>\n    `\n})\nexport class IgxSelectGroupComponent extends IgxDropDownGroupComponent {\n}\n","import { IgxDropDownItemComponent } from './../drop-down/drop-down-item.component';\nimport { Component, HostBinding, Input, DoCheck } from '@angular/core';\n\n@Component({\n    selector: 'igx-select-item',\n    template: '<ng-content></ng-content>'\n})\nexport class IgxSelectItemComponent extends IgxDropDownItemComponent implements DoCheck {\n\n    /** @hidden @internal */\n    public get itemText() {\n        return this.elementRef.nativeElement.innerText.trim();\n    }\n\n    /**\n     * Sets/Gets if the item is the currently selected one in the select\n     *\n     * ```typescript\n     *  let mySelectedItem = this.select.selectedItem;\n     *  let isMyItemSelected = mySelectedItem.selected; // true\n     * ```\n     */\n    public get selected() {\n        return !this.isHeader && !this.disabled && this.selection.is_item_selected(this.dropDown.id, this);\n    }\n\n    public set selected(value: any) {\n        if (value && !this.isHeader && !this.disabled) {\n            this.dropDown.selectItem(this);\n        }\n    }\n\n    /** @hidden @internal */\n    public isHeader: boolean;\n\n    ngDoCheck(): void {\n    }\n}\n","import { VerticalAlignment, HorizontalAlignment, PositionSettings, Size, Point, Util } from '../services/overlay/utilities';\nimport { ConnectedPositioningStrategy } from '../services/overlay/position/connected-positioning-strategy';\nimport { IPositionStrategy } from '../services/overlay/position';\nimport { fadeOut, fadeIn } from '../animations/main';\nimport { IgxSelectComponent } from './select.component';\nimport { isIE } from '../core/utils';\n\n/** @hidden */\nenum Direction {\n    Top = -1,\n    Bottom = 1,\n    None = 0\n}\n\n/** @hidden @internal */\nexport class SelectPositioningStrategy extends ConnectedPositioningStrategy implements IPositionStrategy {\n\n    private _selectDefaultSettings = {\n        target: null,\n        horizontalDirection: HorizontalAlignment.Right,\n        verticalDirection: VerticalAlignment.Bottom,\n        horizontalStartPoint: HorizontalAlignment.Left,\n        verticalStartPoint: VerticalAlignment.Top,\n        openAnimation: fadeIn,\n        closeAnimation: fadeOut\n    };\n    public settings: PositionSettings;\n\n    constructor(public select: IgxSelectComponent, settings?: PositionSettings) {\n        super();\n        this.settings = Object.assign({}, this._selectDefaultSettings, settings);\n    }\n\n    private defaultWindowToListOffset = 5;\n    private viewPort = Util.getViewportRect(document);\n    private deltaY: number;\n    private deltaX: number;\n    private itemTextPadding: number;\n    private itemTextIndent: number;\n    private listContainerBoundRect: DOMRect;\n    private itemTextToInputTextDiff: number;\n\n    private positionAndScrollBottom(contentElement: HTMLElement, outBoundsAmount: number) {\n        contentElement.style.top = `${this.viewPort.bottom - this.listContainerBoundRect.height - this.defaultWindowToListOffset}px`;\n        contentElement.firstElementChild.scrollTop -= outBoundsAmount - (this.defaultWindowToListOffset);\n        this.deltaY = this.viewPort.bottom - this.listContainerBoundRect.height -\n            this.defaultWindowToListOffset - (this.select.input.nativeElement.getBoundingClientRect() as DOMRect).top;\n    }\n\n    private positionNoScroll(contentElement: HTMLElement, CURRENT_POSITION_Y: number) {\n        contentElement.style.top = `${CURRENT_POSITION_Y - this.itemTextToInputTextDiff}px`;\n        this.deltaY = CURRENT_POSITION_Y -\n            (this.select.input.nativeElement.getBoundingClientRect() as DOMRect).top - this.itemTextToInputTextDiff;\n    }\n\n    private positionAndScrollTop(contentElement: HTMLElement, outBoundsAmount: number) {\n        contentElement.style.top = `${this.viewPort.top + this.defaultWindowToListOffset}px`;\n        contentElement.firstElementChild.scrollTop += outBoundsAmount + this.itemTextToInputTextDiff + this.defaultWindowToListOffset;\n        this.deltaY = this.viewPort.top + this.defaultWindowToListOffset -\n            (this.select.input.nativeElement.getBoundingClientRect() as DOMRect).top;\n    }\n\n    private getItemsOutOfView(contentElement: HTMLElement, itemHeight: number): {\n        'currentScroll': number,\n        'remainingScroll': number\n    } {\n        if (contentElement.firstElementChild.scrollHeight <= contentElement.firstElementChild.clientHeight) {\n            return {\n                'currentScroll': 0,\n                'remainingScroll': 0\n            };\n        }\n        const currentScroll = contentElement.firstElementChild.scrollTop;\n        const remainingScroll = this.select.items.length * itemHeight - currentScroll - this.listContainerBoundRect.height;\n        return {\n            'currentScroll': currentScroll,\n            'remainingScroll': remainingScroll\n        };\n    }\n\n    private listOutOfBounds(elementContainer: { top: number, bottom: number }, document: Document): {\n        Direction: Direction,\n        Amount: number\n    } {\n        const container = {\n            TOP: elementContainer.top,\n            BOTTOM: elementContainer.bottom,\n        };\n        const viewPort = Util.getViewportRect(document);\n        const documentElement = {\n            TOP: viewPort.top,\n            BOTTOM: viewPort.bottom\n        };\n        const returnVals = {\n            Direction: Direction.None,\n            Amount: 0\n        };\n        if (documentElement.TOP + this.defaultWindowToListOffset > container.TOP) {\n            returnVals.Direction = Direction.Top;\n            returnVals.Amount = documentElement.TOP - container.TOP;\n        } else if (documentElement.BOTTOM - this.defaultWindowToListOffset < container.BOTTOM) {\n            returnVals.Direction = Direction.Bottom;\n            returnVals.Amount = container.BOTTOM - documentElement.BOTTOM;\n        } else {\n            return null;\n        }\n        return returnVals;\n    }\n\n    position(contentElement: HTMLElement, size: Size, document?: Document, initialCall?: boolean): void {\n        const inputElement = this.select.input.nativeElement;\n        const inputRect = inputElement.getBoundingClientRect() as DOMRect;\n        this.listContainerBoundRect = contentElement.getBoundingClientRect() as DOMRect;\n        const LIST_HEIGHT = this.listContainerBoundRect.height;\n        if (!initialCall) {\n            this.deltaX = inputRect.left - this.itemTextPadding - this.itemTextIndent;\n            const point = new Point(this.deltaX, inputRect.top + this.deltaY);\n            this.settings.target = point;\n            super.position(contentElement, size);\n            return;\n        }\n\n        const START = {\n            X: inputRect.left,\n            Y: inputRect.top\n        };\n\n        let itemElement;\n        if (this.select.selectedItem) {\n            itemElement = this.select.selectedItem.element.nativeElement;\n            // D.P. Feb 22 2019, #3921 Force item scroll before measuring in IE11, due to base scrollToItem delay\n            if (isIE()) {\n                contentElement.firstElementChild.scrollTop = this.select.calculateScrollPosition(this.select.selectedItem);\n            }\n        } else {\n            itemElement = this.select.getFirstItemElement();\n        }\n        const inputHeight = inputRect.height;\n        const itemBoundRect = itemElement.getBoundingClientRect() as DOMRect;\n        const itemTopListOffset = itemBoundRect.top - this.listContainerBoundRect.top;\n        const itemHeight = itemBoundRect.height;\n\n        const inputFontSize = window.getComputedStyle(inputElement).fontSize;\n        const numericInputFontSize = parseInt(inputFontSize.slice(0, inputFontSize.indexOf('p')), 10) || 0;\n        const itemFontSize = window.getComputedStyle(itemElement).fontSize;\n        const numericItemFontSize = parseInt(itemFontSize.slice(0, itemFontSize.indexOf('p')), 10) || 0;\n        const inputTextToInputTop = (inputHeight - numericInputFontSize) / 2;\n        const itemTextToItemTop = (itemHeight - numericItemFontSize) / 2;\n        this.itemTextToInputTextDiff = itemTextToItemTop - inputTextToInputTop;\n\n        let CURRENT_POSITION_Y = START.Y - itemTopListOffset;\n        const CURRENT_BOTTOM_Y = CURRENT_POSITION_Y + this.listContainerBoundRect.height;\n\n        const OUT_OF_BOUNDS: {\n            Direction: Direction,\n            Amount: number\n        } = this.listOutOfBounds({ top: CURRENT_POSITION_Y, bottom: CURRENT_BOTTOM_Y }, document);\n        if (OUT_OF_BOUNDS) {\n            if (OUT_OF_BOUNDS.Direction === Direction.Top) {\n                CURRENT_POSITION_Y = START.Y;\n            } else {\n                CURRENT_POSITION_Y = -1 * (LIST_HEIGHT - (itemHeight - (itemHeight - inputHeight) / 2));\n                CURRENT_POSITION_Y += START.Y;\n            }\n        }\n        const selectItemPaddingHorizontal = 24;\n        const itemLeftPadding = window.getComputedStyle(itemElement).paddingLeft;\n        const itemTextIndent = window.getComputedStyle(itemElement).textIndent;\n        const numericLeftPadding = parseInt(itemLeftPadding.slice(0, itemLeftPadding.indexOf('p')), 10) || 0;\n        const numericTextIndent = parseInt(itemTextIndent.slice(0, itemTextIndent.indexOf('r')), 10) || 0;\n        this.itemTextPadding = numericLeftPadding;\n        this.itemTextIndent = numericTextIndent;\n        contentElement.style.left += `${START.X - numericLeftPadding - numericTextIndent}px`;\n        contentElement.style.width = inputRect.width + 24 + selectItemPaddingHorizontal * 2 + 'px';\n        this.deltaX = START.X - numericLeftPadding - numericTextIndent;\n        const currentScroll = this.getItemsOutOfView(contentElement, itemHeight)['currentScroll'];\n        const remainingScroll = this.getItemsOutOfView(contentElement, itemHeight)['remainingScroll'];\n\n        // (5 items or less) no scroll and respectively no remaining scroll\n        if (remainingScroll === 0 && currentScroll === 0) {\n            this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n        }\n        // (more than 5 items) there is scroll OR remaining scroll\n        if (remainingScroll !== 0 || currentScroll !== 0) {\n            if (remainingScroll !== 0 && !OUT_OF_BOUNDS) {\n                this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n            }\n            // (more than 5 items) and container getting out of the visible port\n            if (remainingScroll !== 0 && OUT_OF_BOUNDS) {\n                // if there is enough remaining scroll to scroll the item\n                if (remainingScroll > itemHeight) {\n                    if (OUT_OF_BOUNDS.Direction === Direction.Top) {\n                        this.positionAndScrollTop(contentElement, OUT_OF_BOUNDS.Amount);\n                        return;\n                    }\n                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {\n                        // (more than 5 items) and no current scroll\n                        if (currentScroll === 0) {\n                            this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n                            return;\n                            // (more than 5 items) and current scroll\n                        } else {\n                            this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);\n                            return;\n                        }\n                    }\n                }\n                // if there is no enough remaining scroll to scroll the item\n                if (remainingScroll < itemHeight) {\n                    if (OUT_OF_BOUNDS.Direction === Direction.Top) {\n                        this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n\n                    }\n                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {\n                        this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);\n                    }\n                }\n            }\n            // (more than 5 items) and no remaining scroll\n            if (remainingScroll === 0 && currentScroll !== 0) {\n                if (OUT_OF_BOUNDS) {\n                    if (OUT_OF_BOUNDS.Direction === Direction.Bottom) {\n                        this.positionAndScrollBottom(contentElement, OUT_OF_BOUNDS.Amount);\n                        return;\n                    }\n                }\n                this.positionNoScroll(contentElement, CURRENT_POSITION_Y);\n            }\n        }\n    }\n}\n","import { IgxInputDirective, IgxInputState } from './../directives/input/input.directive';\nimport {\n    Component, ContentChildren, forwardRef, QueryList, ViewChild, Input, ContentChild,\n    AfterContentInit, HostBinding, Directive, TemplateRef, ElementRef, ChangeDetectorRef, Optional,\n    Injector, OnInit, AfterViewInit, OnDestroy, Inject\n\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, NgControl, AbstractControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\nimport { IgxDropDownItemBase } from '../drop-down/index';\nimport { IgxInputGroupComponent } from '../input-group/input-group.component';\n\nimport { IgxDropDownComponent } from './../drop-down/drop-down.component';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { SelectPositioningStrategy } from './select-positioning-strategy';\n\nimport { OverlaySettings, AbsoluteScrollStrategy } from '../services/index';\nimport { IGX_DROPDOWN_BASE, ISelectionEventArgs, Navigate } from '../drop-down/drop-down.common';\nimport { CancelableEventArgs } from '../core/utils';\nimport { IgxLabelDirective } from '../directives/label/label.directive';\nimport { IgxSelectBase } from './select.common';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { DisplayDensityToken, IDisplayDensityOptions } from '../core/density';\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectToggleIcon]'\n})\nexport class IgxSelectToggleIconDirective {\n}\n\nconst noop = () => { };\n\n/**\n * **Ignite UI for Angular Select** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/select.html)\n *\n * The `igxSelect` provides an input with dropdown list allowing selection of a single item.\n *\n * Example:\n * ```html\n * <igx-select #select1 [placeholder]=\"'Pick One'\">\n *   <label igxLabel>Select Label</label>\n *   <igx-select-item *ngFor=\"let item of items\" [value]=\"item.field\">\n *     {{ item.field }}\n *   </igx-select-item>\n * </igx-select>\n * ```\n */\n@Component({\n    selector: 'igx-select',\n    templateUrl: './select.component.html',\n    providers: [\n        { provide: NG_VALUE_ACCESSOR, useExisting: IgxSelectComponent, multi: true },\n        { provide: IGX_DROPDOWN_BASE, useExisting: IgxSelectComponent }],\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxSelectComponent extends IgxDropDownComponent implements IgxSelectBase, ControlValueAccessor,\n    AfterContentInit, OnInit, AfterViewInit, OnDestroy, EditorProvider {\n\n    private ngControl: NgControl = null;\n    private _statusChanges$: Subscription;\n    private _overlayDefaults: OverlaySettings;\n    private _value: any;\n\n    /** @hidden @internal do not use the drop-down container class */\n    public cssClass = false;\n\n    /** @hidden @internal */\n    @ViewChild('inputGroup', { read: IgxInputGroupComponent, static: true }) public inputGroup: IgxInputGroupComponent;\n\n    /** @hidden @internal */\n    @ViewChild('input', { read: IgxInputDirective, static: true }) public input: IgxInputDirective;\n\n    /** @hidden @internal */\n    @ContentChildren(forwardRef(() => IgxSelectItemComponent), { descendants: true })\n    public children: QueryList<IgxSelectItemComponent>;\n\n    /** @hidden @internal */\n    @ContentChild(forwardRef(() => IgxLabelDirective), { static: true }) label: IgxLabelDirective;\n\n    /** @hidden @internal */\n    public allowItemsFocus = false;\n\n    /** @hidden @internal */\n    public height: string;\n\n    /**\n     * An @Input property that gets/sets the component value.\n     *\n     * ```typescript\n     * // get\n     * let selectValue = this.select.value;\n     * ```\n     *\n     * ```typescript\n     * // set\n     * this.select.value = 'London';\n     * ```\n     * ```html\n     * <igx-select [value]=\"value\"></igx-select>\n     * ```\n     */\n    @Input()\n    public get value(): any {\n        return this._value;\n    }\n    public set value(v: any) {\n        if (this._value === v) {\n            return;\n        }\n        this._value = v;\n        this.setSelection(this.items.find(x => x.value === this.value));\n        this.cdr.detectChanges();\n    }\n    /**\n     * An @Input property that sets input placeholder.\n     *\n     */\n    @Input() public placeholder;\n\n\n    /**\n     * An @Input property that disables the `IgxSelectComponent`.\n     * ```html\n     * <igx-select [disabled]=\"'true'\"></igx-select>\n     * ```\n     */\n    @Input() public disabled = false;\n\n    /**\n     * An @Input property that sets custom OverlaySettings `IgxSelectComponent`.\n     * ```html\n     * <igx-select [overlaySettings] = \"customOverlaySettings\"></igx-select>\n     * ```\n     */\n    @Input()\n    overlaySettings: OverlaySettings;\n\n    /** @hidden @internal */\n    @HostBinding('style.maxHeight')\n    public maxHeight = '256px';\n\n    /** @hidden @internal */\n    public width: string;\n\n    /**\n     * An @Input property that sets how the select will be styled.\n     * The allowed values are `line`, `box` and `border`. The default is `line`.\n     * ```html\n     *<igx-select [type]=\"'box'\"></igx-select>\n     * ```\n     */\n    @Input()\n    public type = 'line';\n\n    /**\n     * An @Input property that sets what display density to be used for the input group.\n     * The allowed values are `compact`, `cosy` and `comfortable`. The default is `comfortable`.\n     * ```html\n     *<igx-select [displayDensity]=\"'compact'\"></igx-select>\n     * ```\n     */\n    @Input()\n    public displayDensity = 'comfortable';\n\n    /**\n     * The custom template, if any, that should be used when rendering the select TOGGLE(open/close) button\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.select.toggleIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-select #select>\n     *      ...\n     *      <ng-template igxSelectToggleIcon let-collapsed>\n     *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>\n     *      </ng-template>\n     *  </igx-select>\n     * ```\n     */\n    @ContentChild(IgxSelectToggleIconDirective, { read: TemplateRef, static: true })\n    public toggleIconTemplate: TemplateRef<any> = null;\n\n    /** @hidden @internal */\n    public get selectionValue() {\n        const selectedItem = this.selectedItem;\n        return selectedItem ? selectedItem.itemText : '';\n    }\n\n    /** @hidden @internal */\n    public get selectedItem(): IgxSelectItemComponent {\n        return this.selection.first_item(this.id);\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected cdr: ChangeDetectorRef,\n        protected selection: IgxSelectionAPIService,\n\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        private _injector: Injector) {\n        super(elementRef, cdr, selection, _displayDensityOptions);\n    }\n\n    /** @hidden @internal */\n    private _onChangeCallback: (_: any) => void = noop;\n\n    /** @hidden @internal */\n    public writeValue = (value: any) => {\n        this.value = value;\n    }\n\n    /** @hidden @internal */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /** @hidden @internal */\n    public registerOnTouched(fn: any): void { }\n\n    /** @hidden @internal */\n    public getEditElement(): HTMLElement {\n        return this.input.nativeElement;\n    }\n\n    /** @hidden @internal */\n    public selectItem(newSelection: IgxDropDownItemBase, event?) {\n        const oldSelection = this.selectedItem;\n\n        if (event) {\n            this.toggleDirective.close();\n        }\n        if (newSelection === null || newSelection === oldSelection || newSelection.disabled || newSelection.isHeader) {\n            return;\n        }\n\n        const args: ISelectionEventArgs = { oldSelection, newSelection, cancel: false };\n        this.onSelection.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n\n        this.setSelection(newSelection);\n        this._value = newSelection.value;\n        this.cdr.detectChanges();\n        this._onChangeCallback(this.value);\n    }\n\n    /** @hidden @internal */\n    public getFirstItemElement(): HTMLElement {\n        return this.children.first.element.nativeElement;\n    }\n\n    /**\n     * Opens the select\n     *\n     * ```typescript\n     * this.select.open();\n     * ```\n     */\n    public open(overlaySettings?: OverlaySettings) {\n        if (this.disabled || this.items.length === 0) {\n            return;\n        }\n        if (!this.selectedItem) {\n            this.navigateFirst();\n        }\n\n        super.open(Object.assign({}, this._overlayDefaults, this.overlaySettings, overlaySettings));\n    }\n\n    /** @hidden @internal */\n    ngAfterContentInit() {\n        this._overlayDefaults = {\n            modal: false,\n            closeOnOutsideClick: false,\n            positionStrategy: new SelectPositioningStrategy(this, { target: this.inputGroup.element.nativeElement }),\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            excludePositionTarget: true\n        };\n        this.children.changes.subscribe(() => {\n            this.setSelection(this.items.find(x => x.value === this.value));\n            this.cdr.detectChanges();\n        });\n        Promise.resolve().then(() => this.children.notifyOnChanges());\n    }\n\n    /** @hidden @internal */\n    public onToggleOpening(event: CancelableEventArgs) {\n        this.onOpening.emit(event);\n        if (event.cancel) {\n            return;\n        }\n        this.scrollToItem(this.selectedItem);\n    }\n\n    protected navigate(direction: Navigate, currentIndex?: number) {\n        if (this.collapsed && this.selectedItem) {\n            this.navigateItem(this.selectedItem.itemIndex);\n        }\n        super.navigate(direction, currentIndex);\n    }\n\n    protected manageRequiredAsterisk(): void {\n        if (this.ngControl && this.ngControl.control.validator) {\n            // Run the validation with empty object to check if required is enabled.\n            const error = this.ngControl.control.validator({} as AbstractControl);\n            this.inputGroup.isRequired = error && error.required;\n            this.cdr.markForCheck();\n        }\n    }\n    private setSelection(item: IgxDropDownItemBase) {\n        if (item && item.value !== undefined && item.value !== null) {\n            this.selection.set(this.id, new Set([item]));\n        } else {\n            this.selection.clear(this.id);\n        }\n    }\n\n    /** @hidden @internal */\n    public onBlur(): void {\n        if (this.ngControl && !this.ngControl.valid) {\n             this.input.valid = IgxInputState.INVALID;\n        } else {\n            this.input.valid = IgxInputState.INITIAL;\n        }\n        if (!this.collapsed) {\n            this.toggleDirective.close();\n        }\n    }\n\n    protected onStatusChanged() {\n        if ((this.ngControl.control.touched || this.ngControl.control.dirty) &&\n            (this.ngControl.control.validator || this.ngControl.control.asyncValidator)) {\n            if (this.inputGroup.isFocused) {\n                this.input.valid = this.ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;\n            } else {\n                this.input.valid = this.ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;\n            }\n        }\n        this.manageRequiredAsterisk();\n    }\n    /**\n     * @hidden @internal\n     */\n    public ngOnInit() {\n        this.ngControl = this._injector.get(NgControl, null);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngAfterViewInit() {\n        if (this.ngControl) {\n            this._statusChanges$ = this.ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));\n            this.manageRequiredAsterisk();\n        }\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    public ngOnDestroy() {\n        this.selection.clear(this.id);\n        if (this._statusChanges$) {\n            this._statusChanges$.unsubscribe();\n        }\n    }\n}\n\n","import { IgxDropDownItemNavigationDirective } from '../drop-down/drop-down-navigation.directive';\nimport { Directive, Input, HostListener, OnDestroy } from '@angular/core';\nimport { Subscription, timer } from 'rxjs';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { IgxSelectBase } from './select.common';\n\n/** @hidden @internal */\n@Directive({\n    selector: '[igxSelectItemNavigation]'\n})\nexport class IgxSelectItemNavigationDirective extends IgxDropDownItemNavigationDirective implements OnDestroy {\n\n    @Input('igxSelectItemNavigation')\n    public target: IgxSelectBase;\n\n    constructor() { super(null); }\n\n    /** Captures keydown events and calls the appropriate handlers on the target component */\n    handleKeyDown(event: KeyboardEvent) {\n        if (!event || event.shiftKey) {\n            return;\n        }\n\n        const key = event.key.toLowerCase();\n        if (event.altKey && (key === 'arrowdown' || key === 'arrowup' || key === 'down' || key === 'up')) {\n            this.target.toggle();\n            return;\n        }\n\n        if (this.target.collapsed) {\n            switch (key) {\n                case 'space':\n                case 'spacebar':\n                case ' ':\n                case 'enter':\n                    event.preventDefault();\n                    this.target.open();\n                    return;\n                case 'arrowdown':\n                case 'down':\n                    this.target.navigateNext();\n                    this.target.selectItem(this.target.focusedItem);\n                    event.preventDefault();\n                    return;\n                case 'arrowup':\n                case 'up':\n                    this.target.navigatePrev();\n                    this.target.selectItem(this.target.focusedItem);\n                    event.preventDefault();\n                    return;\n                default:\n                    break;\n            }\n        }\n\n        super.handleKeyDown(event);\n    }\n\n    // tslint:disable:member-ordering\n    private inputStream = '';\n    private clearStream$ = Subscription.EMPTY;\n\n    /** Handle continuous letter typing navigation */\n    @HostListener('keyup', ['$event'])\n    public captureKey(event: KeyboardEvent) {\n        // relying only on key, available on all major browsers:\n        // https://caniuse.com/#feat=keyboardevent-key (IE/Edge quirk doesn't affect letter typing)\n        if (!event || !event.key || event.key.length > 1) {\n            // ignore longer keys ('Alt', 'ArrowDown', etc)\n            return;\n        }\n\n        this.clearStream$.unsubscribe();\n        this.clearStream$ = timer(500).subscribe(() => {\n            this.inputStream = '';\n        });\n        this.inputStream += event.key;\n        const focusedItem = this.target.focusedItem as IgxSelectItemComponent;\n\n        // select the item\n        if (focusedItem && this.inputStream.length > 1 && focusedItem.itemText.toLowerCase().startsWith(this.inputStream.toLowerCase())) {\n            return;\n        }\n        this.activateItemByText(this.inputStream);\n    }\n\n    public activateItemByText(text: string) {\n        const items = this.target.items as IgxSelectItemComponent[];\n        const activeItemIndex = items.indexOf(this.target.focusedItem as IgxSelectItemComponent) || 0;\n        // ^ this is focused OR selected if the dd is closed\n        let nextItem = items.slice(activeItemIndex + 1).find(x => !x.disabled && (x.itemText.toLowerCase().startsWith(text.toLowerCase())));\n\n        if (!nextItem) {\n            nextItem = items.slice(0, activeItemIndex).find(x => !x.disabled && (x.itemText.toLowerCase().startsWith(text.toLowerCase())));\n        }\n\n        if (!nextItem) {\n            return;\n        }\n\n        if (this.target.collapsed) {\n            this.target.selectItem(nextItem);\n        }\n        this.target.navigateItem(items.indexOf(nextItem));\n    }\n\n    ngOnDestroy(): void {\n        this.clearStream$.unsubscribe();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxDropDownModule } from './../drop-down/index';\nimport { IgxToggleModule } from './../directives/toggle/toggle.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\n\nimport { IgxSelectComponent, IgxSelectToggleIconDirective } from './select.component';\nimport { IgxSelectItemComponent } from './select-item.component';\nimport { IgxSelectItemNavigationDirective } from './select-navigation.directive';\nimport { IgxSelectGroupComponent } from './select-group.component';\n\n/** @hidden */\n@NgModule({\n    declarations: [IgxSelectComponent, IgxSelectItemComponent, IgxSelectItemNavigationDirective,\n        IgxSelectToggleIconDirective, IgxSelectGroupComponent],\n    exports: [IgxSelectComponent, IgxSelectItemComponent, IgxSelectItemNavigationDirective,\n         IgxSelectToggleIconDirective, IgxSelectGroupComponent],\n    imports: [IgxRippleModule, CommonModule, IgxInputGroupModule, FormsModule, ReactiveFormsModule,\n        IgxToggleModule, IgxDropDownModule, IgxButtonModule, IgxIconModule],\n    providers: []\n})\nexport class IgxSelectModule { }\n","import { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Component, Input, Output, NgModule, Optional, Inject, EventEmitter, HostBinding } from '@angular/core';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensityBase, DisplayDensity } from '../core/displayDensity';\nimport { IgxSelectModule } from '../select/index';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\n\n@Component({\n    selector: 'igx-paginator',\n    templateUrl: 'paginator.component.html',\n})\nexport class IgxPaginatorComponent extends DisplayDensityBase {\n\n    /**\n     * Total pages calculated from totalRecords and perPage\n     */\n    public totalPages: number;\n    protected _page = 0;\n    protected _totalRecords: number;\n    protected _selectOptions;\n    private defaultSelectValues = [5, 10, 15, 25, 50, 100, 500];\n    protected _perPage = 15;\n\n    /**\n     * Sets the class of the IgxPaginatorComponent based\n     * on the provided displayDensity.\n     */\n    @HostBinding('class.igx-grid-paginator--cosy')\n    public get classCosy(): boolean {\n        return this.displayDensity === DisplayDensity.cosy;\n    }\n\n    @HostBinding('class.igx-grid-paginator--compact')\n    public get classCompact(): boolean {\n        return this.displayDensity === DisplayDensity.compact;\n    }\n\n    @HostBinding('class.igx-grid-paginator')\n    public get classComfortable(): boolean {\n        return this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /**\n   * An @Input property, sets current page of the `IgxPaginatorComponent`.\n   * The default is 0.\n   * ```typescript\n   * let page = this.paginator.page;\n   * ```\n   * @memberof IgxPaginatorComponent\n   */\n    @Input()\n    public get page() {\n        return this._page;\n    }\n\n    public set page(value: number) {\n        this._page = value;\n        this.pageChange.emit(this._page);\n    }\n\n    /**\n   * An @Input property, sets number of visible items per page in the `IgxPaginatorComponent`.\n   * The default is 15.\n   * ```typescript\n   * let itemsPerPage = this.paginator.perPage;\n   * ```\n   * @memberof IgxPaginatorComponent\n   */\n    @Input()\n    public get perPage() {\n        return this._perPage;\n    }\n\n    public set perPage(value: number) {\n        this._perPage = Number(value);\n        this.perPageChange.emit(this._perPage);\n        this._selectOptions = this.sortUniqueOptions(this.defaultSelectValues, this._perPage);\n        this.totalPages = Math.ceil(this.totalRecords / this._perPage);\n    }\n\n    /**\n    * An @Input property that sets the total records.\n    * ```typescript\n    * let totalRecords = this.paginator.totalRecords;\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public get totalRecords() {\n        return this._totalRecords;\n    }\n\n    public set totalRecords(value: number) {\n        this._totalRecords = value;\n        this.totalPages = Math.ceil(this.totalRecords / this.perPage);\n    }\n\n    /**\n    * An @Input property that sets custom options in the select of the paginator\n    * ```typescript\n    * let options = this.paginator.selectOptions;\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public get selectOptions() {\n        return this._selectOptions;\n    }\n\n    public set selectOptions(value: Array<number>) {\n        this._selectOptions = this.sortUniqueOptions(value, this._perPage);\n        this.defaultSelectValues = [...this._selectOptions];\n    }\n    /**\n    * An @Input property that sets if the pager in the paginator should be enabled.\n    * ```html\n    * <igx-paginator [pagerEnabled]=\"true\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public pagerEnabled = true;\n\n    /**\n    * An @Input property that sets if the pager in the paginator should be hidden.\n    * ```html\n    * <igx-paginator [pagerHidden]=\"true\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public pagerHidden = false;\n\n    /**\n    * An @Input property that sets if the dropdown in the paginator should be enabled.\n    * ```html\n    * <igx-paginator [dropdownEnabled]=\"true\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public dropdownEnabled = true;\n\n    /**\n    * An @Input property that sets if the dropdown in the paginator should be hidden.\n    * ```html\n    * <igx-paginator [dropdownHidden]=\"true\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public dropdownHidden = false;\n\n    /**\n    * An @Input property, sets number of label of the select.\n    * The default is 'Items per page' localized string.\n    * ```html\n    * <igx-paginator label=\"My custom label\"></igx-paginator>\n    * ```\n    * @memberof IgxPaginatorComponent\n    */\n    @Input()\n    public selectLabel = CurrentResourceStrings.GridResStrings.igx_grid_paginator_label;\n\n    /**\n     *An event that is emitted when the select in the `IgxPaginatorComponent` changes its value.\n    */\n    @Output()\n    public perPageChange = new EventEmitter<number>();\n    /**\n     *An event that is emitted when the paginating is used.\n    */\n    @Output()\n    public pageChange = new EventEmitter<number>();\n\n    constructor(@Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions\n    ) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Returns if the current page is the last page.\n     * ```typescript\n     * const lastPage = this.paginator.isLastPage;\n     * ```\n     */\n    get isLastPage(): boolean {\n        return this.page + 1 >= this.totalPages;\n    }\n\n    /**\n     * Returns if the current page is the first page.\n     * ```typescript\n     * const lastPage = this.paginator.isFirstPage;\n     * ```\n     */\n    get isFirstPage(): boolean {\n        return this.page === 0;\n    }\n\n    private sortUniqueOptions(values: Array<number>, newOption: number): number[] {\n        return Array.from(new Set([...values, newOption])).sort((a, b) => a - b);\n    }\n\n    public paginatorSelectDisplayDensity(): string {\n        if (this.displayDensity === DisplayDensity.comfortable) {\n            return DisplayDensity.cosy;\n        }\n        return DisplayDensity.compact;\n    }\n    /**\n     * Goes to the next page of the `IgxPaginatorComponent`, if the paginator is not already at the last page.\n     * ```typescript\n     * this.paginator.nextPage();\n     * ```\n\t * @memberof IgxPaginatorComponent\n     */\n    public nextPage(): void {\n        if (!this.isLastPage) {\n            this.page += 1;\n        }\n    }\n    /**\n     * Goes to the previous page of the `IgxPaginatorComponent`, if the paginator is not already at the first page.\n     * ```typescript\n     * this.paginator.previousPage();\n     * ```\n\t * @memberof IgxPaginatorComponent\n     */\n    public previousPage(): void {\n        if (!this.isFirstPage) {\n            this.page -= 1;\n        }\n    }\n    /**\n     * Goes to the desired page index.\n     * ```typescript\n     * this.pagiantor.paginate(1);\n     * ```\n     * @param val\n     * @memberof IgxPaginatorComponent\n     */\n    public paginate(val: number): void {\n        if (val < 0 || val > this.totalPages - 1) {\n            return;\n        }\n        this.page = val;\n    }\n}\n\n@NgModule({\n    declarations: [IgxPaginatorComponent],\n    exports: [IgxPaginatorComponent],\n    imports: [CommonModule, IgxSelectModule, FormsModule, IgxIconModule, IgxButtonModule, IgxRippleModule]\n})\nexport class IgxPaginatorModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { GridBaseAPIService } from './api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from './grid-base.component';\nimport { DataUtil } from '../data-operations/data-util';\nimport { cloneArray } from '../core/utils';\n\n@Pipe({\n    name: 'igxCellStyles'\n})\nexport class IgxGridCellStylesPipe implements PipeTransform {\n\n    transform(cssClasses: any, _value: any, data: any, field: string): string {\n        if (!cssClasses) {\n            return '';\n        }\n\n        const result = [];\n\n        for (const cssClass of Object.keys(cssClasses)) {\n            const callbackOrValue = cssClasses[cssClass];\n            const apply = typeof callbackOrValue === 'function' ? callbackOrValue(data, field) : callbackOrValue;\n            if (apply) {\n                result.push(cssClass);\n            }\n        }\n\n        return result.join(' ');\n    }\n}\n\n/**\n * @hidden\n * @internal\n */\n@Pipe({\n    name: 'igxNotGrouped'\n})\nexport class IgxGridNotGroupedPipe implements PipeTransform {\n\n    transform(value: any[]): any[] {\n        return value.filter(item => !item.columnGroup);\n    }\n}\n\n@Pipe({\n    name: 'igxTopLevel'\n})\nexport class IgxGridTopLevelColumns implements PipeTransform {\n\n    transform(value: any[]): any[] {\n        return value.filter(item => item.level === 0);\n    }\n}\n/**\n *@hidden\n */\n@Pipe({\n    name: 'filterCondition',\n    pure: true\n})\nexport class IgxGridFilterConditionPipe implements PipeTransform {\n\n    public transform(value: string): string {\n        return value.split(/(?=[A-Z])/).join(' ');\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'gridTransaction',\n    pure: true\n})\nexport class IgxGridTransactionPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    transform(collection: any[], id: string, pipeTrigger: number) {\n        const grid: IgxGridBaseComponent = this.gridAPI.grid;\n\n        if (collection && grid.transactions.enabled) {\n            const result = DataUtil.mergeTransactions(\n                cloneArray(collection),\n                grid.transactions.getAggregatedChanges(true),\n                grid.primaryKey);\n            return result;\n        }\n        return collection;\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'paginatorOptions',\n    pure: true,\n})\nexport class IgxGridPaginatorOptionsPipe implements PipeTransform {\n    public transform(values: Array<number>) {\n        return Array.from(new Set([...values])).sort((a, b) => a - b);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IgxDatePipeComponent, IgxDecimalPipeComponent } from './grid.common';\nimport {\n    IgxGridFilterConditionPipe,\n    IgxGridTransactionPipe,\n    IgxGridNotGroupedPipe,\n    IgxGridTopLevelColumns,\n    IgxGridCellStylesPipe,\n    IgxGridPaginatorOptionsPipe\n} from './grid-common.pipes';\n\n@NgModule({\n    declarations: [\n        IgxDatePipeComponent,\n        IgxDecimalPipeComponent,\n        IgxGridFilterConditionPipe,\n        IgxGridTransactionPipe,\n        IgxGridNotGroupedPipe,\n        IgxGridTopLevelColumns,\n        IgxGridCellStylesPipe,\n        IgxGridPaginatorOptionsPipe\n    ],\n    exports: [\n        IgxDatePipeComponent,\n        IgxDecimalPipeComponent,\n        IgxGridFilterConditionPipe,\n        IgxGridTransactionPipe,\n        IgxGridNotGroupedPipe,\n        IgxGridTopLevelColumns,\n        IgxGridCellStylesPipe,\n        IgxGridPaginatorOptionsPipe\n    ],\n    imports: [\n        CommonModule\n    ]\n  })\nexport class IgxGridPipesModule { }\n","import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from '../../column.component';\nimport { IgxGridBaseComponent } from '../../grid-base.component';\nimport { DisplayDensity } from '../../../core/density';\n\n/**\n * @hidden\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-excel-style-column-moving',\n    templateUrl: './excel-style-column-moving.component.html'\n})\nexport class IgxExcelStyleColumnMovingComponent {\n\n    @Input()\n    public column: IgxColumnComponent;\n\n    @Input()\n    public grid: IgxGridBaseComponent;\n\n    @Input()\n    public displayDensity: DisplayDensity;\n\n    constructor() {}\n\n    private get visibleColumns() {\n        return this.grid.visibleColumns.filter(col => !(col instanceof IgxColumnGroupComponent));\n    }\n\n    get canNotMoveLeft() {\n        return this.column.visibleIndex === 0 ||\n            (this.grid.unpinnedColumns.indexOf(this.column) === 0 && this.column.disablePinning) ||\n            (this.column.level !== 0 && !this.findColumn(0, this.visibleColumns));\n    }\n\n    get canNotMoveRight() {\n        return this.column.visibleIndex === this.visibleColumns.length - 1 ||\n            (this.column.level !== 0 && !this.findColumn(1, this.visibleColumns));\n    }\n\n    public onMoveButtonClicked(moveDirection) {\n        let targetColumn;\n        if (this.column.pinned) {\n            if (this.column.isLastPinned && moveDirection === 1) {\n                targetColumn = this.grid.unpinnedColumns[0];\n                moveDirection = 0;\n            } else {\n                targetColumn = this.findColumn(moveDirection, this.grid.pinnedColumns);\n            }\n        } else if (this.grid.unpinnedColumns.indexOf(this.column) === 0 && moveDirection === 0) {\n            targetColumn = this.grid.pinnedColumns[this.grid.pinnedColumns.length - 1];\n            moveDirection = 1;\n        } else {\n            targetColumn = this.findColumn(moveDirection, this.grid.unpinnedColumns);\n        }\n        this.grid.moveColumn(this.column, targetColumn, moveDirection);\n    }\n\n    private findColumn(moveDirection: number, columns: IgxColumnComponent[]) {\n        let index = columns.indexOf(this.column);\n        if (moveDirection === 0) {\n            while (index > 0) {\n                index--;\n                if (columns[index].level === this.column.level && columns[index].parent === this.column.parent) {\n                    return columns[index];\n                }\n            }\n        } else {\n            while (index < columns.length - 1) {\n                index++;\n                if (columns[index].level === this.column.level && columns[index].parent === this.column.parent) {\n                    return columns[index];\n                }\n            }\n        }\n    }\n}\n","import { Directive, TemplateRef, EventEmitter, QueryList, Optional, Inject } from '@angular/core';\nimport { DisplayDensityBase, IDisplayDensityOptions, DisplayDensityToken } from '../core/density';\n\nexport interface IListChild {\n    index: number;\n}\n\n/** @hidden */\nexport abstract class IgxListBase extends DisplayDensityBase {\n    onItemClicked: EventEmitter<any>;\n    allowLeftPanning: boolean;\n    allowRightPanning: boolean;\n    panEndTriggeringThreshold: number;\n    onLeftPan: EventEmitter<any>;\n    onRightPan: EventEmitter<any>;\n    onPanStateChange: EventEmitter<any>;\n    children: QueryList<any>;\n    listItemLeftPanningTemplate: IgxListItemLeftPanningTemplateDirective;\n    listItemRightPanningTemplate: IgxListItemRightPanningTemplateDirective;\n\n    constructor(@Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n}\n\nexport enum IgxListPanState { NONE, LEFT, RIGHT }\n\n@Directive({\n    selector: '[igxEmptyList]'\n})\nexport class IgxEmptyListTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxDataLoading]'\n})\nexport class IgxDataLoadingTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxListItemLeftPanning]'\n})\nexport class IgxListItemLeftPanningTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n@Directive({\n    selector: '[igxListItemRightPanning]'\n})\nexport class IgxListItemRightPanningTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Inject, Injectable, NgZone } from '@angular/core';\nimport { ÉµgetDOM as getDOM } from '@angular/platform-browser';\nimport { DOCUMENT } from '@angular/common';\n\nconst EVENT_SUFFIX = 'precise';\n\n/**\n * Touch gestures manager based on Hammer.js\n * Use with caution, this will track references for single manager per element. Very TBD. Much TODO.\n * @hidden\n */\n@Injectable()\nexport class HammerGesturesManager {\n    /**\n     * Event option defaults for each recognizer, see http://hammerjs.github.io/api/ for API listing.\n     */\n    protected hammerOptions: HammerOptions = {\n        // D.P. #447 Force TouchInput due to PointerEventInput bug (https://github.com/hammerjs/hammer.js/issues/1065)\n        // see https://github.com/IgniteUI/igniteui-angular/issues/447#issuecomment-324601803\n        inputClass: Hammer.TouchInput,\n        recognizers: [\n            [ Hammer.Pan, { threshold: 0 } ],\n            [ Hammer.Pinch, { enable: true } ],\n            [ Hammer.Rotate, { enable: true } ],\n            [ Hammer.Swipe, {\n                direction: Hammer.DIRECTION_HORIZONTAL\n            }]\n        ]\n    };\n\n    private _hammerManagers: Array<{ element: EventTarget, manager: HammerManager; }> = [];\n\n    constructor(private _zone: NgZone, @Inject(DOCUMENT) private doc: any) {\n    }\n\n    public supports(eventName: string): boolean {\n        return eventName.toLowerCase().endsWith('.' + EVENT_SUFFIX);\n    }\n\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     */\n    public addEventListener(element: HTMLElement,\n                            eventName: string,\n                            eventHandler: (eventObj) => void,\n                            options: object = null): () => void {\n\n        // Creating the manager bind events, must be done outside of angular\n        return this._zone.runOutsideAngular(() => {\n            let mc: HammerManager = this.getManagerForElement(element);\n            if (mc === null) {\n                // new Hammer is a shortcut for Manager with defaults\n                mc = new Hammer(element, this.hammerOptions);\n                this.addManagerForElement(element, mc);\n            }\n            const handler = (eventObj) => { this._zone.run(() => { eventHandler(eventObj); }); };\n            mc.on(eventName, handler);\n            return () => { mc.off(eventName, handler); };\n        });\n    }\n\n    /**\n     * Add listener extended with options for Hammer.js. Will use defaults if none are provided.\n     * Modeling after other event plugins for easy future modifications.\n     *\n     * @param target Can be one of either window, body or document(fallback default).\n     */\n    public addGlobalEventListener(target: string, eventName: string, eventHandler: (eventObj) => void): () => void {\n        const element = this.getGlobalEventTarget(target);\n\n        // Creating the manager bind events, must be done outside of angular\n        return this.addEventListener(element as HTMLElement, eventName, eventHandler);\n    }\n\n    /**\n     * Exposes [Dom]Adapter.getGlobalEventTarget to get global event targets.\n     * Supported: window, document, body. Defaults to document for invalid args.\n     * @param target Target name\n     */\n    public getGlobalEventTarget(target: string): EventTarget {\n        return getDOM().getGlobalEventTarget(this.doc, target);\n    }\n\n    /**\n     * Set HammerManager options.\n     *\n     * @param element The DOM element used to create the manager on.\n     *\n     * ### Example\n     *\n     * ```ts\n     * manager.setManagerOption(myElem, \"pan\", { pointers: 1 });\n     * ```\n     */\n    public setManagerOption(element: EventTarget, event: string, options: any) {\n        const manager = this.getManagerForElement(element);\n        manager.get(event).set(options);\n    }\n\n    /**\n     * Add an element and manager map to the internal collection.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public addManagerForElement(element: EventTarget, manager: HammerManager) {\n        this._hammerManagers.push({element, manager});\n    }\n\n    /**\n     * Get HammerManager for the element or null\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public getManagerForElement(element: EventTarget): HammerManager {\n        const result =  this._hammerManagers.filter((value, index, array) => {\n            return value.element === element;\n        });\n        return result.length ? result[0].manager : null;\n    }\n\n    /**\n     * Destroys the HammerManager for the element, removing event listeners in the process.\n     *\n     * @param element The DOM element used to create the manager on.\n     */\n    public removeManagerForElement(element: HTMLElement) {\n        let index: number = null;\n        for (let i = 0; i < this._hammerManagers.length; i++) {\n            if (element === this._hammerManagers[i].element) {\n                index = i;\n                break;\n            }\n        }\n        if (index !== null) {\n            const item = this._hammerManagers.splice(index, 1)[0];\n            // destroy also\n            item.manager.destroy();\n        }\n    }\n\n    /** Destroys all internally tracked HammerManagers, removing event listeners in the process. */\n    public destroy() {\n        for (const item of this._hammerManagers) {\n            item.manager.destroy();\n        }\n        this._hammerManagers = [];\n    }\n}\n","\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    Renderer2,\n    ViewChild\n} from '@angular/core';\n\nimport {\n    IgxListPanState,\n    IListChild,\n    IgxListBase\n} from './list.common';\n\nimport { HammerGesturesManager } from '../core/touch';\n\n/**\n * The Ignite UI List Item component is a container intended for row items in the Ignite UI for Angular List component.\n *\n * Example:\n * ```html\n * <igx-list>\n *   <igx-list-item isHeader=\"true\">Contacts</igx-list-item>\n *   <igx-list-item *ngFor=\"let contact of contacts\">\n *     <span class=\"name\">{{ contact.name }}</span>\n *     <span class=\"phone\">{{ contact.phone }}</span>\n *   </igx-list-item>\n * </igx-list>\n * ```\n */\n@Component({\n    providers: [HammerGesturesManager],\n    selector: 'igx-list-item',\n    templateUrl: 'list-item.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class IgxListItemComponent implements IListChild {\n\n    /**\n     *@hidden\n     */\n    private _panState: IgxListPanState = IgxListPanState.NONE;\n\n    /**\n     *@hidden\n     */\n    private panOffset = 0;\n\n    /**\n     * @hidden\n     */\n    private _index: number = null;\n\n    /**\n     *@hidden\n     */\n    private lastPanDir = IgxListPanState.NONE;\n\n    /**\n     * Provides a reference to the template's base element shown when left panning a list item.\n     * ```typescript\n     * const leftPanTmpl = this.listItem.leftPanningTemplateElement;\n     * ```\n     */\n    @ViewChild('leftPanningTmpl', { static: false })\n    public leftPanningTemplateElement;\n\n    /**\n     * Provides a reference to the template's base element shown when right panning a list item.\n     * ```typescript\n     * const rightPanTmpl = this.listItem.rightPanningTemplateElement;\n     * ```\n     */\n    @ViewChild('rightPanningTmpl', { static: false })\n    public rightPanningTemplateElement;\n\n    constructor(\n        public list: IgxListBase,\n        private elementRef: ElementRef,\n        private _renderer: Renderer2) {\n    }\n\n    /**\n     * Sets/gets whether the `list item` is a header.\n     * ```html\n     * <igx-list-item [isHeader] = \"true\">Header</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHeader =  this.listItem.isHeader;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public isHeader: boolean;\n\n    /**\n     * Sets/gets whether the `list item` is hidden.\n     * By default the `hidden` value is `false`.\n     * ```html\n     * <igx-list-item [hidden] = \"true\">Hidden Item</igx-list-item>\n     * ```\n     * ```typescript\n     * let isHidden =  this.listItem.hidden;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public hidden = false;\n\n    /**\n     * Gets the `role` attribute of the `list item`.\n     * ```typescript\n     * let itemRole =  this.listItem.role;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return this.isHeader ? 'separator' : 'listitem';\n    }\n\n    /**\n     * Sets/gets the `aria-label` attribute of the `list item`.\n     * ```typescript\n     * this.listItem.ariaLabel = \"Item1\";\n     * ```\n     * ```typescript\n     * let itemAriaLabel = this.listItem.ariaLabel;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel: string;\n\n    /**\n     * Gets the `touch-action` style of the `list item`.\n     * ```typescript\n     * let touchAction = this.listItem.touchAction;\n     * ```\n     */\n    @HostBinding('style.touch-action')\n    public touchAction = 'pan-y';\n\n    /**\n     * Indicates whether `list item` should have header style.\n     * ```typescript\n     * let headerStyle =  this.listItem.headerStyle;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('class.igx-list__header')\n    get headerStyle(): boolean {\n        return this.isHeader;\n    }\n\n    /**\n     * Applies the inner style of the `list item` if the item is not counted as header.\n     * ```typescript\n     * let innerStyle =  this.listItem.innerStyle;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('class.igx-list__item-base')\n    get innerStyle(): boolean {\n        return !this.isHeader;\n    }\n\n    /**\n     * Returns string value which describes the display mode of the `list item`.\n     * ```typescript\n     * let isHidden = this.listItem.display;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @HostBinding('style.display')\n    get display(): string {\n        return this.hidden ? 'none' : '';\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('click', ['$event'])\n    clicked(evt) {\n        this.list.onItemClicked.emit({ item: this, event: evt, direction: this.lastPanDir });\n        this.lastPanDir = IgxListPanState.NONE;\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panstart', ['$event'])\n    panStart(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panmove', ['$event'])\n    panMove(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n        const isPanningToLeft = ev.deltaX < 0;\n        if (isPanningToLeft && this.isTrue(this.list.allowLeftPanning)) {\n            this.showLeftPanTemplate();\n            this.setContentElementLeft(Math.max(this.maxLeft, ev.deltaX));\n        } else if (!isPanningToLeft && this.isTrue(this.list.allowRightPanning)) {\n            this.showRightPanTemplate();\n            this.setContentElementLeft(Math.min(this.maxRight, ev.deltaX));\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('panend', ['$event'])\n    panEnd(ev) {\n        if (this.isTrue(this.isHeader)) {\n            return;\n        }\n        if (!this.isTrue(this.list.allowLeftPanning) && !this.isTrue(this.list.allowRightPanning)) {\n            return;\n        }\n\n        // the translation offset of the current list item content\n        const relativeOffset = this.panOffset;\n        const widthTriggeringGrip = this.width * this.list.panEndTriggeringThreshold;\n\n        if (relativeOffset === 0) {\n            return; // no panning has occured\n        }\n\n        const dir = relativeOffset > 0 ? IgxListPanState.RIGHT : IgxListPanState.LEFT;\n        this.lastPanDir = dir;\n\n        const oldPanState = this._panState;\n        if (Math.abs(relativeOffset) < widthTriggeringGrip) {\n            this.setContentElementLeft(0);\n            this._panState = IgxListPanState.NONE;\n            this.hideLeftAndRightPanTemplates();\n            return;\n        }\n\n        const args = { item: this, direction: dir, keepItem: false};\n\n        if (dir === IgxListPanState.LEFT) {\n            this.list.onLeftPan.emit(args);\n        } else {\n            this.list.onRightPan.emit(args);\n        }\n\n        if (args.keepItem === true) {\n            this.setContentElementLeft(0);\n            this._panState = IgxListPanState.NONE;\n        } else {\n            if (dir === IgxListPanState.LEFT) {\n                this.setContentElementLeft(this.maxLeft);\n                this._panState = IgxListPanState.LEFT;\n            } else {\n                this.setContentElementLeft(this.maxRight);\n                this._panState = IgxListPanState.RIGHT;\n            }\n        }\n\n        if (oldPanState !== this._panState) {\n            const args2 = { oldState: oldPanState, newState: this._panState, item: this };\n            this.list.onPanStateChange.emit(args2);\n        }\n        this.hideLeftAndRightPanTemplates();\n    }\n\n    /**\n     *@hidden\n     */\n    private showLeftPanTemplate() {\n        this.setLeftAndRightTemplatesVisibility('visible', 'hidden');\n    }\n\n    /**\n     *@hidden\n     */\n    private showRightPanTemplate() {\n        this.setLeftAndRightTemplatesVisibility('hidden', 'visible');\n    }\n\n    /**\n     *@hidden\n     */\n    private hideLeftAndRightPanTemplates() {\n        setTimeout(() => {\n            this.setLeftAndRightTemplatesVisibility('hidden', 'hidden');\n        }, 500);\n    }\n\n    /**\n     *@hidden\n     */\n    private setLeftAndRightTemplatesVisibility(leftVisibility, rightVisibility) {\n        if (this.leftPanningTemplateElement && this.leftPanningTemplateElement.nativeElement) {\n            this.leftPanningTemplateElement.nativeElement.style.visibility = leftVisibility;\n        }\n        if (this.rightPanningTemplateElement && this.rightPanningTemplateElement.nativeElement) {\n            this.rightPanningTemplateElement.nativeElement.style.visibility = rightVisibility;\n        }\n    }\n\n    /**\n     * Gets the `panState` of a `list item`.\n     * ```typescript\n     * let itemPanState =  this.listItem.panState;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get panState(): IgxListPanState {\n        return this._panState;\n    }\n\n    /**\n     * Gets the `index` of a `list item`.\n     * ```typescript\n     * let itemIndex =  this.listItem.index;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    @Input()\n    public get index(): number {\n        return this._index !== null ? this._index : this.list.children.toArray().indexOf(this);\n    }\n\n    /**\n     * Sets the `index` of the `list item`.\n     * ```typescript\n     * this.listItem.index = index;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public set index(value: number) {\n        this._index = value;\n    }\n\n    /**\n     * Returns an element reference to the list item.\n     * ```typescript\n     * let listItemElement =  this.listItem.element.\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Returns a reference container which contains the list item's content.\n     * ```typescript\n     * let listItemContainer =  this.listItem.contentElement.\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get contentElement() {\n        const candidates = this.element.getElementsByClassName('igx-list__item-content');\n        return (candidates && candidates.length > 0) ? candidates[0] : null;\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the `list item container`\n     * by providing the `$implicit` declaration which is the `IgxListItemComponent` itself.\n     * ```typescript\n     * let listItemComponent = this.listItem.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * Gets the width of a `list item`.\n     * ```typescript\n     * let itemWidth = this.listItem.width;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get width() {\n        if (this.element) {\n            return this.element.offsetWidth;\n        }\n    }\n\n    /**\n     * Gets the maximum left position of the `list item`.\n     * ```typescript\n     * let maxLeft = this.listItem.maxLeft;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get maxLeft() {\n        return -this.width;\n    }\n\n    /**\n     * Gets the maximum right position of the `list item`.\n     * ```typescript\n     * let maxRight = this.listItem.maxRight;\n     * ```\n     * @memberof IgxListItemComponent\n     */\n    public get maxRight() {\n        return this.width;\n    }\n\n    /**\n     *@hidden\n     */\n    private setContentElementLeft(value: number) {\n        this.panOffset = value;\n        this.contentElement.style.transform = 'translateX(' + value + 'px)';\n    }\n\n    /**\n     *@hidden\n     */\n    private isTrue(value: boolean): boolean {\n        if (typeof (value) === 'boolean') {\n            return value;\n        } else {\n            return value === 'true';\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    Optional,\n    Inject, Directive\n} from '@angular/core';\n\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\n\nimport { IgxListItemComponent } from './list-item.component';\nimport {\n    IgxListBase,\n    IgxDataLoadingTemplateDirective,\n    IgxEmptyListTemplateDirective,\n    IgxListPanState,\n    IgxListItemLeftPanningTemplateDirective,\n    IgxListItemRightPanningTemplateDirective\n} from './list.common';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensity } from '../core/density';\n\nlet NEXT_ID = 0;\nexport interface IPanStateChangeEventArgs {\n    oldState: IgxListPanState;\n    newState: IgxListPanState;\n    item: IgxListItemComponent;\n}\n\nexport interface IListItemClickEventArgs {\n    item: IgxListItemComponent;\n    event: Event;\n    direction: IgxListPanState;\n}\n\nexport interface IListItemPanningEventArgs {\n    item: IgxListItemComponent;\n    direction: IgxListPanState;\n    keepItem: boolean;\n}\n\n/**\n * **Ignite UI for Angular List** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/list.html)\n *\n * The Ignite UI List displays rows of items and supports one or more header items as well as search and filtering\n * of list items. Each list item is completely templateable and will support any valid HTML or Angular component.\n *\n * Example:\n * ```html\n * <igx-list>\n *   <igx-list-item isHeader=\"true\">Contacts</igx-list-item>\n *   <igx-list-item *ngFor=\"let contact of contacts\">\n *     <span class=\"name\">{{ contact.name }}</span>\n *     <span class=\"phone\">{{ contact.phone }}</span>\n *   </igx-list-item>\n * </igx-list>\n * ```\n */\n\n/**\n * igxListThumbnail is container for the List media\n * Use it to wrap anything you want to be used as a thumbnail.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListThumbnail]'\n})\n\nexport class IgxListThumbnailDirective {}\n\n/**\n * igxListAction is container for the List action\n * Use it to wrap anything you want to be used as a list action: icon, checkbox...\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListAction]'\n})\n\nexport class IgxListActionDirective {}\n\n/**\n * igxListLine is container for the List text content\n * Use it to wrap anything you want to be used as a plane text.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListLine]'\n})\n\nexport class IgxListLineDirective {}\n\n/**\n * igxListLineTitle is a directive that add class to the target element\n * Use it to make anything to look like list Title.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListLineTitle]'\n})\n\nexport class IgxListLineTitleDirective {\n    @HostBinding('class.igx-list__item-line-title')\n    public cssClass = 'igx-list__item-line-title';\n}\n\n/**\n * igxListLineSubTitle is a directive that add class to the target element\n * Use it to make anything to look like list Subtitle.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: '[igxListLineSubTitle]'\n})\n\nexport class IgxListLineSubTitleDirective {\n    @HostBinding('class.igx-list__item-line-subtitle')\n    public cssClass = 'igx-list__item-line-subtitle';\n}\n\n@Component({\n    selector: 'igx-list',\n    templateUrl: 'list.component.html',\n    providers: [{ provide: IgxListBase, useExisting: IgxListComponent }]\n})\nexport class IgxListComponent extends IgxListBase {\n\n    constructor(public element: ElementRef,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(_displayDensityOptions);\n    }\n\n    /**\n     * Returns a collection of all items and headers in the list.\n     * ```typescript\n     * let listChildren: QueryList = this.list.children;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChildren(forwardRef(() => IgxListItemComponent))\n    public children: QueryList<IgxListItemComponent>;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    protected get sortedChildren(): IgxListItemComponent[] {\n        if (this.children !== undefined) {\n            return this.children.toArray()\n                .sort((a: IgxListItemComponent, b: IgxListItemComponent) => {\n                    return a.index - b.index;\n                });\n        }\n        return null;\n    }\n\n    /**\n     * Returns the template which will be used by the IgxList in case there are no list items defined and `isLoading` is set to `false`.\n     * ```typescript\n     * let emptyTemplate = this.list.emptyListTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxEmptyListTemplateDirective, { read: IgxEmptyListTemplateDirective, static: true })\n    public emptyListTemplate: IgxEmptyListTemplateDirective;\n\n    /**\n     * Returns the template which will be used by the IgxList in case there are no list items defined and `isLoading` is set to `true`.\n     * ```typescript\n     * let loadingTemplate = this.list.dataLoadingTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxDataLoadingTemplateDirective, { read: IgxDataLoadingTemplateDirective, static: true })\n    public dataLoadingTemplate: IgxDataLoadingTemplateDirective;\n\n    /**\n     * Sets/gets the template shown when left panning a list item.\n     * Default value is `null`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let itemLeftPanTmpl = this.list.listItemLeftPanningTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxListItemLeftPanningTemplateDirective, { read: IgxListItemLeftPanningTemplateDirective, static: true })\n    public listItemLeftPanningTemplate: IgxListItemLeftPanningTemplateDirective;\n\n    /**\n     * Sets/gets the template shown when right panning a list item.\n     * Default value is `null`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let itemRightPanTmpl = this.list.listItemRightPanningTemplate;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @ContentChild(IgxListItemRightPanningTemplateDirective, { read: IgxListItemRightPanningTemplateDirective, static: true })\n    public listItemRightPanningTemplate: IgxListItemRightPanningTemplateDirective;\n\n    /**\n     * Provides a threshold after which the item's panning will be completed automatically.\n     * By default this property is set to 0.5 which is 50% of the list item's width.\n     * ```typescript\n     * this.list.panEndTriggeringThreshold = 0.8;\n     * ```\n     */\n    @Input()\n    public panEndTriggeringThreshold = 0.5;\n\n    /**@hidden*/\n    @ViewChild('defaultEmptyList', { read: TemplateRef, static: true })\n    protected defaultEmptyListTemplate: TemplateRef<any>;\n\n    /**@hidden*/\n    @ViewChild('defaultDataLoading', { read: TemplateRef, static: true })\n    protected defaultDataLoadingTemplate: TemplateRef<any>;\n\n    /**\n     * Sets/gets the `id` of the list.\n     * If not set, the `id` of the first list component will be `\"igx-list-0\"`.\n     * ```html\n     * <igx-list id = \"my-first-list\"></igx-list>\n     * ```\n     * ```typescript\n     * let listId =  this.list.id;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-list-${NEXT_ID++}`;\n\n    /**\n     * Sets/gets whether the left panning of an item is allowed.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [allowLeftPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isLeftPanningAllowed = this.list.allowLeftPanning;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public allowLeftPanning = false;\n\n    /**\n     * Sets/gets whether the right panning of an item is allowed.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [allowRightPanning] = \"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isRightPanningAllowed = this.list.allowRightPanning;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public allowRightPanning = false;\n\n    /**\n     * Sets/gets whether the list is currently loading data.\n     * Set it to display the dataLoadingTemplate while data is being retrieved.\n     * Default value is `false`.\n     * ```html\n     *  <igx-list [isLoading]=\"true\"></igx-list>\n     * ```\n     * ```typescript\n     * let isLoading = this.list.isLoading;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Input()\n    public isLoading = false;\n\n    /**\n     * Emits an event within the current list when left pan gesture is executed on a list item.\n     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.\n     * ```html\n     * <igx-list [allowLeftPanning]=\"true\" (onLeftPan)=\"onLeftPan($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onLeftPan = new EventEmitter<IListItemPanningEventArgs>();\n\n    /**\n     * Emits an event within the current list when right pan gesture is executed on a list item.\n     * Provides a reference to an object of type `IListItemPanningEventArgs` as an event argument.\n     * ```html\n     * <igx-list [allowRightPanning]=\"true\" (onRightPan)=\"onRightPan($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onRightPan = new EventEmitter<IListItemPanningEventArgs>();\n\n    /**\n    * Emits an event within the current list when pan gesture is executed on list item.\n    * Provides references to the `IgxListItemComponent` and `IgxListPanState` as event arguments.\n    * ```html\n    * <igx-list (onPanStateChange) = \"onPanStateChange($event)\"></igx-list>\n    * ```\n    * @memberof IgxListComponent\n    */\n    @Output()\n    public onPanStateChange = new EventEmitter<IPanStateChangeEventArgs>();\n\n    /**\n     * Emits an event within the current list when a list item has been clicked.\n     * Provides references to the `IgxListItemComponent` and `Event` as event arguments.\n     *  ```html\n     * <igx-list (onItemClicked) = \"onItemClicked($event)\"></igx-list>\n     * ```\n     * @memberof IgxListComponent\n     */\n    @Output()\n    public onItemClicked = new EventEmitter<IListItemClickEventArgs>();\n\n    /**\n     * Gets the `role` attribute.\n     * ```typescript\n     * let listRole =  this.list.role;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('attr.role')\n    public get role() {\n        return 'list';\n    }\n\n    /**\n     * Returns boolean indicating if the list is empty.\n     * ```typescript\n     * let isEmpty =  this.list.isListEmpty;\n     * ```\n     * @memberof IgxListComponent\n     */\n    @HostBinding('class.igx-list-empty')\n    public get isListEmpty(): boolean {\n        return !this.children || this.children.length === 0;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-list')\n    public get cssClass(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.comfortable;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-list--compact')\n    public get cssClassCompact(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.compact;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-list--cosy')\n    public get cssClassCosy(): boolean {\n        return !this.isListEmpty && this.displayDensity === DisplayDensity.cosy;\n    }\n\n    /**\n     * Returns the `items` in the list excluding the headers.\n     * ```typescript\n     * let listItems: IgxListItemComponent[] = this.list.items;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get items(): IgxListItemComponent[] {\n        const items: IgxListItemComponent[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.sortedChildren) {\n                if (!child.isHeader) {\n                    items.push(child);\n                }\n            }\n        }\n        return items;\n    }\n\n    /**\n     * Returns the headers in the list.\n     * ```typescript\n     * let listHeaders: IgxListItemComponent[] =  this.list.headers;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get headers(): IgxListItemComponent[] {\n        const headers: IgxListItemComponent[] = [];\n        if (this.children !== undefined) {\n            for (const child of this.children.toArray()) {\n                if (child.isHeader) {\n                    headers.push(child);\n                }\n            }\n        }\n        return headers;\n    }\n\n    /**\n     * Returns the `context` object which represents the `template context` binding into the `list container`\n     * by providing the `$implicit` declaration which is the `IgxListComponent` itself.\n     * ```typescript\n     * let listComponent =  this.list.context;\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this\n        };\n    }\n\n    /**\n     * Returns the `template` of an empty list.\n     * ```typescript\n     * let listTemplate = this.list.template;\n     * ```\n     * @memberof IgxListComponent\n     */\n    public get template(): TemplateRef<any> {\n        if (this.isLoading) {\n            return this.dataLoadingTemplate ? this.dataLoadingTemplate.template : this.defaultDataLoadingTemplate;\n        } else {\n            return this.emptyListTemplate ? this.emptyListTemplate.template : this.defaultEmptyListTemplate;\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxListComponent,\n        IgxListItemComponent,\n        IgxListThumbnailDirective,\n        IgxListActionDirective,\n        IgxListLineDirective,\n        IgxListLineTitleDirective,\n        IgxListLineSubTitleDirective,\n        IgxDataLoadingTemplateDirective,\n        IgxEmptyListTemplateDirective,\n        IgxListItemLeftPanningTemplateDirective,\n        IgxListItemRightPanningTemplateDirective\n    ],\n    exports: [\n        IgxListComponent,\n        IgxListItemComponent,\n        IgxListThumbnailDirective,\n        IgxListActionDirective,\n        IgxListLineDirective,\n        IgxListLineTitleDirective,\n        IgxListLineSubTitleDirective,\n        IgxDataLoadingTemplateDirective,\n        IgxEmptyListTemplateDirective,\n        IgxListItemLeftPanningTemplateDirective,\n        IgxListItemRightPanningTemplateDirective\n    ],\n    imports: [\n        CommonModule,\n        IgxRippleModule\n    ]\n})\nexport class IgxListModule {\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { FilterListItem } from './grid.excel-style-filtering.component';\n\n/**\n * @hidden\n */\n@Pipe({\n    name: 'excelStyleSearchFilter'\n})\nexport class IgxExcelStyleSearchFilterPipe implements PipeTransform {\n    transform(items: FilterListItem[], searchText: string): any[] {\n        if (!items || !items.length) {\n            return [];\n        }\n\n        if (!searchText) {\n            return items;\n        }\n\n        searchText = searchText.toLowerCase();\n        const result = items.filter((it, i) => (i === 0 && it.isSpecial) ||\n            (it.value || it.value === 0) &&\n            it.value.toString().toLowerCase().indexOf(searchText) > -1);\n\n        return result.length > 1 ? result : [];\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n    IgxGridExcelStyleFilteringComponent,\n    IgxExcelStyleSortingTemplateDirective,\n    IgxExcelStyleHidingTemplateDirective,\n    IgxExcelStyleMovingTemplateDirective,\n    IgxExcelStylePinningTemplateDirective\n} from './grid.excel-style-filtering.component';\nimport { IgxExcelStyleSortingComponent } from './excel-style-sorting.component';\nimport { IgxExcelStyleColumnMovingComponent } from './excel-style-column-moving.component';\nimport { IgxExcelStyleSearchComponent } from './excel-style-search.component';\nimport { IgxExcelStyleCustomDialogComponent } from './excel-style-custom-dialog.component';\nimport { IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';\nimport { IgxExcelStyleDateExpressionComponent } from './excel-style-date-expression.component';\nimport { IgxSelectionAPIService } from '../../../core/selection';\nimport { FormsModule } from '@angular/forms';\nimport { IgxGridPipesModule } from '../../grid-pipes.module';\nimport { IgxButtonModule } from '../../../directives/button/button.directive';\nimport { IgxButtonGroupModule } from '../../../buttonGroup/buttonGroup.component';\nimport { IgxDatePickerModule } from '../../../date-picker/date-picker.component';\nimport { IgxIconModule } from '../../../icon/index';\nimport { IgxRippleModule } from '../../../directives/ripple/ripple.directive';\nimport { IgxInputGroupModule } from '../../../input-group/input-group.component';\nimport { IgxDropDownModule } from '../../../drop-down/index';\nimport { IgxForOfModule } from '../../../directives/for-of/for_of.directive';\nimport { IgxCheckboxModule } from '../../../checkbox/checkbox.component';\nimport { IgxFilterModule } from '../../../directives/filter/filter.directive';\nimport { IgxToggleModule } from '../../../directives/toggle/toggle.directive';\nimport { IgxListModule } from '../../../list/list.component';\nimport { IgxExcelStyleSearchFilterPipe } from './excel-style-search.pipe';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxGridExcelStyleFilteringComponent,\n        IgxExcelStyleSortingComponent,\n        IgxExcelStyleColumnMovingComponent,\n        IgxExcelStyleSearchComponent,\n        IgxExcelStyleCustomDialogComponent,\n        IgxExcelStyleDefaultExpressionComponent,\n        IgxExcelStyleDateExpressionComponent,\n        IgxExcelStyleSortingTemplateDirective,\n        IgxExcelStyleHidingTemplateDirective,\n        IgxExcelStyleMovingTemplateDirective,\n        IgxExcelStylePinningTemplateDirective,\n        IgxExcelStyleSearchFilterPipe\n    ],\n    exports: [\n        IgxGridExcelStyleFilteringComponent,\n        IgxExcelStyleSortingTemplateDirective,\n        IgxExcelStyleHidingTemplateDirective,\n        IgxExcelStyleMovingTemplateDirective,\n        IgxExcelStylePinningTemplateDirective,\n        IgxExcelStyleDateExpressionComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        IgxGridPipesModule,\n        IgxButtonModule,\n        IgxButtonGroupModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxDropDownModule,\n        IgxForOfModule,\n        IgxCheckboxModule,\n        IgxFilterModule,\n        IgxToggleModule,\n        IgxListModule\n    ],\n    entryComponents: [\n        IgxGridExcelStyleFilteringComponent\n    ],\n    providers: [\n        IgxSelectionAPIService\n    ]\n})\nexport class IgxGridExcelStyleFilteringModule {\n\n}\n","import { Directive, Input, OnDestroy, NgModule } from '@angular/core';\nimport { IgxDragDirective } from '../directives/dragdrop/dragdrop.directive';\nimport { IRowDragEndEventArgs, IRowDragStartEventArgs } from './grid-base.component';\nimport { KEYS } from '../core/utils';\nimport { fromEvent, Subscription } from 'rxjs';\nimport { IgxRowComponent, IgxGridBaseComponent, IGridDataBindable } from './grid';\n\n\nconst ghostBackgroundClass = 'igx-grid__tr--ghost';\nconst gridCellClass = 'igx-grid__td';\nconst rowSelectedClass = 'igx-grid__tr--selected';\nconst cellSelectedClass = 'igx-grid__td--selected';\nconst cellActiveClass = 'igx-grid__td--active';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowDrag]'\n})\nexport class IgxRowDragDirective extends IgxDragDirective implements OnDestroy {\n    private row: IgxRowComponent<IgxGridBaseComponent & IGridDataBindable>;\n    private subscription$: Subscription;\n    private _rowDragStarted = false;\n\n    @Input('igxRowDrag')\n    set data(val) {\n        this.row = val;\n    }\n\n    get data() {\n        return this.row;\n    }\n\n    public onPointerDown(event) {\n        event.preventDefault();\n        this._rowDragStarted = false;\n        super.onPointerDown(event);\n    }\n\n    public onPointerMove(event) {\n        super.onPointerMove(event);\n        if (this._dragStarted && !this._rowDragStarted) {\n            this._rowDragStarted = true;\n            const args: IRowDragStartEventArgs = {\n                owner: this,\n                dragData: this.row,\n                cancel: false\n            };\n\n            this.row.grid.onRowDragStart.emit(args);\n            if (args.cancel) {\n                this.dragGhost.parentNode.removeChild(this.dragGhost);\n                this.dragGhost = null;\n                this._dragStarted = false;\n                this._clicked = false;\n                return;\n            }\n            this.row.dragging = true;\n            this.row.grid.rowDragging = true;\n            this.row.grid.markForCheck();\n\n            this.subscription$ = fromEvent(this.row.grid.document.defaultView, 'keydown').subscribe((ev: KeyboardEvent) => {\n                if (ev.key === KEYS.ESCAPE || ev.key === KEYS.ESCAPE_IE) {\n                    this._lastDropArea = false;\n                    this.onPointerUp(event);\n                }\n            });\n        }\n    }\n\n    public onPointerUp(event) {\n\n        if (!this._clicked) {\n            return;\n        }\n\n        const args: IRowDragEndEventArgs = {\n            owner: this,\n            dragData: this.row,\n            animation: false\n        };\n        this.zone.run(() => {\n            this.row.grid.onRowDragEnd.emit(args);\n        });\n\n        if (args.animation) {\n            this.animateOnRelease = true;\n        }\n\n        const dropArea = this._lastDropArea;\n        super.onPointerUp(event);\n        if (!dropArea && this.animateOnRelease) {\n            this.dragGhost.addEventListener('transitionend',  this.transitionEndEvent, false);\n        }   else {\n            this.endDragging();\n        }\n    }\n\n    protected createDragGhost(event) {\n        this.row.grid.endEdit(true);\n        this.row.grid.markForCheck();\n        super.createDragGhost(event, this.row.nativeElement);\n\n        const ghost = this.dragGhost;\n\n        const gridRect = this.row.grid.nativeElement.getBoundingClientRect();\n        const rowRect = this.row.nativeElement.getBoundingClientRect();\n        ghost.style.overflow = 'hidden';\n        ghost.style.width = gridRect.width + 'px';\n        ghost.style.height = rowRect.height + 'px';\n\n        this.renderer.addClass(ghost, ghostBackgroundClass);\n        this.renderer.removeClass(ghost, rowSelectedClass);\n\n        const ghostCells = ghost.getElementsByClassName(gridCellClass);\n        for (let index = 0; index < ghostCells.length; index++) {\n            this.renderer.removeClass(ghostCells[index], cellSelectedClass);\n            this.renderer.removeClass(ghostCells[index], cellActiveClass);\n        }\n    }\n\n    private _unsubscribe() {\n        if (this.subscription$ && !this.subscription$.closed) {\n            this.subscription$.unsubscribe();\n        }\n    }\n\n    private endDragging() {\n        this.onTransitionEnd(null);\n        this.row.dragging = false;\n        this.row.grid.rowDragging = false;\n        this.row.grid.markForCheck();\n        this._unsubscribe();\n    }\n\n    private transitionEndEvent = (evt?) => {\n        if (this.dragGhost) {\n            this.dragGhost.removeEventListener('transitionend', this.transitionEndEvent, false);\n        }\n        this.endDragging();\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxDragIndicatorIcon]'\n})\n\nexport class IgxDragIndicatorIconDirective {\n}\n\n@NgModule({\n    declarations: [IgxRowDragDirective, IgxDragIndicatorIconDirective],\n    entryComponents: [],\n    exports: [IgxRowDragDirective, IgxDragIndicatorIconDirective],\n    imports: []\n})\n\nexport class IgxRowDragModule {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxCheckboxModule } from '../checkbox/checkbox.component';\nimport { IgxSelectionAPIService } from '../core/selection';\nimport { IgxDatePickerModule } from '../date-picker/date-picker.component';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxFocusModule } from '../directives/focus/focus.directive';\nimport { IgxForOfModule } from '../directives/for-of/for_of.directive';\nimport { IgxTemplateOutletModule } from '../directives/template-outlet/template_outlet.directive';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxTextHighlightModule } from '../directives/text-highlight/text-highlight.directive';\nimport { IgxTextSelectionModule } from '../directives/text-selection/text-selection.directive';\nimport { IgxToggleModule } from '../directives/toggle/toggle.directive';\nimport { IgxDropDownModule } from '../drop-down/index';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule } from '../input-group/input-group.component';\nimport { IgxGridCellComponent } from './cell.component';\nimport { IgxColumnComponent, IgxColumnGroupComponent, IgxColumnLayoutComponent } from './column.component';\nimport { IgxColumnHidingModule } from './column-hiding.component';\nimport { IgxGridHeaderComponent } from './grid-header.component';\nimport { IgxGridToolbarComponent } from './grid-toolbar.component';\nimport { IgxGridFilteringCellComponent } from './filtering/grid-filtering-cell.component';\nimport { IgxGridFilteringRowComponent } from './filtering/grid-filtering-row.component';\nimport { IgxGridFooterComponent } from './grid-footer/grid-footer.component';\nimport {\n    IgxCellEditorTemplateDirective,\n    IgxCellFooterTemplateDirective,\n    IgxCellHeaderTemplateDirective,\n    IgxCellTemplateDirective,\n    IgxColumnResizerDirective,\n    IgxColumnMovingDragDirective,\n    IgxColumnMovingDropDirective,\n    IgxGridBodyDirective,\n    IgxColumnMovingService,\n    IgxFilterCellTemplateDirective,\n    IgxResizeHandleDirective\n} from './grid.common';\nimport { IgxGridTransaction } from './grid-base.component';\nimport { IgxRowComponent } from './row.component';\nimport { IgxChipsModule } from '../chips/chips.module';\nimport { IgxDragDropModule } from '../directives/dragdrop/dragdrop.directive';\nimport { IgxButtonGroupModule } from '../buttonGroup/buttonGroup.component';\nimport { IgxColumnPinningModule } from './column-pinning.component';\nimport { IgxBaseTransactionService } from '../services/transaction/base-transaction';\nimport {\n    IgxRowEditTemplateDirective,\n    IgxRowEditActionsDirective,\n    IgxRowEditTextDirective,\n    IgxRowEditTabStopDirective\n} from './grid.rowEdit.directive';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { IgxGridHeaderGroupComponent } from './grid-header-group.component';\nimport { IgxColumnResizingService } from './grid-column-resizing.service';\nimport { IgxGridToolbarCustomContentDirective } from './grid-toolbar.component';\nimport { IgxSummaryRowComponent } from './summaries/summary-row.component';\nimport { IgxSummaryCellComponent } from './summaries/summary-cell.component';\nimport { IgxSummaryDataPipe } from './summaries/grid-root-summary.pipe';\nimport { IgxGridSelectionService } from '../core/grid-selection';\nimport { IgxGridSummaryService } from './summaries/grid-summary.service';\nimport { IgxProgressBarModule } from '../progressbar/progressbar.component';\nimport { IgxPaginatorModule } from '../paginator/paginator.component';\nimport { IgxFilterModule } from '../directives/filter/filter.directive';\nimport { IgxGridPipesModule } from './grid-pipes.module';\nimport { IgxGridExcelStyleFilteringModule } from './filtering/excel-style/grid.excel-style-filtering.module';\nimport { IgxGridDragSelectDirective } from './drag-select.directive';\nimport { IgxGridColumnResizerComponent } from './grid-column-resizer.component';\nimport { IgxRowDragModule } from './row-drag.directive';\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxGridCellComponent,\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent,\n        IgxGridHeaderComponent,\n        IgxGridToolbarComponent,\n        IgxGridToolbarCustomContentDirective,\n        IgxCellFooterTemplateDirective,\n        IgxCellHeaderTemplateDirective,\n        IgxCellEditorTemplateDirective,\n        IgxCellTemplateDirective,\n        IgxRowEditTemplateDirective,\n        IgxRowEditActionsDirective,\n        IgxRowEditTextDirective,\n        IgxRowEditTabStopDirective,\n        IgxColumnResizerDirective,\n        IgxResizeHandleDirective,\n        IgxColumnMovingDragDirective,\n        IgxColumnMovingDropDirective,\n        IgxGridBodyDirective,\n        IgxGridFilteringCellComponent,\n        IgxGridFilteringRowComponent,\n        IgxSummaryDataPipe,\n        IgxRowComponent,\n        IgxGridHeaderGroupComponent,\n        IgxSummaryRowComponent,\n        IgxSummaryCellComponent,\n        IgxGridDragSelectDirective,\n        IgxGridColumnResizerComponent,\n        IgxFilterCellTemplateDirective,\n        IgxGridFooterComponent\n    ],\n    entryComponents: [\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent\n    ],\n    exports: [\n        IgxGridCellComponent,\n        IgxColumnComponent,\n        IgxColumnGroupComponent,\n        IgxColumnLayoutComponent,\n        IgxGridHeaderComponent,\n        IgxGridToolbarComponent,\n        IgxGridToolbarCustomContentDirective,\n        IgxCellFooterTemplateDirective,\n        IgxCellHeaderTemplateDirective,\n        IgxCellEditorTemplateDirective,\n        IgxCellTemplateDirective,\n        IgxRowEditTemplateDirective,\n        IgxRowEditActionsDirective,\n        IgxRowEditTextDirective,\n        IgxRowEditTabStopDirective,\n        IgxColumnResizerDirective,\n        IgxColumnMovingDragDirective,\n        IgxColumnMovingDropDirective,\n        IgxGridBodyDirective,\n        IgxRowComponent,\n        IgxSummaryDataPipe,\n        IgxButtonModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxToggleModule,\n        IgxForOfModule,\n        IgxTemplateOutletModule,\n        IgxFocusModule,\n        IgxTextHighlightModule,\n        IgxTextSelectionModule,\n        IgxCheckboxModule,\n        IgxBadgeModule,\n        IgxChipsModule,\n        IgxDragDropModule,\n        IgxColumnHidingModule,\n        IgxDropDownModule,\n        IgxButtonGroupModule,\n        IgxColumnPinningModule,\n        IgxProgressBarModule,\n        IgxGridFilteringCellComponent,\n        IgxGridFilteringRowComponent,\n        IgxGridHeaderGroupComponent,\n        IgxSummaryRowComponent,\n        IgxSummaryCellComponent,\n        IgxGridDragSelectDirective,\n        IgxGridColumnResizerComponent,\n        IgxFilterModule,\n        IgxGridPipesModule,\n        IgxGridExcelStyleFilteringModule,\n        IgxFilterCellTemplateDirective,\n        IgxRowDragModule,\n        IgxPaginatorModule,\n        IgxGridFooterComponent\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        IgxButtonModule,\n        IgxDatePickerModule,\n        IgxIconModule,\n        IgxRippleModule,\n        IgxInputGroupModule,\n        IgxToggleModule,\n        IgxForOfModule,\n        IgxTemplateOutletModule,\n        IgxFocusModule,\n        IgxTextHighlightModule,\n        IgxTextSelectionModule,\n        IgxCheckboxModule,\n        IgxBadgeModule,\n        IgxChipsModule,\n        IgxDragDropModule,\n        IgxColumnHidingModule,\n        IgxDropDownModule,\n        IgxButtonGroupModule,\n        IgxColumnPinningModule,\n        IgxProgressBarModule,\n        IgxFilterModule,\n        IgxGridPipesModule,\n        IgxGridExcelStyleFilteringModule,\n        IgxRowDragModule,\n        IgxPaginatorModule\n    ],\n    providers: [\n        IgxGridSelectionService,\n        IgxSelectionAPIService,\n        IgxColumnMovingService,\n        IgxGridNavigationService,\n        IgxColumnResizingService,\n        IgxGridSummaryService,\n        { provide: IgxGridTransaction, useClass: IgxBaseTransactionService }\n    ]\n})\nexport class IgxGridCommonModule { }\n","import { GridBaseAPIService } from '../api.service';\nimport { IgxGridComponent } from './grid.component';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { cloneArray } from '../../core/utils';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\n\nexport class IgxGridAPIService extends GridBaseAPIService<IgxGridComponent> {\n\n    public groupBy(expression: IGroupingExpression): void {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n        this.prepare_sorting_expression([sortingState, groupingState], expression);\n        this.grid.groupingExpressions = groupingState;\n        this.arrange_sorting_expressions();\n    }\n\n    public groupBy_multiple(expressions: IGroupingExpression[]): void {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        for (const each of expressions) {\n            this.prepare_sorting_expression([sortingState, groupingState], each);\n        }\n\n        this.grid.groupingExpressions = groupingState;\n        this.arrange_sorting_expressions();\n    }\n\n    public clear_groupby(name?: string | Array<string>) {\n        const groupingState = cloneArray(this.grid.groupingExpressions);\n        const sortingState = cloneArray(this.grid.sortingExpressions);\n\n        if (name) {\n            const names = typeof name === 'string' ? [ name ] : name;\n            const groupedCols = groupingState.filter((state) => names.indexOf(state.fieldName) < 0);\n            const newSortingExpr = sortingState.filter((state) => names.indexOf(state.fieldName) < 0);\n            this.grid.groupingExpressions = groupedCols;\n            this.grid.sortingExpressions = newSortingExpr;\n            names.forEach((colName) => {\n                const grExprIndex = groupingState.findIndex((exp) => exp.fieldName === colName);\n                const grpExpandState = this.grid.groupingExpansionState;\n                /* remove expansion states related to the cleared group\n                and all with deeper hierarchy than the cleared group */\n                this.grid.groupingExpansionState = grpExpandState\n                    .filter((val) => {\n                        return val.hierarchy && val.hierarchy.length <= grExprIndex;\n                    });\n            });\n        } else {\n            // clear all\n            this.grid.groupingExpressions = [];\n            this.grid.groupingExpansionState = [];\n            for (const grExpr of groupingState) {\n                const sortExprIndex = sortingState.findIndex((exp) => exp.fieldName === grExpr.fieldName);\n                if (sortExprIndex > -1) {\n                    sortingState.splice(sortExprIndex, 1);\n                }\n            }\n            this.grid.sortingExpressions = sortingState;\n        }\n    }\n\n    public groupBy_get_expanded_for_group(groupRow: IGroupByRecord): IGroupByExpandState {\n        const grState = this.grid.groupingExpansionState;\n        const hierarchy = DataUtil.getHierarchy(groupRow);\n        return grState.find((state) =>\n            DataUtil.isHierarchyMatch(state.hierarchy || [{ fieldName: groupRow.expression.fieldName, value: groupRow.value }], hierarchy));\n    }\n\n    public groupBy_is_row_in_group(groupRow: IGroupByRecord, rowID): boolean {\n        const grid = this.grid;\n        let rowInGroup = false;\n        groupRow.records.forEach(row => {\n            if (grid.primaryKey ? row[grid.primaryKey] === rowID : row === rowID) {\n                rowInGroup = true;\n            }\n        });\n        return rowInGroup;\n    }\n\n    public groupBy_toggle_group(groupRow: IGroupByRecord) {\n        const grid = this.grid;\n        const expansionState = grid.groupingExpansionState;\n        let toggleRowEditingOverlay: boolean;\n        let isEditRowInGroup = false;\n        if (grid.rowEditable) {\n            const rowState = this.grid.crudService.row;\n\n            // Toggle only row editing overlays that are inside current expanded/collapsed group.\n            isEditRowInGroup = rowState ? this.groupBy_is_row_in_group(groupRow, rowState.id) : false;\n        }\n        const state: IGroupByExpandState = this.groupBy_get_expanded_for_group(groupRow);\n        if (state) {\n            state.expanded = !state.expanded;\n            if (isEditRowInGroup) {\n                toggleRowEditingOverlay = state.expanded;\n            }\n        } else {\n            expansionState.push({\n                expanded: !grid.groupsExpanded,\n                hierarchy: DataUtil.getHierarchy(groupRow)\n            });\n            if (isEditRowInGroup) {\n                toggleRowEditingOverlay = false;\n            }\n        }\n        this.grid.groupingExpansionState = expansionState;\n        if (grid.rowEditable) {\n            grid.repositionRowEditingOverlay(grid.rowInEditMode);\n        }\n    }\n\n    public groupBy_fully_expand_group(groupRow: IGroupByRecord) {\n        const state: IGroupByExpandState = this.groupBy_get_expanded_for_group(groupRow);\n        const expanded = state ? state.expanded : this.grid.groupsExpanded;\n        if (!expanded) {\n            this.groupBy_toggle_group(groupRow);\n        }\n        if (groupRow.groupParent) {\n            this.groupBy_fully_expand_group(groupRow.groupParent);\n        }\n    }\n\n    protected remove_grouping_expression(fieldName) {\n        const groupingExpressions = this.grid.groupingExpressions;\n        const index = groupingExpressions.findIndex((expr) => expr.fieldName === fieldName);\n        if (index !== -1) {\n            groupingExpressions.splice(index, 1);\n        }\n    }\n\n    public arrange_sorting_expressions() {\n        const groupingState = this.grid.groupingExpressions;\n        this.grid.sortingExpressions.sort((a, b) => {\n            const groupExprA = groupingState.find((expr) => expr.fieldName === a.fieldName);\n            const groupExprB = groupingState.find((expr) => expr.fieldName === b.fieldName);\n            if (groupExprA && groupExprB) {\n                return groupingState.indexOf(groupExprA) > groupingState.indexOf(groupExprB) ? 1 : -1;\n            } else if (groupExprA) {\n                return -1;\n            } else if (groupExprB) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n    }\n\n    public get_groupBy_record_id(gRow: IGroupByRecord): string {\n        let recordId = '{ ';\n        const hierrarchy = DataUtil.getHierarchy(gRow);\n\n        for (let i = 0; i < hierrarchy.length; i++) {\n            const groupByKey = hierrarchy[i];\n            recordId += `'${groupByKey.fieldName}': '${groupByKey.value}'`;\n\n            if (i < hierrarchy.length - 1) {\n                recordId += ', ';\n            }\n        }\n        recordId += ' }';\n\n        return recordId;\n    }\n\n}\n","import { Directive, ElementRef, Renderer2, NgZone, HostBinding, TemplateRef } from '@angular/core';\nimport { IgxDropDirective } from '../../directives/dragdrop/dragdrop.directive';\nimport { IgxColumnMovingDragDirective } from '../grid.common';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxGridComponent } from './grid.component';\nimport { SortingDirection } from '../../data-operations/sorting-expression.interface';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGroupByRow]'\n})\nexport class IgxGroupByRowTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxGroupAreaDrop]'\n})\nexport class IgxGroupAreaDropDirective extends IgxDropDirective {\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2, private zone: NgZone) {\n        super(elementRef, renderer, zone);\n    }\n\n    @HostBinding('class.igx-drop-area--hover')\n    public hovered = false;\n\n\n    public onDragEnter(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        const column: IgxColumnComponent = drag.column;\n        if (!this.columnBelongsToGrid(column)) {\n            return;\n        }\n        const grid = <IgxGridComponent>column.grid;\n        const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;\n        if (column.groupable && !isGrouped && !column.columnGroup) {\n            drag.icon.innerText = 'group_work';\n            this.hovered = true;\n        } else {\n            drag.icon.innerText = 'block';\n            this.hovered = false;\n        }\n    }\n\n    public onDragLeave(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        const column: IgxColumnComponent = drag.column;\n        if (!this.columnBelongsToGrid(column)) {\n            return;\n        }\n        event.detail.owner.icon.innerText = 'block';\n        this.hovered = false;\n    }\n\n    public onDragDrop(event) {\n        const drag: IgxColumnMovingDragDirective = event.detail.owner;\n        if (drag instanceof IgxColumnMovingDragDirective) {\n            const column: IgxColumnComponent = drag.column;\n            if (!this.columnBelongsToGrid(column)) {\n                return;\n            }\n            const grid = <IgxGridComponent>column.grid;\n            const isGrouped = grid.groupingExpressions.findIndex((item) => item.fieldName === column.field) !== -1;\n            if (column.groupable && !isGrouped && !column.columnGroup) {\n                grid.groupBy({ fieldName: column.field, dir: SortingDirection.Asc, ignoreCase: column.sortingIgnoreCase,\n                    strategy: column.sortStrategy, groupingComparer: column.groupingComparer });\n            }\n        }\n    }\n\n    private closestParentByAttr(elem, attr) {\n        return elem.hasAttribute(attr) ?\n            elem :\n            this.closestParentByAttr(elem.parentElement, attr);\n    }\n\n    private columnBelongsToGrid(column) {\n        const elem = this.elementRef.nativeElement;\n        const closestGridID = this.closestParentByAttr(elem, 'igxGroupAreaDrop').getAttribute('gridId');\n        if (!column) {\n            return false;\n        } else {\n            const grid = <IgxGridComponent>column.grid;\n            if (!grid || grid.id !== closestGridID) {\n                return false;\n            }\n            return true;\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { IgxGridBaseComponent } from './grid-base.component';\nimport { first } from 'rxjs/operators';\nimport { IgxColumnComponent } from './column.component';\nimport { IgxGridNavigationService } from './grid-navigation.service';\nimport { ISelectionNode } from '../core/grid-selection';\n\n\nexport interface IStartNavigationCell {\n    rowStart: number;\n    colStart: number;\n    direction: NavigationDirection;\n}\n\nexport enum NavigationDirection {\n    horizontal = 'horizontal',\n    vertical = 'vertical'\n}\n\n\n/** @hidden */\n@Injectable()\nexport class IgxGridMRLNavigationService extends IgxGridNavigationService {\n\n    private startNavigationCell: IStartNavigationCell;\n\n    public grid: IgxGridBaseComponent;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public setStartNavigationCell(colStart: number, rowStart: number, dir: NavigationDirection) {\n        this.startNavigationCell = {\n            colStart: colStart,\n            rowStart: rowStart,\n            direction: dir\n        };\n    }\n\n    private applyNavigationCell(colStart: number, rowStart: number, navDirection: NavigationDirection): number {\n        const oppositeDir = navDirection === NavigationDirection.vertical ?\n            NavigationDirection.horizontal : NavigationDirection.vertical;\n        if (this.startNavigationCell && this.startNavigationCell.direction !== navDirection) {\n            this.startNavigationCell.direction = oppositeDir;\n        } else {\n            this.setStartNavigationCell(colStart, rowStart, oppositeDir);\n        }\n\n        return navDirection === NavigationDirection.vertical ?\n            this.startNavigationCell.colStart : this.startNavigationCell.rowStart;\n    }\n\n    public navigateUp(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusCellUpFromLayout(rowElement, selectedNode);\n    }\n\n    public navigateDown(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusCellDownFromLayout(rowElement, selectedNode);\n    }\n\n    public isColumnRightEdgeVisible(visibleColumnIndex: number): boolean {\n        const column = this.grid.columnList.filter(c => !c.columnGroup).find((col) => col.visibleIndex === visibleColumnIndex);\n        const forOfDir =  this.grid.headerContainer;\n        const horizontalScroll = forOfDir.getHorizontalScroll();\n        if (!horizontalScroll.clientWidth || (column && column.pinned)) {\n            return true;\n        } else if (column) {\n            if (this.isParentColumnFullyVisible(column)) { return true; }\n            const scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);\n            return this.displayContainerWidth >= scrollPos.rightScroll - this.displayContainerScrollLeft &&\n            this.displayContainerScrollLeft <= scrollPos.leftScroll;\n        }\n        return false;\n    }\n    private isParentColumnFullyVisible(parent: IgxColumnComponent): boolean {\n        const forOfDir = this.grid.dataRowList.length > 0 ? this.grid.dataRowList.first.virtDirRow : this.grid.headerContainer;\n        const horizontalScroll = forOfDir.getHorizontalScroll();\n        if (!horizontalScroll.clientWidth || parent.pinned) { return true; }\n        const index = forOfDir.igxForOf.indexOf(parent);\n        return this.displayContainerWidth >= forOfDir.getColumnScrollLeft(index + 1) - this.displayContainerScrollLeft &&\n            this.displayContainerScrollLeft <= forOfDir.getColumnScrollLeft(index);\n    }\n\n    public isColumnLeftEdgeVisible(visibleColumnIndex: number): boolean {\n        const forOfDir = this.grid.headerContainer;\n        const horizontalScroll = forOfDir.getHorizontalScroll();\n        const column = this.grid.columnList.filter(c => !c.columnGroup).find((col) => col.visibleIndex === visibleColumnIndex);\n        if (!horizontalScroll.clientWidth || column.pinned) {\n            return true;\n        }\n        if (this.isParentColumnFullyVisible(column)) { return true; }\n        const scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);\n        return this.displayContainerScrollLeft <= scrollPos.leftScroll;\n    }\n\n    public onKeydownArrowRight(element: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusNextCellFromLayout(element, selectedNode);\n    }\n\n    public onKeydownArrowLeft(element: HTMLElement, selectedNode: ISelectionNode) {\n        this.focusPrevCellFromLayout(element, selectedNode);\n    }\n    public get gridOrderedColumns(): IgxColumnComponent[] {\n        return [...this.grid.pinnedColumns, ...this.grid.unpinnedColumns].filter(c => !c.columnGroup)\n        .sort((a, b) => a.visibleIndex - b.visibleIndex);\n    }\n\n    public performTab(currentRowEl: HTMLElement, selectedNode: ISelectionNode) {\n        const visibleColumnIndex = selectedNode.layout ? selectedNode.layout.columnVisibleIndex : 0;\n        const nextElementColumn = this.grid.columns.find(x => !x.columnGroup && x.visibleIndex === visibleColumnIndex + 1);\n        const rowIndex = selectedNode.row;\n        const row = this.grid.getRowByIndex(rowIndex);\n        this._moveFocusToCell(currentRowEl, nextElementColumn, row, selectedNode, 'next');\n        if (nextElementColumn) {\n            this.setStartNavigationCell(nextElementColumn.colStart, nextElementColumn.rowStart, null);\n        }\n    }\n\n    protected _moveFocusToCell(currentRowEl: HTMLElement, nextElementColumn, row, selectedNode, dir) {\n        if (nextElementColumn && row.cells) {\n            let nextCell = row.cells.find(currCell => currCell.column === nextElementColumn);\n            const isVisible = this.isColumnRightEdgeVisible(nextElementColumn.visibleIndex);\n            if (!nextCell || !isVisible) {\n                this.grid.nativeElement.focus({ preventScroll: true });\n                const cb = () => {\n                    nextCell = row.cells.find(currCell => currCell.column === nextElementColumn);\n                    if (this.grid.rowEditable && this.isRowInEditMode(row.index)) {\n                        if (dir === 'next') {\n                            this.moveNextEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                        } else {\n                            this.movePreviousEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                        }\n                        return;\n                    }\n                    this._focusCell(nextCell.nativeElement);\n                };\n                this.performHorizontalScrollToCell(row.index, nextElementColumn.visibleIndex, false, cb);\n            } else {\n                if (this.grid.rowEditable && this.isRowInEditMode(row.index)) {\n                    if (dir === 'next') {\n                        this.moveNextEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                    } else {\n                        this.movePreviousEditable(row.index, selectedNode.layout.columnVisibleIndex);\n                    }\n                    return;\n                }\n                this._focusCell(nextCell.nativeElement);\n            }\n        } else {\n            // end of layout reached\n            if (this.isRowInEditMode(row.index)) {\n                //  TODO: make gridAPI visible for internal use and remove cast to any\n                (this.grid as any).gridAPI.submit_value();\n                if (dir === 'next') {\n                    this.grid.rowEditTabs.first.element.nativeElement.focus();\n                } else {\n                    this.grid.rowEditTabs.last.element.nativeElement.focus();\n                }\n                return;\n            }\n            if (dir === 'next') {\n                super.navigateDown(currentRowEl, {row: row.index, column: 0});\n            } else {\n                 let lastVisibleIndex = 0;\n                this.grid.unpinnedColumns.forEach((col) => {\n                    lastVisibleIndex = Math.max(lastVisibleIndex, col.visibleIndex);\n                });\n                super.navigateUp(currentRowEl, {row: row.index, column: lastVisibleIndex});\n            }\n        }\n    }\n\n    public performShiftTabKey(currentRowEl: HTMLElement, selectedNode: ISelectionNode) {\n        const visibleColumnIndex = selectedNode.layout ? selectedNode.layout.columnVisibleIndex : 0;\n        const rowIndex = selectedNode.row;\n        const row = this.grid.getRowByIndex(rowIndex);\n        const prevElementColumn =\n         this.grid.columns.find(x => !x.columnGroup && x.visibleIndex === visibleColumnIndex - 1 && !x.hidden);\n         this._moveFocusToCell(currentRowEl, prevElementColumn, row, selectedNode, 'prev');\n        if (prevElementColumn) {\n            this.setStartNavigationCell(prevElementColumn.colStart, prevElementColumn.rowStart, null);\n        }\n    }\n\n    private focusCellUpFromLayout(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        const isGroupRow = rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row';\n        const currentRowStart = selectedNode.layout ?  selectedNode.layout.rowStart : 1;\n        const currentColStart = this.applyNavigationCell(selectedNode.layout ? selectedNode.layout.colStart : 1,\n            currentRowStart,\n            NavigationDirection.vertical);\n        const parentIndex = selectedNode.column;\n        const columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        let movePrev;\n        // check if element up is from the same layout\n        let upperElementColumn = columnLayout.children.find(c =>\n            (c.rowEnd === currentRowStart || c.rowStart + c.gridRowSpan === currentRowStart)  &&\n            c.colStart <= currentColStart &&\n            (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n        if (isGroupRow || !upperElementColumn) {\n            // no prev row in current row layout, go to next row last rowstart\n            const layoutRowEnd = this.grid.multiRowLayoutRowSize + 1;\n            upperElementColumn = columnLayout.children.find(c =>\n                (c.rowEnd === layoutRowEnd || c.rowStart + c.gridRowSpan === layoutRowEnd) &&\n                c.colStart <= currentColStart &&\n                (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n            movePrev = true;\n        }\n        const rowIndex = movePrev ? selectedNode.row - 1 : selectedNode.row;\n        if (rowIndex < 0) {\n            // end of rows reached.\n            return;\n        }\n        let prevRow;\n        const cb = () => {\n            prevRow = this.grid.getRowByIndex(rowIndex);\n            if (prevRow && prevRow.cells) {\n                this._focusCell(upperElementColumn.cells.find((c) => c.rowIndex === prevRow.index).nativeElement);\n            } else if (prevRow) {\n                prevRow.nativeElement.focus({ preventScroll: true });\n            }\n        };\n        if (this.shouldPerformVerticalScroll(rowIndex, upperElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n                this.performVerticalScrollToCell(rowIndex, upperElementColumn.visibleIndex, cb);\n        } else {\n            cb();\n        }\n    }\n\n    private focusCellDownFromLayout(rowElement: HTMLElement, selectedNode: ISelectionNode) {\n        const isGroupRow = rowElement.tagName.toLowerCase() === 'igx-grid-groupby-row';\n        const parentIndex = selectedNode.column;\n        const columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        const currentRowEnd = selectedNode.layout ? selectedNode.layout.rowEnd || selectedNode.layout.rowStart + 1 : 2;\n        const currentColStart = this.applyNavigationCell(selectedNode.layout ? selectedNode.layout.colStart : 1,\n            selectedNode.layout ? selectedNode.layout.rowStart : 1,\n            NavigationDirection.vertical);\n        let moveNext;\n        // check if element down is from the same layout\n        let nextElementColumn = columnLayout.children.find(c => c.rowStart === currentRowEnd &&\n            c.colStart <= currentColStart &&\n            (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n        if (isGroupRow || !nextElementColumn) {\n            // no next row in current row layout, go to next row first rowstart\n            nextElementColumn = columnLayout.children.find(c => c.rowStart === 1 &&\n                c.colStart <= currentColStart &&\n                (currentColStart < c.colEnd || currentColStart < c.colStart + c.gridColumnSpan));\n            moveNext = true;\n        }\n        const rowIndex = moveNext ? selectedNode.row + 1 : selectedNode.row;\n        if (rowIndex > this.grid.verticalScrollContainer.igxForOf.length - 1) {\n            // end of rows reached.\n            return;\n        }\n        let nextRow;\n        const cb = () => {\n            nextRow = this.grid.getRowByIndex(rowIndex);\n            if (nextRow && nextRow.cells) {\n                this._focusCell(nextElementColumn.cells.find((c) => c.rowIndex === nextRow.index).nativeElement);\n            } else if (nextRow) {\n                nextRow.nativeElement.focus({ preventScroll: true });\n            }\n        };\n        if (this.shouldPerformVerticalScroll(rowIndex, nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n                this.performVerticalScrollToCell(rowIndex, nextElementColumn.visibleIndex, cb);\n        } else {\n            cb();\n        }\n    }\n\n    private focusNextCellFromLayout(cellElement: HTMLElement, selectedNode: ISelectionNode) {\n        const parentIndex = selectedNode.column;\n        let columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        const currentColEnd = selectedNode.layout.colEnd || selectedNode.layout.colStart + 1;\n        const currentRowStart = this.applyNavigationCell(selectedNode.layout.colStart,\n            selectedNode.layout.rowStart,\n            NavigationDirection.horizontal);\n        const rowIndex = selectedNode.row;\n        // check if next element is from the same layout\n        let nextElementColumn = columnLayout.children.find(c => c.colStart === currentColEnd &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        if (!nextElementColumn) {\n            // no next column in current layout, search for next layout\n            columnLayout = this.grid.columns.find(c => c.columnLayout && !c.hidden && c.visibleIndex === columnLayout.visibleIndex + 1);\n            if (!columnLayout) {\n                // reached the end\n                return null;\n            }\n            // next element is from the next layout\n            nextElementColumn = columnLayout.children.find(c => c.colStart === 1 &&\n                c.rowStart <= currentRowStart &&\n                (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        }\n        const cb = () => {\n            const nextElement = nextElementColumn.cells.find((c) => c.rowIndex === rowIndex).nativeElement;\n           this._focusCell(nextElement);\n        };\n        if (!this.isColumnRightEdgeVisible(nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);\n        } else {\n            cb();\n        }\n    }\n\n    private focusPrevCellFromLayout(cellElement: HTMLElement, selectedNode: ISelectionNode) {\n        const parentIndex = selectedNode.column;\n        let columnLayout = this.grid.columns.find( x => x.columnLayout && x.visibleIndex === parentIndex);\n        const currentColStart = selectedNode.layout.colStart;\n        const currentRowStart = this.applyNavigationCell(currentColStart,\n            selectedNode.layout.rowStart,\n            NavigationDirection.horizontal);\n        const rowIndex = selectedNode.row;\n\n        // check previous element is from the same layout\n        let prevElementColumn = columnLayout.children\n        .find(c => (c.colEnd === currentColStart || c.colStart + c.gridColumnSpan === currentColStart ) &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        if (!prevElementColumn) {\n            // no prev column in current layout, seacrh for prev layout\n            columnLayout = this.grid.columns.find(c => c.columnLayout && !c.hidden && c.visibleIndex === columnLayout.visibleIndex - 1);\n            if (!columnLayout) {\n                // reached the end\n                return null;\n            }\n            const layoutSize = columnLayout.getInitialChildColumnSizes(columnLayout.children).length;\n            // first element is from the next layout\n            prevElementColumn = columnLayout.children\n            .find(c => (c.colEnd === layoutSize + 1 || c.colStart + c.gridColumnSpan === layoutSize + 1) &&\n                c.rowStart <= currentRowStart &&\n                (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        }\n\n        const cb = () => {\n            const prevElement = prevElementColumn.cells.find((c) => c.rowIndex === rowIndex).nativeElement;\n            this._focusCell(prevElement);\n        };\n        if (!this.isColumnLeftEdgeVisible(prevElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.performHorizontalScrollToCell(rowIndex, prevElementColumn.visibleIndex, false, cb);\n        } else {\n            cb();\n        }\n    }\n\n    public onKeydownEnd(rowIndex: number, isSummary: boolean = false, cellRowStart?: number) {\n        const layouts = this.grid.columns.filter(c => c.columnLayout && !c.hidden).sort((a, b) => a.visibleIndex - b.visibleIndex);\n        const lastLayout = layouts[layouts.length - 1];\n        const lastLayoutChildren = lastLayout.children;\n        const layoutSize =  lastLayout.getInitialChildColumnSizes(lastLayoutChildren).length;\n        const currentRowStart = this.applyNavigationCell(\n            this.startNavigationCell ? this.startNavigationCell.colStart : 1,\n            cellRowStart || this.grid.multiRowLayoutRowSize,\n            NavigationDirection.horizontal);\n        const nextElementColumn = lastLayout.children.find(c =>\n            (c.colEnd === layoutSize + 1 || c.colStart + c.gridColumnSpan === layoutSize + 1) &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        const indexInLayout = lastLayoutChildren.toArray().indexOf(nextElementColumn);\n\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n\n        if (!this.isColumnRightEdgeVisible(nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n            const cb = () => {\n                const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n                const cell = allBlocks[allBlocks.length - 1].children[indexInLayout];\n                this._focusCell(cell);\n            };\n            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);\n            return;\n        } else {\n            const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n            const cell =  allBlocks[allBlocks.length - 1].children[indexInLayout];\n            this._focusCell(cell);\n        }\n    }\n\n    public onKeydownHome(rowIndex: number, isSummary: boolean = false, cellRowStart: number = 1) {\n        const firstLayout = this.grid.columns.filter(c => c.columnLayout && !c.hidden)[0];\n        const lastLayoutChildren = firstLayout.children.toArray();\n        const currentRowStart = this.applyNavigationCell(\n            this.startNavigationCell ? this.startNavigationCell.colStart : 1,\n            cellRowStart,\n            NavigationDirection.horizontal);\n        const nextElementColumn = firstLayout.children.find(c =>\n            c.colStart === 1 &&\n            c.rowStart <= currentRowStart &&\n            (currentRowStart < c.rowEnd || currentRowStart < c.rowStart + c.gridRowSpan));\n        const indexInLayout = lastLayoutChildren.indexOf(nextElementColumn);\n\n        const rowList = isSummary ? this.grid.summariesRowList : this.grid.dataRowList;\n        let rowElement = rowList.find((row) => row.index === rowIndex);\n        if (!rowElement) { return; }\n        rowElement = rowElement.nativeElement;\n\n        if (!this.isColumnLeftEdgeVisible(nextElementColumn.visibleIndex)) {\n            this.grid.nativeElement.focus({ preventScroll: true });\n           const cb = () => {\n                const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n                const cell = allBlocks[0].children[indexInLayout];\n                this._focusCell(cell);\n            };\n            this.performHorizontalScrollToCell(rowIndex, nextElementColumn.visibleIndex, false, cb);\n            return;\n        } else {\n            const allBlocks = rowElement.querySelectorAll(this.getColumnLayoutSelector());\n            const cell =  allBlocks[0].children[indexInLayout];\n            this._focusCell(cell);\n        }\n    }\n\n    protected getColumnLayoutSelector(): string {\n        return '.igx-grid__mrl-block';\n    }\n\n    protected getChildColumnScrollPositions(visibleColIndex: number): { leftScroll: number, rightScroll: number } {\n        const forOfDir = this.grid.dataRowList.length > 0 ? this.grid.dataRowList.first.virtDirRow : this.grid.headerContainer;\n        const targetCol: IgxColumnComponent = this.getColunmByVisibleIndex(visibleColIndex);\n        const parent = targetCol.parent;\n        const parentVIndex = forOfDir.igxForOf.indexOf(parent);\n        let leftScroll = forOfDir.getColumnScrollLeft(parentVIndex), rightScroll = 0;\n        // caculate offset from parent based on target column colStart and colEnd and the resolved child column sizes.\n        const childSizes = parent.getFilledChildColumnSizes(parent.children);\n        const colStart = targetCol.colStart || 1;\n        const colEnd = targetCol.colEnd || colStart + 1;\n        for (let i = 1; i < colStart; i++) {\n            leftScroll += parseInt(childSizes[i - 1], 10);\n        }\n        rightScroll += leftScroll;\n        for (let j = colStart; j < colEnd; j++) {\n            rightScroll +=  parseInt(childSizes[j - 1], 10);\n        }\n        return {leftScroll, rightScroll};\n    }\n\n    protected getColunmByVisibleIndex(visibleColIndex: number): IgxColumnComponent {\n        visibleColIndex = visibleColIndex < 0 ? 0 : visibleColIndex;\n        return this.grid.columnList.find((col) => !col.columnLayout && col.visibleIndex === visibleColIndex);\n    }\n\n    public shouldPerformVerticalScroll(rowIndex: number, visibleColumnIndex: number): boolean {\n        if (this._isGroupRecordAt(rowIndex)) {\n            return super.shouldPerformVerticalScroll(rowIndex, visibleColumnIndex);\n       }\n        if (!super.shouldPerformVerticalScroll(rowIndex, visibleColumnIndex)) {return false; }\n       const targetRow = this.grid.summariesRowList.filter(s => s.index !== 0)\n           .concat(this.grid.rowList.toArray()).find(r => r.index === rowIndex);\n       const scrollTop =  Math.abs(this.grid.verticalScrollContainer.getVerticalScroll().scrollTop);\n       const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n       const scrollPos = this.getVerticalScrollPositions(rowIndex, visibleColumnIndex);\n       if (!targetRow || targetRow.nativeElement.offsetTop + scrollPos.topOffset < Math.abs(this.verticalDCTopOffset)\n           || containerHeight && containerHeight < scrollPos.rowBottom - scrollTop) {\n           return true;\n       } else {\n           return false;\n       }\n   }\n\n   get verticalDCTopOffset(): number {\n        return parseInt(this.grid.verticalScrollContainer.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n    }\n\n    private _isGroupRecordAt(rowIndex: number) {\n        const record = this.grid.verticalScrollContainer.igxForOf[rowIndex];\n        return record.records && record.records.length;\n    }\n\n    public performVerticalScrollToCell(rowIndex: number, visibleColumnIndex: number, cb?: () => void) {\n        if (this._isGroupRecordAt(rowIndex)) {\n            return super.performVerticalScrollToCell(rowIndex, visibleColumnIndex, cb);\n        }\n        const containerHeight = this.grid.calcHeight ? Math.ceil(this.grid.calcHeight) : 0;\n        const scrollTop = Math.abs(this.grid.verticalScrollContainer.getVerticalScroll().scrollTop);\n        const scrollPos = this.getVerticalScrollPositions(rowIndex, visibleColumnIndex);\n        const targetRow = this.grid.summariesRowList.filter(s => s.index !== 0)\n            .concat(this.grid.rowList.toArray()).find(r => r.index === rowIndex);\n        const isPrevious =  (scrollTop > scrollPos.rowTop) && (!targetRow ||\n                targetRow.nativeElement.offsetTop + scrollPos.topOffset < Math.abs(this.verticalDCTopOffset));\n        const scrollAmount = isPrevious ? scrollPos.rowTop : Math.abs(scrollTop + containerHeight - scrollPos.rowBottom);\n\n        this.grid.verticalScrollContainer.onChunkLoad\n        .pipe(first()).subscribe(() => {\n            cb();\n        });\n\n        if (isPrevious) {\n            this.grid.verticalScrollContainer.getVerticalScroll().scrollTop = scrollAmount;\n        } else {\n            this.grid.verticalScrollContainer.addScrollTop(scrollAmount);\n        }\n    }\n\n    public getVerticalScrollPositions(rowIndex: number, visibleColIndex: number): { rowTop: number, rowBottom: number, topOffset: number } {\n        const targetCol: IgxColumnComponent = this.getColunmByVisibleIndex(visibleColIndex);\n        const topOffset = (targetCol.rowStart - 1)  * this.grid.defaultRowHeight;\n        const rowTop = this.grid.verticalScrollContainer.sizesCache[rowIndex] + topOffset;\n        const rowBottom = rowTop + (this.grid.defaultRowHeight * targetCol.gridRowSpan);\n        return { rowTop, rowBottom, topOffset };\n    }\n\n    public performHorizontalScrollToCell(\n        rowIndex: number, visibleColumnIndex: number, isSummary: boolean = false, cb?: () => void) {\n        const scrollPos = this.getChildColumnScrollPositions(visibleColumnIndex);\n        const hScroll = this.horizontalScroll(rowIndex);\n        this.grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(() => {\n                if (cb) {\n                    cb();\n                } else {\n                    this._focusCell(this.getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary));\n                }\n        });\n        const isPrevItem =  hScroll.getHorizontalScroll().scrollLeft > scrollPos.leftScroll;\n        const containerSize = parseInt(hScroll.igxForContainerSize, 10);\n        const nextScroll = isPrevItem ? scrollPos.leftScroll : scrollPos.rightScroll - containerSize;\n        hScroll.getHorizontalScroll().scrollLeft = nextScroll;\n    }\n\n    protected _focusCell(cellElem: HTMLElement) {\n        // in case of variable row heights in mrl grid make sure cell is really in view after it has been rendered.\n        const gridBoundingClientRect = this.grid.tbody.nativeElement.getBoundingClientRect();\n        const diffTop = cellElem.getBoundingClientRect().top - gridBoundingClientRect.top;\n        const diffBottom = cellElem.getBoundingClientRect().bottom - gridBoundingClientRect.bottom;\n\n        if (diffTop < 0) {\n            // cell is above grid top - not visible\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    cellElem.focus({ preventScroll: true });\n            });\n            this.grid.verticalScrollContainer.addScrollTop(diffTop);\n        } else if (diffBottom > 0) {\n            // cell is below grid bottom - not visible\n            this.grid.nativeElement.focus({ preventScroll: true });\n            this.grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(() => {\n                    cellElem.focus({ preventScroll: true });\n            });\n            this.grid.verticalScrollContainer.addScrollTop(diffBottom);\n        }  else {\n            // cell is visible\n            cellElem.focus({ preventScroll: true });\n        }\n    }\n\n    public goToFirstCell() {\n        this.startNavigationCell = null;\n        super.goToFirstCell();\n    }\n\n    public goToLastCell() {\n        this.startNavigationCell = null;\n        super.goToLastCell();\n    }\n}\n","import {\n    Component, ChangeDetectionStrategy, Input, Output, EventEmitter, ContentChild, ViewChildren,\n    QueryList, ViewChild, ElementRef, TemplateRef, DoCheck, NgZone, ChangeDetectorRef, ComponentFactoryResolver,\n    IterableDiffers, ViewContainerRef, Inject, AfterContentInit, HostBinding, forwardRef, OnInit, Optional\n} from '@angular/core';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IgxGridTransaction, IFocusChangeEventArgs, IGridDataBindable, FilterMode } from '../grid-base.component';\nimport { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { cloneArray } from '../../core/utils';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IgxGroupByRowTemplateDirective } from './grid.directives';\nimport { IgxGridGroupByRowComponent } from './groupby-row.component';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IBaseChipEventArgs, IChipClickEventArgs, IChipKeyDownEventArgs } from '../../chips/chip.component';\nimport { IChipsAreaReorderEventArgs } from '../../chips/chips-area.component';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { TransactionService, Transaction, State } from '../../services/transaction/transaction';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxColumnComponent } from '../column.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { IgxOverlayService } from '../../services/index';\nimport { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { IgxDragIndicatorIconDirective } from '../row-drag.directive';\nimport { IgxGridMRLNavigationService } from '../grid-mrl-navigation.service';\n\nlet NEXT_ID = 0;\n\nexport interface IGridFocusChangeEventArgs extends IFocusChangeEventArgs {\n    groupRow: IgxGridGroupByRowComponent;\n}\nexport interface IGroupingDoneEventArgs {\n    expressions: Array<ISortingExpression> | ISortingExpression;\n    groupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n    ungroupedColumns: Array<IgxColumnComponent> | IgxColumnComponent;\n}\n\n/**\n * **Ignite UI for Angular Grid** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html)\n *\n * The Ignite UI Grid is used for presenting and manipulating tabular data in the simplest way possible.  Once data\n * has been bound, it can be manipulated through filtering, sorting & editing operations.\n *\n * Example:\n * ```html\n * <igx-grid [data]=\"employeeData\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-grid>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    providers: [IgxGridNavigationService, IgxGridSummaryService, IgxGridSelectionService, IgxGridCRUDService,\n        { provide: GridBaseAPIService, useClass: IgxGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxGridComponent) },\n        IgxFilteringService, IgxColumnResizingService, IgxForOfSyncService\n    ],\n    selector: 'igx-grid',\n    templateUrl: './grid.component.html'\n})\nexport class IgxGridComponent extends IgxGridBaseComponent implements IGridDataBindable, OnInit, DoCheck, AfterContentInit {\n    private _id = `igx-grid-${NEXT_ID++}`;\n    /**\n     * @hidden @internal\n     */\n    public groupingResult: any[];\n\n    /**\n     * @hidden @internal\n     */\n    public groupingMetadata: any[];\n\n    /**\n     * @hidden @internal\n     */\n    public groupingFlatResult: any[];\n    /**\n     * @hidden\n     */\n    protected _groupingExpressions: IGroupingExpression[] = [];\n    /**\n     * @hidden\n     */\n    protected _groupingExpandState: IGroupByExpandState[] = [];\n    /**\n     * @hidden\n     */\n    protected _groupRowTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected _groupAreaTemplate: TemplateRef<any>;\n    /**\n     * @hidden\n     */\n    protected groupingDiffer;\n    private _data;\n    private _hideGroupedColumns = false;\n    private _dropAreaMessage = null;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        this._id = value;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxGridComponent` with an array of data.\n     * ```html\n     * <igx-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n     * @memberof IgxGridComponent\n    */\n    @Input()\n    public get data(): any[] {\n        return this._data;\n    }\n\n    public set data(value: any[]) {\n        this._data = value;\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n            this.reflow();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set filteredData(value) {\n        this._filteredData = value;\n\n        if (this.rowSelectable) {\n            this.updateHeaderCheckboxStatusOnFilter(this._filteredData);\n        }\n    }\n\n    /**\n     * Returns the state of the grid virtualization, including the start index and how many records are rendered.\n     * ```typescript\n     * const gridVirtState = this.grid1.virtualizationState;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get virtualizationState() {\n        return this.verticalScrollContainer.state;\n    }\n\n    /**\n     * @hidden\n     */\n    set virtualizationState(state) {\n        this.verticalScrollContainer.state = state;\n    }\n\n    /**\n     * Sets the total number of records in the data source.\n     * This property is required for remote grid virtualization to function when it is bound to remote data.\n     * ```typescript\n     * this.grid1.totalItemCount = 55;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set totalItemCount(count) {\n        this.verticalScrollContainer.totalItemCount = count;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Returns the total number of records in the data source.\n     * Works only with remote grid virtualization.\n     * ```typescript\n     * const itemCount = this.grid1.totalItemCount;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get totalItemCount() {\n        return this.verticalScrollContainer.totalItemCount;\n    }\n\n    private _gridAPI: IgxGridAPIService;\n    private _filteredData = null;\n\n    constructor(\n        selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        selection: IgxSelectionAPIService,\n        @Inject(IgxGridTransaction) _transactions: TransactionService<Transaction, State>,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(selectionService,\n                  crudService, gridAPI, selection, _transactions, elementRef, zone, document, cdr, resolver, differs, viewRef, navigation,\n                  filteringService, overlayService, summaryService, _displayDensityOptions);\n            this._gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    /**\n     * Returns the group by state of the `IgxGridComponent`.\n     * ```typescript\n     * let groupByState = this.grid.groupingExpressions;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    get groupingExpressions(): IGroupingExpression[] {\n        return this._groupingExpressions;\n    }\n\n    /**\n     * Sets the group by state of the `IgxGridComponent` and emits the `onGroupingDone`\n     * event with the appropriate arguments.\n     * ```typescript\n     * this.grid.groupingExpressions = [{\n     *     fieldName: \"ID\",\n     *     dir: SortingDirection.Asc,\n     *     ignoreCase: false\n     * }];\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupingExpressions(value: IGroupingExpression[]) {\n        if (value && value.length > 10) {\n            throw Error('Maximum amount of grouped columns is 10.');\n        }\n        const oldExpressions: IGroupingExpression[] = this.groupingExpressions;\n        const newExpressions: IGroupingExpression[] = value;\n        this._groupingExpressions = cloneArray(value);\n        this.chipsGoupingExpressions = cloneArray(value);\n        if (this._gridAPI.grid) {\n            /* grouping should work in conjunction with sorting\n            and without overriding separate sorting expressions */\n            this._applyGrouping();\n            this._gridAPI.arrange_sorting_expressions();\n            this.cdr.markForCheck();\n        } else {\n            // setter called before grid is registered in grid API service\n            this.sortingExpressions.unshift.apply(this.sortingExpressions, this._groupingExpressions);\n        }\n        if (JSON.stringify(oldExpressions) !== JSON.stringify(newExpressions) && this.columnList) {\n            const groupedCols: IgxColumnComponent[] = [];\n            const ungroupedCols: IgxColumnComponent[] = [];\n            const groupedColsArr = newExpressions.filter((obj) => {\n                return !oldExpressions.some((obj2) => {\n                    return obj.fieldName === obj2.fieldName;\n                });\n            });\n            groupedColsArr.forEach((elem) => {\n                groupedCols.push(this.getColumnByName(elem.fieldName));\n            }, this);\n            const ungroupedColsArr = oldExpressions.filter((obj) => {\n                return !newExpressions.some((obj2) => {\n                    return obj.fieldName === obj2.fieldName;\n                });\n            });\n            ungroupedColsArr.forEach((elem) => {\n                ungroupedCols.push(this.getColumnByName(elem.fieldName));\n            }, this);\n            this.cdr.detectChanges();\n            const groupingDoneArgs: IGroupingDoneEventArgs = {\n                expressions: newExpressions,\n                groupedColumns: groupedCols,\n                ungroupedColumns: ungroupedCols\n            };\n            this.onGroupingDone.emit(groupingDoneArgs);\n        }\n    }\n\n    /**\n     * Returns a list of expansion states for group rows.\n     * Includes only states that differ from the default one (controlled through groupsExpanded and states that the user has changed.\n     * Contains the expansion state (expanded: boolean) and the unique identifier for the group row (Array).\n     * ```typescript\n     * const groupExpState = this.grid.groupingExpansionState;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    get groupingExpansionState() {\n        return this._groupingExpandState;\n    }\n\n    /**\n     * Sets a list of expansion states for group rows.\n     * ```typescript\n     *      this.grid.groupingExpansionState = [{\n     *      expanded: false,\n     *      hierarchy: [{ fieldName: 'ID', value: 1 }]\n     *   }];\n     * // You can use DataUtil.getHierarchy(groupRow) to get the group `IgxGridRowComponent` hierarchy.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupingExpansionState(value) {\n        this._groupingExpandState = cloneArray(value);\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * An @Input property that determines whether created groups are rendered expanded or collapsed.\n     * The default rendered state is expanded.\n     * ```html\n     * <igx-grid #grid [data]=\"Data\" [groupsExpanded]=\"false\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public groupsExpanded = true;\n\n    /**\n     * A hierarchical representation of the group by records.\n     * ```typescript\n     * let groupRecords = this.grid.groupsRecords;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public groupsRecords: IGroupByRecord[] = [];\n\n    /**\n     * An @Input property that sets whether the grouped columns should be hidden as well.\n     * The default value is \"false\"\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" [hideGroupedColumns]=\"true\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public get hideGroupedColumns() {\n        return this._hideGroupedColumns;\n    }\n\n    public set hideGroupedColumns(value: boolean) {\n        if (value) {\n            this.groupingDiffer = this.differs.find(this.groupingExpressions).create();\n        } else {\n            this.groupingDiffer = null;\n        }\n        if (this.columnList && this.groupingExpressions) {\n            this._setGroupColsVisibility(value);\n        }\n\n        this._hideGroupedColumns = value;\n    }\n\n    /**\n     * An @Input property that sets the message displayed inside the GroupBy drop area where columns can be dragged on.\n     * Note: The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * ```html\n     * <igx-grid dropAreaMessage=\"Drop here to group!\">\n     *      <igx-column [groupable]=\"true\" field=\"ID\"></igx-column>\n     * </igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    set dropAreaMessage(value: string) {\n        this._dropAreaMessage = value;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * An accessor that returns the message displayed inside the GroupBy drop area where columns can be dragged on.\n    */\n    get dropAreaMessage(): string {\n        return this._dropAreaMessage || this.resourceStrings.igx_grid_groupByArea_message;\n    }\n\n    /**\n     * An @Input property that sets the template that will be rendered as a GroupBy drop area.\n     * Note: The grid needs to have at least one groupable column in order the GroupBy area to be displayed.\n     * ```html\n     * <igx-grid [dropAreaTemplate]=\"dropAreaRef\">\n     *      <igx-column [groupable]=\"true\" field=\"ID\"></igx-column>\n     * </igx-grid>\n     *\n     * <ng-template #myDropArea>\n     *      <span> Custom drop area! </span>\n     * </ng-template>\n     * ```\n     * ```ts\n     * @ViewChild('myDropArea', { read: TemplateRef })\n     * public dropAreaRef: TemplateRef<any>;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Input()\n    public dropAreaTemplate: TemplateRef<any>;\n\n    /**\n     * Emitted when a new `IgxColumnComponent` gets grouped/ungrouped, or multiple columns get\n     * grouped/ungrouped at once by using the Group By API.\n     * The `onGroupingDone` event would be raised only once if several columns get grouped at once by calling\n     * the `groupBy()` or `clearGrouping()` API methods and passing an array as an argument.\n     * The event arguments provide the `expressions`, `groupedColumns` and `ungroupedColumns` properties, which contain\n     * the `ISortingExpression` and the `IgxColumnComponent` related to the grouping/ungrouping operation.\n     * Please note that `groupedColumns` and `ungroupedColumns` show only the **newly** changed columns (affected by the **last**\n     * grouping/ungrouping operation), not all columns which are currently grouped/ungrouped.\n     * columns.\n     * ```typescript\n     * groupingDone(event: IGroupingDoneEventArgs){\n     *     const expressions = event.expressions;\n     *     //the newly grouped columns\n     *     const groupedColumns = event.groupedColumns;\n     *     //the newly ungrouped columns\n     *     const ungroupedColumns = event.ungroupedColumns;\n     * }\n     * ```\n     * ```html\n     * <igx-grid #grid [data]=\"localData\" (onGroupingDone)=\"groupingDone($event)\" [autoGenerate]=\"true\"></igx-grid>\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    @Output()\n    public onGroupingDone = new EventEmitter<IGroupingDoneEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxGroupByRowTemplateDirective, { read: IgxGroupByRowTemplateDirective, static: true })\n    protected groupTemplate: IgxGroupByRowTemplateDirective;\n\n    /**\n     * The custom template, if any, that should be used when rendering the row drag indicator icon\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.dragIndicatorIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-grid #grid>\n     *      ...\n     *      <ng-template igxDragIndicatorIcon>\n     *          <igx-icon fontSet=\"material\">info</igx-icon>\n     *      </ng-template>\n     *  </igx-grid>\n     * ```\n     */\n    @ContentChild(IgxDragIndicatorIconDirective, { read: TemplateRef, static: true })\n    public dragIndicatorIconTemplate: TemplateRef<any> = null;\n\n    @ViewChildren(IgxGridGroupByRowComponent, { read: IgxGridGroupByRowComponent })\n    private _groupsRowList: QueryList<IgxGridGroupByRowComponent>;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('defaultDropArea', { read: TemplateRef, static: true })\n    public defaultDropAreaTemplate: TemplateRef<any>;\n\n    /**\n     * A list of all group rows.\n     * ```typescript\n     * const groupList = this.grid.groupsRowList;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public get groupsRowList() {\n        const res = new QueryList<any>();\n        if (!this._groupsRowList) {\n            return res;\n        }\n        const rList = this._groupsRowList.filter((item) => {\n            return item.element.nativeElement.parentElement !== null;\n        });\n        res.reset(rList);\n        return res;\n    }\n\n    /**\n     * @hidden\n     */\n    @ViewChild('groupArea', { static: false })\n    public groupArea: ElementRef;\n\n    /**\n     * @hidden\n     */\n    get groupAreaHostClass(): string {\n        return this.getComponentDensityClass('igx-drop-area');\n    }\n\n    /**\n     * Returns the template reference of the `IgxGridComponent`'s group row.\n     * ```\n     * const groupRowTemplate = this.grid.groupRowTemplate;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get groupRowTemplate(): TemplateRef<any> {\n        return this._groupRowTemplate;\n    }\n\n    /**\n     * Sets the template reference of the `IgxGridComponent`'s group `IgxGridRowComponent`.\n     * ```typescript\n     * this.grid.groupRowTemplate = myRowTemplate.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupRowTemplate(template: TemplateRef<any>) {\n        this._groupRowTemplate = template;\n        this.markForCheck();\n    }\n\n\n    /**\n     * Returns the template reference of the `IgxGridComponent`'s group area.\n     * ```typescript\n     * const groupAreaTemplate = this.grid.groupAreaTemplate;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get groupAreaTemplate(): TemplateRef<any> {\n        return this._groupAreaTemplate;\n    }\n\n    /**\n     * Sets the template reference of the `IgxGridComponent`'s group area.\n     * ```typescript\n     * this.grid.groupAreaTemplate = myAreaTemplate.\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    set groupAreaTemplate(template: TemplateRef<any>) {\n        this._groupAreaTemplate = template;\n        this.markForCheck();\n    }\n\n    /**\n     * Groups by a new `IgxColumnComponent` based on the provided expression, or modifies an existing one.\n     * Also allows for multiple columns to be grouped at once if an array of `ISortingExpression` is passed.\n     * The onGroupingDone event would get raised only **once** if this method gets called multiple times with the same arguments.\n     * ```typescript\n     * this.grid.groupBy({ fieldName: name, dir: SortingDirection.Asc, ignoreCase: false });\n     * this.grid.groupBy([\n            { fieldName: name1, dir: SortingDirection.Asc, ignoreCase: false },\n            { fieldName: name2, dir: SortingDirection.Desc, ignoreCase: true },\n            { fieldName: name3, dir: SortingDirection.Desc, ignoreCase: false }\n        ]);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public groupBy(expression: IGroupingExpression | Array<IGroupingExpression>): void {\n        this.endEdit(true);\n        this._gridAPI.submit_value();\n        if (expression instanceof Array) {\n            this._gridAPI.groupBy_multiple(expression);\n        } else {\n            this._gridAPI.groupBy(expression);\n        }\n        this.cdr.detectChanges();\n        this.calculateGridSizes();\n    }\n\n    /**\n     * Clears all grouping in the grid, if no parameter is passed.\n     * If a parameter is provided, clears grouping for a particular column or an array of columns.\n     * ```typescript\n     * this.grid.clearGrouping(); //clears all grouping\n     * this.grid.clearGrouping(\"ID\"); //ungroups a single column\n     * this.grid.clearGrouping([\"ID\", \"Column1\", \"Column2\"]); //ungroups multiple columns\n     * ```\n     *\n     */\n    public clearGrouping(name?: string | Array<string>): void {\n        this._gridAPI.clear_groupby(name);\n        this.calculateGridSizes();\n    }\n\n    /**\n     * Returns if a group is expanded or not.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const expandedGroup = this.grid.isExpandedGroup(this.groupRow);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public isExpandedGroup(group: IGroupByRecord): boolean {\n        const state: IGroupByExpandState = this._getStateForGroupRow(group);\n        return state ? state.expanded : this.groupsExpanded;\n    }\n\n    /**\n     * Toggles the expansion state of a group.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * const toggleExpGroup = this.grid.toggleGroup(this.groupRow);\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public toggleGroup(groupRow: IGroupByRecord) {\n        this._toggleGroup(groupRow);\n    }\n\n    /**\n     * Expands the specified group and all of its parent groups.\n     * ```typescript\n     * public groupRow: IGroupByRecord;\n     * this.grid.fullyExpandGroup(this.groupRow);\n     * ```\n     * @memberof IgxGridComponent\n     */\n    public fullyExpandGroup(groupRow: IGroupByRecord) {\n        this._fullyExpandGroup(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    public isGroupByRecord(record: any): boolean {\n        // return record.records instance of GroupedRecords fails under Webpack\n        return record.records && record.records.length;\n    }\n\n    /**\n     * Toggles the expansion state of all group rows recursively.\n     * ```typescript\n     * this.grid.toggleAllGroupRows;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public toggleAllGroupRows() {\n        this.groupingExpansionState = [];\n        this.groupsExpanded = !this.groupsExpanded;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Returns if the `IgxGridComponent` has groupable columns.\n     * ```typescript\n     * const groupableGrid = this.grid.hasGroupableColumns;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    get hasGroupableColumns(): boolean {\n        return this.columnList.some((col) => col.groupable && !col.columnGroup);\n    }\n\n    private _setGroupColsVisibility(value) {\n        if (this.columnList && !this.hasColumnLayouts) {\n            this.groupingExpressions.forEach((expr) => {\n                const col = this.getColumnByName(expr.fieldName);\n                col.hidden = value;\n            });\n        }\n    }\n\n    /**\n     * Returns if the grid's group by drop area is visible.\n     * ```typescript\n     * const dropVisible = this.grid.dropAreaVisible;\n     * ```\n\t * @memberof IgxGridComponent\n     */\n    public get dropAreaVisible(): boolean {\n        return (this.draggedColumn && this.draggedColumn.groupable) ||\n            !this.chipsGoupingExpressions.length;\n    }\n\n    /**\n     * @hidden\n     */\n    protected _getStateForGroupRow(groupRow: IGroupByRecord): IGroupByExpandState {\n        return this._gridAPI.groupBy_get_expanded_for_group(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _toggleGroup(groupRow: IGroupByRecord) {\n        this._gridAPI.groupBy_toggle_group(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _fullyExpandGroup(groupRow: IGroupByRecord) {\n        this._gridAPI.groupBy_fully_expand_group(groupRow);\n    }\n\n    /**\n     * @hidden\n     */\n    protected _applyGrouping() {\n        this._gridAPI.sort_multiple(this._groupingExpressions);\n    }\n\n    /**\n     * @hidden\n     */\n    public isColumnGrouped(fieldName: string): boolean {\n        return this.groupingExpressions.find(exp => exp.fieldName === fieldName) ? true : false;\n    }\n\n    /**\n    * @hidden\n    */\n    public getContext(rowData, rowIndex): any {\n        return {\n            $implicit: rowData,\n            index: rowIndex,\n            templateID: this.isGroupByRecord(rowData) ? 'groupRow' : this.isSummaryRow(rowData) ? 'summaryRow' : 'dataRow'\n        };\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipRemoved(event: IBaseChipEventArgs) {\n        this.clearGrouping(event.owner.id);\n    }\n\n    /**\n     * @hidden\n     */\n    public chipsOrderChanged(event: IChipsAreaReorderEventArgs) {\n        const newGrouping = [];\n        for (let i = 0; i < event.chipsArray.length; i++) {\n            const expr = this.groupingExpressions.filter((item) => {\n                return item.fieldName === event.chipsArray[i].id;\n            })[0];\n\n            if (!this.getColumnByName(expr.fieldName).groupable) {\n                // disallow changing order if there are columns with groupable: false\n                return;\n            }\n            newGrouping.push(expr);\n        }\n        this.groupingExpansionState = [];\n        this.chipsGoupingExpressions = newGrouping;\n\n        if (event.originalEvent instanceof KeyboardEvent) {\n            // When reordered using keyboard navigation, we don't have `onMoveEnd` event.\n            this.groupingExpressions = this.chipsGoupingExpressions;\n        }\n        this.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public chipsMovingEnded() {\n        this.groupingExpressions = this.chipsGoupingExpressions;\n        this.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipClicked(event: IChipClickEventArgs) {\n        const sortingExpr = this.sortingExpressions;\n        const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);\n        columnExpr.dir = 3 - columnExpr.dir;\n        this.sort(columnExpr);\n        this.markForCheck();\n    }\n\n    /**\n     * @hidden\n     */\n    public onChipKeyDown(event: IChipKeyDownEventArgs) {\n        if (event.originalEvent.key === ' ' || event.originalEvent.key === 'Spacebar' || event.originalEvent.key === 'Enter') {\n            const sortingExpr = this.sortingExpressions;\n            const columnExpr = sortingExpr.find((expr) => expr.fieldName === event.owner.id);\n            columnExpr.dir = 3 - columnExpr.dir;\n            this.sort(columnExpr);\n            this.markForCheck();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    protected get defaultTargetBodyHeight(): number {\n        const allItems = this.totalItemCount || this.dataLength;\n        return this.renderedRowHeight * Math.min(this._defaultTargetRecordNumber,\n            this.paging ? Math.min(allItems, this.perPage) : allItems);\n    }\n\n    /**\n     * @hidden\n     */\n    protected getGroupAreaHeight(): number {\n        return this.groupArea ? this.groupArea.nativeElement.offsetHeight : 0;\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public getFeatureColumnsWidth() {\n        let width = super.getFeatureColumnsWidth();\n\n        if (this.groupingExpressions.length && this.headerGroupContainer) {\n            width += this.headerGroupContainer.nativeElement.offsetWidth;\n        }\n\n        return width;\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number): void {\n        if (this.groupingExpressions && this.groupingExpressions.length\n            && typeof(row) !== 'number') {\n            const rowIndex = this.groupingResult.indexOf(row);\n            const groupByRecord = this.groupingMetadata[rowIndex];\n            if (groupByRecord) {\n                this._fullyExpandGroup(groupByRecord);\n            }\n        }\n\n        super.scrollTo(row, column, this.groupingFlatResult);\n    }\n\n    /**\n    * @hidden\n    */\n    public get dropAreaTemplateResolved(): TemplateRef<any> {\n        if (this.dropAreaTemplate) {\n            return this.dropAreaTemplate;\n        } else {\n            return this.defaultDropAreaTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getGroupByChipTitle(expression: IGroupingExpression): string {\n        return this.getColumnByName(expression.fieldName).header || expression.fieldName;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        if (this.allowFiltering && this.hasColumnLayouts) {\n            this.filterMode = FilterMode.excelStyleFilter;\n        }\n        if (this.groupTemplate) {\n            this._groupRowTemplate = this.groupTemplate.template;\n        }\n        super.ngAfterContentInit();\n\n        if (this.hideGroupedColumns && this.columnList && this.groupingExpressions) {\n            this._setGroupColsVisibility(this.hideGroupedColumns);\n        }\n        this._setupNavigationService();\n    }\n\n    public ngOnInit() {\n        super.ngOnInit();\n        this.onGroupingDone.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.endEdit(true);\n            this.summaryService.updateSummaryCache(args);\n        });\n    }\n\n    public ngDoCheck(): void {\n        super.ngDoCheck();\n        if (this.groupingDiffer && this.columnList && !this.hasColumnLayouts) {\n            const changes = this.groupingDiffer.diff(this.groupingExpressions);\n            if (changes && this.columnList) {\n                changes.forEachAddedItem((rec) => {\n                    const col = this.getColumnByName(rec.item.fieldName);\n                    col.hidden = true;\n                });\n                changes.forEachRemovedItem((rec) => {\n                    const col = this.getColumnByName(rec.item.fieldName);\n                    col.hidden = false;\n                });\n            }\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getSelectedData(formatters = false, headers = false): any[] {\n        if (this.groupingExpressions.length) {\n            const source = [];\n\n            const process = (record) => {\n                if (record.expression || record.summaries) {\n                    source.push(null);\n                    return;\n                }\n                source.push(record);\n\n            };\n\n            this.verticalScrollContainer.igxForOf.forEach(process);\n            return this.extractDataFromSelection(source, formatters, headers);\n        } else {\n            return super.getSelectedData(formatters, headers);\n        }\n    }\n\n    private _setupNavigationService() {\n        if (this.hasColumnLayouts) {\n            this.navigation = new IgxGridMRLNavigationService();\n            this.navigation.grid = this;\n        }\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IGroupByExpandState } from '../../data-operations/groupby-expand-state.interface';\nimport { IGroupByResult } from '../../data-operations/grouping-result.interface';\nimport { IFilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { IgxGridComponent } from './grid.component';\nimport { IGroupingExpression } from '../../data-operations/grouping-expression.interface';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid-base.component';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridSort',\n    pure: true\n})\nexport class IgxGridSortingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], expressions: ISortingExpression[], id: string, pipeTrigger: number): any[] {\n        const grid = this.gridAPI.grid;\n        let result: any[];\n\n        if (!expressions.length) {\n            result = collection;\n        } else {\n            result = DataUtil.sort(cloneArray(collection), expressions);\n        }\n        grid.filteredSortedData = result;\n\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridGroupBy',\n    pure: true\n})\nexport class IgxGridGroupingPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], expression: IGroupingExpression | IGroupingExpression[],\n        expansion: IGroupByExpandState | IGroupByExpandState[], defaultExpanded: boolean,\n        id: string, groupsRecords: any[], pipeTrigger: number): IGroupByResult {\n\n        const state = { expressions: [], expansion: [], defaultExpanded };\n        const grid: IgxGridComponent = this.gridAPI.grid;\n        state.expressions = grid.groupingExpressions;\n        let result: IGroupByResult;\n        const fullResult: IGroupByResult = { data: [], metadata: [] };\n\n        if (!state.expressions.length) {\n            // empty the array without changing reference\n            groupsRecords.splice(0, groupsRecords.length);\n            result = {\n                data: collection,\n                metadata: collection\n            };\n        } else {\n            state.expansion = grid.groupingExpansionState;\n            state.defaultExpanded = grid.groupsExpanded;\n            result = DataUtil.group(cloneArray(collection), state, grid, groupsRecords, fullResult);\n        }\n        grid.groupingFlatResult = result.data;\n        grid.groupingResult = fullResult.data;\n        grid.groupingMetadata = fullResult.metadata;\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridPaging',\n    pure: true\n})\nexport class IgxGridPagingPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    public transform(collection: IGroupByResult, page = 0, perPage = 15, id: string, pipeTrigger: number): IGroupByResult {\n\n        if (!this.gridAPI.grid.paging) {\n            return collection;\n        }\n\n        const state = {\n            index: page,\n            recordsPerPage: perPage\n        };\n        DataUtil.correctPagingState(state, collection.data.length);\n\n        const result = {\n            data: DataUtil.page(cloneArray(collection.data), state),\n            metadata: DataUtil.page(cloneArray(collection.metadata), state)\n        };\n        if (this.gridAPI.grid.page !== state.index) {\n            this.gridAPI.grid.page = state.index;\n        }\n        this.gridAPI.grid.pagingState = state;\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridFiltering',\n    pure: true\n})\nexport class IgxGridFilteringPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) { }\n\n    public transform(collection: any[], expressionsTree: IFilteringExpressionsTree,\n        id: string, pipeTrigger: number) {\n        const grid = this.gridAPI.grid;\n        const state = { expressionsTree: expressionsTree };\n\n        if (!state.expressionsTree ||\n            !state.expressionsTree.filteringOperands ||\n            state.expressionsTree.filteringOperands.length === 0) {\n            return collection;\n        }\n\n        const result = DataUtil.filter(cloneArray(collection), state);\n        grid.filteredData = result;\n        return result;\n    }\n}\n","import { Component, forwardRef, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, HostBinding } from '@angular/core';\nimport { IgxGridComponent } from './grid.component';\nimport { IgxRowComponent } from '../row.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-grid-row',\n    templateUrl: './grid-row.component.html',\n    providers: [{provide: IgxRowComponent, useExisting: forwardRef(() => IgxGridRowComponent)}]\n})\nexport class IgxGridRowComponent extends IgxRowComponent<IgxGridComponent> {\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxGridComponent>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        selection: IgxSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {\n            // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n            super(gridAPI, crudService, selectionService, selection, element, cdr);\n        }\n\n        @HostBinding('class.igx-grid__tr--mrl')\n        get hasColumnLayouts(): boolean {\n            return this.grid.hasColumnLayouts;\n        }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { IgxGridAPIService } from './grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, GridSummaryPosition, GridSummaryCalculationMode, IGridDataBindable } from '../grid-base.component';\nimport { IgxGridComponent } from './grid.component';\nimport { ISummaryRecord } from '../summaries/grid-summary';\nimport { IGroupByRecord } from '../../data-operations/groupby-record.interface';\nimport { IGroupByResult } from '../../data-operations/grouping-result.interface';\n\n/** @hidden */\ninterface ISkipRecord {\n    skip?: boolean;\n}\n\n/** @hidden */\n@Pipe({\n    name: 'gridSummary',\n    pure: true\n})\nexport class IgxGridSummaryPipe implements PipeTransform {\n    private gridAPI: IgxGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxGridAPIService>gridAPI;\n    }\n\n    public transform(collection: IGroupByResult,\n        hasSummary: boolean,\n        summaryCalculationMode: GridSummaryCalculationMode,\n        summaryPosition: GridSummaryPosition,\n        id: string, pipeTrigger: number, summaryPipeTrigger: number): any[] {\n\n        if (!collection.data || !hasSummary || summaryCalculationMode === GridSummaryCalculationMode.rootLevelOnly) {\n            return collection.data;\n        }\n\n        return this.addSummaryRows(id, collection, summaryPosition);\n    }\n\n    private addSummaryRows(gridId: string, collection: IGroupByResult, summaryPosition: GridSummaryPosition): any[] {\n        const recordsWithSummary = [];\n        const lastChildMap = new Map<any, IGroupByRecord[]>();\n        const grid: IgxGridComponent = this.gridAPI.grid;\n        const maxSummaryHeight = grid.summaryService.calcMaxSummaryHeight();\n\n        if (collection.metadata.length && !grid.isGroupByRecord(collection.data[0]) &&\n            grid.isGroupByRecord(collection.metadata[0]) && summaryPosition === GridSummaryPosition.bottom) {\n            const groups: Array<IGroupByRecord & ISkipRecord> = [];\n            groups.push(collection.metadata[0]);\n            while (groups[groups.length - 1].groupParent) {\n                groups.push(groups[groups.length - 1].groupParent);\n            }\n            groups.reverse();\n            groups.forEach(g => g.skip = true);\n            collection.data.splice(0, 0, ...groups);\n        }\n        for (let i = 0; i < collection.data.length; i++) {\n            const record = collection.data[i];\n            let skipAdd = false;\n            let recordId;\n            let groupByRecord: IGroupByRecord = null;\n            if (grid.isGroupByRecord(record)) {\n                skipAdd = !!record.skip;\n                record.skip = null;\n                groupByRecord = record as IGroupByRecord;\n                recordId = this.gridAPI.get_groupBy_record_id(groupByRecord);\n            } else {\n                recordId = this.gridAPI.get_row_id(record);\n            }\n            if (!skipAdd) {\n                recordsWithSummary.push(record);\n            }\n\n            if (summaryPosition === GridSummaryPosition.bottom && lastChildMap.has(recordId)) {\n                const groupRecords = lastChildMap.get(recordId);\n\n                for (let j = 0; j < groupRecords.length; j++) {\n                    const groupRecord = groupRecords[j];\n                    const groupRecordId = this.gridAPI.get_groupBy_record_id(groupRecord);\n                    const records = this.removeDeletedRecord(grid, groupRecord.records.slice());\n                    const summaries = grid.summaryService.calculateSummaries(groupRecordId, records);\n                    const summaryRecord: ISummaryRecord = {\n                        summaries: summaries,\n                        max: maxSummaryHeight\n                    };\n                    recordsWithSummary.push(summaryRecord);\n                }\n            }\n\n            if (groupByRecord === null || !grid.isExpandedGroup(groupByRecord)) {\n                continue;\n            }\n\n            if (summaryPosition === GridSummaryPosition.top) {\n                const records = this.removeDeletedRecord(grid, groupByRecord.records.slice());\n                const summaries = grid.summaryService.calculateSummaries(recordId, records);\n                const summaryRecord: ISummaryRecord = {\n                    summaries: summaries,\n                    max: maxSummaryHeight\n                };\n                recordsWithSummary.push(summaryRecord);\n            } else if (summaryPosition === GridSummaryPosition.bottom) {\n                let lastChild = groupByRecord;\n\n                while (lastChild.groups && lastChild.groups.length > 0 && grid.isExpandedGroup(lastChild)) {\n                    lastChild = lastChild.groups[lastChild.groups.length - 1];\n                }\n\n                let lastChildId;\n                if (grid.isExpandedGroup(lastChild)) {\n                    lastChildId = this.gridAPI.get_row_id(lastChild.records[lastChild.records.length - 1]);\n                } else {\n                    lastChildId = this.gridAPI.get_groupBy_record_id(lastChild);\n                }\n\n                let groupRecords = lastChildMap.get(lastChildId);\n                if (!groupRecords) {\n                    groupRecords = [];\n                    lastChildMap.set(lastChildId, groupRecords);\n                }\n                groupRecords.unshift(groupByRecord);\n            }\n        }\n\n        return recordsWithSummary;\n    }\n\n    private removeDeletedRecord(grid, data) {\n        if (!grid.transactions.enabled) {\n            return data;\n        }\n        const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === 'delete').map(t => t.id);\n        deletedRows.forEach(rowID => {\n            const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n            const index = tempData.indexOf(rowID);\n            if (index !== -1) {\n                data.splice(index, 1);\n            }\n        });\n        return data;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport {\n    IgxGroupAreaDropDirective,\n    IgxGroupByRowTemplateDirective\n} from './grid.directives';\nimport { IgxGridComponent } from './grid.component';\nimport {\n    IgxGridPagingPipe,\n    IgxGridGroupingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe\n} from './grid.pipes';\nimport { IgxGridGroupByRowComponent } from './groupby-row.component';\nimport { IgxGridRowComponent } from './grid-row.component';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { DeprecateMethod } from '../../core/deprecateDecorators';\nimport { IgxGridSummaryPipe } from './grid.summary.pipe';\nimport { IgxSelectModule } from '../../select/index';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxGridComponent,\n    IgxGridRowComponent,\n    IgxGridGroupByRowComponent,\n    IgxGroupByRowTemplateDirective,\n    IgxGroupAreaDropDirective,\n    IgxGridGroupingPipe,\n    IgxGridPagingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe,\n    IgxGridSummaryPipe\n  ],\n  exports: [\n    IgxGridComponent,\n    IgxGridGroupByRowComponent,\n    IgxGridRowComponent,\n    IgxGroupByRowTemplateDirective,\n    IgxGroupAreaDropDirective,\n    IgxGridCommonModule,\n    IgxGridGroupingPipe,\n    IgxGridPagingPipe,\n    IgxGridSortingPipe,\n    IgxGridFilteringPipe,\n    IgxGridSummaryPipe\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridCommonModule,\n    IgxSelectModule\n  ]\n})\nexport class IgxGridModule {\n  @DeprecateMethod('IgxGridModule.forRoot method is deprecated. Use IgxGridModule instead.')\n  public static forRoot() {\n    return {\n        ngModule: IgxGridModule\n    };\n  }\n}\n","import { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { DataType } from '../../data-operations/data-util';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IRowToggleEventArgs } from './tree-grid.interfaces';\nimport { IgxColumnComponent } from '../column.component';\nimport { HierarchicalTransaction, TransactionType, State } from '../../services';\nimport { mergeObjects } from '../../core/utils';\n\nexport class IgxTreeGridAPIService extends GridBaseAPIService<IgxTreeGridComponent> {\n    public get_all_data(transactions?: boolean): any[] {\n        const grid = this.grid;\n        const data = transactions ? grid.dataWithAddedInTransactionRows : grid.flatData;\n        return data ? data : [];\n    }\n\n    public get_summary_data() {\n        const grid = this.grid;\n        const data = grid.processedRootRecords.filter(row => row.isFilteredOutParent === undefined || row.isFilteredOutParent === false)\n            .map(rec => rec.data);\n        if (grid.transactions.enabled) {\n            const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === TransactionType.DELETE).map(t => t.id);\n            deletedRows.forEach(rowID => {\n                const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n                const index = tempData.indexOf(rowID);\n                if (index !== -1) {\n                    data.splice(index, 1);\n                }\n            });\n        }\n        return data;\n    }\n\n    public expand_row(rowID: any) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(rowID, true);\n        grid.expansionStates = expandedStates;\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public collapse_row(rowID: any) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(rowID, false);\n        grid.expansionStates = expandedStates;\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public toggle_row_expansion(rowID: any) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n        const treeRecord = grid.records.get(rowID);\n\n        if (treeRecord) {\n            const isExpanded = this.get_row_expansion_state(treeRecord);\n            expandedStates.set(rowID, !isExpanded);\n            grid.expansionStates = expandedStates;\n        }\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public trigger_row_expansion_toggle(row: ITreeGridRecord, expanded: boolean, event?: Event, visibleColumnIndex?) {\n        const grid = this.grid;\n\n        if (row.expanded === expanded ||\n            ((!row.children || !row.children.length) && (!grid.loadChildrenOnDemand ||\n            (grid.hasChildrenKey && !row.data[grid.hasChildrenKey])))) {\n            return;\n        }\n\n        const args: IRowToggleEventArgs = {\n            rowID: row.rowID,\n            expanded: expanded,\n            event: event,\n            cancel: false\n        };\n        grid.onRowToggle.emit(args);\n\n        if (args.cancel) {\n            return;\n        }\n        visibleColumnIndex = visibleColumnIndex ? visibleColumnIndex : 0;\n        const expandedStates = grid.expansionStates;\n        expandedStates.set(row.rowID, expanded);\n        grid.expansionStates = expandedStates;\n\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n\n        requestAnimationFrame(() => {\n            const el = this.grid.selectionService.activeElement;\n            if (el) {\n                const cell = this.get_cell_by_visible_index(el.row, el.column);\n                if (cell) {\n                    cell.nativeElement.focus();\n                }\n            }\n        });\n    }\n\n    public expand_path_to_record(record: ITreeGridRecord) {\n        const grid = this.grid;\n        const expandedStates = grid.expansionStates;\n\n        while (record.parent) {\n            record = record.parent;\n            const expanded = this.get_row_expansion_state(record);\n\n            if (!expanded) {\n                expandedStates.set(record.rowID, true);\n            }\n        }\n        grid.expansionStates = expandedStates;\n\n        if (grid.rowEditable) {\n            grid.endEdit(true);\n        }\n    }\n\n    public get_row_expansion_state(record: ITreeGridRecord): boolean {\n        const grid = this.grid;\n        const states = grid.expansionStates;\n        const expanded = states.get(record.rowID);\n\n        if (expanded !== undefined) {\n            return expanded;\n        } else {\n            return record.children && record.children.length && record.level < grid.expansionDepth;\n        }\n    }\n\n    protected update_row_in_array(value: any, rowID: any, index: number) {\n        const grid = this.grid;\n        if (grid.primaryKey && grid.foreignKey) {\n            super.update_row_in_array(value, rowID, index);\n        } else {\n            const record = grid.records.get(rowID);\n            const childData = record.parent ? record.parent.data[grid.childDataKey] : grid.data;\n            index = grid.primaryKey ? childData.map(c => c[grid.primaryKey]).indexOf(rowID) :\n                childData.indexOf(rowID);\n            childData[index] = value;\n        }\n    }\n\n    public should_apply_number_style(column: IgxColumnComponent): boolean {\n        return column.dataType === DataType.Number && column.visibleIndex !== 0;\n    }\n\n    public deleteRowById(rowID: any) {\n        const treeGrid = this.grid;\n        const flatDataWithCascadeOnDeleteAndTransactions =\n        treeGrid.primaryKey &&\n        treeGrid.foreignKey &&\n        treeGrid.cascadeOnDelete &&\n        treeGrid.transactions.enabled;\n\n        if (flatDataWithCascadeOnDeleteAndTransactions) {\n            treeGrid.transactions.startPending();\n        }\n\n        super.deleteRowById(rowID);\n\n        if (flatDataWithCascadeOnDeleteAndTransactions) {\n            treeGrid.transactions.endPending(true);\n        }\n    }\n\n    public deleteRowFromData(rowID: any, index: number) {\n        const treeGrid = this.grid;\n        const record = treeGrid.records.get(rowID);\n\n        if (treeGrid.primaryKey && treeGrid.foreignKey) {\n            index = treeGrid.primaryKey ?\n                treeGrid.data.map(c => c[treeGrid.primaryKey]).indexOf(rowID) :\n                treeGrid.data.indexOf(rowID);\n            super.deleteRowFromData(rowID, index);\n\n            if (treeGrid.cascadeOnDelete) {\n                if (record && record.children && record.children.length > 0) {\n                    for (let i = 0; i < record.children.length; i++) {\n                        const child = record.children[i];\n                        super.deleteRowById(child.rowID);\n                    }\n                }\n            }\n        } else {\n            const collection = record.parent ? record.parent.data[treeGrid.childDataKey] : treeGrid.data;\n            index = treeGrid.primaryKey ?\n                collection.map(c => c[treeGrid.primaryKey]).indexOf(rowID) :\n                collection.indexOf(rowID);\n\n            const selectedChildren = [];\n            this.get_selected_children(record, selectedChildren);\n            if (selectedChildren.length > 0) {\n                treeGrid.deselectRows(selectedChildren);\n            }\n\n            if (treeGrid.transactions.enabled) {\n                const path = treeGrid.generateRowPath(rowID);\n                treeGrid.transactions.add({\n                    id: rowID,\n                    type: TransactionType.DELETE,\n                    newValue: null,\n                    path: path\n                },\n                    collection[index]\n                );\n            } else {\n                collection.splice(index, 1);\n            }\n        }\n    }\n\n    /**\n     * Updates related row of provided grid's data source with provided new row value\n     * @param grid Grid to update data for\n     * @param rowID ID of the row to update\n     * @param rowValueInDataSource Initial value of the row as it is in data source\n     * @param rowCurrentValue Current value of the row as it is with applied previous transactions\n     * @param rowNewValue New value of the row\n     */\n    protected updateData(\n        grid: IgxTreeGridComponent,\n        rowID: any,\n        rowValueInDataSource: any,\n        rowCurrentValue: any,\n        rowNewValue: { [x: string]: any }) {\n        if (grid.transactions.enabled) {\n            const path = grid.generateRowPath(rowID);\n            const transaction: HierarchicalTransaction = {\n                id: rowID,\n                type: TransactionType.UPDATE,\n                newValue: rowNewValue,\n                path: path\n            };\n            grid.transactions.add(transaction, rowCurrentValue);\n        } else {\n            mergeObjects(rowValueInDataSource, rowNewValue);\n        }\n    }\n\n    public get_selected_children(record: ITreeGridRecord, selectedRowIDs: any[]) {\n        const grid = this.grid;\n        if (!record.children || record.children.length === 0) {\n            return;\n        }\n        for (const child of record.children) {\n            if (grid.selection.is_item_selected(grid.id, child.rowID)) {\n                selectedRowIDs.push(child.rowID);\n            }\n            this.get_selected_children(child, selectedRowIDs);\n        }\n    }\n\n    public row_deleted_transaction(rowID: any): boolean {\n        return this.row_deleted_parent(rowID) || super.row_deleted_transaction(rowID);\n    }\n\n    private row_deleted_parent(rowID: any): boolean {\n        const grid = this.grid;\n        if (!grid) {\n            return false;\n        }\n        if ((grid.cascadeOnDelete && grid.foreignKey) || grid.childDataKey) {\n            let node = grid.records.get(rowID);\n            while (node) {\n                const state: State = grid.transactions.getState(node.rowID);\n                if (state && state.type === TransactionType.DELETE) {\n                    return true;\n                }\n                node = node.parent;\n            }\n        }\n        return false;\n    }\n}\n","import { IgxGridNavigationService } from '../grid-navigation.service';\n\nexport class IgxTreeGridNavigationService extends IgxGridNavigationService {\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false): string {\n        if (isSummary) {\n            return 'igx-grid-summary-cell';\n        }\n        if (visibleIndex === 0) {\n            return 'igx-tree-grid-cell';\n        }\n        return 'igx-grid-cell';\n    }\n\n    protected getRowSelector() {\n        return 'igx-tree-grid-row';\n    }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxRowLoadingIndicator]'\n})\nexport class IgxRowLoadingIndicatorTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) { }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ElementRef,\n    HostBinding,\n    Input,\n    IterableDiffers,\n    ViewContainerRef,\n    Output,\n    EventEmitter,\n    Inject,\n    NgZone,\n    forwardRef,\n    Optional,\n    OnInit,\n    TemplateRef,\n    QueryList,\n    ContentChild,\n    AfterContentInit,\n    ViewChild\n} from '@angular/core';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { IgxGridBaseComponent, IgxGridTransaction, IGridDataBindable } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { IRowToggleEventArgs } from './tree-grid.interfaces';\nimport { HierarchicalTransaction, HierarchicalState, TransactionType } from '../../services/transaction/transaction';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxHierarchicalTransactionService } from '../../services/index';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IgxTreeGridNavigationService } from './tree-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { mergeObjects } from '../../core/utils';\nimport { IgxOverlayService } from '../../services/index';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\nimport { IgxColumnComponent } from '../column.component';\nimport { first, takeUntil } from 'rxjs/operators';\nimport { IgxRowLoadingIndicatorTemplateDirective } from './tree-grid.directives';\nimport { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';\nimport { IgxDragIndicatorIconDirective } from '../row-drag.directive';\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Tree Grid** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/grid.html)\n *\n * The Ignite UI Tree Grid displays and manipulates hierarchical data with consistent schema formatted as a table and\n * provides features such as sorting, filtering, editing, column pinning, paging, column moving and hiding.\n *\n * Example:\n * ```html\n * <igx-tree-grid [data]=\"employeeData\" primaryKey=\"employeeID\" foreignKey=\"PID\" autoGenerate=\"false\">\n *   <igx-column field=\"first\" header=\"First Name\"></igx-column>\n *   <igx-column field=\"last\" header=\"Last Name\"></igx-column>\n *   <igx-column field=\"role\" header=\"Role\"></igx-column>\n * </igx-tree-grid>\n * ```\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-tree-grid',\n    templateUrl: 'tree-grid.component.html',\n    providers: [\n        IgxGridSelectionService, IgxGridCRUDService, IgxTreeGridNavigationService, IgxGridSummaryService,\n        { provide: GridBaseAPIService, useClass: IgxTreeGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxTreeGridComponent) }, IgxFilteringService, IgxForOfSyncService]\n})\nexport class IgxTreeGridComponent extends IgxGridBaseComponent implements IGridDataBindable, OnInit, AfterContentInit {\n    private _id = `igx-tree-grid-${NEXT_ID++}`;\n    private _data;\n    private _rowLoadingIndicatorTemplate: TemplateRef<any>;\n\n    /**\n     * An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-tree-grid [id]=\"'igx-tree-grid-1'\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this._id;\n    }\n    public set id(value: string) {\n        this._id = value;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxTreeGridComponent` with an array of data.\n     * ```html\n     * <igx-tree-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get data(): any[] {\n        return this._data;\n    }\n\n    public set data(value: any[]) {\n        this._data = value;\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n            this.reflow();\n        }\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    set filteredData(value) {\n        this._filteredData = value;\n\n        if (this.rowSelectable) {\n            this.updateHeaderCheckboxStatusOnFilter(this._filteredData);\n        }\n    }\n\n    /**\n     * Get transactions service for the grid.\n     * @experimental @hidden\n     */\n    get transactions(): IgxHierarchicalTransactionService<HierarchicalTransaction, HierarchicalState> {\n        return this._transactions;\n    }\n\n    /**\n    * @hidden\n    */\n    public flatData: any[];\n\n    /**\n    * @hidden\n    */\n    public processedExpandedFlatData: any[];\n\n    /**\n     * Returns an array of the root level `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the root record with index=2\n     * const states = this.grid.rootRecords[2];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public rootRecords: ITreeGridRecord[];\n\n    /**\n     * Returns a map of all `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the record with primaryKey=2\n     * const states = this.grid.records.get(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public records: Map<any, ITreeGridRecord> = new Map<any, ITreeGridRecord>();\n\n    /**\n     * Returns an array of processed (filtered and sorted) root `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed root record with index=2\n     * const states = this.grid.processedRootRecords[2];\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public processedRootRecords: ITreeGridRecord[];\n\n    /**\n     * Returns a map of all processed (filtered and sorted) `ITreeGridRecord`s.\n     * ```typescript\n     * // gets the processed record with primaryKey=2\n     * const states = this.grid.processedRecords.get(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public processedRecords: Map<any, ITreeGridRecord> = new Map<any, ITreeGridRecord>();\n\n    /**\n     * An @Input property that sets the child data key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"'employees'\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public childDataKey;\n\n    /**\n     * An @Input property that sets the foreign key of the `IgxTreeGridComponent`.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" [autoGenerate]=\"true\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public foreignKey;\n\n    /**\n     * An @Input property that sets the key indicating whether a row has children.\n     * This property is only used for load on demand scenarios.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\"\n     *                [loadChildrenOnDemand]=\"loadChildren\"\n     *                [hasChildrenKey]=\"'hasEmployees'\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public hasChildrenKey;\n\n    /**\n     * An @Input property indicating whether child records should be deleted when their parent gets deleted.\n     * By default it is set to true and deletes all children along with the parent.\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" cascadeOnDelete=\"false\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public cascadeOnDelete = true;\n\n    private _expansionDepth = Infinity;\n\n    /**\n     * An @Input property that sets the count of levels to be expanded in the `IgxTreeGridComponent`. By default it is\n     * set to `Infinity` which means all levels would be expanded.\n     * ```html\n     * <igx-tree-grid #grid [data]=\"employeeData\" [childDataKey]=\"'employees'\" expansionDepth=\"1\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get expansionDepth(): number {\n        return this._expansionDepth;\n    }\n\n    public set expansionDepth(value: number) {\n        this._expansionDepth = value;\n        this.cdr.markForCheck();\n    }\n\n    private _expansionStates: Map<any, boolean> = new Map<any, boolean>();\n\n    /**\n     * Returns a list of key-value pairs [row ID, expansion state]. Includes only states that differ from the default one.\n     * ```typescript\n     * const expansionStates = this.grid.expansionStates;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get expansionStates() {\n        return this._expansionStates;\n    }\n\n    /**\n     * Sets a list of key-value pairs [row ID, expansion state].\n     * ```typescript\n     * const states = new Map<any, boolean>();\n     * states.set(1, true);\n     * this.grid.expansionStates = states;\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public set expansionStates(value) {\n        this._expansionStates = this.cloneMap(value);\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxRowLoadingIndicatorTemplateDirective, { read: IgxRowLoadingIndicatorTemplateDirective, static: true })\n    protected rowLoadingTemplate: IgxRowLoadingIndicatorTemplateDirective;\n\n    /**\n     * The custom template, if any, that should be used when rendering the row drag indicator icon\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.dragIndicatorIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-grid #grid>\n     *      ...\n     *      <ng-template igxDragIndicatorIcon>\n     *          <igx-icon fontSet=\"material\">info</igx-icon>\n     *      </ng-template>\n     *  </igx-grid>\n     * ```\n     */\n    @ContentChild(IgxDragIndicatorIconDirective, { read: TemplateRef, static: true })\n    public dragIndicatorIconTemplate: TemplateRef<any> = null;\n\n    /**\n     * An @Input property that provides a template for the row loading indicator when load on demand is enabled.\n     * ```html\n     * <ng-template #rowLoadingTemplate>\n     *     <igx-icon fontSet=\"material\">loop</igx-icon>\n     * </ng-template>\n     *\n     * <igx-tree-grid #grid [data]=\"employeeData\" [primaryKey]=\"'ID'\" [foreignKey]=\"'parentID'\"\n     *                [loadChildrenOnDemand]=\"loadChildren\"\n     *                [rowLoadingIndicatorTemplate]=\"rowLoadingTemplate\">\n     * </igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public get rowLoadingIndicatorTemplate(): TemplateRef<any> {\n        return this._rowLoadingIndicatorTemplate;\n    }\n\n    public set rowLoadingIndicatorTemplate(value: TemplateRef<any>) {\n        this._rowLoadingIndicatorTemplate = value;\n        this.cdr.markForCheck();\n    }\n\n    /**\n     * An @Input property that provides a callback for loading child rows on demand.\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" [primaryKey]=\"'employeeID'\" [foreignKey]=\"'parentID'\" [loadChildrenOnDemand]=\"loadChildren\">\n     * </igx-tree-grid>\n     * ```\n     * ```typescript\n     * public loadChildren = (parentID: any, done: (children: any[]) => void) => {\n     *     this.dataService.getData(parentID, children => done(children));\n     * }\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Input()\n    public loadChildrenOnDemand: (parentID: any, done: (children: any[]) => void) => void;\n\n    /**\n     * Emitted when the expanded state of a row gets changed.\n     * ```typescript\n     * rowToggle(event: IRowToggleEventArgs){\n     *  // the id of the row\n     *  const rowID = event.rowID;\n     *  // the new expansion state\n     *  const newExpandedState = event.expanded;\n     *  // the original event that triggered onRowToggle\n     *  const originalEvent = event.event;\n     *  // whether the event should be cancelled\n     *  event.cancel = true;\n     * }\n     * ```\n     * ```html\n     * <igx-tree-grid [data]=\"employeeData\" (onRowToggle)=\"rowToggle($event)\" [autoGenerate]=\"true\"></igx-tree-grid>\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    @Output()\n    public onRowToggle = new EventEmitter<IRowToggleEventArgs>();\n\n    /**\n     * @hidden\n     */\n    public loadingRows = new Set<any>();\n\n    private _gridAPI: IgxTreeGridAPIService;\n    private _filteredData = null;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef, static: true })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    constructor(\n        selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        selection: IgxSelectionAPIService,\n        @Inject(IgxGridTransaction) protected _transactions: IgxHierarchicalTransactionService<HierarchicalTransaction, HierarchicalState>,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxTreeGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n            super(selectionService, crudService, gridAPI, selection,\n                _transactions, elementRef, zone, document, cdr, resolver, differs, viewRef, navigation,\n                filteringService, overlayService, summaryService, _displayDensityOptions);\n        this._gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        super.ngOnInit();\n\n        this.onRowToggle.pipe(takeUntil(this.destroy$)).subscribe((args) => {\n            this.loadChildrenOnRowExpansion(args);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        if (this.rowLoadingTemplate) {\n            this._rowLoadingIndicatorTemplate = this.rowLoadingTemplate.template;\n        }\n        super.ngAfterContentInit();\n    }\n\n    private loadChildrenOnRowExpansion(args: IRowToggleEventArgs) {\n        if (this.loadChildrenOnDemand) {\n            const parentID = args.rowID;\n\n            if (args.expanded && !this._expansionStates.has(parentID)) {\n                this.loadingRows.add(parentID);\n\n                this.loadChildrenOnDemand(parentID, children => {\n                    this.loadingRows.delete(parentID);\n                    this.addChildRows(children, parentID);\n                    this.cdr.markForCheck();\n\n                    requestAnimationFrame(() => {\n                        const cellID = this.selection.first_item(`${this.id}-cell`);\n                        if (cellID) {\n                            const cell = this._gridAPI.get_cell_by_index(cellID.rowIndex, cellID.columnID);\n                            if (cell) {\n                                cell.nativeElement.focus();\n                            }\n                        }\n                    });\n                });\n            }\n        }\n    }\n\n    private addChildRows(children: any[], parentID: any) {\n        if (this.primaryKey && this.foreignKey) {\n            for (const child of children) {\n                child[this.foreignKey] = parentID;\n            }\n            this.data.push(...children);\n        } else if (this.childDataKey) {\n            let parent = this.records.get(parentID);\n            let parentData = parent.data;\n\n            if (this.transactions.enabled && this.transactions.getAggregatedChanges(true).length) {\n                const path = [];\n                while (parent) {\n                    path.push(parent.rowID);\n                    parent = parent.parent;\n                }\n\n                let collection = this.data;\n                let record: any;\n                for (let i = path.length - 1; i >= 0; i--) {\n                    const pid = path[i];\n                    record = collection.find(r => r[this.primaryKey] === pid);\n\n                    if (!record) {\n                        break;\n                    }\n                    collection = record[this.childDataKey];\n                }\n                if (record) {\n                    parentData = record;\n                }\n            }\n\n            parentData[this.childDataKey] = children;\n        }\n\n        this._pipeTrigger++;\n    }\n\n    private cloneMap(mapIn: Map<any, boolean>): Map<any, boolean> {\n        const mapCloned: Map<any, boolean> = new Map<any, boolean>();\n\n        mapIn.forEach((value: boolean, key: any, mapObj: Map<any, boolean>) => {\n\n            mapCloned.set(key, value);\n        });\n\n        return mapCloned;\n    }\n\n    /**\n     * Expands the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be expanded.\n     * ```typescript\n     * this.grid.expandRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public expandRow(rowID: any) {\n        this._gridAPI.expand_row(rowID);\n    }\n\n    /**\n     * Collapses the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be collapsed.\n     * ```typescript\n     * this.grid.collapseRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public collapseRow(rowID: any) {\n        this._gridAPI.collapse_row(rowID);\n    }\n\n    /**\n     * Toggles the expansion state of the `IgxTreeGridRowComponent` with the specified rowID.\n     * @param rowID The identifier of the row to be toggled.\n     * ```typescript\n     * this.grid.toggleRow(2);\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public toggleRow(rowID: any) {\n        this._gridAPI.toggle_row_expansion(rowID);\n    }\n\n    /**\n     * Expands all rows.\n     * ```typescript\n     * this.grid.expandAll();\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public expandAll() {\n        this._expansionDepth = Infinity;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Collapses all rows.\n     * ```typescript\n     * this.grid.collapseAll();\n     * ```\n\t * @memberof IgxTreeGridComponent\n     */\n    public collapseAll() {\n        this._expansionDepth = 0;\n        this.expansionStates = new Map<any, boolean>();\n    }\n\n    /**\n     * Creates a new `IgxTreeGridRowComponent` with the given data. If a parentRowID is not specified, the newly created\n     * row would be added at the root level. Otherwise, it would be added as a child of the row whose primaryKey matches\n     * the specified parentRowID. If the parentRowID does not exist, an error would be thrown.\n     * ```typescript\n     * const record = {\n     *     ID: this.grid.data[this.grid1.data.length - 1].ID + 1,\n     *     Name: this.newRecord\n     * };\n     * this.grid.addRow(record, 1); // Adds a new child row to the row with ID=1.\n     * ```\n     * @param data\n     * @param parentRowID\n     * @memberof IgxTreeGridComponent\n     */\n    public addRow(data: any, parentRowID?: any) {\n        if (parentRowID !== undefined && parentRowID !== null) {\n            super.endEdit(true);\n\n            const state = this.transactions.getState(parentRowID);\n            // we should not allow adding of rows as child of deleted row\n            if (state && state.type === TransactionType.DELETE) {\n                throw Error(`Cannot add child row to deleted parent row`);\n            }\n\n            const parentRecord = this.records.get(parentRowID);\n\n            if (!parentRecord) {\n                throw Error('Invalid parent row ID!');\n            }\n            this.summaryService.clearSummaryCache({rowID: parentRecord.rowID});\n            if (this.primaryKey && this.foreignKey) {\n                data[this.foreignKey] = parentRowID;\n                super.addRow(data);\n            } else {\n                const parentData = parentRecord.data;\n                const childKey = this.childDataKey;\n                if (this.transactions.enabled) {\n                    const rowId = this.primaryKey ? data[this.primaryKey] : data;\n                    const path: any[] = [];\n                    path.push(...this.generateRowPath(parentRowID));\n                    path.push(parentRowID);\n                    this.transactions.add({\n                        id: rowId,\n                        path: path,\n                        newValue: data,\n                        type: TransactionType.ADD\n                    } as HierarchicalTransaction,\n                        null);\n                } else {\n                    if (!parentData[childKey]) {\n                        parentData[childKey] = [];\n                    }\n                    parentData[childKey].push(data);\n                }\n                this.onRowAdded.emit({ data });\n                this._pipeTrigger++;\n                this.cdr.markForCheck();\n            }\n        } else {\n            if (this.primaryKey && this.foreignKey) {\n                const rowID = data[this.foreignKey];\n                this.summaryService.clearSummaryCache({rowID: rowID});\n            }\n            super.addRow(data);\n        }\n    }\n\n    /** @hidden */\n    public deleteRowById(rowId: any) {\n        //  if this is flat self-referencing data, and CascadeOnDelete is set to true\n        //  and if we have transactions we should start pending transaction. This allows\n        //  us in case of delete action to delete all child rows as single undo action\n        this._gridAPI.deleteRowById(rowId);\n\n    }\n\n    /** @hidden */\n    public generateRowPath(rowId: any): any[] {\n        const path: any[] = [];\n        let record = this.records.get(rowId);\n\n        while (record.parent) {\n            path.push(record.parent.rowID);\n            record = record.parent;\n        }\n\n        return path.reverse();\n    }\n\n    /**\n     * @hidden @internal\n     */\n    protected getDataBasedBodyHeight(): number {\n        return !this.flatData || (this.flatData.length < this._defaultTargetRecordNumber) ?\n            0 : this.defaultTargetBodyHeight;\n    }\n\n    /**\n     * @hidden\n     */\n    protected scrollTo(row: any | number, column: any | number): void {\n        let delayScrolling = false;\n        let record: ITreeGridRecord;\n\n        if (typeof(row) !== 'number') {\n            const rowData = row;\n            const rowID = this._gridAPI.get_row_id(rowData);\n            record = this.processedRecords.get(rowID);\n            this._gridAPI.expand_path_to_record(record);\n\n            if (this.paging) {\n                const rowIndex = this.processedExpandedFlatData.indexOf(rowData);\n                const page = Math.floor(rowIndex / this.perPage);\n\n                if (this.page !== page) {\n                    delayScrolling = true;\n                    this.page = page;\n                }\n            }\n        }\n\n        if (delayScrolling) {\n            this.verticalScrollContainer.onDataChanged.pipe(first()).subscribe(() => {\n                this.scrollDirective(this.verticalScrollContainer,\n                    typeof(row) === 'number' ? row : this.verticalScrollContainer.igxForOf.indexOf(record));\n            });\n        } else {\n            this.scrollDirective(this.verticalScrollContainer,\n                typeof(row) === 'number' ? row : this.verticalScrollContainer.igxForOf.indexOf(record));\n        }\n\n        this.scrollToHorizontally(column);\n    }\n\n    /**\n    * @hidden\n    */\n    public getContext(rowData, rowIndex): any {\n        return {\n            $implicit: rowData,\n            index: rowIndex,\n            templateID: this.isSummaryRow(rowData) ? 'summaryRow' : 'dataRow'\n        };\n    }\n\n    /**\n     * @inheritdoc\n     */\n    getSelectedData(formatters = false, headers = false): any[] {\n        const source = [];\n\n        const process = (record) => {\n            if (record.summaries) {\n                source.push(null);\n                return;\n            }\n            source.push(record.data);\n        };\n\n        this.verticalScrollContainer.igxForOf.forEach(process);\n        return this.extractDataFromSelection(source, formatters, headers);\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    protected writeToData(rowIndex: number, value: any) {\n        mergeObjects(this.flatData[rowIndex], value);\n    }\n\n    /**\n     * @hidden\n    */\n   protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        if (this.hasColumnLayouts) {\n            // invalid configuration - tree grid should not allow column layouts\n            // remove column layouts\n            const nonColumnLayoutColumns = this.columnList.filter((col) => !col.columnLayout && !col.columnLayoutChild);\n            this.columnList.reset(nonColumnLayoutColumns);\n        }\n        super.initColumns(collection, cb);\n    }\n}\n","import { Component, forwardRef, Input, ViewChildren, QueryList, HostBinding, ElementRef, ChangeDetectorRef, DoCheck } from '@angular/core';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IgxRowComponent } from '../row.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\n@Component({\n    selector: 'igx-tree-grid-row',\n    templateUrl: 'tree-grid-row.component.html',\n    providers: [{ provide: IgxRowComponent, useExisting: forwardRef(() => IgxTreeGridRowComponent) }]\n})\nexport class IgxTreeGridRowComponent extends IgxRowComponent<IgxTreeGridComponent> implements DoCheck {\n    constructor(\n        public gridAPI: GridBaseAPIService<IgxTreeGridComponent>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        selection: IgxSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {\n            // D.P. constructor duplication due to es6 compilation, might be obsolete in the future\n        super(gridAPI, crudService, selectionService, selection, element, cdr);\n    }\n    private _treeRow: ITreeGridRecord;\n\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1);\n     * const cells = row.cells;\n     * ```\n     */\n    @ViewChildren('treeCell')\n    public cells: QueryList<any>;\n\n    /**\n     * The `ITreeGridRecord` passed to the row component.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * const treeRow = row.treeRow;\n     * ```\n     */\n    @Input()\n    public get treeRow(): ITreeGridRecord {\n        return this._treeRow;\n    }\n    public set treeRow(value: ITreeGridRecord) {\n        if (this._treeRow !== value) {\n            this._treeRow = value;\n            this.rowData = this._treeRow.data;\n        }\n    }\n\n    /**\n     * Returns a value indicating whether the row component is expanded.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * const expanded = row.expanded;\n     * ```\n     */\n    @HostBinding('attr.aria-expanded')\n    get expanded(): boolean {\n        return this._treeRow.expanded;\n    }\n\n    /**\n     * Sets a value indicating whether the row component is expanded.\n     *\n     * ```typescript\n     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;\n     * row.expanded = true;\n     * ```\n     */\n    set expanded(value: boolean) {\n        (this.gridAPI as IgxTreeGridAPIService).trigger_row_expansion_toggle(this._treeRow, value);\n    }\n\n    /**\n     * @hidden\n     */\n    public isLoading: boolean;\n\n    /**\n     * @hidden\n     */\n    public get showIndicator() {\n        return this.grid.loadChildrenOnDemand ?\n            this.grid.expansionStates.has(this.rowID) ?\n                this.treeRow.children && this.treeRow.children.length :\n                this.grid.hasChildrenKey ?\n                    this.rowData[this.grid.hasChildrenKey] :\n                    true :\n            this.treeRow.children && this.treeRow.children.length;\n    }\n\n    /**\n     * @hidden\n     */\n    protected resolveClasses(): string {\n        const classes = super.resolveClasses();\n        const filteredClass = this.treeRow.isFilteredOutParent ? 'igx-grid__tr--filtered' : '';\n        return `${classes} ${filteredClass}`;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngDoCheck() {\n        this.isLoading = this.grid.loadChildrenOnDemand ? this.grid.loadingRows.has(this.rowID) : false;\n        super.ngDoCheck();\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray, cloneHierarchicalArray } from '../../core/utils';\nimport { DataUtil } from '../../data-operations/data-util';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid';\nimport { ISortingExpression } from '../../data-operations/sorting-expression.interface';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'treeGridHierarchizing',\n    pure: true\n})\nexport class IgxTreeGridHierarchizingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: any[], primaryKey: string, foreignKey: string, childDataKey: string,\n        id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n        let hierarchicalRecords: ITreeGridRecord[] = [];\n        const treeGridRecordsMap = new Map<any, ITreeGridRecord>();\n        const flatData: any[] = [];\n\n        if (primaryKey && foreignKey) {\n            hierarchicalRecords = this.hierarchizeFlatData(id, collection, primaryKey, foreignKey, treeGridRecordsMap, flatData);\n        } else if (childDataKey) {\n            hierarchicalRecords = this.hierarchizeRecursive(id, collection, primaryKey, childDataKey, undefined,\n                flatData, 0, treeGridRecordsMap);\n        }\n\n        grid.flatData = flatData;\n        grid.records = treeGridRecordsMap;\n        grid.rootRecords = hierarchicalRecords;\n        return hierarchicalRecords;\n    }\n\n    private getRowID(primaryKey: any, rowData: any) {\n        return primaryKey ? rowData[primaryKey] : rowData;\n    }\n\n    private hierarchizeFlatData(id: string, collection: any[], primaryKey: string, foreignKey: string,\n        map: Map<any, ITreeGridRecord>, flatData: any[]):\n        ITreeGridRecord[] {\n        const result: ITreeGridRecord[] = [];\n        const missingParentRecords: ITreeGridRecord[] = [];\n        collection.forEach(row => {\n            const record: ITreeGridRecord = {\n                rowID: this.getRowID(primaryKey, row),\n                data: row,\n                children: []\n            };\n            const parent = map.get(row[foreignKey]);\n            if (parent) {\n                record.parent = parent;\n                parent.children.push(record);\n            } else {\n                missingParentRecords.push(record);\n            }\n\n            map.set(row[primaryKey], record);\n        });\n\n        missingParentRecords.forEach(record => {\n            const parent = map.get(record.data[foreignKey]);\n            if (parent) {\n                record.parent = parent;\n                parent.children.push(record);\n            } else {\n                result.push(record);\n            }\n        });\n\n        this.setIndentationLevels(id, result, 0, flatData);\n\n        return result;\n    }\n\n    private setIndentationLevels(id: string, collection: ITreeGridRecord[], indentationLevel: number, flatData: any[]) {\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            record.level = indentationLevel;\n            record.expanded = this.gridAPI.get_row_expansion_state(record);\n            flatData.push(record.data);\n\n            if (record.children && record.children.length > 0) {\n                this.setIndentationLevels(id, record.children, indentationLevel + 1, flatData);\n            }\n        }\n    }\n\n    private hierarchizeRecursive(id: string, collection: any[], primaryKey: string, childDataKey: string,\n        parent: ITreeGridRecord, flatData: any[], indentationLevel: number, map: Map<any, ITreeGridRecord>): ITreeGridRecord[] {\n        const result: ITreeGridRecord[] = [];\n\n        for (let i = 0; i < collection.length; i++) {\n            const item = collection[i];\n            const record: ITreeGridRecord = {\n                rowID: this.getRowID(primaryKey, item),\n                data: item,\n                parent: parent,\n                level: indentationLevel\n            };\n            record.expanded = this.gridAPI.get_row_expansion_state(record);\n            flatData.push(item);\n            map.set(record.rowID, record);\n            record.children = item[childDataKey] ?\n                this.hierarchizeRecursive(id, item[childDataKey], primaryKey, childDataKey, record, flatData, indentationLevel + 1, map) :\n                undefined;\n            result.push(record);\n        }\n\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'treeGridFlattening',\n    pure: true\n})\nexport class IgxTreeGridFlatteningPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: ITreeGridRecord[], id: string,\n        expandedLevels: number, expandedStates: Map<any, boolean>, pipeTrigger: number): any[] {\n\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n        const data: ITreeGridRecord[] = [];\n\n        grid.processedRootRecords = collection;\n        grid.processedRecords = new Map<any, ITreeGridRecord>();\n\n        this.getFlatDataRecursive(collection, data, expandedLevels, expandedStates, id, true);\n\n        grid.processedExpandedFlatData = data.map(r => r.data);\n\n        return data;\n    }\n\n    private getFlatDataRecursive(collection: ITreeGridRecord[], data: ITreeGridRecord[],\n        expandedLevels: number, expandedStates: Map<any, boolean>, gridID: string,\n        parentExpanded: boolean) {\n        if (!collection || !collection.length) {\n            return;\n        }\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        for (let i = 0; i < collection.length; i++) {\n            const hierarchicalRecord = collection[i];\n\n            if (parentExpanded) {\n                data.push(hierarchicalRecord);\n            }\n\n            hierarchicalRecord.expanded = this.gridAPI.get_row_expansion_state(hierarchicalRecord);\n\n            this.updateNonProcessedRecordExpansion(grid, hierarchicalRecord);\n\n            grid.processedRecords.set(hierarchicalRecord.rowID, hierarchicalRecord);\n\n            this.getFlatDataRecursive(hierarchicalRecord.children, data, expandedLevels,\n                expandedStates, gridID, parentExpanded && hierarchicalRecord.expanded);\n        }\n    }\n\n    private updateNonProcessedRecordExpansion(grid: IgxTreeGridComponent, record: ITreeGridRecord) {\n        const rec = grid.records.get(record.rowID);\n        rec.expanded = record.expanded;\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridSorting',\n    pure: true\n})\nexport class IgxTreeGridSortingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(\n        hierarchicalData: ITreeGridRecord[],\n        expressions: ISortingExpression[],\n        id: string,\n        pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n\n        let result: ITreeGridRecord[];\n        if (!expressions.length) {\n            result = hierarchicalData;\n        } else {\n            result = DataUtil.treeGridSort(hierarchicalData, expressions);\n        }\n        const filteredSortedData = [];\n        this.flattenTreeGridRecords(result, filteredSortedData);\n        grid.filteredSortedData = filteredSortedData;\n\n        return result;\n    }\n\n    private flattenTreeGridRecords(records: ITreeGridRecord[], flatData: any[]) {\n        if (records && records.length) {\n            for (const record of records) {\n                flatData.push(record.data);\n                this.flattenTreeGridRecords(record.children, flatData);\n            }\n        }\n    }\n}\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridPaging',\n    pure: true\n})\nexport class IgxTreeGridPagingPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    public transform(collection: ITreeGridRecord[], page = 0, perPage = 15, id: string, pipeTrigger: number): ITreeGridRecord[] {\n        const grid = this.gridAPI.grid;\n        if (!grid.paging) {\n            return collection;\n        }\n\n        const len = collection.length;\n        const totalPages = Math.ceil(len / perPage);\n\n        const state = {\n            index: (totalPages > 0 && page >= totalPages) ? totalPages - 1 : page,\n            recordsPerPage: perPage\n        };\n\n        const result: ITreeGridRecord[] = DataUtil.page(cloneArray(collection), state);\n        grid.pagingState = state;\n        (grid as any)._page = state.index;\n\n        return result;\n    }\n}\n/** @hidden */\n@Pipe({\n    name: 'treeGridTransaction',\n    pure: true\n})\nexport class IgxTreeGridTransactionPipe implements PipeTransform {\n\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    transform(collection: any[], id: string, pipeTrigger: number): any[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n        if (collection && grid.transactions.enabled) {\n            const aggregatedChanges = grid.transactions.getAggregatedChanges(true);\n            if (aggregatedChanges.length > 0) {\n                const primaryKey = grid.primaryKey;\n                if (!primaryKey) {\n                    return collection;\n                }\n\n                const foreignKey = grid.foreignKey;\n                const childDataKey = grid.childDataKey;\n\n                if (foreignKey) {\n                    const flatDataClone = cloneArray(collection);\n                    return DataUtil.mergeTransactions(\n                        flatDataClone,\n                        aggregatedChanges,\n                        grid.primaryKey);\n                } else if (childDataKey) {\n                    const hierarchicalDataClone = cloneHierarchicalArray(collection, childDataKey);\n                    return DataUtil.mergeHierarchicalTransactions(\n                        hierarchicalDataClone,\n                        aggregatedChanges,\n                        childDataKey,\n                        grid.primaryKey);\n                }\n            }\n        }\n\n        return collection;\n    }\n}\n","import { Component, ChangeDetectorRef, ElementRef, ViewChild, Inject, ChangeDetectionStrategy, NgZone, OnInit, Input } from '@angular/core';\nimport { IgxGridCellComponent } from '../cell.component';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { getNodeSizeViaRange } from '../../core/utils';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxGridBaseComponent, IGridDataBindable } from '../grid';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-tree-grid-cell',\n    templateUrl: 'tree-cell.component.html'\n})\nexport class IgxTreeGridCellComponent extends IgxGridCellComponent implements OnInit {\n    private treeGridAPI: IgxTreeGridAPIService;\n\n    constructor(\n                selectionService: IgxGridSelectionService,\n                crudService: IgxGridCRUDService,\n                gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n                selection: IgxSelectionAPIService,\n                cdr: ChangeDetectorRef,\n                element: ElementRef,\n                protected zone: NgZone,\n                @Inject(DOCUMENT) public document) {\n        super(selectionService, crudService, gridAPI, selection, cdr, element, zone);\n        this.treeGridAPI = <IgxTreeGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    @Input()\n    expanded = false;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    level = 0;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    showIndicator = false;\n\n    @ViewChild('indicator', { read: ElementRef, static: false })\n    public indicator: ElementRef;\n\n    @ViewChild('indentationDiv', { read: ElementRef, static: false })\n    public indentationDiv: ElementRef;\n\n    @ViewChild('defaultContentElement', { read: ElementRef, static: false })\n    public defaultContentElement: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @Input()\n    public isLoading: boolean;\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        super.ngOnInit();\n    }\n\n    /**\n     * @hidden\n     */\n    public toggle(event: Event) {\n        event.stopPropagation();\n        this.treeGridAPI.trigger_row_expansion_toggle(this.row.treeRow, !this.row.expanded, event, this.visibleColumnIndex);\n    }\n\n    /**\n     * @hidden\n     */\n    public onIndicatorFocus() {\n        this.gridAPI.submit_value();\n        this.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    public onLoadingDblClick(event: Event) {\n        event.stopPropagation();\n    }\n\n    /**\n     * @hidden\n     */\n    public calculateSizeToFit(range: any): number {\n        const indicatorWidth = this.indicator.nativeElement.getBoundingClientRect().width;\n        const indicatorStyle = this.document.defaultView.getComputedStyle(this.indicator.nativeElement);\n        const indicatorMargin = parseFloat(indicatorStyle.marginRight);\n        let leftPadding = 0;\n        if (this.indentationDiv) {\n            const indentationStyle = this.document.defaultView.getComputedStyle(this.indentationDiv.nativeElement);\n            leftPadding = parseFloat(indentationStyle.paddingLeft);\n        }\n        const largestWidth = Math.max(...Array.from(this.nativeElement.children)\n            .map((child) => getNodeSizeViaRange(range, child)));\n        return largestWidth + indicatorWidth + indicatorMargin + leftPadding;\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { IgxTreeGridAPIService } from './tree-grid-api.service';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxGridBaseComponent, GridSummaryPosition, GridSummaryCalculationMode, IGridDataBindable } from '../grid-base.component';\nimport { ITreeGridRecord } from './tree-grid.interfaces';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { ISummaryRecord } from '../summaries/grid-summary';\n\n/** @hidden */\n@Pipe({\n    name: 'treeGridSummary',\n    pure: true\n})\nexport class IgxTreeGridSummaryPipe implements PipeTransform {\n    private gridAPI: IgxTreeGridAPIService;\n\n    constructor(gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>) {\n        this.gridAPI = <IgxTreeGridAPIService>gridAPI;\n     }\n\n    public transform(flatData: ITreeGridRecord[],\n        hasSummary: boolean,\n        summaryCalculationMode: GridSummaryCalculationMode,\n        summaryPosition: GridSummaryPosition,\n        id: string, pipeTrigger: number, summaryPipeTrigger: number): any[] {\n        const grid: IgxTreeGridComponent = this.gridAPI.grid;\n\n        if (!flatData || !hasSummary || summaryCalculationMode === GridSummaryCalculationMode.rootLevelOnly) {\n            return flatData;\n        }\n\n        return this.addSummaryRows(grid, flatData, summaryPosition);\n    }\n\n    private addSummaryRows(grid: IgxTreeGridComponent, collection: ITreeGridRecord[], summaryPosition: GridSummaryPosition): any[] {\n        const recordsWithSummary = [];\n        const maxSummaryHeight = grid.summaryService.calcMaxSummaryHeight();\n\n        for (let i = 0; i < collection.length; i++) {\n            const record = collection[i];\n            recordsWithSummary.push(record);\n\n            const isExpanded = record.children && record.children.length > 0 && record.expanded;\n\n            if (summaryPosition === GridSummaryPosition.bottom && !isExpanded) {\n                let childRecord = record;\n                let parent = record.parent;\n\n                while (parent) {\n                    const children = parent.children;\n\n                    if (children[children.length - 1] === childRecord ) {\n                        let childData = children.filter(r => !r.isFilteredOutParent).map(r => r.data);\n                        childData = this.removeDeletedRecord(grid, parent.rowID, childData);\n                        const summaries = grid.summaryService.calculateSummaries(parent.rowID, childData);\n                        const summaryRecord: ISummaryRecord = {\n                            summaries: summaries,\n                            max: maxSummaryHeight,\n                            cellIndentation: parent.level + 1\n                        };\n                        recordsWithSummary.push(summaryRecord);\n\n                        childRecord = parent;\n                        parent = childRecord.parent;\n                    } else {\n                        break;\n                    }\n                }\n            } else if (summaryPosition === GridSummaryPosition.top && isExpanded) {\n                let childData = record.children.filter(r => !r.isFilteredOutParent).map(r => r.data);\n                childData = this.removeDeletedRecord(grid, record.rowID, childData);\n                const summaries = grid.summaryService.calculateSummaries(record.rowID, childData);\n                const summaryRecord: ISummaryRecord = {\n                    summaries: summaries,\n                    max: maxSummaryHeight,\n                    cellIndentation: record.level + 1\n                };\n                recordsWithSummary.push(summaryRecord);\n            }\n        }\n        return recordsWithSummary;\n    }\n\n    private removeDeletedRecord(grid, rowId, data) {\n        if (!grid.transactions.enabled || !grid.cascadeOnDelete) {\n            return data;\n        }\n        const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === 'delete').map(t => t.id);\n        let row = grid.records.get(rowId);\n        if (!row && deletedRows.lenght === 0) { return []; }\n        row = row.children ? row : row.parent;\n        while (row) {\n            rowId = row.rowID;\n            if (deletedRows.indexOf(rowId) !== -1) {\n                return [];\n            }\n            row = row.parent;\n        }\n        deletedRows.forEach(rowID => {\n            const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;\n            const index = tempData.indexOf(rowID);\n            if (index !== -1) {\n                data.splice(index, 1);\n            }\n        });\n        return data;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxTreeGridComponent } from './tree-grid.component';\nimport { IgxTreeGridRowComponent } from './tree-grid-row.component';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { IgxTreeGridHierarchizingPipe } from './tree-grid.pipes';\nimport { IgxTreeGridFlatteningPipe, IgxTreeGridSortingPipe, IgxTreeGridPagingPipe, IgxTreeGridTransactionPipe } from './tree-grid.pipes';\nimport { IgxTreeGridCellComponent } from './tree-cell.component';\nimport { IgxTreeGridFilteringPipe } from './tree-grid.filtering.pipe';\nimport { IgxTreeGridSummaryPipe } from './tree-grid.summary.pipe';\nimport { IgxRowLoadingIndicatorTemplateDirective } from './tree-grid.directives';\nimport { IgxSelectModule } from '../../select/index';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxTreeGridComponent,\n    IgxTreeGridRowComponent,\n    IgxTreeGridCellComponent,\n    IgxTreeGridHierarchizingPipe,\n    IgxTreeGridFlatteningPipe,\n    IgxTreeGridSortingPipe,\n    IgxTreeGridFilteringPipe,\n    IgxTreeGridPagingPipe,\n    IgxTreeGridTransactionPipe,\n    IgxTreeGridSummaryPipe,\n    IgxRowLoadingIndicatorTemplateDirective\n  ],\n  exports: [\n    IgxTreeGridComponent,\n    IgxTreeGridRowComponent,\n    IgxTreeGridCellComponent,\n    IgxRowLoadingIndicatorTemplateDirective,\n    IgxGridCommonModule\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridCommonModule,\n    IgxSelectModule\n  ]\n})\nexport class IgxTreeGridModule {\n}\n","import { IgxSelectionAPIService } from '../../core/selection';\nimport { Injectable } from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\n\n/** @hidden */\nexport class IgxHierarchicalSelectionAPIService extends IgxSelectionAPIService {\n    protected hSelection: Map<string,  Map<string, any>> = new Map<string,   Map<string, any>>();\n\n    public add_sub_item(rootID: string,  parentID: string, cell: any) {\n        const selItem = new Map<string, any>();\n        selItem.set(parentID, cell);\n        this.hSelection.set(rootID, selItem);\n    }\n\n    public get_sub_item(rootID: string) {\n        let selItem;\n        const sel = this.hSelection.get(rootID);\n        if (sel) {\n            selItem = {\n                gridID: this.hSelection.get(rootID).keys().next().value ,\n                cell: this.hSelection.get(rootID).values().next().value\n            };\n        }\n        return selItem;\n    }\n\n    public clear_sub_item(rootID: string) {\n        return this.hSelection.set(rootID, null);\n    }\n\n}\n","import { IgxGridNavigationService } from '../grid-navigation.service';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { first } from 'rxjs/operators';\nimport { FilterMode } from '../grid-base.component';\nimport { IgxColumnComponent } from '../../grids/column.component';\nimport { ISelectionNode } from '../../core/grid-selection';\nimport { isIE } from '../../core/utils';\n\nexport class IgxHierarchicalGridNavigationService extends IgxGridNavigationService {\n    public grid: IgxHierarchicalGridComponent;\n\n    protected getCellSelector(visibleIndex?: number, isSummary = false) {\n        return isSummary ? 'igx-grid-summary-cell' : 'igx-hierarchical-grid-cell';\n    }\n\n    protected getRowSelector() {\n        return 'igx-hierarchical-grid-row';\n    }\n\n    protected getRowByIndex(index) {\n        const selector = this.getRowSelector();\n        const rows = Array.from(this.grid.nativeElement.querySelectorAll(\n            `${selector}[data-rowindex=\"${index}\"]`));\n        let row;\n        rows.forEach((r) => {\n            const parentGrid = this.getClosestElemByTag(r, 'igx-hierarchical-grid');\n            if (parentGrid && parentGrid.getAttribute('id') === this.grid.id) {\n                row = r;\n            }\n        });\n        return row;\n    }\n\n    private getChildContainer(grid?) {\n        const currGrid = grid || this.grid;\n        return currGrid.nativeElement.parentNode.parentNode.parentNode;\n    }\n\n    private getChildGridRowContainer(grid?) {\n        const currGrid = grid || this.grid;\n        return currGrid.nativeElement.parentNode.parentNode;\n    }\n\n    private getChildGrid(childGridID, grid) {\n        const cgrid = grid.hgridAPI.getChildGrids(true).filter((g) => g.id === childGridID)[0];\n        return cgrid;\n    }\n\n    private _isScrolledToBottom(grid) {\n        const scrollTop = grid.verticalScrollContainer.getVerticalScroll().scrollTop;\n        const scrollHeight = grid.verticalScrollContainer.getVerticalScroll().scrollHeight;\n        return scrollHeight === 0 || Math.round(scrollTop + grid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n    }\n    private getIsChildAtIndex(index) {\n        return this.grid.isChildGridRecord(this.grid.verticalScrollContainer.igxForOf[index]);\n    }\n\n    public getCellElementByVisibleIndex(rowIndex, visibleColumnIndex, isSummary = false) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        if (isSummary) {\n            const summaryRow = this.grid.summariesRowList.toArray()[0].nativeElement;\n            return summaryRow.querySelector(\n                `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n        }\n        const row = this.getRowByIndex(rowIndex);\n        return row.querySelector(\n            `${cellSelector}[data-rowindex=\"${rowIndex}\"][data-visibleIndex=\"${visibleColumnIndex}\"]`);\n    }\n\n    public navigateUp(rowElement, selectedNode: ISelectionNode) {\n        const prevElem = rowElement.previousElementSibling;\n        const visibleColumnIndex = selectedNode.column;\n        const currentRowIndex = selectedNode.row;\n        if (prevElem) {\n            const nodeName = prevElem.children[0].nodeName.toLowerCase();\n            const isElemChildGrid = nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isElemChildGrid) {\n                this.focusPrevChild(prevElem, visibleColumnIndex, this.grid);\n            } else {\n                if (this.grid.parent !== null) {\n                    // currently navigating in child grid\n                    this._navigateUpInChild(rowElement, currentRowIndex, visibleColumnIndex);\n                } else {\n                    super.navigateUp(rowElement, selectedNode);\n                }\n            }\n        } else if (currentRowIndex !== 0) {\n            // handle scenario when prev item is child grid but is not yet in view\n            const isPrevChildGrid = this.getIsChildAtIndex(currentRowIndex - 1);\n            if (!isPrevChildGrid) {\n                super.navigateUp(rowElement, selectedNode);\n            } else {\n                this.scrollGrid(this.grid, -rowElement.offsetHeight,\n                    () => {\n                        rowElement = this.getRowByIndex(currentRowIndex);\n                        this.navigateUp(rowElement, selectedNode);\n                    });\n            }\n        } else if (this.grid.parent !== null &&\n            currentRowIndex === 0) {\n            // move to prev row in sibling layout or parent\n            this.focusPrev(visibleColumnIndex);\n        }\n    }\n    public navigateDown(rowElement, selectedNode: ISelectionNode) {\n        const nextElem = rowElement.nextElementSibling;\n        const visibleColumnIndex = selectedNode.column;\n        const currentRowIndex = selectedNode.row;\n        if (nextElem) {\n            // next elem is in DOM\n            const nodeName = nextElem.children[0].nodeName.toLowerCase();\n            const isNextElemChildGrid = nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isNextElemChildGrid) {\n                this.focusNextChild(nextElem, visibleColumnIndex, this.grid);\n            } else {\n                if (this.grid.parent !== null) {\n                    // currently navigating in child grid\n                    this._navigateDownInChild(rowElement, currentRowIndex, visibleColumnIndex);\n                } else {\n                    super.navigateDown(rowElement, selectedNode);\n                }\n            }\n        } else if (currentRowIndex !== this.grid.verticalScrollContainer.igxForOf.length - 1) {\n            // scroll next in view\n            super.navigateDown(rowElement, selectedNode);\n        } else if (this.grid.parent !== null &&\n            currentRowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1) {\n            // move to next row in sibling layout or in parent\n            this.focusNext(visibleColumnIndex);\n        }\n    }\n\n    public navigateTop(visibleColumnIndex) {\n        if (this.grid.parent !== null) {\n            // navigating in child\n            const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n            const cellSelector = this.getCellSelector(visibleColumnIndex);\n\n            if (verticalScroll.scrollTop === 0) {\n                this._focusScrollCellInView(visibleColumnIndex);\n            } else {\n                this.scrollGrid(this.grid, 'top',\n                    () => {\n                        const cells = this.grid.nativeElement.querySelectorAll(\n                            `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                        if (cells.length > 0) {\n                            this._focusScrollCellInView(visibleColumnIndex);\n                        }\n                    });\n            }\n\n        } else {\n            super.navigateTop(visibleColumnIndex);\n        }\n    }\n\n    public navigateBottom(visibleColumnIndex) {\n        // handle scenario where last index is child grid\n        // in that case focus cell in last data row\n        const lastIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;\n        if (this.getIsChildAtIndex(lastIndex)) {\n            const targetIndex = lastIndex - 1;\n            const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n            const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n            const cellSelector = this.getCellSelector(visibleColumnIndex);\n            if (verticalScroll.scrollTop === scrTopPosition) {\n                const cells = this.getRowByIndex(targetIndex).querySelectorAll(\n                    `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                cells[cells.length - 1].focus();\n            } else {\n                this.scrollGrid(this.grid, scrTopPosition - verticalScroll.scrollTop,\n                    () => {\n                        const cells = this.getRowByIndex(targetIndex).querySelectorAll(\n                            `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n                        if (cells.length > 0) { cells[cells.length - 1].focus(); }\n                    });\n            }\n        } else  if (this.grid.parent !== null) {\n            const childContainer = this.grid.nativeElement.parentNode.parentNode;\n            const diff =\n            childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n            const endIsVisible = diff < 0;\n            const scrollable = this.getNextScrollableDown(this.grid);\n            if (!endIsVisible) {\n                this.scrollGrid(scrollable.grid, diff,\n                    () => super.navigateBottom(visibleColumnIndex));\n            } else {\n                super.navigateBottom(visibleColumnIndex);\n            }\n        } else {\n            super.navigateBottom(visibleColumnIndex);\n        }\n    }\n    public goToLastCell() {\n        // handle scenario where last index is child grid\n        // in that case focus last cell in last data row\n        const lastIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;\n        if (this.getIsChildAtIndex(lastIndex)) {\n            const targetIndex = lastIndex - 1;\n            const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(targetIndex, true);\n            const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n            if (verticalScroll.scrollTop === scrTopPosition) {\n                this.onKeydownEnd(targetIndex);\n            } else {\n                this.scrollGrid(this.grid, scrTopPosition - verticalScroll.scrollTop,\n                    () => {\n                        this.onKeydownEnd(targetIndex);\n                    });\n            }\n        } else {\n            super.goToLastCell();\n        }\n    }\n\n    public onKeydownEnd(rowIndex, isSummary = false) {\n        if (this.grid.parent && !isSummary) {\n            // handle scenario where last child row might not be in view\n            // parent should scroll to child grid end\n            const childContainer = this.grid.nativeElement.parentNode.parentNode;\n            const diffBottom =\n                childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.nativeElement.getBoundingClientRect().bottom;\n            const row = this.grid.getRowByIndex(rowIndex).element.nativeElement;\n            const rowBottom = row.getBoundingClientRect().bottom;\n            const rowIsVisible = rowBottom <= this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n            const gridTop = this._getMaxTop(this.grid);\n            const diffTop = row.getBoundingClientRect().bottom -\n                row.offsetHeight - gridTop;\n            const endIsVisible = diffBottom <= 0;\n            const topVisible = diffTop >= 0;\n            if (!endIsVisible && !rowIsVisible) {\n                this.scrollGrid(this.grid.parent, diffBottom, () => super.onKeydownEnd(rowIndex));\n            } else if (!topVisible) {\n                const scrGrid = this.grid.verticalScrollContainer.getVerticalScroll().scrollTop !== 0 ? this.grid :\n                    this.getNextScrollable(this.grid).grid;\n                const topGrid = scrGrid.tbody.nativeElement.getBoundingClientRect().top >\n                    this.grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top ? scrGrid : this.grid.rootGrid;\n                this.scrollGrid(topGrid, diffTop, () => super.onKeydownEnd(rowIndex));\n            } else {\n                super.onKeydownEnd(rowIndex, isSummary);\n            }\n        } else {\n            super.onKeydownEnd(rowIndex, isSummary);\n        }\n\n    }\n\n    public goToFirstCell() {\n        const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n        const horizontalScroll = this.grid.dataRowList.first.virtDirRow.getHorizontalScroll();\n        if (verticalScroll.scrollTop === 0 && this.grid.parent) {\n            // scroll parent so that current child is in view\n            if (!horizontalScroll.clientWidth || parseInt(horizontalScroll.scrollLeft, 10) <= 1 || this.grid.pinnedColumns.length) {\n                this.navigateTop(0);\n            } else {\n                this.horizontalScroll(this.grid.dataRowList.first.index).scrollTo(0);\n                this.grid.parentVirtDir.onChunkLoad\n                    .pipe(first())\n                    .subscribe(() => {\n                        this.navigateTop(0);\n                    });\n            }\n        } else {\n            super.goToFirstCell();\n        }\n    }\n\n    public performTab(currentRowEl, selectedNode: ISelectionNode) {\n        if (this.grid.rowInEditMode) {\n            super.performTab(currentRowEl, selectedNode);\n            return;\n        }\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummaryRow = selectedNode.isSummaryRow;\n        const summaryRows = this.grid.summariesRowList.toArray();\n        const hasSummaries = summaryRows.length > 0;\n        const isLastDataRow = rowIndex === this.grid.verticalScrollContainer.igxForOf.length - 1;\n        const nextIsDataRow = this.grid.dataRowList.find(row => row.index === rowIndex + 1);\n        const isLastColumn = this.grid.unpinnedColumns[this.grid.unpinnedColumns.length - 1].visibleIndex === visibleColumnIndex;\n        const isLastSummaryRow = hasSummaries && isSummaryRow;\n        const nextIndex = rowIndex + 1;\n        const virt = this.grid.verticalScrollContainer;\n        const isNextChild = nextIndex <= virt.igxForOf.length - 1 &&\n            this.grid.isChildGridRecord(virt.igxForOf[nextIndex]);\n        if (!nextIsDataRow && !(isLastDataRow && hasSummaries) && isLastColumn && !isSummaryRow) {\n            // navigating in child, next is not summary\n            const childContainer = this.getChildGridRowContainer();\n            const nextIsSiblingChild = this.grid.parent ? !!childContainer.nextElementSibling : false;\n            if (nextIsSiblingChild) {\n                this.focusNextChildDOMElem(childContainer, this.grid.parent);\n            } else if (isNextChild) {\n                const isInView = virt.state.startIndex + virt.state.chunkSize > nextIndex;\n                if (!isInView) {\n                    this.scrollGrid(this.grid, 'next', () => {\n                        this.focusNextChildDOMElem(currentRowEl, this.grid);\n                    });\n                } else {\n                    this.focusNextChildDOMElem(currentRowEl, this.grid);\n                }\n            } else {\n                this.navigateDown(currentRowEl, { row: rowIndex, column: 0 });\n            }\n        } else if (isLastSummaryRow && isLastColumn && this.grid.parent) {\n            // navigating in child summary, next is parent summary or next parent row\n            const parent = this.grid.parent;\n            const parentHasSummary = parent.summariesRowList.toArray().length > 0;\n            const parentRowIndex = parseInt(\n                this.getClosestElemByTag(currentRowEl, 'igx-child-grid-row').parentNode.getAttribute('data-rowindex'), 10);\n            const isLastRowInParent = parent.verticalScrollContainer.igxForOf.length - 1 === parentRowIndex;\n            // check if next is sibling\n            const childRowContainer = this.getChildGridRowContainer(this.grid);\n            const nextIsSiblingChild = !!childRowContainer.nextElementSibling;\n            if (isLastRowInParent && parentHasSummary && !nextIsSiblingChild) {\n                // next is parent summary\n                const parentSummary = parent.summariesRowList.toArray()[0].nativeElement;\n                parent.navigation.focusNextRow(parentSummary, 0, this.grid.rootGrid, true);\n            } else {\n                // next is sibling or parent\n                this.focusNext(0);\n            }\n        } else if (isLastDataRow && hasSummaries && isLastColumn && this.grid.parent) {\n            // navigating in child rows, next is child grid's summary row\n            this.focusNextRow(summaryRows[0].nativeElement, 0, this.grid.parent, true);\n        } else {\n            super.performTab(currentRowEl, selectedNode);\n        }\n    }\n\n    private focusNextChildDOMElem(currentRowEl, grid) {\n        const gridElem = currentRowEl.nextElementSibling.querySelector('igx-hierarchical-grid');\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n        if (childGrid.allowFiltering && childGrid.filterMode === FilterMode.quickFilter) {\n            childGrid.navigation.moveFocusToFilterCell(true);\n            return;\n        }\n        this.focusNextChild(currentRowEl.nextElementSibling, 0, grid);\n    }\n\n    public navigatePrevFilterCell(column: IgxColumnComponent, eventArgs) {\n        if (column.visibleIndex === 0 && this.grid.parent) {\n            eventArgs.preventDefault();\n            let targetGrid = this.grid.parent;\n            const prevSiblingChild = this.getChildGridRowContainer().previousElementSibling;\n            if (prevSiblingChild) {\n                const gridElem = prevSiblingChild.querySelectorAll('igx-hierarchical-grid')[0];\n                targetGrid = this.getChildGrid(gridElem.getAttribute('id'), this.grid.parent);\n            }\n            this.focusPrev(targetGrid.unpinnedColumns[targetGrid.unpinnedColumns.length - 1].visibleIndex);\n        } else {\n            super.navigatePrevFilterCell(column, eventArgs);\n        }\n    }\n\n    public navigateNextFilterCell(column: IgxColumnComponent, eventArgs) {\n        const cols = this.grid.filteringService.unpinnedFilterableColumns;\n        const nextFilterableIndex = cols.indexOf(column) + 1;\n        if (nextFilterableIndex >= this.grid.filteringService.unpinnedFilterableColumns.length) {\n            // next is not filter cell\n            const dataRows = this.grid.rowList.toArray();\n            const hasRows = dataRows.length !== 0;\n            const summaryRows = this.grid.summariesRowList.toArray();\n            const hasSummaries = summaryRows.length > 0 && summaryRows[0].summaryCells.length > 0;\n            if (hasRows) {\n                this.focusNextRow(dataRows[0].nativeElement, 0, this.grid, false);\n            } else if (hasSummaries) {\n                this.focusNextRow(summaryRows[0].nativeElement, 0, this.grid, true);\n            } else {\n                this.focusNext(0);\n            }\n            eventArgs.preventDefault();\n        } else {\n            super.navigateNextFilterCell(column, eventArgs);\n        }\n    }\n\n    public performShiftTabKey(currentRowEl, selectedNode: ISelectionNode) {\n        if (this.grid.rowInEditMode) {\n            super.performShiftTabKey(currentRowEl, selectedNode);\n            return;\n        }\n        const rowIndex = selectedNode.row;\n        const visibleColumnIndex = selectedNode.column;\n        const isSummary = selectedNode.isSummaryRow;\n        if (visibleColumnIndex === 0 && rowIndex === 0 && this.grid.parent && !isSummary) {\n            if (this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                this.moveFocusToFilterCell();\n            } else {\n                const prevSiblingChild = this.getChildGridRowContainer().previousElementSibling;\n                if (prevSiblingChild) {\n                    const gridElem = prevSiblingChild.querySelectorAll('igx-hierarchical-grid')[0];\n                    this.performShiftTabIntoChild(gridElem, currentRowEl, rowIndex);\n                } else {\n                    const selNode = {\n                        row: rowIndex,\n                        column: this.grid.parent.unpinnedColumns[this.grid.parent.unpinnedColumns.length - 1].visibleIndex\n                    };\n                    this.navigateUp(currentRowEl, selNode);\n                }\n            }\n        } else if (visibleColumnIndex === 0 && currentRowEl.previousElementSibling &&\n            currentRowEl.previousElementSibling.children[0].tagName.toLowerCase() === 'igx-child-grid-row') {\n            const gridElem = this.getLastGridElem(currentRowEl.previousElementSibling);\n            this.performShiftTabIntoChild(gridElem, currentRowEl, rowIndex);\n        } else if (visibleColumnIndex === 0 && isSummary) {\n            const lastRowIndex = this.grid.verticalScrollContainer.igxForOf.length - 1;\n            if (lastRowIndex === -1) {\n                // no child data\n                if (this.grid.allowFiltering && this.grid.filterMode === FilterMode.quickFilter) {\n                    this.moveFocusToFilterCell();\n                } else {\n                    const selNode = {\n                        row: rowIndex,\n                        column: this.grid.parent.unpinnedColumns[this.grid.parent.unpinnedColumns.length - 1].visibleIndex\n                    };\n                    this.navigateUp(currentRowEl, selNode);\n                }\n            } else if (!this.getIsChildAtIndex(lastRowIndex)) {\n                super.goToLastCell();\n            } else {\n                const scrTopPosition = this.grid.verticalScrollContainer.getScrollForIndex(lastRowIndex, true);\n                const verticalScroll = this.grid.verticalScrollContainer.getVerticalScroll();\n                if (verticalScroll.scrollTop === scrTopPosition || isNaN(scrTopPosition)) {\n                    const closestChild = this.getLastGridElem(this.grid.getRowByIndex(lastRowIndex).nativeElement.parentElement);\n                    this.performShiftTabIntoChild(closestChild, currentRowEl, rowIndex);\n                } else {\n                    this.scrollGrid(this.grid, scrTopPosition - verticalScroll.scrollTop,\n                        () => {\n                            const closestChild = this.getLastGridElem(this.grid.getRowByIndex(lastRowIndex).nativeElement.parentElement);\n                            this.performShiftTabIntoChild(closestChild, currentRowEl, rowIndex);\n                        });\n                }\n            }\n        } else {\n            super.performShiftTabKey(currentRowEl, selectedNode);\n        }\n    }\n\n    public getFocusableGrid() {\n        return (isIE() && this.grid.rootGrid) ? this.grid.rootGrid : this.grid;\n    }\n\n    private getLastGridElem(trContainer) {\n        const children = trContainer.children;\n        const closestChild = children[children.length - 1].children[0].children[0];\n        return closestChild;\n    }\n\n    private performShiftTabIntoChild(gridElem, currentRowEl, rowIndex) {\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, this.grid) || this.getChildGrid(childGridID, this.grid.parent);\n        const lastIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n        const summaryRows = childGrid.summariesRowList.toArray();\n        if (summaryRows.length > 0 && summaryRows[0].summaryCells.length > 0) {\n            // move focus to last summary row cell\n            const summaryRow = summaryRows[0].nativeElement;\n            this.focusPrevRow(summaryRow, lastIndex, childGrid, true, true);\n        } else if (childGrid.rowList.toArray().length === 0 &&\n            childGrid.allowFiltering && childGrid.filterMode === FilterMode.quickFilter) {\n            // move to filter cell\n            childGrid.navigation.moveFocusToFilterCell();\n        } else {\n            // move to next cell\n            this.navigateUp(currentRowEl, { row: rowIndex, column: lastIndex });\n        }\n    }\n\n    private _focusScrollCellInView(visibleColumnIndex) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex);\n        const cells = this.grid.nativeElement.querySelectorAll(\n            `${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n        const cell = cells[0];\n        const childContainer = this.grid.nativeElement.parentNode.parentNode;\n        const scrTop = this.grid.parent.verticalScrollContainer.getVerticalScroll().scrollTop;\n        const maxScroll = this.grid.parent.verticalScrollContainer.getVerticalScroll().scrollHeight - this.grid.parent.calcHeight;\n        const dc = childContainer.parentNode.parentNode;\n        const scrWith = parseInt(dc.style.top, 10);\n        const parentRowOffset = childContainer.parentNode.offsetTop + this.grid.nativeElement.offsetTop +\n            scrWith;\n        if ((scrTop === 0 && parentRowOffset < 0 ) || parentRowOffset === 0 || (scrTop === maxScroll && parentRowOffset > 0)) {\n            // cell is in view\n            cell.focus({ preventScroll: true });\n        } else {\n            // scroll parent so that cell is in view\n            this.scrollGrid(this.grid.parent, parentRowOffset, () => cell.focus({ preventScroll: true }));\n        }\n    }\n\n    private focusNextChild(elem, visibleColumnIndex, grid) {\n        const gridElem = elem.querySelector('igx-hierarchical-grid');\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n\n        if (childGrid.rowList.toArray().length === 0) {\n            this.focusNext(visibleColumnIndex, childGrid);\n            return;\n        }\n\n        // Update column index since the next child can have in general less columns than visibleColumnIndex value.\n        const lastCellIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n\n        if (childGrid.verticalScrollContainer.state.startIndex !== 0) {\n            // scroll to top\n            this.scrollGrid(childGrid, 'top', () => this.focusNextRow(elem, visibleColumnIndex, childGrid));\n        } else {\n            this.focusNextRow(elem, visibleColumnIndex, childGrid);\n        }\n    }\n    private focusPrevChild(elem, visibleColumnIndex, grid) {\n        const grids = [];\n        const gridElems = Array.from(elem.querySelectorAll('igx-hierarchical-grid'));\n        const childLevel = grid.childLayoutList.first.level;\n        gridElems.forEach((hg) => {\n            const parentRow = this.getClosestElemByTag(hg, 'igx-child-grid-row');\n            if (parentRow && parseInt(parentRow.getAttribute('data-level'), 10) === childLevel) {\n                grids.push(hg);\n            }\n        });\n        const gridElem = grids[grids.length - 1];\n        const childGridID = gridElem.getAttribute('id');\n        const childGrid = this.getChildGrid(childGridID, grid);\n\n        if (childGrid.rowList.toArray().length === 0) {\n            this.focusPrev(visibleColumnIndex, childGrid);\n            return;\n        }\n\n        // Update column index since the previous child can have in general less columns than visibleColumnIndex value.\n        const lastCellIndex = childGrid.unpinnedColumns[childGrid.unpinnedColumns.length - 1].visibleIndex;\n        visibleColumnIndex = Math.min(lastCellIndex, visibleColumnIndex);\n\n        const isScrolledToBottom = this._isScrolledToBottom(childGrid);\n        const lastIndex = childGrid.verticalScrollContainer.igxForOf.length - 1;\n        if (!isScrolledToBottom) {\n            // scroll to end\n            this.scrollGrid(childGrid, 'bottom', () => this.focusPrevChild(elem, visibleColumnIndex, grid));\n        } else {\n            const lastRowInChild = childGrid.getRowByIndex(lastIndex);\n            const isChildGrid = lastRowInChild.nativeElement.nodeName.toLowerCase() === 'igx-child-grid-row';\n            if (isChildGrid) {\n                this.focusPrevChild(lastRowInChild.nativeElement.parentNode, visibleColumnIndex, childGrid);\n            } else {\n                this.focusPrevRow(lastRowInChild.nativeElement, visibleColumnIndex, childGrid, true);\n            }\n        }\n    }\n    private focusPrev(visibleColumnIndex, grid?) {\n        const currGrid = grid || this.grid;\n        let parentContainer = this.getChildContainer(currGrid);\n        let childRowContainer = this.getChildGridRowContainer(currGrid);\n        const prevIsSiblingChild = !!childRowContainer.previousElementSibling;\n        let prev = childRowContainer.previousElementSibling || parentContainer.previousElementSibling;\n        if (prev) {\n            if (prevIsSiblingChild) {\n                this.focusPrevChild(prev, visibleColumnIndex, currGrid.parent);\n            } else {\n                this.focusPrevRow(prev, visibleColumnIndex, currGrid.parent);\n            }\n        } else {\n            this.scrollGrid(currGrid.parent, 'prev',\n                () => {\n                    parentContainer = this.getChildContainer(grid);\n                    childRowContainer = this.getChildGridRowContainer(grid);\n                    prev = childRowContainer.previousElementSibling || parentContainer.previousElementSibling;\n                    if (prevIsSiblingChild) {\n                        this.focusPrevChild(prev, visibleColumnIndex, currGrid.parent);\n                    } else {\n                        this.focusPrevRow(prev, visibleColumnIndex, currGrid.parent);\n                    }\n                });\n        }\n    }\n\n    private getNextParentInfo(grid) {\n        // find next parent that is not at bottom\n        let currGrid = grid.parent;\n        let nextElem = this.getChildContainer(grid).nextElementSibling;\n        while (!nextElem && currGrid.parent !== null) {\n            nextElem = this.getChildContainer(currGrid).nextElementSibling;\n            currGrid = currGrid.parent;\n        }\n\n        return { grid: currGrid, nextElement: nextElem };\n    }\n    private getNextScrollable(grid) {\n        let currGrid = grid.parent;\n        if (!currGrid) {\n            return { grid: grid, prev: null };\n        }\n        let nonScrollable = currGrid.verticalScrollContainer.getVerticalScroll().scrollTop === 0;\n        let prev = grid;\n        while (nonScrollable && currGrid.parent !== null) {\n            prev = currGrid;\n            currGrid = currGrid.parent;\n            nonScrollable = currGrid.verticalScrollContainer.getVerticalScroll().scrollTop === 0;\n        }\n        return { grid: currGrid, prev: prev };\n    }\n\n    private focusNext(visibleColumnIndex, grid?) {\n        const currGrid = grid || this.grid;\n        const parentInfo = this.getNextParentInfo(currGrid);\n        const nextParentGrid = parentInfo.grid;\n        let nextParentElem = parentInfo.nextElement;\n        let childRowContainer = this.getChildGridRowContainer(currGrid);\n        const nextIsSiblingChild = !!childRowContainer.nextElementSibling;\n        let next = childRowContainer.nextElementSibling || nextParentElem;\n        const verticalScroll = nextParentGrid.verticalScrollContainer.getVerticalScroll();\n        if (next) {\n            if (nextIsSiblingChild) {\n                this.focusNextChild(next, visibleColumnIndex, nextParentGrid);\n            } else {\n                this.focusNextRow(next, visibleColumnIndex, grid || nextParentGrid);\n            }\n        } else if (verticalScroll.scrollTop !==\n            verticalScroll.scrollHeight - nextParentGrid.verticalScrollContainer.igxForContainerSize) {\n            this.scrollGrid(nextParentGrid, 'next',\n                () => {\n                    nextParentElem = parentInfo.nextElement;\n                    childRowContainer = this.getChildGridRowContainer();\n                    next = childRowContainer.nextElementSibling || nextParentElem;\n                    if (next && nextIsSiblingChild) {\n                        this.focusNextChild(next, visibleColumnIndex, nextParentGrid);\n                    } else if (next) {\n                        this.focusNextRow(next, visibleColumnIndex, grid || nextParentGrid);\n                    }\n                });\n        }\n    }\n    private getNextScrollableDown(grid) {\n        let currGrid = grid.parent;\n        if (!currGrid) {\n            return { grid: grid, prev: null };\n        }\n        let scrollTop = currGrid.verticalScrollContainer.getVerticalScroll().scrollTop;\n        let scrollHeight = currGrid.verticalScrollContainer.getVerticalScroll().scrollHeight;\n        let nonScrollable = scrollHeight === 0 ||\n            Math.round(scrollTop + currGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n        let prev = grid;\n        while (nonScrollable && currGrid.parent !== null) {\n            prev = currGrid;\n            currGrid = currGrid.parent;\n            scrollTop = currGrid.verticalScrollContainer.getVerticalScroll().scrollTop;\n            scrollHeight = currGrid.verticalScrollContainer.getVerticalScroll().scrollHeight;\n            nonScrollable = scrollHeight === 0 ||\n                Math.round(scrollTop + currGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight;\n        }\n        return { grid: currGrid, prev: prev };\n    }\n\n    private _getMinBottom(grid) {\n        let currGrid = grid;\n        let bottom = currGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n            bottom = Math.min(bottom, currGrid.tbody.nativeElement.getBoundingClientRect().bottom);\n        }\n        return bottom;\n    }\n\n    private _getMaxTop(grid) {\n        let currGrid = grid;\n        let top = currGrid.tbody.nativeElement.getBoundingClientRect().top;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n            top = Math.max(top, currGrid.tbody.nativeElement.getBoundingClientRect().top);\n        }\n        return top;\n    }\n\n    private focusNextRow(elem, visibleColumnIndex, grid, isSummary?) {\n        const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n        if (grid.navigation.isColumnFullyVisible(visibleColumnIndex)) {\n            const cell =\n                elem.querySelector(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            const closestScrollableGrid = this.getNextScrollableDown(grid).grid;\n            // const diff = cell.getBoundingClientRect().bottom - grid.rootGrid.tbody.nativeElement.getBoundingClientRect().bottom;\n            const gridBottom = this._getMinBottom(grid);\n            const diff = cell.getBoundingClientRect().bottom - gridBottom;\n            const inView = diff <= 0;\n            const scrollTop = closestScrollableGrid.verticalScrollContainer.getVerticalScroll().scrollTop;\n            const scrollHeight = closestScrollableGrid.verticalScrollContainer.getVerticalScroll().scrollHeight;\n            const canScroll = !(scrollHeight === 0 ||\n                Math.round(scrollTop + closestScrollableGrid.verticalScrollContainer.igxForContainerSize) === scrollHeight);\n            if (!inView && canScroll) {\n                this.scrollGrid(closestScrollableGrid, diff, () => cell.focus({ preventScroll: true }));\n            } else {\n                cell.focus({ preventScroll: true });\n            }\n        } else {\n            const cellElem = elem.querySelector(`${cellSelector}`);\n            const rowIndex = parseInt(cellElem.getAttribute('data-rowindex'), 10);\n            grid.navigation.performHorizontalScrollToCell(rowIndex, visibleColumnIndex);\n        }\n    }\n\n    private focusPrevRow(elem, visibleColumnIndex, grid, inChild?, isSummary?) {\n        if (grid.navigation.isColumnFullyVisible(visibleColumnIndex)) {\n            const cellSelector = this.getCellSelector(visibleColumnIndex, isSummary);\n            const cells = elem.querySelectorAll(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`);\n            let cell = cells[cells.length - 1];\n            const rIndex = parseInt(elem.getAttribute('data-rowindex'), 10);\n            const scrGrid = grid.verticalScrollContainer.getVerticalScroll().scrollTop !== 0 ? grid :\n                this.getNextScrollable(grid).grid;\n            const topGrid = scrGrid.tbody.nativeElement.getBoundingClientRect().top >\n                grid.rootGrid.tbody.nativeElement.getBoundingClientRect().top ? scrGrid : grid.rootGrid;\n            const gridTop = this._getMaxTop(grid);\n            const scrTop = scrGrid.verticalScrollContainer.getVerticalScroll().scrollTop;\n            const diff = cell.getBoundingClientRect().bottom -\n                cell.offsetHeight - gridTop;\n            if (scrTop !== 0 && diff < 0 && !inChild) {\n                this.scrollGrid(scrGrid, diff, () => {\n                    const el = !isSummary ? grid.navigation.getRowByIndex(rIndex) : elem;\n                    cell = el.querySelectorAll(`${cellSelector}[data-visibleIndex=\"${visibleColumnIndex}\"]`)[0];\n                    cell.focus({ preventScroll: true });\n                });\n            } else if (diff < 0 && inChild) {\n                this.scrollGrid(topGrid, diff, () => {\n                    cell.focus({ preventScroll: true });\n                });\n            } else {\n                cell.focus({ preventScroll: true });\n            }\n        } else {\n            this.horizontalScrollGridToIndex(grid, visibleColumnIndex, () => {\n                this.focusPrevRow(elem, visibleColumnIndex, grid, inChild, isSummary);\n            });\n        }\n    }\n\n    private horizontalScrollGridToIndex(grid, visibleColumnIndex, callBackFunc) {\n        const unpinnedIndex = this.getColumnUnpinnedIndex(visibleColumnIndex);\n        grid.parentVirtDir.onChunkLoad\n            .pipe(first())\n            .subscribe(callBackFunc);\n        grid.dataRowList.toArray()[0].virtDirRow.scrollTo(unpinnedIndex);\n    }\n    private scrollGrid(grid, target, callBackFunc) {\n        this.getFocusableGrid().nativeElement.focus({preventScroll: true});\n        requestAnimationFrame(() => {\n            if (typeof target === 'number') {\n                grid.verticalScrollContainer.addScrollTop(target);\n            } else {\n                switch (target) {\n                    case 'top': grid.verticalScrollContainer.scrollTo(0); break;\n                    case 'bottom': grid.verticalScrollContainer.scrollTo(grid.verticalScrollContainer.igxForOf.length - 1); break;\n                    case 'next': grid.verticalScrollContainer.scrollNext(); break;\n                    case 'prev': grid.verticalScrollContainer.scrollPrev(); break;\n                }\n            }\n            grid.verticalScrollContainer.onChunkLoad\n                .pipe(first())\n                .subscribe(callBackFunc);\n        });\n    }\n\n    private _navigateUpInChild(rowElement, currentRowIndex, visibleColumnIndex) {\n        const prevElem = rowElement.previousElementSibling;\n        const scrollable = this.getNextScrollable(this.grid);\n        const grid = scrollable.grid;\n        const scrTop = grid.verticalScrollContainer.getVerticalScroll().scrollTop;\n        const containerTop = scrollable.prev.nativeElement.parentNode.parentNode.parentNode.parentNode;\n        const top = parseInt(containerTop.style.top, 10);\n        if (scrTop !== 0 && top < 0) {\n            this.scrollGrid(grid, -prevElem.offsetHeight,\n                () => super.navigateUp(rowElement, { row: currentRowIndex, column: visibleColumnIndex }));\n        } else {\n            super.navigateUp(rowElement, { row: currentRowIndex, column: visibleColumnIndex });\n        }\n    }\n\n    private _navigateDownInChild(rowElement, currentRowIndex, visibleColumnIndex) {\n        const nextElem = rowElement.nextElementSibling;\n        const childContainer = this.grid.nativeElement.parentNode.parentNode;\n        const diff =\n            childContainer.getBoundingClientRect().bottom - this.grid.rootGrid.nativeElement.getBoundingClientRect().bottom;\n        const endIsVisible = diff < 0;\n        const scrollable = this.getNextScrollableDown(this.grid);\n        const grid = scrollable.grid;\n        if (!endIsVisible) {\n            this.scrollGrid(grid, nextElem.offsetHeight,\n                () => super.navigateDown(rowElement, { row: currentRowIndex, column: visibleColumnIndex }));\n        } else {\n            super.navigateDown(rowElement, { row: currentRowIndex, column: visibleColumnIndex });\n        }\n    }\n\n    private getClosestElemByTag(sourceElem, targetTag) {\n        let result = sourceElem;\n        while (result !== null && result.nodeType === 1) {\n            if (result.tagName.toLowerCase() === targetTag.toLowerCase()) {\n                return result;\n            }\n            result = result.parentNode;\n        }\n        return null;\n    }\n}\n","import {\n    QueryList,\n    ContentChildren,\n    ElementRef,\n    NgZone,\n    ChangeDetectorRef,\n    IterableDiffers,\n    ViewContainerRef,\n    Inject,\n    ComponentFactoryResolver,\n    Optional,\n    Input,\n    ViewChild,\n    TemplateRef\n} from '@angular/core';\nimport { IgxGridBaseComponent, IgxGridTransaction, IGridDataBindable } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { IgxColumnComponent, IgxColumnGroupComponent } from '../column.component';\nimport { IgxSummaryOperand } from '../summaries/grid-summary';\nimport { IgxHierarchicalTransactionService, IgxOverlayService } from '../../services/index';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\n\nexport const IgxHierarchicalTransactionServiceFactory = {\n    provide: IgxGridTransaction,\n    useFactory: hierarchicalTransactionServiceFactory\n};\n\nexport function hierarchicalTransactionServiceFactory() {\n    return () => new IgxHierarchicalTransactionService();\n}\n\nexport interface IPathSegment {\n    rowID: any;\n    rowIslandKey: string;\n}\n\nexport abstract class IgxHierarchicalGridBaseComponent extends IgxGridBaseComponent {\n    public abstract rootGrid;\n\n    @Input()\n    public expandChildren: boolean;\n\n    /**\n     * @hidden\n     */\n    get maxLevelHeaderDepth() {\n        if (this._maxLevelHeaderDepth === null) {\n            this._maxLevelHeaderDepth = this.columnList.reduce((acc, col) => Math.max(acc, col.level), 0);\n        }\n        return this._maxLevelHeaderDepth;\n    }\n\n     /**\n     * @hidden\n     */\n    protected get outlet() {\n        return this.rootGrid ? this.rootGrid.outletDirective : this.outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    public hgridAPI: IgxHierarchicalGridAPIService;\n\n    /**\n     * @hidden\n     */\n    public parentIsland: IgxRowIslandComponent;\n\n    /**\n     * @hidden\n    */\n    public childRow: IgxChildGridRowComponent;\n\n    protected _expandChildren = false;\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @ViewChild('dragIndicatorIconBase', { read: TemplateRef, static: true })\n    public dragIndicatorIconBase: TemplateRef<any>;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        selection: IgxHierarchicalSelectionAPIService,\n        @Inject(IgxGridTransaction) protected transactionFactory: any,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(\n            selectionService,\n            crudService,\n            gridAPI,\n            selection,\n            typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions);\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n    /**\n     * The custom template, if any, that should be used when rendering the row drag indicator icon\n     *\n     * ```typescript\n     * // Set in typescript\n     * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;\n     * myComponent.dragIndicatorIconTemplate = myCustomTemplate;\n     * ```\n     * ```html\n     * <!-- Set in markup -->\n     *  <igx-grid #grid>\n     *      ...\n     *      <ng-template igxDragIndicatorIcon>\n     *          <igx-icon fontSet=\"material\">info</igx-icon>\n     *      </ng-template>\n     *  </igx-grid>\n     * ```\n     */\n    public dragIndicatorIconTemplate: TemplateRef<any> = null;\n\n    /**\n     * @hidden\n     */\n    public createColumnsList(cols: Array<any>) {\n        const columns = [];\n        const topLevelCols = this.onlyTopLevel(cols);\n        topLevelCols.forEach((col) => {\n            const ref = this._createColumn(col);\n            ref.changeDetectorRef.detectChanges();\n            columns.push(ref.instance);\n        });\n        const result = flatten(columns);\n        this.columnList.reset(result);\n        this.columnList.notifyOnChanges();\n    }\n\n    protected _createColumn(col) {\n        let ref;\n        if (col instanceof IgxColumnGroupComponent) {\n            ref = this._createColGroupComponent(col);\n        } else {\n            ref = this._createColComponent(col);\n        }\n        return ref;\n    }\n\n    protected _createColGroupComponent(col: IgxColumnGroupComponent) {\n        const factoryGroup = this.resolver.resolveComponentFactory(IgxColumnGroupComponent);\n        const ref = this.viewRef.createComponent(factoryGroup, null, this.viewRef.injector);\n        ref.changeDetectorRef.detectChanges();\n        factoryGroup.inputs.forEach((input) => {\n            const propName = input.propName;\n            (<any>ref.instance)[propName] = (<any>col)[propName];\n        });\n        if (col.children.length > 0) {\n            const newChildren = [];\n            col.children.forEach(child => {\n                const newCol = this._createColumn(child).instance;\n                newCol.parent = ref.instance;\n                newChildren.push(newCol);\n            });\n            (<IgxColumnGroupComponent>ref.instance).children.reset(newChildren);\n            (<IgxColumnGroupComponent>ref.instance).children.notifyOnChanges();\n        }\n        (<IgxColumnGroupComponent>ref.instance).grid = this;\n        return ref;\n    }\n\n    protected _createColComponent(col) {\n        const factoryColumn = this.resolver.resolveComponentFactory(IgxColumnComponent);\n        const ref = this.viewRef.createComponent(factoryColumn, null, this.viewRef.injector);\n        factoryColumn.inputs.forEach((input) => {\n            const propName = input.propName;\n            if (!((<any>col)[propName] instanceof IgxSummaryOperand)) {\n                (<any>ref.instance)[propName] = (<any>col)[propName];\n            } else {\n                (<any>ref.instance)[propName] = col[propName].constructor;\n            }\n        });\n        (<IgxColumnComponent>ref.instance).grid = this;\n        return ref;\n    }\n\n    protected getGridsForIsland(rowIslandID: string) {\n        return this.hgridAPI.getChildGridsForRowIsland(rowIslandID);\n    }\n\n    protected getChildGrid(path: Array<IPathSegment>) {\n        if (!path) {\n            return;\n        }\n        return this.hgridAPI.getChildGrid(path);\n    }\n}\n\nfunction flatten(arr: any[]) {\n    let result = [];\n\n    arr.forEach(el => {\n        result.push(el);\n        if (el.children) {\n            result = result.concat(flatten(el.children.toArray()));\n        }\n    });\n    return result;\n}\n","import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { Subject } from 'rxjs';\nimport { IPathSegment } from './hierarchical-grid-base.component';\nimport { IgxGridBaseComponent, GridBaseAPIService, IGridDataBindable } from '../grid';\nexport class IgxHierarchicalGridAPIService extends GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable> {\n    protected childRowIslands: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected childGrids:  Map<string, Map<any, IgxHierarchicalGridComponent>> =\n        new Map<string, Map<any, IgxHierarchicalGridComponent>>();\n\n    registerChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.set(rowIsland.key, rowIsland);\n        this.destroyMap.set(rowIsland.key, new Subject<boolean>());\n    }\n\n    unsetChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childGrids.delete(rowIsland.key);\n        this.childRowIslands.delete(rowIsland.key);\n        this.destroyMap.delete(rowIsland.key);\n    }\n\n    getChildRowIsland(key: string) {\n        return this.childRowIslands.get(key);\n    }\n\n    getChildGrid(path: Array<IPathSegment>) {\n        const currPath = path;\n        let grid;\n        const pathElem = currPath.shift();\n        const childrenForLayout = this.childGrids.get(pathElem.rowIslandKey);\n        if (childrenForLayout) {\n            const childGrid = childrenForLayout.get(pathElem.rowID);\n            if (currPath.length === 0) {\n                grid = childGrid;\n            } else {\n                grid = childGrid.hgridAPI.getChildGrid(currPath);\n            }\n        }\n        return grid;\n    }\n\n    getChildGrids(inDepth?: boolean) {\n        const allChildren = [];\n        this.childGrids.forEach((layoutMap) => {\n            layoutMap.forEach((grid) => {\n                allChildren.push(grid);\n                if (inDepth) {\n                    const children = grid.hgridAPI.getChildGrids(inDepth);\n                    children.forEach((item) => {\n                        allChildren.push(item);\n                    });\n                }\n            });\n        });\n\n        return allChildren;\n    }\n\n    getParentRowId(childGrid: IgxHierarchicalGridComponent) {\n        let rowID;\n        this.childGrids.forEach((layoutMap) => {\n            layoutMap.forEach((grid, key) => {\n                if (grid === childGrid) {\n                    rowID = key;\n                    return;\n                }\n            });\n        });\n        return rowID;\n    }\n\n    registerChildGrid(parentRowID: string|object, rowIslandKey: string, grid: IgxHierarchicalGridComponent) {\n        let childrenForLayout = this.childGrids.get(rowIslandKey);\n        if (!childrenForLayout) {\n            this.childGrids.set(rowIslandKey, new Map<any, IgxHierarchicalGridComponent>());\n            childrenForLayout = this.childGrids.get(rowIslandKey);\n        }\n        childrenForLayout.set(parentRowID, grid);\n    }\n\n    getChildGridsForRowIsland(rowIslandKey): IgxHierarchicalGridComponent[] {\n        const childrenForLayout = this.childGrids.get(rowIslandKey);\n        const children = [];\n        if (childrenForLayout) {\n            childrenForLayout.forEach((child) => {\n                children.push(child);\n            });\n        }\n        return children;\n    }\n\n    getChildGridByID(rowIslandKey, rowID) {\n        const childrenForLayout = this.childGrids.get(rowIslandKey);\n        return childrenForLayout.get(rowID);\n    }\n}\n","import { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { Subject } from 'rxjs';\n\nexport class IgxRowIslandAPIService {\n    public change: Subject<any> = new Subject<any>();\n    protected state: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected destroyMap: Map<string, Subject<boolean>> = new Map<string, Subject<boolean>>();\n\n    protected childRowIslands: Map<string, IgxRowIslandComponent> = new Map<string, IgxRowIslandComponent>();\n    protected childGrids:  Map<any, IgxHierarchicalGridComponent> = new Map<any, IgxHierarchicalGridComponent>();\n\n    public register(rowIsland: IgxRowIslandComponent) {\n        this.state.set(rowIsland.id, rowIsland);\n        this.destroyMap.set(rowIsland.id, new Subject<boolean>());\n    }\n\n    public unsubscribe(rowIsland: IgxRowIslandComponent) {\n        this.state.delete(rowIsland.id);\n    }\n\n    public get(id: string): IgxRowIslandComponent {\n        return this.state.get(id);\n    }\n\n    public unset(id: string) {\n        this.state.delete(id);\n        this.destroyMap.delete(id);\n    }\n\n    public reset(oldId: string, newId: string) {\n        const destroy = this.destroyMap.get(oldId);\n        const rowIsland = this.get(oldId);\n\n        this.unset(oldId);\n\n        if (rowIsland) {\n            this.state.set(newId, rowIsland);\n        }\n\n        if (destroy) {\n            this.destroyMap.set(newId, destroy);\n        }\n    }\n\n    registerChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.set(rowIsland.key, rowIsland);\n        this.destroyMap.set(rowIsland.key, new Subject<boolean>());\n    }\n\n    unsetChildRowIsland(rowIsland: IgxRowIslandComponent) {\n        this.childRowIslands.delete(rowIsland.key);\n        this.destroyMap.delete(rowIsland.key);\n    }\n\n    getChildRowIsland(rowIslandKey: string) {\n        return this.childRowIslands.get(rowIslandKey);\n    }\n\n    registerChildGrid(parentRowID: string|object, grid: IgxHierarchicalGridComponent) {\n        this.childGrids.set(parentRowID, grid);\n    }\n\n    getChildGrids(inDepth?: boolean) {\n        let allChildren = [];\n        this.childGrids.forEach((grid) => {\n            allChildren.push(grid);\n        });\n        if (inDepth) {\n            this.childRowIslands.forEach((layout) => {\n                allChildren = allChildren.concat(layout.rowIslandAPI.getChildGrids(inDepth));\n            });\n        }\n\n        return allChildren;\n    }\n\n    getChildGridByID(rowID) {\n        return this.childGrids.get(rowID);\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    Input,\n    QueryList,\n    OnInit,\n    Inject,\n    ElementRef,\n    ChangeDetectorRef,\n    ComponentFactoryResolver,\n    IterableDiffers,\n    ViewContainerRef,\n    NgZone,\n    AfterViewInit,\n    OnChanges,\n    Output,\n    EventEmitter,\n    Optional,\n    OnDestroy\n} from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxGridTransaction, IGridDataBindable, IgxGridBaseComponent } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken } from '../../core/displayDensity';\nimport { TransactionService, Transaction, State } from '../../services';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxHierarchicalGridBaseComponent } from './hierarchical-grid-base.component';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\nimport { IgxOverlayService } from '../../services/index';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxColumnComponent } from '../column.component';\nimport { IgxRowIslandAPIService } from './row-island-api.service';\nexport interface IGridCreatedEventArgs {\n    owner: IgxRowIslandComponent;\n    parentID: any;\n    grid: IgxHierarchicalGridComponent;\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'igx-row-island',\n    template: ``,\n    providers: [IgxRowIslandAPIService]\n})\nexport class IgxRowIslandComponent extends IgxHierarchicalGridBaseComponent\n            implements AfterContentInit, AfterViewInit, OnChanges, OnInit, OnDestroy {\n    /**\n     * Sets the key of the row island by which child data would be taken from the row data if such is provided.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\">\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Input()\n    public key: string;\n\n    /**\n     * Sets if all immediate children of the grids for this `IgxRowIslandComponent` should be expanded/collapsed.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" [expandChildren]=\"true\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Input()\n    set expandChildren(value: boolean) {\n        this._expandChildren = value;\n        this.rowIslandAPI.getChildGrids().forEach((grid) => {\n            if (document.body.contains(grid.nativeElement)) {\n                // Detect changes right away if the grid is visible\n                grid.expandChildren = value;\n                grid.markForCheck();\n            } else {\n                // Else defer the detection on changes when the grid gets into view for performance.\n                grid.updateOnRender = true;\n            }\n        });\n    }\n\n    /**\n     * Gets if all immediate children of the grids for this `IgxRowIslandComponent` have been set to be expanded/collapsed.\n     * ```typescript\n     * const expanded = this.rowIsland.expandChildren;\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    get expandChildren(): boolean {\n        return this._expandChildren;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: false })\n    public children = new QueryList<IgxRowIslandComponent>();\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxColumnComponent, { read: IgxColumnComponent, descendants: false })\n    public childColumns = new QueryList<IgxColumnComponent>();\n\n    /**\n     * @hidden\n     */\n    @Output()\n    public onLayoutChange = new EventEmitter<any>();\n\n    /**\n     * Event emmited when a grid is being created based on this row island.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\">\n     *      <igx-row-island [key]=\"'childData'\" (onGridCreated)=\"gridCreated($event)\" #rowIsland>\n     *          <!-- ... -->\n     *      </igx-row-island>\n     * </igx-hierarchical-grid>\n     * ```\n     * @memberof IgxRowIslandComponent\n     */\n    @Output()\n    public onGridCreated = new EventEmitter<IGridCreatedEventArgs>();\n\n    /**\n     * @hidden\n     */\n    get id() {\n        const pId = this.parentId ? this.parentId.substring(this.parentId.indexOf(this.layout_id) + this.layout_id.length) + '-' : '';\n        return this.layout_id + pId +  this.key;\n    }\n\n    /**\n     * @hidden\n     */\n    get parentId() {\n       return this.parentIsland ? this.parentIsland.id : null;\n    }\n\n    /**\n     * @hidden\n     */\n    get level() {\n        let ptr = this.parentIsland;\n        let lvl = 0;\n        while (ptr) {\n            lvl++;\n            ptr = ptr.parentIsland;\n        }\n        return lvl + 1;\n    }\n\n    /**\n     * Get transactions service for the children grid components.\n     * @experimental @hidden\n     */\n    get transactions(): TransactionService<Transaction, State> {\n        const grids = this.rowIslandAPI.getChildGrids();\n        return grids.length ? grids[0].transactions : this._transactions;\n    }\n\n    /**\n     * @hidden\n     */\n    public initialChanges = [];\n\n    /**\n     * @hidden\n     */\n    public rootGrid = null;\n    readonly data: any[];\n    readonly filteredData: any[];\n    private layout_id = `igx-row-island-`;\n    private isInit = false;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        selection: IgxHierarchicalSelectionAPIService,\n        @Inject(IgxGridTransaction) protected transactionFactory: any,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions,\n        public rowIslandAPI: IgxRowIslandAPIService) {\n        super(\n            selectionService,\n            crudService,\n            gridAPI,\n            selection,\n            typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions\n        );\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.rootGrid = this.hgridAPI.grid;\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        this.updateChildren();\n        this.children.notifyOnChanges();\n        this.children.changes.pipe(takeUntil(this.destroy$))\n        .subscribe((change) => {\n            this.updateChildren();\n            // update existing grids since their child ri have been changed.\n            this.getGridsForIsland(this.key).forEach(grid => {\n                (grid as any).onRowIslandChange(this.children);\n            });\n        });\n        const nestedColumns = this.children.map((layout) => layout.columnList.toArray());\n        const colsArray = [].concat.apply([], nestedColumns);\n        const topCols = this.columnList.filter((item) => {\n            return colsArray.indexOf(item) === -1;\n        });\n        this.childColumns.reset(topCols);\n        this.columnList.changes.pipe(takeUntil(this.destroy$)).subscribe(() => { this.updateColumnList(); });\n    }\n\n    protected updateChildren() {\n        this.children.reset(this.children.toArray().slice(1));\n        this.children.forEach(child => {\n            child.parentIsland = this;\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.rowIslandAPI.register(this);\n        if (this.parentIsland) {\n            this.parentIsland.rowIslandAPI.registerChildRowIsland(this);\n        } else {\n            this.rootGrid.hgridAPI.registerChildRowIsland(this);\n        }\n        this._init = false;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnChanges(changes) {\n        this.onLayoutChange.emit(changes);\n        if (!this.isInit) {\n            this.initialChanges.push(changes);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnDestroy() {\n        // Override the base destroy because we don't have rendered anything to use removeEventListener on\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this._destroyed = true;\n        this.rowIslandAPI.unset(this.id);\n        if (this.parentIsland) {\n            this.getGridsForIsland(this.key).forEach(grid => {\n                this.cleanGridState(grid);\n                grid.hgridAPI.unsetChildRowIsland(this);\n            });\n            this.parentIsland.rowIslandAPI.unsetChildRowIsland(this);\n        } else {\n            this.rootGrid.hgridAPI.unsetChildRowIsland(this);\n            this.cleanGridState(this.rootGrid);\n        }\n    }\n\n    private cleanGridState(grid) {\n        grid.childGridTemplates.forEach((tmpl) => {\n            tmpl.owner.cleanView(tmpl.context.templateID);\n        });\n        grid.childGridTemplates.clear();\n        grid.onRowIslandChange();\n    }\n\n    /**\n     * @hidden\n     */\n    reflow() {}\n\n    /**\n     * @hidden\n     */\n    calculateGridHeight() {}\n\n    protected updateColumnList() {\n        const nestedColumns = this.children.map((layout) => layout.columnList.toArray());\n        const colsArray = [].concat.apply([], nestedColumns);\n        const topCols = this.columnList.filter((item) => {\n            if (colsArray.indexOf(item) === -1) {\n                /* Reset the default width of the columns that come into this row island,\n                because the root catches them first during the detectChanges() and sets their defaultWidth. */\n                item.defaultWidth = undefined;\n                return true;\n            }\n            return false;\n        });\n        this.childColumns.reset(topCols);\n\n        if (this.parentIsland) {\n            this.parentIsland.columnList.notifyOnChanges();\n        } else {\n            this.rootGrid.columnList.notifyOnChanges();\n        }\n\n        this.rowIslandAPI.getChildGrids().forEach((grid: IgxHierarchicalGridComponent) => {\n            grid.createColumnsList(this.childColumns.toArray());\n            if (!document.body.contains(grid.nativeElement)) {\n                grid.updateOnRender = true;\n            }\n        });\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnInit,\n    ViewChild,\n    AfterViewInit,\n    SimpleChanges\n} from '@angular/core';\nimport { IgxSelectionAPIService } from '../../core/selection';\nimport { GridBaseAPIService } from '.././api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-child-grid-row',\n    templateUrl: './child-grid-row.component.html'\n})\nexport class IgxChildGridRowComponent implements AfterViewInit, OnInit {\n\n\n    /**\n * Returns whether the row is expanded.\n * ```typescript\n * const RowExpanded = this.grid1.rowList.first.expanded;\n * ```\n */\n    public expanded = false;\n\n    @Input()\n    layout: IgxRowIslandComponent;\n\n    /**\n     * @hidden\n     */\n    public get parentHasScroll() {\n        return !this.parentGrid.verticalScrollContainer.dc.instance.notVirtual;\n    }\n\n\n    /**\n     * @hidden\n     */\n    // public get layout() {\n    //     const layout = (this.gridAPI as IgxHierarchicalGridAPIService).getLayout(`igx-row-island-` + this.rowData.key);\n    //    return layout;\n    // }\n    /**\n    * @hidden\n    */\n    @Input()\n    public parentGridID: string;\n\n    /**\n     *  The data passed to the row component.\n     *\n     * ```typescript\n     * // get the row data for the first selected row\n     * let selectedRowData = this.grid.selectedRows[0].rowData;\n     * ```\n     */\n    @Input()\n    public rowData: any = [];\n\n    /**\n     * The index of the row.\n     *\n     * ```typescript\n     * // get the index of the second selected row\n     * let selectedRowIndex = this.grid.selectedRows[1].index;\n     * ```\n     */\n    @Input()\n    public index: number;\n\n    @ViewChild('hgrid', { static: true })\n    private hGrid: any/* TODO: IgxHierarchicalGridComponent*/;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'row';\n\n    /**\n     * Get a reference to the grid that contains the selected row.\n     *\n     * ```typescript\n     * handleRowSelection(event) {\n     *  // the grid on which the onRowSelectionChange event was triggered\n     *  const grid = event.row.grid;\n     * }\n     * ```\n     *\n     * ```html\n     *  <igx-grid\n     *    [data]=\"data\"\n     *    (onRowSelectionChange)=\"handleRowSelection($event)\">\n     *  </igx-grid>\n     * ```\n     */\n    // TODO: Refactor\n    get parentGrid(): any/* TODO: IgxHierarchicalGridComponent*/ {\n        return this.gridAPI.grid;\n    }\n\n    @HostBinding('attr.data-level')\n    get level() {\n        return this.layout.level;\n    }\n\n    /**\n     * The native DOM element representing the row. Could be null in certain environments.\n     *\n     * ```typescript\n     * // get the nativeElement of the second selected row\n     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;\n     * ```\n     */\n    get nativeElement() {\n        return this.element.nativeElement;\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<any/* TODO: IgxHierarchicalGridComponent*/>,\n        private selectionAPI: IgxSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this.layout.onLayoutChange.subscribe((ch) => {\n            this._handleLayoutChanges(ch);\n        });\n        const changes = this.layout.initialChanges;\n        changes.forEach(change => {\n            this._handleLayoutChanges(change);\n        });\n        this.hGrid.parent = this.parentGrid;\n        this.hGrid.parentIsland = this.layout;\n        this.hGrid.childRow =  this;\n        if (this.hGrid.isPercentHeight) {\n            this.hGrid._autoSize = true;\n        }\n        this.layout.onGridCreated.emit({\n            owner: this.layout,\n            parentID: this.rowData.rowID,\n            grid: this.hGrid\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        this.hGrid.childLayoutList = this.layout.children;\n        if (this.layout.childColumns.length > 0 && !this.hGrid.autoGenerate) {\n            this.hGrid.createColumnsList(this.layout.childColumns.toArray());\n        }\n        const layouts = this.hGrid.childLayoutList.toArray();\n        layouts.forEach((l) => this.hGrid.hgridAPI.registerChildRowIsland(l));\n        this.parentGrid.hgridAPI.registerChildGrid(this.rowData.rowID, this.layout.key, this.hGrid);\n        this.layout.rowIslandAPI.registerChildGrid(this.rowData.rowID, this.hGrid);\n\n        this.hGrid.cdr.detectChanges();\n    }\n\n\n    private _handleLayoutChanges(changes: SimpleChanges) {\n        for (const change in changes) {\n            if (changes.hasOwnProperty(change)) {\n                this.hGrid[change] = changes[change].currentValue;\n            }\n        }\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    Input,\n    forwardRef,\n    TemplateRef,\n    ViewChild,\n    ViewChildren,\n    QueryList,\n    ContentChildren,\n    ElementRef,\n    NgZone,\n    ChangeDetectorRef,\n    IterableDiffers,\n    ViewContainerRef,\n    Inject,\n    ComponentFactoryResolver,\n    AfterViewInit,\n    AfterContentInit,\n    Optional,\n    OnInit,\n    OnDestroy\n} from '@angular/core';\nimport { IgxGridBaseComponent, IgxGridTransaction } from '../grid-base.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxFilteringService } from '../filtering/grid-filtering.service';\nimport { IDisplayDensityOptions, DisplayDensityToken, DisplayDensity } from '../../core/displayDensity';\nimport { IGridDataBindable, IgxColumnComponent, } from '../grid/index';\nimport { DOCUMENT } from '@angular/common';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';\nimport { IgxGridSummaryService } from '../summaries/grid-summary.service';\nimport { IgxHierarchicalGridBaseComponent } from './hierarchical-grid-base.component';\nimport { takeUntil } from 'rxjs/operators';\nimport { IgxTemplateOutletDirective } from '../../directives/template-outlet/template_outlet.directive';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\nimport { IgxOverlayService } from '../../services/index';\nimport { IgxColumnResizingService } from '../grid-column-resizing.service';\nimport { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';\n\nlet NEXT_ID = 0;\n\nexport interface HierarchicalStateRecord {\n    rowID: any;\n}\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid',\n    templateUrl: 'hierarchical-grid.component.html',\n    providers: [\n        IgxGridSelectionService,\n        IgxGridCRUDService,\n        { provide: GridBaseAPIService, useClass: IgxHierarchicalGridAPIService },\n        { provide: IgxGridBaseComponent, useExisting: forwardRef(() => IgxHierarchicalGridComponent) },\n        IgxGridSummaryService,\n        IgxFilteringService,\n        IgxHierarchicalGridNavigationService,\n        IgxForOfSyncService\n    ]\n})\nexport class IgxHierarchicalGridComponent extends IgxHierarchicalGridBaseComponent\n    implements IGridDataBindable, AfterViewInit, AfterContentInit, OnInit, OnDestroy {\n\n    /**\n     * Sets the value of the `id` attribute. If not provided it will be automatically generated.\n     * ```html\n     * <igx-hierarchical-grid [id]=\"'igx-hgrid-1'\" [data]=\"Data\" [autoGenerate]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public get id(): string {\n        return this.h_id;\n    }\n\n    /**\n     * An @Input property that lets you fill the `IgxHierarchicalGridComponent` with an array of data.\n     * ```html\n     * <igx-hierarchical-grid [data]=\"Data\" [autoGenerate]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @Input()\n    public set data(value: any[]) {\n        this._data = value;\n        this.summaryService.clearSummaryCache();\n        if (this.shouldGenerate) {\n            this.setupColumns();\n            this.reflow();\n        }\n        this.cdr.markForCheck();\n        if (this.parent && (this.height === null || this.height.indexOf('%') !== -1)) {\n            // If the height will change based on how much data there is, recalculate sizes in igxForOf.\n            requestAnimationFrame(() => {\n                this.updateParentSizes();\n            });\n        }\n    }\n\n    /**\n     * Returns an array of data set to the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get data(): any[] {\n        return this._data;\n    }\n\n    /**\n    * Sets the state of the `IgxHierarchicalGridComponent` containing which rows are expanded.\n    * ```typescript\n    * this.gridState = [{ rowID: 1 }, { rowID: 4}];\n    * ```\n    * ```html\n    * <igx-hierarchical-grid [primaryKey]=\"'ID'\" [data]=\"Data\" [autoGenerate]=\"false\" [hierarchicalState]=\"hgridState\">\n    *      <igx-column field=\"ID\"  [dataType]='number'></igx-column>\n    *      <igx-column field=\"Product\"  [dataType]='string'></igx-column>\n    *      <igx-column field=\"Description\"  [dataType]='string'></igx-column>\n    * </igx-hierarchical-grid>\n    * ```\n    * @memberof IgxHierarchicalGridComponent\n    */\n    @Input()\n    public get hierarchicalState() {\n        return this._hierarchicalState;\n    }\n    public set hierarchicalState(val) {\n        this._hierarchicalState = val;\n        if (this.parent) {\n            requestAnimationFrame(() => {\n                this.updateParentSizes();\n            });\n        }\n    }\n\n    /**\n     * Sets an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * this.grid.filteredData = [{\n     *       ID: 1,\n     *       Name: \"A\"\n     * }];\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public set filteredData(value) {\n        this._filteredData = value;\n\n        if (this.rowSelectable) {\n            this.updateHeaderCheckboxStatusOnFilter(this._filteredData);\n        }\n    }\n\n    /**\n     * Returns an array of objects containing the filtered data in the `IgxHierarchicalGridComponent`.\n     * ```typescript\n     * let filteredData = this.grid.filteredData;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get filteredData() {\n        return this._filteredData;\n    }\n\n    /**\n     * Sets if all immediate children of the `IgxHierarchicalGridComponent` should be expanded/collapsed.\n     * Defult value is false.\n     * ```html\n     * <igx-hierarchical-grid [id]=\"'igx-grid-1'\" [data]=\"Data\" [autoGenerate]=\"true\" [expandChildren]=\"true\"></igx-hierarchical-grid>\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    @Input()\n    set expandChildren(value: boolean) {\n        this._expandChildren = value;\n        if (value && this.data) {\n            this.hierarchicalState = this.data.map((rec) => {\n                return { rowID: this.primaryKey ? rec[this.primaryKey] : rec };\n            });\n        } else if (this.data) {\n            this.hierarchicalState = [];\n        }\n    }\n\n    /**\n     * Gets if all immediate children of the `IgxHierarchicalGridComponent` previously have been set to be expanded/collapsed.\n     * If previously set and some rows have been manually expanded/collapsed it will still return the last set value.\n     * ```typescript\n     * const expanded = this.grid.expandChildren;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    get expandChildren(): boolean {\n        return this._expandChildren;\n    }\n\n    /**\n     * Gets the unique identifier of the parent row. It may be a `string` or `number` if `primaryKey` of the\n     * parent grid is set or an object reference of the parent record otherwise.\n     * ```typescript\n     * const foreignKey = this.grid.foreignKey;\n     * ```\n     * @memberof IgxHierarchicalGridComponent\n     */\n    public get foreignKey() {\n        if (!this.parent) {\n            return null;\n        }\n        return this.parent.hgridAPI.getParentRowId(this);\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: false })\n    public childLayoutList: QueryList<IgxRowIslandComponent>;\n\n    /**\n     * @hidden\n     */\n    @ContentChildren(IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: true })\n    public allLayoutList: QueryList<IgxRowIslandComponent>;\n\n    @ViewChild('hierarchical_record_template', { read: TemplateRef, static: true })\n    protected hierarchicalRecordTemplate: TemplateRef<any>;\n\n    @ViewChild('child_record_template', { read: TemplateRef, static: true })\n    protected childTemplate: TemplateRef<any>;\n\n    @ViewChild('headerHierarchyExpander', { read: ElementRef, static: true })\n    protected headerHierarchyExpander: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxTemplateOutletDirective, { read: IgxTemplateOutletDirective })\n    public templateOutlets: QueryList<any>;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxChildGridRowComponent, { read: IgxChildGridRowComponent })\n    public hierarchicalRows: QueryList<IgxChildGridRowComponent>;\n\n    /**\n     * @hidden\n     */\n    get hasExpandableChildren() {\n        return !!this.childLayoutKeys.length;\n    }\n\n    /**\n     * @hidden\n     */\n    public childLayoutKeys = [];\n\n    /**\n     * @hidden\n     */\n    public highlightedRowID = null;\n\n    /**\n     * @hidden\n     */\n    public updateOnRender = false;\n\n    /**\n     * @hidden\n     */\n    public parent = null;\n\n    private _hierarchicalState = [];\n    private _data;\n    private _filteredData = null;\n    private h_id = `igx-hierarchical-grid-${NEXT_ID++}`;\n    private childGridTemplates: Map<any, any> = new Map();\n    private scrollTop = 0;\n    private scrollLeft = 0;\n\n    constructor(\n        public selectionService: IgxGridSelectionService,\n        crudService: IgxGridCRUDService,\n        public colResizingService: IgxColumnResizingService,\n        gridAPI: GridBaseAPIService<IgxGridBaseComponent & IGridDataBindable>,\n        selection: IgxHierarchicalSelectionAPIService,\n        @Inject(IgxGridTransaction) protected transactionFactory: any,\n        elementRef: ElementRef,\n        zone: NgZone,\n        @Inject(DOCUMENT) public document,\n        cdr: ChangeDetectorRef,\n        resolver: ComponentFactoryResolver,\n        differs: IterableDiffers,\n        viewRef: ViewContainerRef,\n        navigation: IgxHierarchicalGridNavigationService,\n        filteringService: IgxFilteringService,\n        @Inject(IgxOverlayService) protected overlayService: IgxOverlayService,\n        public summaryService: IgxGridSummaryService,\n        @Optional() @Inject(DisplayDensityToken) protected _displayDensityOptions: IDisplayDensityOptions) {\n        super(\n            selectionService,\n            crudService,\n            gridAPI,\n            selection,\n            typeof transactionFactory === 'function' ? transactionFactory() : transactionFactory,\n            elementRef,\n            zone,\n            document,\n            cdr,\n            resolver,\n            differs,\n            viewRef,\n            navigation,\n            filteringService,\n            overlayService,\n            summaryService,\n            _displayDensityOptions);\n        this.hgridAPI = <IgxHierarchicalGridAPIService>gridAPI;\n    }\n\n    /**\n     * @hidden\n     */\n    ngOnInit() {\n        this._transactions = this.parentIsland ? this.parentIsland.transactions : this._transactions;\n        super.ngOnInit();\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        this.verticalScrollContainer.getVerticalScroll().addEventListener('scroll', this.hg_verticalScrollHandler.bind(this));\n        this.parentVirtDir.getHorizontalScroll().addEventListener('scroll', this.hg_horizontalScrollHandler.bind(this));\n\n        if (this.expandChildren && this.data && this.hierarchicalState.length !== this.data.length) {\n            this.hierarchicalState = this.data.map((rec) => {\n                return { rowID: this.primaryKey ? rec[this.primaryKey] : rec };\n            });\n            this.cdr.detectChanges();\n        }\n\n        this.verticalScrollContainer.onBeforeViewDestroyed.pipe(takeUntil(this.destroy$)).subscribe((view) => {\n            const rowData = view.context.$implicit;\n            if (this.isChildGridRecord(rowData)) {\n                const cachedData = this.childGridTemplates.get(rowData.rowID);\n                if (cachedData) {\n                    const tmlpOutlet = cachedData.owner;\n                    tmlpOutlet._viewContainerRef.detach(0);\n                }\n            }\n        });\n\n        if (this.parent) {\n            this._displayDensity = this.rootGrid._displayDensity;\n            this.rootGrid.onDensityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {\n                requestAnimationFrame(() => {\n                    this._displayDensity = this.rootGrid._displayDensity;\n                    if (document.body.contains(this.nativeElement)) {\n                        this.reflow();\n                    } else {\n                        this.updateOnRender = true;\n                    }\n                });\n            });\n            this.childLayoutKeys = this.parentIsland.children.map((item) => item.key);\n        }\n\n        this.toolbarCustomContentTemplates = this.parentIsland ?\n            this.parentIsland.toolbarCustomContentTemplates :\n            this.toolbarCustomContentTemplates;\n    }\n\n    public get outletDirective() {\n        return this.rootGrid._outletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    public get parentRowOutletDirective() {\n        return this === this.rootGrid ? null : this.rootGrid.rowEditingOutletDirective;\n    }\n\n    /**\n     * @hidden\n     */\n    ngAfterContentInit() {\n        this.updateColumnList(false);\n        this.childLayoutKeys = this.parent ?\n        this.parentIsland.children.map((item) => item.key) :\n        this.childLayoutKeys = this.childLayoutList.map((item) => item.key);\n        this.childLayoutList.notifyOnChanges();\n        this.childLayoutList.changes.pipe(takeUntil(this.destroy$))\n        .subscribe(() => this.onRowIslandChange());\n        super.ngAfterContentInit();\n    }\n\n    /**\n    * @hidden\n    */\n    public onRowIslandChange() {\n        if (this.parent) {\n            this.childLayoutKeys = this.parentIsland.children.filter(item => !(item as any)._destroyed).map((item) => item.key);\n        } else {\n            this.childLayoutKeys = this.childLayoutList.filter(item => !(item as any)._destroyed).map((item) => item.key);\n        }\n        if (!(this.cdr as any).destroyed) {\n            this.cdr.detectChanges();\n        }\n    }\n\n    protected onColumnsChanged(change: QueryList<IgxColumnComponent>) {\n        this.updateColumnList();\n        const cols = change.filter(c => c.grid === this);\n        if (cols.length > 0) {\n            this.columnList.reset(cols);\n            super.onColumnsChanged(this.columnList);\n        }\n    }\n\n    private updateColumnList(recalcColSizes = true) {\n        const childLayouts = this.parent ? this.childLayoutList : this.allLayoutList;\n        const nestedColumns = childLayouts.map((layout) => {\n            return layout.columnList.toArray();\n        });\n        const colsArray = [].concat.apply([], nestedColumns);\n        const colLength = this.columnList.length;\n        if (colsArray.length > 0) {\n            const topCols = this.columnList.filter((item) => {\n                return colsArray.indexOf(item) === -1;\n            });\n            this.columnList.reset(topCols);\n            if (recalcColSizes && this.columnList.length !== colLength) {\n                this.calculateGridSizes();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        if (!this.parent) {\n            this.hgridAPI.getChildGrids(true).forEach((grid) => {\n                if (!grid.childRow.cdr.destroyed) {\n                    grid.childRow.cdr.destroy();\n                }\n            });\n        }\n        if (this.parent && this.selectionService.activeElement) {\n            // in case selection is in destroyed child grid, selection should be cleared.\n            this._clearSeletionHighlights();\n        }\n        super.ngOnDestroy();\n    }\n\n    private _clearSeletionHighlights() {\n        [this.rootGrid, ...this.rootGrid.getChildGrids(true)].forEach(grid => {\n            grid.selectionService.clear();\n            grid.selectionService.activeElement = null;\n            grid.nativeElement.classList.remove('igx-grid__tr--highlighted');\n            grid.highlightedRowID = null;\n            grid.cdr.markForCheck();\n        });\n    }\n\n    /**\n    * @hidden\n    */\n    public get template(): TemplateRef<any> {\n        if (this.filteredData && this.filteredData.length === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyFilteredGridTemplate;\n        }\n\n        if (this.isLoading && (!this.data || this.dataLength === 0)) {\n            return this.loadingGridTemplate ? this.loadingGridTemplate : this.loadingGridDefaultTemplate;\n        }\n\n        if (this.dataLength === 0) {\n            return this.emptyGridTemplate ? this.emptyGridTemplate : this.emptyGridDefaultTemplate;\n        }\n    }\n\n    /**\n     * @hidden\n     * Gets the combined width of the columns that are specific to the enabled grid features. They are fixed.\n     * TODO: Remove for Angular 8. Calling parent class getter using super is not supported for now.\n     */\n    public getFeatureColumnsWidth() {\n        let width = super.getFeatureColumnsWidth();\n\n        if (this.hasExpandableChildren) {\n            width += this.headerHierarchyExpander.nativeElement.offsetWidth || this.getDefaultExpanderWidth();\n        }\n\n        return width;\n    }\n\n    private getDefaultExpanderWidth(): number {\n        switch (this.displayDensity) {\n            case DisplayDensity.cosy:\n                return 57;\n            case DisplayDensity.compact:\n                return 49;\n            default:\n                return 72;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public isRowHighlighted(rowData) {\n        return this.highlightedRowID === rowData.rowID;\n    }\n\n    /**\n     * @hidden\n     */\n    public isHierarchicalRecord(record: any): boolean {\n        return this.childLayoutList.length !== 0 && record[this.childLayoutList.first.key];\n    }\n\n    /**\n     * @hidden\n     */\n    public isChildGridRecord(record: any): boolean {\n        // Can be null when there is defined layout but no child data was found\n        return record.childGridsData !== undefined;\n    }\n\n    /**\n     * @hidden\n     */\n    public trackChanges(index, rec) {\n        if (rec.childGridsData !== undefined) {\n            // if is child rec\n            return rec.rowID;\n        }\n        return rec;\n    }\n\n    /**\n     * @hidden\n     */\n    public getContext(rowData): any {\n        if (this.isChildGridRecord(rowData)) {\n            const cachedData = this.childGridTemplates.get(rowData.rowID);\n            if (cachedData) {\n                const view = cachedData.view;\n                const tmlpOutlet = cachedData.owner;\n                return {\n                    $implicit: rowData,\n                    moveView: view,\n                    owner: tmlpOutlet,\n                    index: this.verticalScrollContainer.igxForOf.indexOf(rowData)\n                };\n            } else {\n                const rowID = this.primaryKey ? rowData.rowID : this.data.indexOf(rowData.rowID);\n                // child rows contain unique grids, hence should have unique templates\n                return {\n                    $implicit: rowData,\n                    templateID: 'childRow-' + rowID,\n                    index: this.verticalScrollContainer.igxForOf.indexOf(rowData)\n                };\n            }\n        } else {\n            return {\n                $implicit: rowData,\n                templateID: 'dataRow',\n                index: this.verticalScrollContainer.igxForOf.indexOf(rowData)\n            };\n        }\n    }\n\n    /**\n     * @hidden\n    */\n    public get rootGrid() {\n        let currGrid = this;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n        }\n        return currGrid;\n    }\n\n    /**\n     * @hidden\n    */\n    protected initColumns(collection: QueryList<IgxColumnComponent>, cb: Function = null) {\n        if (this.hasColumnLayouts) {\n            // invalid configuration - hierarchical grid should not allow column layouts\n            // remove column layouts\n            const nonColumnLayoutColumns = this.columnList.filter((col) => !col.columnLayout && !col.columnLayoutChild);\n            this.columnList.reset(nonColumnLayoutColumns);\n        }\n        super.initColumns(collection, cb);\n    }\n\n    /**\n     * @hidden\n     * Gets the visible content height that includes header + tbody + footer.\n     * For hierarchical child grid it may be scrolled and not fully visible.\n     */\n    public getVisibleContentHeight() {\n        let height = super.getVisibleContentHeight();\n        if (this.parent) {\n            const rootHeight = this.rootGrid.getVisibleContentHeight();\n            const topDiff = this.nativeElement.getBoundingClientRect().top - this.rootGrid.nativeElement.getBoundingClientRect().top;\n            height = rootHeight - topDiff > height ? height : rootHeight - topDiff;\n        }\n        return height;\n    }\n\n    /**\n     * @hidden\n    */\n    public collapseAllRows() {\n        this.hierarchicalState = [];\n    }\n\n    /**\n     * @hidden\n     */\n    public isExpanded(record: any): boolean {\n        let inState;\n        if (record.childGridsData !== undefined) {\n            inState = !!this.hierarchicalState.find(v => v.rowID === record.rowID);\n        } else {\n            inState = !!this.hierarchicalState.find(v => {\n                return this.primaryKey ? v.rowID === record[this.primaryKey] : v.rowID === record;\n            });\n        }\n        return inState && this.childLayoutList.length !== 0;\n    }\n\n    /**\n     * @hidden\n     */\n    public viewCreatedHandler(args) {\n        if (this.isChildGridRecord(args.context.$implicit)) {\n            const key = args.context.$implicit.rowID;\n            this.childGridTemplates.set(key, args);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public viewMovedHandler(args) {\n        if (this.isChildGridRecord(args.context.$implicit)) {\n            // view was moved, update owner in cache\n            const key = args.context.$implicit.rowID;\n            const cachedData = this.childGridTemplates.get(key);\n            cachedData.owner = args.owner;\n\n            this.childLayoutList.forEach((layout) => {\n                const relatedGrid = this.hgridAPI.getChildGridByID(layout.key, args.context.$implicit.rowID);\n                if (relatedGrid && relatedGrid.updateOnRender) {\n                    // Detect changes if `expandChildren` has changed when the grid wasn't visible. This is for performance reasons.\n                    relatedGrid.reflow();\n                    relatedGrid.updateOnRender = false;\n                }\n            });\n\n            const childGrids = this.getChildGrids(true);\n            childGrids.forEach((grid) => {\n                if (grid.isPercentWidth) {\n                    grid.reflow();\n                }\n                grid.updateScrollPosition();\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public updateScrollPosition() {\n        const vScr = this.verticalScrollContainer.getVerticalScroll();\n        const hScr = this.parentVirtDir.getHorizontalScroll();\n        if (vScr) {\n            vScr.scrollTop = this.scrollTop;\n        }\n        if (hScr) {\n            hScr.scrollLeft = this.scrollLeft;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public getPossibleColumnWidth() {\n        let computedWidth = this.calcWidth || parseInt(\n            this.document.defaultView.getComputedStyle(this.nativeElement).getPropertyValue('width'), 10);\n        computedWidth -= this.headerHierarchyExpander.nativeElement.clientWidth;\n        return super.getPossibleColumnWidth(computedWidth);\n    }\n\n    protected getChildGrids(inDeph?: boolean) {\n        return this.hgridAPI.getChildGrids(inDeph);\n    }\n\n    protected generateDataFields(data: any[]): string[] {\n        return super.generateDataFields(data).filter((field) => {\n            const layoutsList = this.parentIsland ? this.parentIsland.children : this.childLayoutList;\n            const keys = layoutsList.map((item) => item.key);\n            return keys.indexOf(field) === -1;\n        });\n    }\n\n    private hg_verticalScrollHandler(event) {\n        this.scrollTop = event.target.scrollTop;\n    }\n\n    public onContainerScroll() {\n        this.hideOverlays();\n    }\n\n    private hg_horizontalScrollHandler(event) {\n        this.scrollLeft = event.target.scrollLeft;\n    }\n\n    private updateParentSizes() {\n        let currGrid = this.parent;\n        while (currGrid) {\n            const hadScrollbar = currGrid.hasVerticalSroll();\n            const virt = currGrid.verticalScrollContainer;\n            virt.recalcUpdateSizes();\n            const offset = parseInt(virt.dc.instance._viewContainer.element.nativeElement.style.top, 10);\n            const scr = virt.getVerticalScroll();\n            scr.scrollTop = virt.getScrollForIndex(virt.state.startIndex) - offset;\n\n            if (hadScrollbar !== currGrid.hasVerticalSroll()) {\n                // If after recalculations the grid should show vertical scrollbar it should also reflow.\n                currGrid.reflow();\n            }\n\n            currGrid = currGrid.parent;\n        }\n    }\n}\n","import { IgxGridCellComponent } from '../cell.component';\nimport { GridBaseAPIService } from '../api.service';\nimport { ChangeDetectorRef, ElementRef, ChangeDetectionStrategy, Component,\n     OnInit, HostListener, NgZone } from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxGridSelectionService, IgxGridCRUDService } from '../../core/grid-selection';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid-cell',\n    templateUrl: './../cell.component.html'\n})\nexport class IgxHierarchicalGridCellComponent extends IgxGridCellComponent implements OnInit {\n\n    protected hSelection;\n    protected _rootGrid;\n\n    constructor(\n        protected selectionService: IgxGridSelectionService,\n        protected crudService: IgxGridCRUDService,\n        public gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>,\n        public selection: IgxHierarchicalSelectionAPIService,\n        public cdr: ChangeDetectorRef,\n        private helement: ElementRef,\n        protected zone: NgZone,\n        ) {\n            super(selectionService, crudService, gridAPI, selection, cdr, helement, zone);\n            this.hSelection = <IgxHierarchicalSelectionAPIService>selection;\n         }\n\n    ngOnInit() {\n        super.ngOnInit();\n        this._rootGrid = this._getRootGrid();\n    }\n\n    private _getRootGrid() {\n        let currGrid = this.grid;\n        while (currGrid.parent) {\n            currGrid = currGrid.parent;\n        }\n        return currGrid;\n    }\n\n    // TODO: Extend the new selection service to avoid complete traversal\n    _clearAllHighlights() {\n        [this._rootGrid, ...this._rootGrid.getChildGrids(true)].forEach(grid => {\n            grid.selectionService.clear();\n            grid.selectionService.activeElement = null;\n            grid.nativeElement.classList.remove('igx-grid__tr--highlighted');\n            grid.highlightedRowID = null;\n            grid.cdr.markForCheck();\n        });\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('focus', ['$event'])\n    onFocus(event) {\n        this._clearAllHighlights();\n        const currentElement = this.grid.nativeElement;\n        let parentGrid = this.grid;\n        let childGrid;\n        // add highligh to the current grid\n        if (this._rootGrid.id !== currentElement.id) {\n            currentElement.classList.add('igx-grid__tr--highlighted');\n        }\n\n        // add highligh to the current grid\n        while (this._rootGrid.id !== parentGrid.id) {\n            childGrid = parentGrid;\n            parentGrid = parentGrid.parent;\n\n            const parentRowID = parentGrid.hgridAPI.getParentRowId(childGrid);\n            parentGrid.highlightedRowID = parentRowID;\n        }\n        super.onFocus(event);\n    }\n\n    // TODO: Refactor\n    /**\n     * @hidden\n     * @internal\n     */\n    @HostListener('keydown', ['$event'])\n    dispatchEvent(event: KeyboardEvent) {\n        const key = event.key.toLowerCase();\n        if (event.altKey && !this.row.added) {\n            const grid = this.gridAPI.grid;\n            const state = this.gridAPI.grid.hierarchicalState;\n            const collapse = this.row.expanded && (key === 'left' || key === 'arrowleft' || key === 'up' || key === 'arrowup');\n            const expand = !this.row.expanded && (key === 'right' || key === 'arrowright' || key === 'down' || key === 'arrowdown');\n            if (collapse) {\n                grid.hierarchicalState = state.filter(v => {\n                    return v.rowID !== this.row.rowID;\n                });\n            } else if (expand) {\n                state.push({ rowID: this.row.rowID });\n                grid.hierarchicalState = [...state];\n            }\n            if (expand || collapse) {\n                const rowID = this.cellID.rowID;\n                grid.cdr.detectChanges();\n                this.persistFocusedCell(rowID);\n            }\n            return;\n        }\n        super.dispatchEvent(event);\n    }\n\n    protected persistFocusedCell(rowID) {\n        requestAnimationFrame(() => {\n            // TODO: Test it out\n            const cell = this.gridAPI.get_cell_by_key(rowID, this.column.field);\n            if (cell) {\n                cell.nativeElement.focus();\n            }\n        });\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    forwardRef,\n    ElementRef,\n    ChangeDetectorRef,\n    ViewChildren,\n    QueryList,\n    ViewChild\n} from '@angular/core';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxRowComponent } from '../row.component';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { GridBaseAPIService } from '.././api.service';\nimport { IgxHierarchicalGridCellComponent } from './hierarchical-cell.component';\nimport { IgxGridCRUDService, IgxGridSelectionService } from '../../core/grid-selection';\n\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    selector: 'igx-hierarchical-grid-row',\n    templateUrl: './hierarchical-row.component.html',\n    providers: [{ provide: IgxRowComponent, useExisting: forwardRef(() => IgxHierarchicalRowComponent) }]\n})\nexport class IgxHierarchicalRowComponent extends IgxRowComponent<IgxHierarchicalGridComponent> {\n    /**\n     * The rendered cells in the row component.\n     *\n     * ```typescript\n     * // get the cells of the third selected row\n     * let selectedRowCells = this.grid.selectedRows[2].cells;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxHierarchicalGridCellComponent), { read: IgxHierarchicalGridCellComponent })\n    public cells: QueryList<IgxHierarchicalGridCellComponent>;\n\n    @ViewChild('expander', { read: ElementRef, static: false })\n    public expander: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n        /**\n     * Returns whether the row is expanded.\n     * ```typescript\n     * const RowExpanded = this.grid1.rowList.first.expanded;\n     * ```\n     */\n    @HostBinding('class.igx-grid__tr--expanded')\n    public get expanded() {\n        return this.grid.isExpanded(this.rowData);\n    }\n\n    public get hasChildren() {\n        return  !!this.grid.childLayoutKeys.length;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-grid__tr--highlighted')\n    public get highlighted() {\n        return this.grid && this.grid.highlightedRowID === this.rowID;\n    }\n\n    /**\n     * Toggles the hierarchical row.\n     * ```typescript\n     * this.grid1.rowList.first.toggle()\n     * ```\n     */\n    public toggle() {\n        if (this.added) {\n            return;\n        }\n        const grid = this.gridAPI.grid;\n        const state = this.gridAPI.grid.hierarchicalState;\n        if (!this.expanded) {\n            state.push({ rowID: this.rowID });\n            grid.hierarchicalState = [...state];\n        } else {\n            grid.hierarchicalState = state.filter(v => {\n                return v.rowID !== this.rowID;\n            });\n        }\n        grid.cdr.detectChanges();\n        requestAnimationFrame(() => {\n            grid.reflow();\n        });\n    }\n\n    constructor(public gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>,\n        public crudService: IgxGridCRUDService,\n        public selectionService: IgxGridSelectionService,\n        private hselection: IgxHierarchicalSelectionAPIService,\n        public element: ElementRef,\n        public cdr: ChangeDetectorRef) {\n            super(gridAPI, crudService, selectionService, hselection, element, cdr);\n        }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { cloneArray } from '../../core/utils';\nimport { GridBaseAPIService } from '../api.service';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { DataUtil } from '../../data-operations/data-util';\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridHierarchical',\n    pure: true\n})\nexport class IgxGridHierarchicalPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>) { }\n\n    public transform(\n        collection: any,\n        state = [],\n        id: string,\n        primaryKey: any,\n        childKeys: string[],\n        pipeTrigger: number\n        ): any[] {\n        if (childKeys.length === 0) {\n            return collection;\n        }\n        const grid: IgxHierarchicalGridComponent = this.gridAPI.grid;\n        const result = this.addHierarchy(grid, cloneArray(collection), state, primaryKey, childKeys);\n\n        return result;\n    }\n\n    public addHierarchy<T>(grid, data: T[], state, primaryKey, childKeys: string[]): T[] {\n        const result = [];\n\n        data.forEach((v) => {\n            result.push(v);\n            const childGridsData = {};\n            childKeys.forEach((childKey) => {\n                const childData = v[childKey] ? v[childKey] : null;\n                childGridsData[childKey] = childData;\n            });\n            if (grid.isExpanded(v)) {\n                result.push({ rowID: primaryKey ? v[primaryKey] : v, childGridsData: childGridsData});\n            }\n        });\n        return result;\n    }\n}\n\n/**\n *@hidden\n */\n@Pipe({\n    name: 'gridHierarchicalPaging',\n    pure: true\n})\nexport class IgxGridHierarchicalPagingPipe implements PipeTransform {\n\n    constructor(private gridAPI: GridBaseAPIService<IgxHierarchicalGridComponent>) { }\n\n    public transform(collection: any[], page = 0, perPage = 15, id: string, pipeTrigger: number): any[] {\n\n        if (!this.gridAPI.grid.paging) {\n            return collection;\n        }\n\n        const state = {\n            index: page,\n            recordsPerPage: perPage\n        };\n\n        const result: any[] = DataUtil.page(cloneArray(collection), state);\n        this.gridAPI.grid.pagingState = state;\n        return result;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IgxChipsModule } from '../../chips/chips.module';\nimport { IgxGridCommonModule } from '../grid-common.module';\nimport { IgxGridModule } from '../grid/grid.module';\nimport { IgxHierarchicalGridComponent } from './hierarchical-grid.component';\nimport { IgxHierarchicalRowComponent } from './hierarchical-row.component';\nimport { IgxGridHierarchicalPipe, IgxGridHierarchicalPagingPipe } from './hierarchical-grid.pipes';\nimport { IgxRowIslandComponent } from './row-island.component';\nimport { IgxChildGridRowComponent } from './child-grid-row.component';\nimport { IgxHierarchicalGridCellComponent } from './hierarchical-cell.component';\nimport { IgxHierarchicalSelectionAPIService } from './selection';\nimport { IgxRowIslandAPIService } from './row-island-api.service';\nimport { IgxSelectModule } from '../../select/index';\n\n/**\n * @hidden\n */\n@NgModule({\n  declarations: [\n    IgxHierarchicalGridComponent,\n    IgxHierarchicalRowComponent,\n    IgxRowIslandComponent,\n    IgxChildGridRowComponent,\n    IgxHierarchicalGridCellComponent,\n    IgxGridHierarchicalPipe,\n    IgxGridHierarchicalPagingPipe\n  ],\n  exports: [\n    IgxGridModule,\n    IgxHierarchicalGridComponent,\n    IgxHierarchicalRowComponent,\n    IgxHierarchicalGridCellComponent,\n    IgxRowIslandComponent,\n    IgxChildGridRowComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IgxChipsModule,\n    IgxGridModule,\n    IgxSelectModule\n  ],\n  providers: [\n    IgxRowIslandAPIService,\n    IgxHierarchicalSelectionAPIService\n  ]\n})\nexport class IgxHierarchicalGridModule {\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Directive,\n    ContentChild\n} from '@angular/core';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxIconModule } from '../icon/index';\n\n/**\n * IgxActionIcon is a container for the action nav icon of the IgxNavbar.\n */\n@Directive({\n    // tslint:disable-next-line:directive-selector\n    selector: 'igx-action-icon'\n})\nexport class IgxActionIconDirective { }\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Navbar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navbar.html)\n *\n * The Ignite UI Navbar is most commonly used to provide an app header with a hamburger menu and navigation\n * state such as a \"Go Back\" button. It also supports other actions represented by icons.\n *\n * Example:\n * ```html\n * <igx-navbar title=\"Sample App\" actionButtonIcon=\"menu\">\n *   <igx-icon>search</igx-icon>\n *   <igx-icon>favorite</igx-icon>\n *   <igx-icon>more_vert</igx-icon>\n * </igx-navbar>\n * ```\n */\n\n@Component({\n    selector: 'igx-navbar',\n    templateUrl: 'navbar.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `\n    ]\n})\n\nexport class IgxNavbarComponent {\n    private static NEXT_ID = 1;\n    private isVisible = true;\n\n    /**\n     *An @Input property that sets the value of the `id` attribute. If not provided it will be automatically generated.\n     *```html\n     *<igx-navbar [id]=\"'igx-navbar-12'\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-navbar-${NEXT_ID++}`;\n    /**\n     *Returns whether the `IgxNavbarComponent` action button is visible, true/false.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public navBar: IgxNavbarComponent;\n     *ngAfterViewInit(){\n     *    let actionButtonVisibile = this.navBar.isActionButtonVisible;\n     *}\n     *```\n     */\n    @Input()\n    public get isActionButtonVisible(): boolean {\n        if (this.actionIconTemplate || !this.actionButtonIcon) {\n            return false;\n        }\n        return this.isVisible;\n    }\n\n    /**\n     *Sets whether the action button of the `IgxNavbarComponent` is visible.\n     *```html\n     *<igx-navbar [title]=\"currentView\" [isActionButtonVisible]=\"'false'\"></igx-navbar>\n     *```\n     */\n    public set isActionButtonVisible(value: boolean) {\n        this.isVisible = value;\n    }\n    /**\n     *An @Input property that sets the icon of the `IgxNavbarComponent`.\n     *```html\n     *<igx-navbar [title]=\"currentView\" actionButtonIcon=\"arrow_back\"></igx-navbar>\n     *```\n     */\n    @Input() public actionButtonIcon: string;\n\n    /**\n     *An @Input property that sets the title of the `IgxNavbarComponent`.\n     *```html\n     *<igx-navbar title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Input() public title: string;\n\n    /**\n     *The event that will be thrown when the action is executed,\n     *provides reference to the `IgxNavbar` component as argument\n     *```typescript\n     *public actionExc(event){\n     *    alert(\"Action Execute!\");\n     *}\n     * //..\n     *```\n     *```html\n     *<igx-navbar (onAction)=\"actionExc($event)\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Output() public onAction = new EventEmitter<IgxNavbarComponent>();\n\n    /**\n     *An @Input property that sets the titleId of the `IgxNavbarComponent`. If not set it will be automatically generated.\n     *```html\n     *<igx-navbar [titleId]=\"'igx-navbar-7'\" title=\"Sample App\" actionButtonIcon=\"menu\">\n     *```\n     */\n    @Input()\n    public titleId = `igx-navbar-${IgxNavbarComponent.NEXT_ID++}`;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxActionIconDirective, { read: IgxActionIconDirective, static: true })\n    protected actionIconTemplate: IgxActionIconDirective;\n\n    /**\n     *@hidden\n     */\n    public _triggerAction() {\n        this.onAction.emit(this);\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxNavbarComponent, IgxActionIconDirective],\n    exports: [IgxNavbarComponent, IgxActionIconDirective],\n    imports: [IgxButtonModule, IgxIconModule, CommonModule]\n})\nexport class IgxNavbarModule {\n}\n","import { Directive, HostBinding, Input, TemplateRef } from '@angular/core';\n\n@Directive({\n    selector: '[igxDrawerItem]',\n    exportAs: 'igxDrawerItem'\n})\nexport class IgxNavDrawerItemDirective {\n\n    /**\n     * @hidden\n     */\n    @Input('active') public active = false;\n\n    /**\n     * @hidden\n     */\n    @Input('isHeader') public isHeader = false;\n\n    /**\n     * @hidden\n     */\n    public readonly activeClass = 'igx-nav-drawer__item--active';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item')\n    get defaultCSS(): boolean {\n        return !this.active && !this.isHeader;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item--active')\n    get currentCSS(): boolean {\n        return this.active && !this.isHeader;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-nav-drawer__item--header')\n    get headerCSS(): boolean {\n        return this.isHeader;\n    }\n}\n\n@Directive({\n    selector: '[igxDrawer]'\n})\nexport class IgxNavDrawerTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n     }\n}\n\n@Directive({\n    selector: '[igxDrawerMini]'\n})\nexport class IgxNavDrawerMiniTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n     }\n}\n","import {\n    AfterContentInit,\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    Renderer,\n    SimpleChange,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { fromEvent, interval, Subscription } from 'rxjs';\nimport { debounce } from 'rxjs/operators';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\nimport { HammerGesturesManager } from '../core/touch';\nimport { IgxNavDrawerMiniTemplateDirective, IgxNavDrawerTemplateDirective } from './navigation-drawer.directives';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Navigation Drawer** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/navdrawer.html)\n *\n * The Ignite UI Navigation Drawer is a collapsible side navigation container commonly used in combination with the Navbar.\n *\n * Example:\n * ```html\n * <igx-nav-drawer id=\"navigation\" [isOpen]=\"true\">\n *   <ng-template igxDrawer>\n *     <nav>\n *       <span igxDrawerItem [isHeader]=\"true\">Email</span>\n *       <span igxDrawerItem igxRipple>Inbox</span>\n *       <span igxDrawerItem igxRipple>Deleted</span>\n *       <span igxDrawerItem igxRipple>Sent</span>\n *     </nav>\n *   </ng-template>\n * </igx-nav-drawer>\n * ```\n */\n@Component({\n    providers: [HammerGesturesManager],\n    selector: 'igx-nav-drawer',\n    templateUrl: 'navigation-drawer.component.html',\n    styles: [`\n        :host {\n            display: block;\n            height: 100%;\n        }\n    `]\n})\nexport class IgxNavigationDrawerComponent implements\n    IToggleView,\n    OnInit,\n    AfterContentInit,\n    OnDestroy,\n    OnChanges {\n\n    @HostBinding('class') public cssClass = 'igx-nav-drawer';\n\n    /**\n     * ID of the component\n     *\n     * ```typescript\n     * // get\n     * let myNavDrawerId = this.navdrawer.id;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     *  <igx-nav-drawer id='navdrawer'></igx-nav-drawer>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-nav-drawer-${NEXT_ID++}`;\n\n    /**\n     * Position of the Navigation Drawer. Can be \"left\"(default) or \"right\".\n     *\n     * ```typescript\n     * // get\n     * let myNavDrawerPosition = this.navdrawer.position;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [position]=\"'left'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public position = 'left';\n\n    /**\n     * Enables the use of touch gestures to manipulate the drawer:\n     * - swipe/pan from edge to open, swipe-toggle and pan-drag.\n     *\n     * ```typescript\n     * // get\n     * let gesturesEnabled = this.navdrawer.enableGestures;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [enableGestures]='true'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public enableGestures = true;\n\n    /**\n     * State of the drawer.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerIsOpen = this.navdrawer.isOpen;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [isOpen]='false'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public isOpen = false;\n\n    /**\n     * When pinned the drawer is relatively positioned instead of sitting above content.\n     * May require additional layout styling.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerIsPinned = this.navdrawer.pin;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [pin]='false'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public pin = false;\n\n    /**\n     * Minimum device width required for automatic pin to be toggled.\n     * Default is 1024, can be set to a falsy value to disable this behavior.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerPinTreshold = this.navdrawer.pinThreshold;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [pinTreshold]='1024'></igx-nav-drawer>\n     * ```\n     */\n    @Input() public pinThreshold = 1024;\n\n    /**\n     * Returns nativeElement of the component.\n     *\n     * @hidden\n     */\n    get element() {\n        return this.elementRef.nativeElement;\n    }\n\n    /**\n     * Width of the drawer in its open state. Defaults to \"280px\".\n     *\n     * ```typescript\n     * // get\n     * let navDrawerWidth = this.navdrawer.width;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [width]=\"'228px'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public width = '280px';\n\n    /**\n     * Width of the drawer in its mini state. Defaults to 60px.\n     *\n     * ```typescript\n     * // get\n     * let navDrawerMiniWidth = this.navdrawer.miniWidth;\n     * ```\n     *\n     * ```html\n     * <!--set-->\n     * <igx-nav-drawer [miniWidth]=\"'34px'\"></igx-nav-drawer>\n     * ```\n     */\n    @Input() public miniWidth = '60px';\n\n    /**\n     * Pinned state change output for two-way binding.\n     *\n     * ```html\n     * <igx-nav-drawer [(pin)]='isPinned'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public pinChange = new EventEmitter<boolean>(true);\n    /**\n     * Event fired as the Navigation Drawer is about to open.\n     *\n     * ```html\n     *  <igx-nav-drawer (opening)='onOpening()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public opening = new EventEmitter();\n    /**\n     * Event fired when the Navigation Drawer has opened.\n     *\n     * ```html\n     * <igx-nav-drawer (opened)='onOpened()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public opened = new EventEmitter();\n    /**\n     * Event fired as the Navigation Drawer is about to close.\n     *\n     * ```html\n     * <igx-nav-drawer (closing)='onClosing()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public closing = new EventEmitter();\n    /**\n     * Event fired when the Navigation Drawer has closed.\n     *\n     * ```html\n     * <igx-nav-drawer (closed)='onClosed()'></igx-nav-drawer>\n     * ```\n     */\n    @Output() public closed = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    get template() {\n        if (this.miniTemplate && !this.isOpen) {\n            return this.miniTemplate.template;\n        } else if (this.contentTemplate) {\n            return this.contentTemplate.template;\n        }\n    }\n\n    private _miniTemplate: IgxNavDrawerMiniTemplateDirective;\n    /**\n     * @hidden\n     */\n    public get miniTemplate(): IgxNavDrawerMiniTemplateDirective {\n        return this._miniTemplate;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavDrawerMiniTemplateDirective, { read: IgxNavDrawerMiniTemplateDirective, static: false })\n    public set miniTemplate(v: IgxNavDrawerMiniTemplateDirective) {\n        if (!this.isOpen) {\n            this.setDrawerWidth(v ? this.miniWidth : '');\n        }\n        this._miniTemplate = v;\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxNavDrawerTemplateDirective, { read: IgxNavDrawerTemplateDirective, static: false })\n    protected contentTemplate: IgxNavDrawerTemplateDirective;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('style.flexBasis')\n    get flexWidth() {\n        if (!this.pin) {\n            return '0px';\n        }\n        if (this.isOpen) {\n            return this.width;\n        }\n        if (this.miniTemplate && this.miniWidth) {\n            return this.miniWidth;\n        }\n\n        return '0px';\n    }\n\n    /** @hidden */\n    @HostBinding('style.order')\n    get isPinnedRight() {\n        return this.pin && this.position === 'right' ? '1' : '0';\n    }\n\n    private _gesturesAttached = false;\n    private _widthCache: { width: number, miniWidth: number, windowWidth: number } = { width: null, miniWidth: null, windowWidth: null };\n    private _resizeObserver: Subscription;\n    private css: { [name: string]: string; } = {\n        drawer: 'igx-nav-drawer__aside',\n        mini: 'igx-nav-drawer__aside--mini',\n        overlay: 'igx-nav-drawer__overlay',\n        styleDummy: 'igx-nav-drawer__style-dummy'\n    };\n\n    @ViewChild('aside', { static: true }) private _drawer: ElementRef;\n    @ViewChild('overlay', { static: true }) private _overlay: ElementRef;\n    @ViewChild('dummy', { static: true }) private _styleDummy: ElementRef;\n\n    /**\n      * @hidden\n      */\n    get drawer() {\n        return this._drawer.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get overlay() {\n        return this._overlay.nativeElement;\n    }\n\n    /**\n     * @hidden\n     */\n    get styleDummy() {\n        return this._styleDummy.nativeElement;\n    }\n\n    /** Pan animation properties */\n    private _panning = false;\n    private _panStartWidth: number;\n    private _panLimit: number;\n\n    /**\n     * Property to decide whether to change width or translate the drawer from pan gesture.\n     *\n     * @hidden\n     */\n    public get hasAnimateWidth(): boolean {\n        return this.pin || !!this.miniTemplate;\n    }\n\n    private _maxEdgeZone = 50;\n    /**\n     * Used for touch gestures (swipe and pan).\n     * Defaults to 50 (in px) and is extended to at least 110% of the mini template width if available.\n     *\n     * @hidden\n     */\n    public get maxEdgeZone() {\n        return this._maxEdgeZone;\n    }\n\n    /**\n     * Gets the Drawer width for specific state.\n     * Will attempt to evaluate requested state and cache.\n     *\n     *\n     * @hidden\n     */\n    public get expectedWidth() {\n        return this.getExpectedWidth(false);\n    }\n\n    /**\n     * Get the Drawer mini width for specific state.\n     * Will attempt to evaluate requested state and cache.\n     *\n     * @hidden\n     */\n    public get expectedMiniWidth() {\n        return this.getExpectedWidth(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public get touchManager() {\n        return this._touchManager;\n    }\n\n    /**\n     * Exposes optional navigation service\n     *\n     * @hidden\n     */\n    public get state() {\n        return this._state;\n    }\n\n    constructor(\n        @Inject(ElementRef) private elementRef: ElementRef,\n        @Optional() private _state: IgxNavigationService,\n        // private animate: AnimationBuilder, TODO\n        protected renderer: Renderer,\n        private _touchManager: HammerGesturesManager) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        // DOM and @Input()-s initialized\n        if (this._state) {\n            this._state.add(this.id, this);\n        }\n        if (this.isOpen) {\n            this.setDrawerWidth(this.width);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        // wait for template and ng-content to be ready\n        this.updateEdgeZone();\n        this.checkPinThreshold();\n\n        this.ensureEvents();\n\n        // TODO: apply platform-safe Ruler from http://plnkr.co/edit/81nWDyreYMzkunihfRgX?p=preview\n        // (https://github.com/angular/angular/issues/6515), blocked by https://github.com/angular/angular/issues/6904\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._touchManager.destroy();\n        if (this._state) {\n            this._state.remove(this.id);\n        }\n        if (this._resizeObserver) {\n            this._resizeObserver.unsubscribe();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnChanges(changes: { [propName: string]: SimpleChange }) {\n        // simple settings can come from attribute set (rather than binding), make sure boolean props are converted\n        if (changes.enableGestures && changes.enableGestures.currentValue !== undefined) {\n            this.enableGestures = !!(this.enableGestures && this.enableGestures.toString() === 'true');\n            this.ensureEvents();\n        }\n        if (changes.pin && changes.pin.currentValue !== undefined) {\n            this.pin = !!(this.pin && this.pin.toString() === 'true');\n            if (this.pin) {\n                this._touchManager.destroy();\n                this._gesturesAttached = false;\n            } else {\n                this.ensureEvents();\n            }\n        }\n\n        if (changes.pinThreshold) {\n            if (this.pinThreshold) {\n                this.ensureEvents();\n                this.checkPinThreshold();\n            }\n        }\n\n        if (changes.width && this.isOpen) {\n            this.setDrawerWidth(changes.width.currentValue);\n        }\n\n        if (changes.miniWidth) {\n            if (!this.isOpen) {\n                this.setDrawerWidth(changes.miniWidth.currentValue);\n            }\n            this.updateEdgeZone();\n        }\n    }\n\n    /**\n     * Toggle the open state of the Navigation Drawer.\n     *\n     * ```typescript\n     * this.navdrawer.toggle();\n     * ```\n     */\n    public toggle() {\n        if (this.isOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /**\n     * Open the Navigation Drawer. Has no effect if already opened.\n     *\n     * ```typescript\n     * this.navdrawer.open();\n     * ```\n     */\n    public open() {\n        if (this._panning) {\n            this.resetPan();\n        }\n        if (this.isOpen) {\n            return;\n        }\n        this.opening.emit();\n        this.isOpen = true;\n\n        // TODO: Switch to animate API when available\n        // var animationCss = this.animate.css();\n        //     animationCss\n        //         .setStyles({'width':'50px'}, {'width':'400px'})\n        //         .start(this.elementRef.nativeElement)\n        //         .onComplete(() => animationCss.setToStyles({'width':'auto'}).start(this.elementRef.nativeElement));\n\n        this.elementRef.nativeElement.addEventListener('transitionend', this.toggleOpenedEvent, false);\n        this.setDrawerWidth(this.width);\n    }\n\n    /**\n     * Close the Navigation Drawer. Has no effect if already closed.\n     *\n     * ```typescript\n     * this.navdrawer.close();\n     * ```\n     */\n    public close() {\n        if (this._panning) {\n            this.resetPan();\n        }\n        if (!this.isOpen) {\n            return;\n        }\n        this.closing.emit();\n\n        this.isOpen = false;\n        this.setDrawerWidth(this.miniTemplate ? this.miniWidth : '');\n        this.elementRef.nativeElement.addEventListener('transitionend', this.toggleClosedEvent, false);\n    }\n\n    /**\n     * @hidden\n     */\n    protected set_maxEdgeZone(value: number) {\n        this._maxEdgeZone = value;\n    }\n\n    /**\n     * Get the Drawer width for specific state. Will attempt to evaluate requested state and cache.\n     *\n     * @hidden\n     * @param [mini] - Request mini width instead\n     */\n    protected getExpectedWidth(mini?: boolean): number {\n        if (mini) {\n            if (!this.miniTemplate) {\n                return 0;\n            }\n            if (this.miniWidth) {\n                return parseFloat(this.miniWidth);\n            } else {\n                // if (!this.isOpen) { // This WON'T work due to transition timings...\n                //     return this.elementRef.nativeElement.children[1].offsetWidth;\n                // } else {\n                if (this._widthCache.miniWidth === null) {\n                    // force class for width calc. TODO?\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, true);\n                    this.renderer.setElementClass(this.styleDummy, this.css.mini, true);\n                    this._widthCache.miniWidth = this.styleDummy.offsetWidth;\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, false);\n                    this.renderer.setElementClass(this.styleDummy, this.css.mini, false);\n                }\n                return this._widthCache.miniWidth;\n            }\n        } else {\n            if (this.width) {\n                return parseFloat(this.width);\n            } else {\n                if (this._widthCache.width === null) {\n                    // force class for width calc. TODO?\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, true);\n                    this._widthCache.width = this.styleDummy.offsetWidth;\n                    this.renderer.setElementClass(this.styleDummy, this.css.drawer, false);\n                }\n                return this._widthCache.width;\n            }\n        }\n    }\n\n    private getWindowWidth() {\n        return (window.innerWidth > 0) ? window.innerWidth : screen.width;\n    }\n\n    /**\n     * Sets the drawer width.\n     */\n    private setDrawerWidth(width: string) {\n        requestAnimationFrame(() => {\n            if (this.drawer) {\n                this.renderer.setElementStyle(this.drawer, 'width', width);\n            }\n        });\n    }\n\n    /**\n     * Get current Drawer width.\n     */\n    private getDrawerWidth(): number {\n        return this.drawer.offsetWidth;\n    }\n\n    private ensureEvents() {\n        // set listeners for swipe/pan only if needed, but just once\n        if (this.enableGestures && !this.pin && !this._gesturesAttached) {\n            // Built-in manager handler(L20887) causes endless loop and max stack exception.\n            // https://github.com/angular/angular/issues/6993\n            // Use ours for now (until beta.10):\n            // this.renderer.listen(document, \"swipe\", this.swipe);\n            this._touchManager.addGlobalEventListener('document', 'swipe', this.swipe);\n            this._gesturesAttached = true;\n\n            // this.renderer.listen(document, \"panstart\", this.panstart);\n            // this.renderer.listen(document, \"pan\", this.pan);\n            this._touchManager.addGlobalEventListener('document', 'panstart', this.panstart);\n            this._touchManager.addGlobalEventListener('document', 'panmove', this.pan);\n            this._touchManager.addGlobalEventListener('document', 'panend', this.panEnd);\n        }\n        if (!this._resizeObserver) {\n            this._resizeObserver = fromEvent(window, 'resize').pipe(debounce(() => interval(150)))\n                .subscribe((value) => {\n                    this.checkPinThreshold(value);\n                });\n        }\n    }\n\n    private updateEdgeZone() {\n        let maxValue;\n\n        if (this.miniTemplate) {\n            maxValue = Math.max(this._maxEdgeZone, this.getExpectedWidth(true) * 1.1);\n            this.set_maxEdgeZone(maxValue);\n        }\n    }\n\n    private checkPinThreshold = (evt?: Event) => {\n        let windowWidth;\n        if (this.pinThreshold) {\n            windowWidth = this.getWindowWidth();\n            if (evt && this._widthCache.windowWidth === windowWidth) {\n                return;\n            }\n            this._widthCache.windowWidth = windowWidth;\n            if (!this.pin && windowWidth >= this.pinThreshold) {\n                this.pin = true;\n                this.pinChange.emit(true);\n            } else if (this.pin && windowWidth < this.pinThreshold) {\n                this.pin = false;\n                this.pinChange.emit(false);\n            }\n        }\n    }\n\n    private swipe = (evt: HammerInput) => {\n        // TODO: Could also force input type: http://stackoverflow.com/a/27108052\n        if (!this.enableGestures || evt.pointerType !== 'touch') {\n            return;\n        }\n\n        // HammerJS swipe is horizontal-only by default, don't check deltaY\n        let deltaX;\n        let startPosition;\n        if (this.position === 'right') {\n            // when on the right use inverse of deltaX\n            deltaX = -evt.deltaX;\n            startPosition = this.getWindowWidth() - (evt.center.x + evt.distance);\n        } else {\n            deltaX = evt.deltaX;\n            startPosition = evt.center.x - evt.distance;\n        }\n        // only accept closing swipe (ignoring minEdgeZone) when the drawer is expanded:\n        if ((this.isOpen && deltaX < 0) ||\n            // positive deltaX from the edge:\n            (deltaX > 0 && startPosition < this.maxEdgeZone)) {\n            this.toggle();\n        }\n    }\n\n    private panstart = (evt: HammerInput) => { // TODO: test code\n        if (!this.enableGestures || this.pin || evt.pointerType !== 'touch') {\n            return;\n        }\n        const startPosition = this.position === 'right' ? this.getWindowWidth() - (evt.center.x + evt.distance)\n            : evt.center.x - evt.distance;\n\n        // cache width during animation, flag to allow further handling\n        if (this.isOpen || (startPosition < this.maxEdgeZone)) {\n            this._panning = true;\n            this._panStartWidth = this.getExpectedWidth(!this.isOpen);\n            this._panLimit = this.getExpectedWidth(this.isOpen);\n\n            this.renderer.setElementClass(this.overlay, 'panning', true);\n            this.renderer.setElementClass(this.drawer, 'panning', true);\n        }\n    }\n\n    private pan = (evt: HammerInput) => {\n        // TODO: input.deltaX = prevDelta.x + (center.x - offset.x);\n        // get actual delta (not total session one) from event?\n        // pan WILL also fire after a full swipe, only resize on flag\n        if (!this._panning) {\n            return;\n        }\n        const right: boolean = this.position === 'right';\n        // when on the right use inverse of deltaX\n        const deltaX = right ? -evt.deltaX : evt.deltaX;\n        let visibleWidth;\n        let newX;\n        let percent;\n\n        visibleWidth = this._panStartWidth + deltaX;\n\n        if (this.isOpen && deltaX < 0) {\n            // when visibleWidth hits limit - stop animating\n            if (visibleWidth <= this._panLimit) {\n                return;\n            }\n\n            if (this.hasAnimateWidth) {\n                percent = (visibleWidth - this._panLimit) / (this._panStartWidth - this._panLimit);\n                newX = visibleWidth;\n            } else {\n                percent = visibleWidth / this._panStartWidth;\n                newX = evt.deltaX;\n            }\n            this.setXSize(newX, percent.toPrecision(2));\n\n        } else if (!this.isOpen && deltaX > 0) {\n            // when visibleWidth hits limit - stop animating\n            if (visibleWidth >= this._panLimit) {\n                return;\n            }\n\n            if (this.hasAnimateWidth) {\n                percent = (visibleWidth - this._panStartWidth) / (this._panLimit - this._panStartWidth);\n                newX = visibleWidth;\n            } else {\n                percent = visibleWidth / this._panLimit;\n                newX = (this._panLimit - visibleWidth) * (right ? 1 : -1);\n            }\n            this.setXSize(newX, percent.toPrecision(2));\n        }\n    }\n\n    private panEnd = (evt: HammerInput) => {\n        if (this._panning) {\n            const deltaX = this.position === 'right' ? -evt.deltaX : evt.deltaX;\n            const visibleWidth: number = this._panStartWidth + deltaX;\n            this.resetPan();\n\n            // check if pan brought the drawer to 50%\n            if (this.isOpen && visibleWidth <= this._panStartWidth / 2) {\n                this.close();\n            } else if (!this.isOpen && visibleWidth >= this._panLimit / 2) {\n                this.open();\n            }\n            this._panStartWidth = null;\n        }\n    }\n\n    private resetPan() {\n        this._panning = false;\n        /* styles fail to apply when set on parent due to extra attributes, prob ng bug */\n        this.renderer.setElementClass(this.overlay, 'panning', false);\n        this.renderer.setElementClass(this.drawer, 'panning', false);\n        this.setXSize(0, '');\n    }\n\n    /**\n     * Sets the absolute position or width in case the drawer doesn't change position.\n     * @param x the number pixels to translate on the X axis or the width to set. 0 width will clear the style instead.\n     * @param opacity optional value to apply to the overlay\n     */\n    private setXSize(x: number, opacity?: string) {\n        // Angular polyfills patches window.requestAnimationFrame, but switch to DomAdapter API (TODO)\n        window.requestAnimationFrame(() => {\n            if (this.hasAnimateWidth) {\n                this.renderer.setElementStyle(this.drawer, 'width', x ? Math.abs(x) + 'px' : '');\n            } else {\n                this.renderer.setElementStyle(this.drawer, 'transform', x ? 'translate3d(' + x + 'px,0,0)' : '');\n                this.renderer.setElementStyle(this.drawer, '-webkit-transform',\n                    x ? 'translate3d(' + x + 'px,0,0)' : '');\n            }\n            if (opacity !== undefined) {\n                this.renderer.setElementStyle(this.overlay, 'opacity', opacity);\n            }\n        });\n    }\n\n    private toggleOpenedEvent = (evt?) => {\n        this.elementRef.nativeElement.removeEventListener('transitionend', this.toggleOpenedEvent, false);\n        this.opened.emit();\n    }\n\n    private toggleClosedEvent = (evt?) => {\n        this.elementRef.nativeElement.removeEventListener('transitionend', this.toggleClosedEvent, false);\n        this.closed.emit();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { IgxNavigationDrawerComponent } from './navigation-drawer.component';\nimport {\n    IgxNavDrawerItemDirective,\n    IgxNavDrawerMiniTemplateDirective,\n    IgxNavDrawerTemplateDirective\n} from './navigation-drawer.directives';\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxNavigationDrawerComponent,\n        IgxNavDrawerItemDirective,\n        IgxNavDrawerMiniTemplateDirective,\n        IgxNavDrawerTemplateDirective\n    ],\n    exports: [\n        IgxNavigationDrawerComponent,\n        IgxNavDrawerItemDirective,\n        IgxNavDrawerMiniTemplateDirective,\n        IgxNavDrawerTemplateDirective\n    ],\n    imports: [CommonModule]\n})\nexport class IgxNavigationDrawerModule {}\n","import { Directive } from '@angular/core';\n\n/**\n * Template directive that allows you to set a custom template representing the lower label value of the {@link IgxSliderComponent}\n *\n *```html\n * <igx-slider>\n *  <ng-template igxSliderThumbFrom let-value let-labels>{{value}}</ng-template>\n * </igx-slider>\n * ```\n *\n * @context {@link IgxSliderComponent.context}\n */\n@Directive({\n    selector: '[igxSliderThumbFrom]'\n})\nexport class IgxThumbFromTemplateDirective {}\n\n/**\n * Template directive that allows you to set a custom template representing the upper label value of the {@link IgxSliderComponent}\n *\n * ```html\n * <igx-slider>\n *  <ng-template igxSliderThumbTo let-value let-labels>{{value}}</ng-template>\n * </igx-slider>\n * ```\n *\n * @context {@link IgxSliderComponent.context}\n */\n@Directive({\n    selector: '[igxSliderThumbTo]'\n})\nexport class IgxThumbToTemplateDirective {}\n\nexport enum SliderType {\n    /**\n     * Slider with single thumb.\n     */\n    SLIDER,\n    /**\n     *  Range slider with multiple thumbs, that can mark the range.\n     */\n    RANGE\n}\n\nexport enum SliderHandle {\n    FROM,\n    TO\n}\n\nexport interface IRangeSliderValue {\n    lower: number;\n    upper: number;\n}\n\nexport interface ISliderValueChangeEventArgs {\n    oldValue: number | IRangeSliderValue;\n    value: number | IRangeSliderValue;\n}\n","import {\n    Component,\n    Input,\n    HostListener,\n    ElementRef,\n    HostBinding,\n    Output,\n    EventEmitter,\n    OnInit,\n    OnDestroy,\n    TemplateRef\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { SliderHandle } from '../slider.common';\nimport { Subject } from 'rxjs';\n\n/**\n * @hidden\n */\n@Component({\n    selector: 'igx-thumb',\n    templateUrl: 'thumb-slider.component.html',\n})\nexport class IgxSliderThumbComponent implements OnInit, OnDestroy {\n\n    private _isActiveLabel = false;\n    private _isPressed = false;\n    private _destroy$ = new Subject<boolean>();\n\n    private get thumbPositionX() {\n        const thumbBounderies = this.nativeElement.getBoundingClientRect();\n        const thumbCenter = (thumbBounderies.right - thumbBounderies.left) / 2;\n        return thumbBounderies.left + thumbCenter;\n    }\n\n    public isActive = false;\n\n    @Input()\n    public value: number;\n\n    @Input()\n    public continuous: boolean;\n\n    @Input()\n    public thumbLabelVisibilityDuration;\n\n    @Input()\n    public disabled: boolean;\n\n    @Input()\n    public onPan: Subject<number>;\n\n    @Input()\n    public stepDistance: number;\n\n    @Input()\n    public step: number;\n\n    @Input()\n    public templateRef: TemplateRef<any>;\n\n    @Input()\n    public context: any;\n\n    @Input()\n    public type: SliderHandle;\n\n    @Output()\n    public onThumbValueChange = new EventEmitter<number>();\n\n    @Output()\n    public onChange = new EventEmitter<any>();\n\n    @Output()\n    public onHoverChange = new EventEmitter<boolean>();\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('attr.z-index')\n    public zIndex = 0;\n\n    @HostBinding('class.igx-slider__thumb-from')\n    public get thumbFromClass() {\n        return this.type === SliderHandle.FROM;\n    }\n\n    @HostBinding('class.igx-slider__thumb-to')\n    public get thumbToClass() {\n        return this.type === SliderHandle.TO;\n    }\n\n    @HostBinding('class.igx-slider__thumb-from--active')\n    public get thumbFromActiveClass() {\n        return this.type === SliderHandle.FROM && this._isActiveLabel;\n    }\n\n    @HostBinding('class.igx-slider__thumb-to--active')\n    public get thumbToActiveClass() {\n        return this.type === SliderHandle.TO && this._isActiveLabel;\n    }\n\n    @HostBinding('class.igx-slider__thumb--pressed')\n    public get thumbPressedClass() {\n        return this.isActive && this._isPressed;\n    }\n\n    public get nativeElement() {\n        return this._elementRef.nativeElement;\n    }\n\n    public get destroy(): Subject<boolean> {\n        return this._destroy$;\n    }\n\n    constructor(private _elementRef: ElementRef) { }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.onPan\n            .pipe(takeUntil(this._destroy$))\n            .subscribe(mouseX =>\n                this.updateThumbValue(mouseX)\n            );\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    @HostListener('pointerenter')\n    public onPinterEnter() {\n        this.onHoverChange.emit(true);\n    }\n\n    @HostListener('pointerleave')\n    public onPointerLeave() {\n        this.onHoverChange.emit(false);\n    }\n\n    @HostListener('keydown', ['$event'])\n    public onKeyDown(event: KeyboardEvent) {\n        if (this.disabled) {\n            return;\n        }\n\n        let increment = 0;\n        if (event.key.endsWith('Left')) {\n            increment = this.step * - 1;\n        } else if (event.key.endsWith('Right')) {\n            increment = this.step;\n        } else {\n            return;\n        }\n\n        this.onChange.emit();\n        this.onThumbValueChange.emit(increment);\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.isActive = false;\n        this.zIndex = 0;\n    }\n\n    @HostListener('focus')\n    public onFocusListener() {\n        this.isActive = true;\n        this.zIndex = 1;\n    }\n\n    /**\n     * Show thumb label and ripple.\n     */\n    public showThumbIndicators() {\n        this.toggleThumbIndicators(true);\n    }\n\n    /**\n     * Hide thumb label and ripple.\n     */\n    public hideThumbIndicators() {\n        this.toggleThumbIndicators(false);\n    }\n\n    private updateThumbValue(mouseX: number) {\n        const updateValue = this.calculateTrackUpdate(mouseX);\n        if (this.isActive && updateValue !== 0) {\n            this.onThumbValueChange.emit(updateValue);\n        }\n    }\n\n    private calculateTrackUpdate(mouseX: number): number {\n        const scaleX = mouseX - this.thumbPositionX;\n        const stepDistanceCenter = this.stepDistance / 2;\n\n        // If the thumb scale range (slider update) is less thÃ n a half step,\n        // the position stays the same.\n        const scaleXPositive = Math.abs(scaleX);\n        if (scaleXPositive < stepDistanceCenter) {\n            return 0;\n        }\n\n        return this.stepToProceed(scaleX, this.stepDistance);\n    }\n\n    private stepToProceed(scaleX, stepDist) {\n        return Math.round(scaleX / stepDist) * this.step;\n    }\n\n    private toggleThumbIndicators(visible: boolean) {\n        this._isPressed = visible;\n\n        if (!this.continuous) {\n            this._isActiveLabel = visible;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit, Component, ElementRef, EventEmitter,\n    HostBinding, Input, NgModule, OnInit, Output, Renderer2,\n    ViewChild,\n    TemplateRef,\n    ContentChild,\n    AfterContentInit,\n    OnDestroy,\n    HostListener,\n    ViewChildren,\n    QueryList,\n    ChangeDetectorRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { EditorProvider } from '../core/edit-provider';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\nimport { IgxSliderThumbComponent } from './thumb/thumb-slider.component';\nimport { Subject, merge, Observable, timer } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { SliderHandle,\n    IgxThumbFromTemplateDirective,\n    IgxThumbToTemplateDirective,\n    IRangeSliderValue,\n    SliderType,\n    ISliderValueChangeEventArgs\n} from './slider.common';\n\n\nconst noop = () => {\n};\n\nlet NEXT_ID = 0;\n\n/**\n * **Ignite UI for Angular Slider** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/slider.html)\n *\n * The Ignite UI Slider allows selection in a given range by moving the thumb along the track. The track\n * can be defined as continuous or stepped, and you can choose between single and range slider types.\n *\n * Example:\n * ```html\n * <igx-slider id=\"slider\"\n *            [minValue]=\"0\" [maxValue]=\"100\"\n *            [continuous]=true [(ngModel)]=\"volume\">\n * </igx-slider>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSliderComponent, multi: true }],\n    selector: 'igx-slider',\n    templateUrl: 'slider.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxSliderComponent implements\n    ControlValueAccessor,\n    EditorProvider,\n    OnInit,\n    AfterViewInit,\n    AfterContentInit,\n    OnDestroy {\n\n    // Limit handle travel zone\n    private _pMin = 0;\n    private _pMax = 1;\n\n    // From/upperValue in percent values\n    private _hasViewInit = false;\n    private _minValue = 0;\n    private _maxValue = 100;\n    private _lowerBound?: number;\n    private _upperBound?: number;\n    private _lowerValue?: number;\n    private _upperValue?: number;\n    private _continuous = false;\n    private _disabled = false;\n    private _step = 1;\n\n    private _labels = new Array<number|string|boolean|null|undefined>();\n    private _type = SliderType.SLIDER;\n\n    private _destroyer$ = new Subject<boolean>();\n    private _indicatorsDestroyer$ = new Subject<boolean>();\n    private _indicatorsTimer: Observable<any>;\n\n\n    private _onChangeCallback: (_: any) => void = noop;\n    private _onTouchedCallback: () => void = noop;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('track', { static: true })\n    private track: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('ticks', { static: true })\n    private ticks: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChildren(IgxSliderThumbComponent)\n    private thumbs: QueryList<IgxSliderThumbComponent> = new QueryList<IgxSliderThumbComponent>();\n\n    private get thumbFrom(): IgxSliderThumbComponent {\n        return this.thumbs.find(thumb => thumb.type === SliderHandle.FROM);\n    }\n\n    private get thumbTo(): IgxSliderThumbComponent {\n        return this.thumbs.find(thumb => thumb.type === SliderHandle.TO);\n    }\n\n    /**\n     * @hidden\n     */\n    public stepDistance = this._step;\n\n    /**\n     * @hidden\n     */\n    public onPan: Subject<number> = new Subject<number>();\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxThumbFromTemplateDirective, { read: TemplateRef, static: false })\n    public thumbFromTemplateRef: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxThumbToTemplateDirective, { read: TemplateRef, static: true })\n    public thumbToTemplateRef: TemplateRef<any>;\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.role`)\n    public role = 'slider';\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.aria-valuemin`)\n    public get valuemin() {\n        return this.minValue;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.aria-valuemax`)\n    public get valuemax() {\n        return this.maxValue;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding(`attr.aria-readonly`)\n    public get readonly() {\n        return this.disabled;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider')\n    public slierClass = true;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-slider--disabled')\n    public get disabledClass() {\n        return this.disabled;\n    }\n\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * If not provided it will be automatically generated.\n     * ```html\n     * <igx-slider [id]=\"'igx-slider-32'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-slider-${NEXT_ID++}`;\n\n    /**\n     * An @Input property that gets the type of the `IgxSliderComponent`. The slider can be SliderType.SLIDER(default) or SliderType.RANGE.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let type = this.slider.type;\n     * }\n     */\n    @Input()\n    public get type() {\n        return this._type;\n    }\n\n    /**\n     * An @Input property that sets the type of the `IgxSliderComponent`. The slider can be SliderType.SLIDER(default) or SliderType.RANGE.\n     * ```typescript\n     * sliderType: SliderType = SliderType.RANGE;\n     * ```\n     * ```html\n     * <igx-slider #slider2 [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"0\" [maxValue]=\"100\">\n     * ```\n     */\n    public set type(type: SliderType) {\n        this._type = type;\n\n        if (type === SliderType.SLIDER) {\n            this.lowerValue = 0;\n        }\n\n        if (this.labelsViewEnabled && this.upperValue > this.maxValue) {\n            this.upperValue = this.labels.length - 1;\n        }\n\n        if (this._hasViewInit) {\n            this.updateTrack();\n        }\n    }\n\n    /**\n     *An @Input property that sets the duration visibility of thumbs labels. The default value is 750 milliseconds.\n     *```html\n     *<igx-slider #slider [thumbLabelVisibilityDuration]=\"3000\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     *```\n     */\n    @Input()\n    public thumbLabelVisibilityDuration = 750;\n\n\n    /**\n     * Enables `labelView`, by accepting a collection of primitive values with more than one element.\n     * Each element will be equally spread over the slider and it will serve as a thumb label.\n     * Once the property is set, it will precendence over {@link maxValue}, {@link minValue}, {@link step}.\n     * This means that the manipulation for those properties won't be allowed.\n     */\n    @Input()\n    public get labels() {\n        return this._labels;\n    }\n\n    public set labels(labels: Array<number|string|boolean|null|undefined>) {\n        this._labels = labels;\n\n        this._pMax = 1;\n\n        if (this._hasViewInit) {\n            this.stepDistance = this.calculateStepDistance();\n            this.positionHandlesAndUpdateTrack();\n            this.setTickInterval(labels);\n        }\n    }\n\n    /**\n     * Returns the template context corresponding\n     * to {@link IgxThumbFromTemplateDirective} and {@link IgxThumbToTemplateDirective} templates.\n     *\n     * return {\n     *  $implicit: {@link value},\n     *  labels: {@link labels}\n     * }\n     * ```\n     */\n    public get context(): any {\n        return {\n            $implicit: this.value,\n            labels: this.labels\n        };\n    }\n\n    /**\n     * An @Input property that sets the incremental/decremental step of the value when dragging the thumb.\n     * The default step is 1, and step should not be less or equal than 0.\n     * ```html\n     * <igx-slider #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Input()\n    public set step(step: number) {\n        this._step = step;\n\n        if (this._hasViewInit) {\n            this.stepDistance = this.calculateStepDistance();\n            this.normalizeByStep(this.value);\n            this.setTickInterval(this.labels);\n        }\n    }\n\n    /**\n     * Returns the incremental/decremental dragging step of the {@link IgxSliderComponent}.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let step = this.slider.step;\n     * }\n     * ```\n     */\n    public get step() {\n        return this.labelsViewEnabled ? 1 : this._step;\n    }\n\n    /**\n     * Returns if the {@link IgxSliderComponent} is disabled.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let isDisabled = this.slider.disabled;\n     * }\n     * ```\n     */\n    @Input()\n    public get disabled(): boolean {\n        return this._disabled;\n    }\n\n    /**\n     *An @Input property that disables or enables UI interaction.\n     *```html\n     *<igx-slider #slider [disabled]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     *```\n     */\n    public set disabled(disable: boolean) {\n        this._disabled = disable;\n\n        if (this._hasViewInit) {\n            this.changeThumbFocusableState(disable);\n        }\n    }\n\n    /**\n     * Returns if the {@link IgxSliderComponent} is set as continuous.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let continuous = this.slider.continuous;\n     * }\n     * ```\n     */\n    @Input()\n    public get continuous(): boolean {\n        return this._continuous;\n    }\n\n    /**\n     * An @Input property that marks the {@link IgxSliderComponent} as continuous.\n     * By default is considered that the {@link IgxSliderComponent} is discrete.\n     * Discrete {@link IgxSliderComponent} does not have ticks and does not shows bubble labels for values.\n     * ```html\n     * <igx-slider #slider [continuous]=\"'true'\" [(ngModel)]=\"task.percentCompleted\" [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    public set continuous(continuous: boolean) {\n        if (this.labelsViewEnabled) {\n            return;\n        }\n\n        this._continuous = continuous;\n        this.setTickInterval(null);\n    }\n\n    /**\n     * Returns if the {@link IgxSliderComponent} is set as continuous.\n     * ```typescript\n     * @ViewChild(\"slider2\")\n     * public slider: IgxSliderComponent;\n     * ngAfterViewInit(){\n     *     let continuous = this.slider.continuous;\n     * }\n     * ```\n     */\n    @Input()\n    @DeprecateProperty(`IgxSliderComponent \\`isContinuous\\` property is deprecated.\\nUse \\`continuous\\` instead.`)\n    public get isContinuous(): boolean {\n        return this.continuous;\n    }\n\n    /**\n     * @hidden\n     * @internal\n     */\n    public set isContinuous(continuous: boolean) {\n        this.continuous = continuous;\n    }\n\n    /**\n     * Returns the maximum value for the {@link IgxSliderComponent}.\n     * ```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderMax = this.slider.maxValue;\n     *}\n     * ```\n     */\n    public get maxValue(): number {\n        return this.labelsViewEnabled ?\n            this.labels.length - 1 :\n            this._maxValue;\n    }\n\n    /**\n     * Sets the maximal value for the `IgxSliderComponent`.\n     * The default maximum value is 100.\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"256\">\n     * ```\n     */\n    @Input()\n    public set maxValue(value: number) {\n        if (value <= this._minValue) {\n            this._maxValue = this._minValue + 1;\n        } else {\n            this._maxValue = value;\n        }\n\n        if (value < this.lowerBound) {\n            this.updateLowerBoundAndMinTravelZone();\n            this.upperBound = value;\n        }\n\n        // refresh max travel zone limits.\n        this._pMax = 1;\n        // recalculate step distance.\n        this.stepDistance = this.calculateStepDistance();\n        this.positionHandlesAndUpdateTrack();\n        this.setTickInterval(null);\n    }\n\n    /**\n     *Returns the minimal value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderMin = this.slider.minValue;\n     *}\n     *```\n     */\n    public get minValue(): number {\n        if (this.labelsViewEnabled) {\n            return 0;\n        }\n\n        return this._minValue;\n    }\n\n    /**\n     * Sets the minimal value for the `IgxSliderComponent`.\n     * The default minimal value is 0.\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [minValue]=\"56\" [maxValue]=\"100\">\n     * ```\n     */\n    @Input()\n    public set minValue(value: number) {\n        if (value >= this.maxValue) {\n            this._minValue = this.maxValue - 1;\n        } else {\n            this._minValue = value;\n        }\n\n        if (value > this.upperBound) {\n            this.updateUpperBoundAndMaxTravelZone();\n            this.lowerBound = value;\n        }\n\n        // Refresh min travel zone limit.\n        this._pMin = 0;\n        // Recalculate step distance.\n        this.stepDistance = this.calculateStepDistance();\n        this.positionHandlesAndUpdateTrack();\n        this.setTickInterval(null);\n    }\n\n    /**\n     * Returns the lower boundary of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderLowBound = this.slider.lowerBound;\n     *}\n     *```\n     */\n    public get lowerBound(): number {\n        if (!Number.isNaN(this._lowerBound) && this._lowerBound !== undefined) {\n            return this.valueInRange(this._lowerBound, this.minValue, this.maxValue);\n        }\n\n        return this.minValue;\n    }\n\n    /**\n     * Sets the lower boundary of the `IgxSliderComponent`.\n     * If not set is the same as min value.\n     * ```html\n     * <igx-slider [step]=\"5\" [lowerBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public set lowerBound(value: number) {\n        if (value >= this.upperBound || (this.labelsViewEnabled && value < 0)) {\n            return;\n        }\n\n        this._lowerBound = this.valueInRange(value, this.minValue, this.maxValue);\n\n        // Refresh time travel zone.\n        this._pMin = this.valueToFraction(this._lowerBound) || 0;\n        this.positionHandlesAndUpdateTrack();\n    }\n\n    /**\n     * Returns the upper boundary of the `IgxSliderComponent`.\n     * ```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderUpBound = this.slider.upperBound;\n     *}\n     * ```\n     */\n    public get upperBound(): number {\n        if (!Number.isNaN(this._upperBound) && this._upperBound !== undefined) {\n            return this.valueInRange(this._upperBound, this.minValue, this.maxValue);\n        }\n\n        return this.maxValue;\n    }\n\n    /**\n     * Sets the upper boundary of the `IgxSliderComponent`.\n     * If not set is the same as max value.\n     * ```html\n     * <igx-slider [step]=\"5\" [upperBound]=\"20\">\n     * ```\n     */\n    @Input()\n    public set upperBound(value: number) {\n        if (value <= this.lowerBound || (this.labelsViewEnabled && value > this.labels.length - 1)) {\n            return;\n        }\n\n        this._upperBound = this.valueInRange(value, this.minValue, this.maxValue);\n        // Refresh time travel zone.\n        this._pMax = this.valueToFraction(this._upperBound) || 1;\n        this.positionHandlesAndUpdateTrack();\n    }\n\n    /**\n     * Returns the slider value. If the slider is of type {@link SliderType.SLIDER} the returned value is number.\n     * If the slider type is {@link SliderType.RANGE} the returned value represents an object of {@link lowerValue} and {@link upperValue}.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public sliderValue(event){\n     *    let sliderVal = this.slider.value;\n     *}\n     *```\n     */\n    public get value(): number | IRangeSliderValue {\n        if (this.isRange) {\n            return {\n                lower: this.valueInRange(this.lowerValue, this.lowerBound, this.upperBound),\n                upper: this.valueInRange(this.upperValue, this.lowerBound, this.upperBound)\n            };\n        } else {\n            return this.valueInRange(this.upperValue, this.lowerBound, this.upperBound);\n        }\n    }\n\n    /**\n     * Sets the slider value.\n     * If the slider is of type {@link SliderType.SLIDER} the argument is number. By default the {@link value} gets the {@link lowerBound}.\n     * If the slider type is {@link SliderType.RANGE} the argument\n     * represents an object of {@link lowerValue} and {@link upperValue} properties.\n     * By default the object is associated with the {@link lowerBound} and {@link upperBound} property values.\n     * ```typescript\n     *rangeValue = {\n     *   lower: 30,\n     *   upper: 60\n     *};\n     * ```\n     * ```html\n     * <igx-slider [type]=\"sliderType\" [(ngModel)]=\"rangeValue\" [minValue]=\"56\" [maxValue]=\"256\">\n     * ```\n     */\n    @Input()\n    public set value(value: number | IRangeSliderValue) {\n        if (!this.isRange) {\n            this.upperValue = value as number;\n        } else {\n            value = this.validateInitialValue(value as IRangeSliderValue);\n            this.upperValue = (value as IRangeSliderValue).upper;\n            this.lowerValue = (value as IRangeSliderValue).lower;\n        }\n\n        this._onChangeCallback(this.value);\n\n        if (this._hasViewInit) {\n            this.positionHandlesAndUpdateTrack();\n        }\n    }\n\n    /**\n     * This event is emitted when user has stopped interacting the thumb and value is changed.\n     * ```typescript\n     * public change(event){\n     *    alert(\"The value has been changed!\");\n     *}\n     * ```\n     * ```html\n     * <igx-slider (onValueChange)=\"change($event)\" #slider [(ngModel)]=\"task.percentCompleted\" [step]=\"5\">\n     * ```\n     */\n    @Output()\n    public onValueChange = new EventEmitter<ISliderValueChangeEventArgs>();\n\n\n    constructor(private renderer: Renderer2, private _el: ElementRef, private _cdr: ChangeDetectorRef) { }\n\n    /**\n     * @hidden\n     */\n    @HostListener('pointerdown', ['$event'])\n    public onPointerDown($event) {\n        this.findClosestThumb($event);\n\n        if (!this.thumbTo.isActive && this.thumbFrom === undefined) {\n            return;\n        }\n\n        const activeThumb = this.thumbTo.isActive ? this.thumbTo : this.thumbFrom;\n        activeThumb.nativeElement.setPointerCapture($event.pointerId);\n        this.showThumbsIndicators();\n\n    }\n\n\n    /**\n     * @hidden\n     */\n    @HostListener('pointerup', ['$event'])\n    public onPointerUp($event) {\n        if (!this.thumbTo.isActive && this.thumbFrom === undefined) {\n            return;\n        }\n\n        this.hideThumbsIndicators();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('focus')\n    public onFocus() {\n        this.toggleThumbLabels();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('pan', ['$event'])\n    public onPanListener($event) {\n        this.update($event.srcEvent.clientX);\n    }\n\n    @HostListener('panstart')\n    public onPanStart() {\n        this.showThumbsIndicators();\n    }\n\n    @HostListener('panend')\n    public onPanEnd() {\n        this.hideThumbsIndicators();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('tap', ['$event'])\n    public onTapListener($event) {\n        this.onTap($event);\n    }\n\n    /**\n     *Returns whether the `IgxSliderComponent` type is RANGE.\n     *```typescript\n     *@ViewChild(\"slider\")\n     *public slider: IgxSliderComponent;\n     *ngAfterViewInit(){\n     *    let sliderRange = this.slider.isRange;\n     *}\n     * ```\n     */\n    public get isRange(): boolean {\n        return this.type === SliderType.RANGE;\n    }\n\n    /**\n     * Returns the lower value of the `IgxSliderComponent`.\n     * ```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * public lowValue(event){\n     *    let sliderLowValue = this.slider.lowerValue;\n     *}\n     *```\n     */\n    public get lowerValue(): number {\n        if (!Number.isNaN(this._lowerValue) && this._lowerValue !== undefined && this._lowerValue >= this.lowerBound) {\n            return this._lowerValue;\n        }\n\n        return this.lowerBound;\n    }\n\n    /**\n     *Sets the lower value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public lowValue(event){\n     *    this.slider.lowerValue = 120;\n     *}\n     *```\n     */\n    public set lowerValue(value: number) {\n        value = this.valueInRange(value, this.lowerBound, this.upperBound);\n        this._lowerValue = value;\n\n    }\n\n    /**\n     *Returns the upper value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public upperValue(event){\n     *    let upperValue = this.slider.upperValue;\n     *}\n     *```\n     */\n    public get upperValue() {\n        if (!Number.isNaN(this._upperValue) && this._upperValue !== undefined && this._upperValue <= this.upperBound) {\n            return this._upperValue;\n        }\n\n        return this.upperBound;\n    }\n\n    /**\n     *Sets the upper value of the `IgxSliderComponent`.\n     *```typescript\n     *@ViewChild(\"slider2\")\n     *public slider: IgxSliderComponent;\n     *public upperValue(event){\n     *    this.slider.upperValue = 120;\n     *}\n     *```\n     */\n    public set upperValue(value: number) {\n        value = this.valueInRange(value, this.lowerBound, this.upperBound);\n        this._upperValue = value;\n    }\n\n    /**\n     * Returns the value corresponding the lower label.\n     *```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let label = this.slider.lowerLabel;\n     *```\n     */\n    public get lowerLabel() {\n        return this.labelsViewEnabled ?\n            this.labels[this.lowerValue] :\n            this.lowerValue;\n    }\n\n    /**\n     * Returns the value corresponding the upper label.\n     *```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let label = this.slider.upperLabel;\n     *```\n     */\n    public get upperLabel() {\n        return this.labelsViewEnabled ?\n            this.labels[this.upperValue] :\n            this.upperValue;\n    }\n\n    /**\n     * Returns if label view is enabled.\n     * If the {@link labels} is set, the view is automatically activated.\n     *```typescript\n     * @ViewChild(\"slider\")\n     * public slider: IgxSliderComponent;\n     * let labelView = this.slider.labelsViewEnabled;\n     *```\n     */\n    public get labelsViewEnabled(): boolean {\n        return !!(this.labels && this.labels.length > 1);\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit() {\n        this.sliderSetup();\n\n        // Set track travel zone\n        this._pMin = this.valueToFraction(this.lowerBound) || 0;\n        this._pMax = this.valueToFraction(this.upperBound) || 1;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        this._hasViewInit = true;\n        this.positionHandlesAndUpdateTrack();\n        this.setTickInterval(this.labels);\n        this.changeThumbFocusableState(this.disabled);\n\n        this.subscribeTo(this.thumbFrom, this.thumbChanged.bind(this));\n        this.subscribeTo(this.thumbTo, this.thumbChanged.bind(this));\n\n        this.thumbs.changes.pipe(takeUntil(this._destroyer$)).subscribe(change => {\n            const t = change.find((thumb: IgxSliderThumbComponent) => thumb.type === SliderHandle.FROM);\n            this.positionHandle(t, this.lowerValue);\n            this.subscribeTo(t, this.thumbChanged.bind(this));\n            this.changeThumbFocusableState(this.disabled);\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit() {\n        // Calculates the distance between every step in pixels.\n        this.stepDistance = this.calculateStepDistance();\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy() {\n        this._destroyer$.next(true);\n        this._destroyer$.complete();\n\n        this._indicatorsDestroyer$.next(true);\n        this._indicatorsDestroyer$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: IRangeSliderValue | number): void {\n        if (!value) {\n            return;\n        }\n\n        this.normalizeByStep(value);\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: any): void {\n        this._onChangeCallback = fn;\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: any): void {\n        this._onTouchedCallback = fn;\n    }\n\n    /** @hidden */\n    public getEditElement() {\n        return this.isRange ? this.thumbFrom.nativeElement : this.thumbTo.nativeElement;\n    }\n\n    /**\n     *\n     * @hidden\n     */\n    public onTap($event) {\n        this.update($event.srcEvent.clientX);\n    }\n    /**\n     *\n     * @hidden\n     */\n    public update(mouseX) {\n        if (this.disabled) {\n            return;\n        }\n\n        // Update To/From Values\n        this.onPan.next(mouseX);\n\n        // Finally do positionHandlesAndUpdateTrack the DOM\n        // based on data values\n        this.positionHandlesAndUpdateTrack();\n        this._onTouchedCallback();\n    }\n\n    /**\n     * @hidden\n     */\n    public thumbChanged(value: number, thumbType: number) {\n        const oldValue = this.value;\n\n        let newVal: IRangeSliderValue;\n        if (this.isRange) {\n            if (thumbType === SliderHandle.FROM) {\n                newVal = {\n                    lower: (this.value as IRangeSliderValue).lower + value,\n                    upper: (this.value as IRangeSliderValue).upper\n                };\n            } else {\n                newVal = {\n                    lower: (this.value as IRangeSliderValue).lower,\n                    upper: (this.value as IRangeSliderValue).upper + value\n                };\n            }\n\n            // Swap the thumbs if a collision appears.\n            if (newVal.lower >= newVal.upper) {\n                this.value = this.swapThumb(newVal);\n            } else {\n                this.value = newVal;\n            }\n\n        } else {\n            this.value = this.value as number + value;\n        }\n\n        if (this.hasValueChanged(oldValue)) {\n            this.emitValueChanged(oldValue);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onThumbChange() {\n        this.toggleThumbLabels();\n    }\n\n    public onHoverChange(state: boolean) {\n        return state ? this.showThumbsIndicators() : this.hideThumbsIndicators();\n    }\n\n    private swapThumb(value: IRangeSliderValue) {\n        if (this.thumbFrom.isActive) {\n            value.upper = this.upperValue;\n            value.lower = this.upperValue;\n        } else {\n            value.upper = this.lowerValue;\n            value.lower = this.lowerValue;\n        }\n\n        this.toggleThumb();\n\n        return value;\n    }\n\n    private findClosestThumb(event) {\n        if (this.isRange) {\n            this.closestHandle(event.clientX);\n        } else {\n            this.thumbTo.nativeElement.focus();\n        }\n\n        this.update(event.clientX);\n    }\n\n    private updateLowerBoundAndMinTravelZone() {\n        this.lowerBound = this.minValue;\n        this._pMin = 0;\n    }\n\n    private updateUpperBoundAndMaxTravelZone() {\n        this.upperBound = this.maxValue;\n        this._pMax = 1;\n    }\n\n    private sliderSetup() {\n        /**\n         * if {@link SliderType.SLIDER} than the initial value shold be the lowest one.\n         */\n        if (!this.isRange && this.value === this.upperBound) {\n            this.value = this.lowerBound;\n        }\n    }\n\n    private calculateStepDistance() {\n        return this._el.nativeElement.getBoundingClientRect().width / (this.maxValue - this.minValue) * this.step;\n    }\n\n    private toggleThumb() {\n        return this.thumbFrom.isActive ?\n            this.thumbTo.nativeElement.focus() :\n            this.thumbFrom.nativeElement.focus();\n    }\n\n    private valueInRange(value, min = 0, max = 100) {\n        return Math.max(Math.min(value, max), min);\n    }\n\n    private generateTickMarks(color: string, interval: number) {\n        return interval !== null ? `repeating-linear-gradient(\n            ${'to left'},\n            ${color},\n            ${color} 1.5px,\n            transparent 1.5px,\n            transparent ${interval}%\n        ), repeating-linear-gradient(\n            ${'to right'},\n            ${color},\n            ${color} 1.5px,\n            transparent 1.5px,\n            transparent ${interval}%\n        )` : interval;\n    }\n\n    private positionHandle(handle: ElementRef, position: number) {\n        if (!handle) {\n            return;\n        }\n\n        handle.nativeElement.style.left = `${this.valueToFraction(position) * 100}%`;\n    }\n\n    private positionHandlesAndUpdateTrack() {\n        if (!this.isRange) {\n            this.positionHandle(this.thumbTo, this.value as number);\n        } else {\n            this.positionHandle(this.thumbTo, (this.value as IRangeSliderValue).upper);\n            this.positionHandle(this.thumbFrom, (this.value as IRangeSliderValue).lower);\n        }\n\n        this.updateTrack();\n    }\n\n    private closestHandle(mouseX) {\n        const fromOffset = this.thumbFrom.nativeElement.offsetLeft + this.thumbFrom.nativeElement.offsetWidth / 2;\n        const toOffset = this.thumbTo.nativeElement.offsetLeft + this.thumbTo.nativeElement.offsetWidth / 2;\n        const xPointer = mouseX - this._el.nativeElement.getBoundingClientRect().left;\n        const match = this.closestTo(xPointer, [fromOffset, toOffset]);\n\n        if (match === fromOffset) {\n            this.thumbFrom.nativeElement.focus();\n        } else if (match === toOffset) {\n            this.thumbTo.nativeElement.focus();\n        }\n    }\n\n    private setTickInterval(labels) {\n        let interval;\n        const trackProgress = 100;\n        if (this.labelsViewEnabled) {\n            // Calc ticks depending on the labels length;\n            interval = ((trackProgress / (this.labels.length - 1) * 10)) / 10;\n        } else {\n            const trackRange = this.maxValue - this.minValue;\n            interval = this.step > 1 ?\n                (trackProgress / ((trackRange / this.step)) * 10) / 10\n                : null;\n        }\n\n        const renderCallbackExecution = !this.continuous ? this.generateTickMarks('white', interval) : null;\n        this.renderer.setStyle(this.ticks.nativeElement, 'background', renderCallbackExecution);\n    }\n\n    private showThumbsIndicators() {\n        if (this.disabled) {\n            return;\n        }\n\n        if (this._indicatorsTimer) {\n            this._indicatorsDestroyer$.next(true);\n            this._indicatorsTimer = null;\n        }\n\n        this.thumbTo.showThumbIndicators();\n        if (this.thumbFrom) {\n            this.thumbFrom.showThumbIndicators();\n        }\n\n    }\n\n    private hideThumbsIndicators() {\n        if (this.disabled) {\n            return;\n        }\n\n        this._indicatorsTimer = timer(this.thumbLabelVisibilityDuration);\n        this._indicatorsTimer.pipe(takeUntil(this._indicatorsDestroyer$)).subscribe(() => {\n            this.thumbTo.hideThumbIndicators();\n            if (this.thumbFrom) {\n                this.thumbFrom.hideThumbIndicators();\n            }\n        });\n    }\n\n    private toggleThumbLabels() {\n        this.showThumbsIndicators();\n        this.hideThumbsIndicators();\n    }\n\n    private changeThumbFocusableState(state: boolean) {\n        const value = state ? -1 : 1;\n\n        if (this.isRange) {\n            this.thumbFrom.tabindex = value;\n        }\n\n        this.thumbTo.tabindex = value;\n\n        this._cdr.detectChanges();\n    }\n\n    private closestTo(goal: number, positions: number[]): number {\n        return positions.reduce((previous, current) => {\n            return (Math.abs(goal - current) < Math.abs(goal - previous) ? current : previous);\n        });\n    }\n\n    private valueToFraction(value: number, pMin = this._pMin, pMax = this._pMax) {\n        return this.valueInRange((value - this.minValue) / (this.maxValue - this.minValue), pMin, pMax);\n    }\n\n    /**\n     * @hidden\n     * NormalizÐµ the value when two-way data bind is used and {@link this.step} is set.\n     * @param value\n     */\n    private normalizeByStep(value: IRangeSliderValue | number) {\n        if (this.isRange) {\n            this.value =  {\n                lower: (value as IRangeSliderValue).lower - ((value as IRangeSliderValue).lower % this.step),\n                upper: (value as IRangeSliderValue).upper - ((value as IRangeSliderValue).upper % this.step)\n            };\n        } else {\n            this.value = (value as number) - ((value as number) % this.step);\n        }\n    }\n\n    private updateTrack() {\n        const fromPosition = this.valueToFraction(this.lowerValue);\n        const toPosition = this.valueToFraction(this.upperValue);\n        const positionGap = toPosition - fromPosition;\n\n        let trackLeftIndention = fromPosition;\n        if (this.isRange) {\n            if (positionGap) {\n                trackLeftIndention = Math.round((1 / positionGap * fromPosition) * 100);\n            }\n\n            this.renderer.setStyle(this.track.nativeElement, 'transform', `scaleX(${positionGap}) translateX(${trackLeftIndention}%)`);\n        } else {\n            this.renderer.setStyle(this.track.nativeElement, 'transform', `scaleX(${toPosition})`);\n        }\n    }\n\n    private validateInitialValue(value: IRangeSliderValue) {\n        if (value.lower < this.lowerBound && value.upper < this.lowerBound) {\n            value.upper = this.lowerBound;\n            value.lower = this.lowerBound;\n        }\n\n        if (value.lower > this.upperBound && value.upper > this.upperBound) {\n            value.upper = this.upperBound;\n            value.lower = this.upperBound;\n        }\n\n        if (value.upper < value.lower) {\n            value.upper = this.upperValue;\n            value.lower = this.lowerValue;\n        }\n\n        return value;\n    }\n\n    private subscribeTo(thumb: IgxSliderThumbComponent, callback: (a: number, b: number) => void) {\n        if (!thumb) {\n            return;\n        }\n\n        thumb.onThumbValueChange\n            .pipe(takeUntil(this.unsubscriber(thumb)))\n            .subscribe(value => callback(value, thumb.type));\n    }\n\n    private unsubscriber(thumb: IgxSliderThumbComponent) {\n        return merge(this._destroyer$, thumb.destroy);\n    }\n\n    private hasValueChanged(oldValue) {\n        const isSliderWithDifferentValue: boolean = !this.isRange && oldValue !== this.value;\n        const isRangeWithOneDifferentValue: boolean = this.isRange &&\n            ((oldValue as IRangeSliderValue).lower !== (this.value as IRangeSliderValue).lower ||\n                (oldValue as IRangeSliderValue).upper !== (this.value as IRangeSliderValue).upper);\n\n        return isSliderWithDifferentValue || isRangeWithOneDifferentValue;\n    }\n\n    private emitValueChanged(oldValue: number | IRangeSliderValue) {\n        this.onValueChange.emit({ oldValue, value: this.value });\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSliderComponent, IgxThumbFromTemplateDirective, IgxThumbToTemplateDirective, IgxSliderThumbComponent],\n    exports: [IgxSliderComponent, IgxThumbFromTemplateDirective, IgxThumbToTemplateDirective, IgxSliderThumbComponent],\n    imports: [CommonModule]\n})\nexport class IgxSliderModule {\n}\n","import {\n    animate,\n    AnimationEvent,\n    state,\n    style,\n    transition,\n    trigger,\n    useAnimation\n} from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    NgZone,\n    Output\n} from '@angular/core';\nimport { fadeIn, fadeOut, slideInBottom, slideOutBottom } from '../animations/main';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Snackbar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/snackbar.html)\n *\n * The Ignite UI Snack Bar provides feedback about an operation with a single-line message, which can\n * include a link to an action such as Undo.\n *\n * Example:\n * ```html\n * <button (click)=\"snackbar.show()\">Send message</button>\n * <div>\n *   <igx-snackbar #snackbar message=\"Message sent\">\n *   </igx-snackbar>\n * </div>\n * ```\n */\n@Component({\n    animations: [\n        trigger('slideInOut', [\n            transition('void => *', [\n                useAnimation(slideInBottom, {\n                    params: {\n                        duration: '.35s',\n                        easing: 'cubic-bezier(0.0, 0.0, 0.2, 1)',\n                        fromPosition: 'translateY(100%)',\n                        toPosition: 'translateY(0)'\n                    }\n                })\n            ]),\n            transition('* => void', [\n                useAnimation(slideOutBottom, {\n                    params: {\n                        duration: '.2s',\n                        easing: 'cubic-bezier(0.4, 0.0, 1, 1)',\n                        fromPosition: 'translateY(0)',\n                        toOpacity: 1,\n                        toPosition: 'translateY(100%)'\n                    }\n                })\n            ])\n        ]),\n        trigger('fadeInOut', [\n            transition('void => *', [\n                useAnimation(fadeIn, {\n                    params: {\n                        duration: '.35s',\n                        easing: 'ease-out'\n                    }\n                })\n            ]),\n            transition('* => void', [\n                useAnimation(fadeOut, {\n                    params: {\n                        duration: '.2s',\n                        easing: 'ease-out'\n                    }\n                })\n            ])\n        ])\n    ],\n    selector: 'igx-snackbar',\n    templateUrl: 'snackbar.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxSnackbarComponent {\n\n    /**\n     * Sets/gets the `id` of the snackbar.\n     * If not set, the `id` of the first snackbar component  will be `\"igx-snackbar-0\"`;\n     * ```html\n     * <igx-snackbar id = \"Snackbar1\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let snackbarId = this.snackbar.id;\n     * ```\n     * @memberof IgxSnackbarComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-snackbar-${NEXT_ID++}`;\n    /**\n     * Sets/gets the `message` attribute.\n     * ```html\n     * <igx-snackbar [message] = \"'Snackbar Component'\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let message =  this.snackbar.message;\n     * ```\n     */\n    @Input() public message: string;\n\n    /**\n     * Enables/Disables the visibility of the snackbar.\n     * If not set, the `isVisible` attribute will have value `false`.\n     * ```html\n     * <igx-snackbar [isVisible] = \"true\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let isVisible =  this.snackbar.isVisible;\n     * ```\n     */\n    @Input() public isVisible = false;\n\n    /**\n     * Sets/gets if the snackbar will be automatically hidden after the `displayTime` is over.\n     * Default value is `true`.\n     * ```html\n     * <igx-snackbar [autoHide] = \"false\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let autoHide =  this.snackbar.autoHide;\n     * ```\n     */\n    @Input() public autoHide = true;\n\n    /**\n     * Sets/gets the duration of time(in milliseconds) in which the snackbar will be visible after it is being shown.\n     * Default value is 4000.\n     * ```html\n     * <igx-snackbar [displayTime] = \"2000\"></igx-snackbar>\n     * ```\n     * ```typescript\n     * let displayTime = this.snackbar.displayTime;\n     * ```\n     */\n    @Input() public displayTime = 4000;\n\n    /**\n     * Sets/gets the `actionText` attribute.\n     * ```html\n     * <igx-snackbar [actionText] = \"'Action Text'\"></igx-snackbar>\n     * ```\n     */\n    @Input() public actionText?: string;\n\n    /**\n     * An event that will be emitted when the action is executed.\n     * Provides reference to the `IgxSnackbarComponent` as an argument.\n     * ```html\n     * <igx-snackbar (onAction) = \"onAction($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public onAction = new EventEmitter<IgxSnackbarComponent>();\n\n    /**\n     * An event that will be emitted when the snackbar animation starts.\n     * Provides reference to the `AnimationEvent` interface as an argument.\n     * ```html\n     * <igx-snackbar (animationStarted) = \"animationStarted($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public animationStarted = new EventEmitter<AnimationEvent>();\n\n    /**\n     * An event that will be emitted when the snackbar animation ends.\n     * Provides reference to the `AnimationEvent` interface as an argument.\n     * ```html\n     * <igx-snackbar (animationDone) = \"animationDone($event)\"></igx-snackbar>\n     * ```\n     */\n    @Output() public animationDone = new EventEmitter<AnimationEvent>();\n    /**\n     *@hidden\n     */\n    private timeoutId;\n\n    constructor(private zone: NgZone) { }\n\n    /**\n     * Shows the snackbar and hides it after the `displayTime` is over if `autoHide` is set to `true`.\n     * ```typescript\n     * this.snackbar.show();\n     * ```\n     */\n    public show(): void {\n        clearTimeout(this.timeoutId);\n        setTimeout(this.timeoutId);\n        this.isVisible = true;\n\n        if (this.autoHide) {\n            this.timeoutId = setTimeout(() => {\n                this.hide();\n            }, this.displayTime);\n        }\n    }\n\n    /**\n     * Hides the snackbar.\n     * ```typescript\n     * this.snackbar.hide();\n     * ```\n     */\n    public hide(): void {\n        this.isVisible = false;\n        clearTimeout(this.timeoutId);\n    }\n    /**\n     *@hidden\n     */\n    public triggerAction(): void {\n        this.onAction.emit(this);\n    }\n    /**\n     *@hidden\n     * @memberof IgxSnackbarComponent\n     */\n    public snackbarAnimationStarted(evt: AnimationEvent): void {\n        if (evt.fromState === 'void') {\n            this.animationStarted.emit(evt);\n        }\n    }\n    /**\n     *@hidden\n     * @memberof IgxSnackbarComponent\n     */\n    public snackbarAnimationDone(evt: AnimationEvent): void {\n        if (evt.fromState === 'show') {\n            this.animationDone.emit(evt);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSnackbarComponent],\n    exports: [IgxSnackbarComponent],\n    imports: [CommonModule]\n})\nexport class IgxSnackbarModule { }\n","import {\n    Component,\n    Directive,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    Input,\n    NgModule,\n    Output,\n    Provider,\n    ViewChild,\n    ElementRef\n} from '@angular/core';\nimport { CheckboxRequiredValidator, ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { isIE } from '../core/utils';\nimport { EditorProvider } from '../core/edit-provider';\n\nexport enum SwitchLabelPosition {\n    BEFORE = 'before',\n    AFTER = 'after'\n}\n\nexport interface IChangeSwitchEventArgs {\n    checked: boolean;\n    switch: IgxSwitchComponent;\n}\n\nconst noop = () => { };\nlet nextId = 0;\n/**\n * **Ignite UI for Angular Switch** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/switch.html)\n *\n * The Ignite UI Switch lets the user toggle between on/off or true/false states.\n *\n * Example:\n * ```html\n * <igx-switch [checked]=\"true\">\n *   Simple switch\n * </igx-switch>\n * ```\n */\n@Component({\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxSwitchComponent, multi: true }],\n    selector: 'igx-switch',\n    templateUrl: 'switch.component.html'\n})\nexport class IgxSwitchComponent implements ControlValueAccessor, EditorProvider {\n    /**\n     *@hidden\n     */\n    protected _value: any;\n    /**\n     * Returns reference to the native checkbox element.\n     * ```typescript\n     * let checkboxElement =  this.switch.nativeCheckbox;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('checkbox', { static: true }) public nativeCheckbox: ElementRef;\n    /**\n     * Returns reference to the native label element.\n     * ```typescript\n     * let labelElement =  this.switch.nativeLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('label', { static: true }) public nativeLabel;\n    /**\n     * Returns reference to the label placeholder element.\n     * ```typescript\n     * let labelPlaceholder =  this.switch.placeholderLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @ViewChild('placeholderLabel', { static: true }) public placeholderLabel;\n\n    /**\n     * Sets/gets the `id` of the switch component.\n     * If not set, the `id` of the first switch component will be `\"igx-switch-0\"`.\n     * ```html\n     * <igx-switch id=\"my-first-switch\"></igx-switch>\n     * ```\n     * ```typescript\n     * let switchId =  this.switch.id;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('attr.id')\n    @Input() public id = `igx-switch-${nextId++}`;\n    /**\n     * Sets/gets the id of the `label` element in the switch component.\n     * If not set, the label of the first switch component will have value `\"igx-switch-0-label\"`.\n     * ```html\n     * <igx-switch labelId=\"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let labelId =  this.switch.labelId;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public labelId = `${this.id}-label`;\n    /**\n     * Sets/gets the `value` attribute of the switch component.\n     * ```html\n     * <igx-switch [value] = \"switchValue\"></igx-switch>\n     * ```\n     * ```typescript\n     * let value =  this.switch.value;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public value: any;\n    /**\n     * Sets/gets the `name` attribute of the switch component.\n     * ```html\n     * <igx-switch name = \"Switch1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let name =  this.switch.name;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public name: string;\n    /**\n     * Sets/gets the value of the `tabindex` attribute.\n     * ```html\n     * <igx-switch [tabindex]=\"1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let tabIndex =  this.switch.tabindex;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public tabindex: number = null;\n    /**\n     * Sets/gets the position of the `label` in the switch component.\n     * If not set, `labelPosition` will have value `\"after\"`.\n     * ```html\n     * <igx-switch labelPosition=\"before\"></igx-switch>\n     * ```\n     * ```typescript\n     * let labelPosition =  this.switch.labelPosition;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public labelPosition: SwitchLabelPosition | string = 'after';\n    /**\n     * Enables/Disables the ripple effect\n     * If not set, `disableRipple` will have value `false`.\n     * ```html\n     * <igx-switch [disableRipple]=\"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isRippleDisabled = this.switch.disableRipple;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public disableRipple = false;\n    /**\n     * Sets/gets whether switch is required.\n     * If not set, `required` will have value `false`.\n     * ```html\n     * <igx-switch [required]=\"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isRequired = this.switch.required;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input() public required = false;\n    /**\n     * Sets/gets the `aria-labelledBy` attribute.\n     * If not set, the  value of `aria-labelledBy` will be equal to the value of `labelId` attribute.\n     * ```html\n     * <igx-switch aria-labelledby = \"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let ariaLabelledBy = this.switch.ariaLabelledBy;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input('aria-labelledby')\n    public ariaLabelledBy = this.labelId;\n    /**\n     * Sets/gets the value of the `aria-label` attribute.\n     * ```html\n     * <igx-switch aria-label=\"Label1\"></igx-switch>\n     * ```\n     * ```typescript\n     * let ariaLabel =  this.switch.ariaLabel;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @Input('aria-label')\n    public ariaLabel: string | null = null;\n    /**\n     * An event that is emitted after the switch state is changed.\n     * Provides references to the `IgxSwitchComponent` and the `checked` property as event arguments.\n     * @memberof IgxSwitchComponent\n     */\n    @Output()\n    readonly change: EventEmitter<IChangeSwitchEventArgs> = new EventEmitter<IChangeSwitchEventArgs>();\n    /**\n     *@hidden\n     * @memberof IgxSwitchComponent\n     */\n    private _onTouchedCallback: () => void = noop;\n    /**\n     *@hidden\n     * @memberof IgxSwitchComponent\n     */\n    private _onChangeCallback: (_: any) => void = noop;\n    /**\n     * Returns the class of the switch component.\n     * ```typescript\n     * let switchClass = this.switch.cssClass;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch')\n    public cssClass = 'igx-switch';\n    /**\n     * Sets/gets whether the switch is on or off.\n     * Default value is 'false'.\n     * ```html\n     *  <igx-switch [checked] = \"true\"></igx-switch>\n     * ```\n     * ```typescript\n     * let isChecked =  this.switch.checked;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--checked')\n    @Input() public checked = false;\n    /**\n     * Sets/gets the `disabled` attribute.\n     * Default value is `false`.\n     * ```html\n     * <igx-switch [disabled] = \"true\"><igx-switch>\n     * ```\n     * ```typescript\n     * let isDisabled =  this.switch.disabled;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--disabled')\n    @Input() public disabled = false;\n    /**\n     * Sets/gets whether the switch component is on focus.\n     * Default value is `false`.\n     * ```typescript\n     * this.switch.focused = true;\n     * ```\n     * ```typescript\n     * let isFocused =  this.switch.focused;\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    @HostBinding('class.igx-switch--focused')\n    public focused = false;\n    /**\n     *@hidden\n     */\n    public inputId = `${this.id}-input`;\n    /**\n     * Toggles the checked state of the switch.\n     * ```typescript\n     * this.switch.toggle();\n     * ```\n     * @memberof IgxSwitchComponent\n     */\n    public toggle() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.checked = !this.checked;\n        this.focused = false;\n        this.change.emit({ checked: this.checked, switch: this });\n        this._onChangeCallback(this.checked);\n    }\n    /**\n     *@hidden\n     */\n    public _onSwitchChange(event) {\n        event.stopPropagation();\n    }\n    /**\n     *@hidden\n     */\n    public _onSwitchClick(event) {\n        event.stopPropagation();\n        this.toggle();\n\n        if (isIE()) {\n            this.nativeCheckbox.nativeElement.blur();\n        }\n    }\n    /**\n     *@hidden\n     */\n    public _onLabelClick(event) {\n        this.toggle();\n    }\n    /**\n     *@hidden\n     */\n    public onFocus(event) {\n        this.focused = true;\n    }\n    /**\n     *@hidden\n     */\n    public onBlur(event) {\n        this.focused = false;\n        this._onTouchedCallback();\n    }\n    /**\n     *@hidden\n     */\n    public writeValue(value) {\n        this._value = value;\n        this.checked = !!this._value;\n    }\n    /** @hidden */\n    getEditElement() {\n        return this.nativeCheckbox.nativeElement;\n    }\n\n    /**\n     *@hidden\n     */\n    public get labelClass(): string {\n        switch (this.labelPosition) {\n            case SwitchLabelPosition.BEFORE:\n                return `${this.cssClass}__label--before`;\n            case SwitchLabelPosition.AFTER:\n            default:\n                return `${this.cssClass}__label`;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public registerOnChange(fn: (_: any) => void) { this._onChangeCallback = fn; }\n    /**\n     *@hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n}\n\nexport const IGX_SWITCH_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => IgxSwitchRequiredDirective),\n    multi: true\n};\n\n/* tslint:disable directive-selector */\n@Directive({\n    selector: `igx-switch[required][formControlName],\n    igx-switch[required][formControl],\n    igx-switch[required][ngModel]`,\n    providers: [IGX_SWITCH_REQUIRED_VALIDATOR]\n})\nexport class IgxSwitchRequiredDirective extends CheckboxRequiredValidator { }\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxSwitchComponent, IgxSwitchRequiredDirective],\n    exports: [IgxSwitchComponent, IgxSwitchRequiredDirective],\n    imports: [IgxRippleModule]\n})\nexport class IgxSwitchModule { }\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterContentInit,\n    AfterViewChecked,\n    AfterViewInit,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewChildren\n} from '@angular/core';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxIconModule } from '../icon/index';\n\nexport interface ISelectTabEventArgs {\n    tab: IgxTabComponent;\n    panel: IgxTabPanelComponent;\n}\n\nlet NEXT_ID = 0;\n\n@Directive({\n    selector: '[igxTab]'\n})\nexport class IgxTabTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n/**\n * **Ignite UI for Angular Tab Bar** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/tabbar.html)\n *\n * The Ignite UI Tab Bar enables the user to navigate among a number of content panels displayed in a single view.\n *\n * Example:\n * ```html\n * <igx-bottom-nav>\n *   <igx-tab-panel label=\"Tab 1\">Tab 1 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 2\">Tab 2 Content</igx-tab-panel>\n *   <igx-tab-panel label=\"Tab 3\">Tab 3 Content</igx-tab-panel>\n * </igx-bottom-nav>\n * ```\n */\n@Component({\n    selector: 'igx-bottom-nav',\n    templateUrl: 'tab-bar-content.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxBottomNavComponent implements AfterViewInit {\n\n    /**\n     * Gets the `IgxTabComponent` elements in the tab bar component created based on the provided panels.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.viewTabs;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ViewChildren(forwardRef(() => IgxTabComponent))\n    public viewTabs: QueryList<IgxTabComponent>;\n\n    /**\n     * Gets the `IgxTabComponent` elements in the tab bar component defined as content child.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.contentTabs;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ContentChildren(forwardRef(() => IgxTabComponent))\n    public contentTabs: QueryList<IgxTabComponent>;\n\n    /**\n     * Gets the `IgxTabComponent` elements for this bottom navigation component.\n     * First try to get them as content children if not available get them as view children.\n     * ```typescript\n     * let tabs: QueryList<IgxTabComponent> =  this.tabBar.tabs;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public get tabs(): QueryList<IgxTabComponent> {\n        return this.hasContentTabs ? this.contentTabs : this.viewTabs;\n    }\n\n    /**\n     * Gets the `IgxTabPanelComponent` elements in the tab bar component.\n     * ```typescript\n     * let tabPanels: QueryList<IgxTabPanelComponent> = this.tabBar.panels;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @ContentChildren(forwardRef(() => IgxTabPanelComponent))\n    public panels: QueryList<IgxTabPanelComponent>;\n\n    /**\n     * Sets/gets the `id` of the tab bar.\n     * If not set, the `id` of the first tab bar component will be `\"igx-bottom-nav-0\"`.\n     * ```html\n     * <igx-bottom-nav id = \"my-first-tab-bar\"></igx-bottom-nav>\n     * ```\n     * ```typescript\n     * let tabBarId =  this.tabBar.id;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-bottom-nav-${NEXT_ID++}`;\n\n    /**\n     * Emits an event when a new tab is selected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTableSelected) = \"onTabSelected($event)\"><igx-bottom-nav>\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @Output() public onTabSelected = new EventEmitter<ISelectTabEventArgs>();\n\n    /**\n     * Emits an event when a tab is deselected.\n     * Provides references to the `IgxTabComponent` and `IgxTabPanelComponent` as event arguments.\n     * ```html\n     * <igx-bottom-nav (onTabDeselected) = \"onTabDeselected($event)\"><igx-bottom-nav>\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    @Output() public onTabDeselected = new EventEmitter<ISelectTabEventArgs>();\n\n    /**\n     * Gets the `index` of selected tab/panel in the respective collection.\n     * ```typescript\n     * let index =  this.tabBar.selectedIndex;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public selectedIndex = -1;\n\n    /**\n     * Gets the `itemStyle` of the tab bar.\n     * ```typescript\n     * let itemStyle =  this.tabBar.itemStyle;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    public get itemStyle(): string {\n        return this._itemStyle;\n    }\n\n    /**\n     *@hidden\n     */\n    public get hasContentTabs(): boolean {\n        return (this.contentTabs && this.contentTabs.length > 0);\n    }\n\n    /**\n     *@hidden\n     */\n    private _itemStyle = 'igx-bottom-nav';\n\n    /**\n     * Gets the selected tab in the tab bar.\n     * ```typescript\n     * let tab =  this.tabBar.selectedTab;\n     * ```\n     * @memberof IgxBottomNavComponent\n     */\n    get selectedTab(): IgxTabComponent {\n        if (this.tabs && this.selectedIndex !== undefined) {\n            return this.tabs.toArray()[this.selectedIndex];\n        }\n    }\n\n    constructor(private _element: ElementRef) {\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewInit() {\n        // initial selection\n        setTimeout(() => {\n            if (this.selectedIndex === -1) {\n                const selectablePanels = this.panels.filter((p) => !p.disabled);\n                const panel = selectablePanels[0];\n                if (panel) {\n                    panel.select();\n                }\n            }\n        }, 0);\n    }\n\n    /**\n     *@hidden\n     */\n    @HostListener('onTabSelected', ['$event'])\n    public _selectedPanelHandler(args) {\n        if (this.hasContentTabs) {\n            this.selectedIndex = args.tab.index;\n            this.contentTabs.forEach((t) => {\n                if (t !== args.tab) {\n                    this._deselectTab(t);\n                }\n            });\n        } else {\n            if (args.panel) {\n                this.selectedIndex = args.panel.index;\n                this.panels.forEach((p) => {\n                    if (p.index !== this.selectedIndex) {\n                        this._deselectPanel(p);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    private _deselectPanel(panel: IgxTabPanelComponent) {\n        // Cannot deselect the selected tab - this will mean that there will be not selected tab left\n        if (panel.disabled || this.selectedTab.index === panel.index) {\n            return;\n        }\n\n        panel.isSelected = false;\n        this.onTabDeselected.emit({ tab: this.tabs[panel.index], panel });\n    }\n\n    private _deselectTab(aTab: IgxTabComponent) {\n        aTab.isSelected = false;\n        this.onTabDeselected.emit({ tab: aTab, panel: null });\n    }\n}\n\n// ================================= IgxTabPanelComponent ======================================\n\n@Component({\n    selector: 'igx-tab-panel',\n    templateUrl: 'tab-panel.component.html'\n})\nexport class IgxTabPanelComponent implements AfterContentInit, AfterViewChecked {\n\n    /**\n     *@hidden\n     */\n    private _itemStyle = 'igx-tab-panel';\n\n    /**\n     *@hidden\n     */\n    private _isSelected = false;\n\n    /**\n     * Sets/gets the `label` of the tab panel.\n     * ```html\n     * <igx-tab-panel [label] = \"'Tab panel label'\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelLabel = this.tabPanel.label;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public label: string;\n\n    /**\n     * Sets/gets  the `icon` of the tab panel.\n     * ```html\n     * <igx-tab-panel [icon] = \"panel_icon\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let tabPanelIcon =  this.tabPanel.icon;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public icon: string;\n\n    /**\n     * Sets/gets whether the tab panel is disabled.\n     * ```html\n     * <igx-tab-panel [disabled] = \"true\"><igx-tab-panel>\n     * ```\n     * ```typescript\n     * let isDisabled = this.tabPanel.disabled;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @Input() public disabled: boolean;\n\n    /**\n     * Gets the role of the tab panel.\n     * ```typescript\n     * let tabPanelRole = this.tabPanel.role;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('attr.role') public role = 'tabpanel';\n\n    /**\n     * Gets whether a tab panel will have `igx-bottom-nav__panel` class.\n     * ```typescript\n     * let styleClass = this.tabPanel.styleClass;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('class.igx-bottom-nav__panel')\n    get styleClass(): boolean {\n        return (!this.isSelected);\n    }\n\n    /**\n     * Sets/gets whether a tab panel is selected.\n     * ```typescript\n     * this.tabPanel.isSelected = true;\n     * ```\n     * ```typescript\n     * let isSelected =  this.tabPanel.isSelected;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    @HostBinding('class.igx-bottom-nav__panel--selected')\n    public get isSelected(): boolean {\n        return this._isSelected;\n    }\n    public set isSelected(newValue: boolean) {\n        if (this._isSelected !== newValue) {\n            if (newValue) {\n                this.select();\n            } else {\n                this._isSelected = newValue;\n            }\n        }\n    }\n\n    /**\n     * Gets the `itemStyle` of the tab panel.\n     * ```typescript\n     * let itemStyle = this.tabPanel.itemStyle;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    public get itemStyle(): string {\n        return this._itemStyle;\n    }\n\n    /**\n     * Gets the tab associated with the panel.\n     * ```typescript\n     * let tab = this.tabPanel.relatedTab;\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get relatedTab(): IgxTabComponent {\n        if (this._tabBar.tabs) {\n            return this._tabBar.tabs.toArray()[this.index];\n        }\n    }\n\n    /**\n     * Gets the changes and updates accordingly applied to the tab/panel.\n     *\n     * @memberof IgxTabComponent\n     */\n    get changesCount(): number {\n        return this.relatedTab ? this.relatedTab.changesCount : 0;\n    }\n\n    /**\n     * Gets the index of a panel in the panels collection.\n     * ```typescript\n     * let panelIndex =  this.tabPanel.index\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get index() {\n        if (this._tabBar.panels) {\n            return this._tabBar.panels.toArray().indexOf(this);\n        }\n    }\n\n    /**\n     * Gets the tab template.\n     * ```typescript\n     * let tabTemplate = this.tabPanel.customTabTemplate\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    get customTabTemplate(): TemplateRef<any> {\n        return this._tabTemplate;\n    }\n\n    /**\n     * Sets the tab template.\n     * ```typescript\n     * this.tabPanel.customTabTemplate(tabTemplate);\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    set customTabTemplate(template: TemplateRef<any>) {\n        this._tabTemplate = template;\n    }\n\n    /**\n     *@hidden\n     */\n    private _tabTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTabTemplateDirective, { read: IgxTabTemplateDirective, static: true })\n    protected tabTemplate: IgxTabTemplateDirective;\n\n    constructor(private _tabBar: IgxBottomNavComponent, private _element: ElementRef) {\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.tabTemplate) {\n            this._tabTemplate = this.tabTemplate.template;\n        }\n    }\n\n    /**\n     *@hidden\n     */\n    public ngAfterViewChecked() {\n        this._element.nativeElement.setAttribute('aria-labelledby', `igx-tab-${this.index}`);\n        this._element.nativeElement.setAttribute('id', `igx-bottom-nav__panel-${this.index}`);\n    }\n\n    /**\n     * Selects the current tab and the tab panel.\n     * ```typescript\n     * this.tabPanel.select();\n     * ```\n     * @memberof IgxTabPanelComponent\n     */\n    public select() {\n        if (this.disabled || this._tabBar.selectedIndex === this.index) {\n            return;\n        }\n\n        this._isSelected = true;\n        this._tabBar.onTabSelected.emit({ tab: this._tabBar.tabs.toArray()[this.index], panel: this });\n    }\n}\n\n// ======================================= IgxTabComponent ==========================================\n\n@Component({\n    selector: 'igx-tab',\n    templateUrl: 'tab.component.html'\n})\nexport class IgxTabComponent {\n    /**\n     * Gets the `role` attribute.\n     * ```typescript\n     * let tabRole = this.tab.role;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @HostBinding('attr.role')\n    public role = 'tab';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.id')\n    public id = 'igx-tab-' + this.index;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = this.label;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-disabled')\n    public ariaDisabled = this.disabled;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-selected')\n    public ariaSelected = this.isSelected;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-controls')\n    public ariaControls = 'igx-tab-panel-' + this.index;\n\n    /**\n     * Gets the panel associated with the tab.\n     * ```typescript\n     * let tabPanel =  this.tab.relatedPanel;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    public relatedPanel: IgxTabPanelComponent;\n\n    /**\n     *@hidden\n     */\n    private _label: string;\n\n    /**\n     * Sets/gets the `label` of the tab panel.\n     * ```html\n     * <igx-tab [label] = \"'Tab label'\"><igx-tab>\n     * ```\n     * ```typescript\n     * let tabLabel = this.tab.label;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    public get label(): string {\n        return this.relatedPanel ? this.relatedPanel.label : this._label;\n    }\n    public set label(newValue: string) {\n        if (this.relatedPanel) {\n            this.relatedPanel.label = newValue;\n        }\n        this._label = newValue;\n    }\n\n    /**\n     *@hidden\n     */\n    private _icon: string;\n\n    /**\n     * Sets/gets  the `icon` of the tab panel.\n     * ```html\n     * <igx-tab [icon] = \"tab_icon\"><igx-tab>\n     * ```\n     * ```typescript\n     * let tabIcon =  this.tab.icon;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    public get icon(): string {\n        return this.relatedPanel ? this.relatedPanel.icon : this._icon;\n    }\n    public set icon(newValue: string) {\n        if (this.relatedPanel) {\n            this.relatedPanel.icon = newValue;\n        }\n        this._icon = newValue;\n    }\n\n    /**\n     *@hidden\n     */\n    private _changesCount = 0; // changes and updates accordingly applied to the tab.\n\n    /**\n     * Gets the changes and updates accordingly applied to the tab.\n     *\n     * @memberof IgxTabComponent\n     */\n    get changesCount(): number {\n        return this._changesCount;\n    }\n\n    private _disabled = false;\n\n    /**\n     * Gets whether the tab is disabled.\n     * ```typescript\n     * let isDisabled = this.tab.disabled;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    get disabled(): boolean {\n        return this.relatedPanel ? this.relatedPanel.disabled : this._disabled;\n    }\n    set disabled(newValue: boolean) {\n        if (this.relatedPanel) {\n            this.relatedPanel.disabled = newValue;\n        } else {\n            this._disabled = newValue;\n        }\n    }\n\n    public _selected = false;\n\n    /**\n     * Gets whether the tab is selected.\n     * ```typescript\n     * let isSelected  = this.tab.isSelected;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    @Input()\n    set isSelected(newValue: boolean) {\n        if (this.relatedPanel) {\n            this.relatedPanel.isSelected = newValue;\n        } else if (this._selected !== newValue) {\n            this._selected = newValue;\n            if (this._selected) {\n                this._tabBar.onTabSelected.emit({ tab: this, panel: null });\n            }\n        }\n    }\n    get isSelected(): boolean {\n        return this.relatedPanel ? this.relatedPanel.isSelected : this._selected;\n    }\n\n    @HostBinding('class.igx-bottom-nav__menu-item--selected')\n    public get cssClassSelected(): boolean {\n        return this.isSelected;\n    }\n\n    @HostBinding('class.igx-bottom-nav__menu-item--disabled')\n    public get cssClassDisabled(): boolean {\n        return this.disabled;\n    }\n\n    @HostBinding('class.igx-bottom-nav__menu-item')\n    public get cssClass(): boolean {\n        return (!this.disabled && !this.isSelected);\n    }\n\n    /**\n     * Gets the `index` of the tab.\n     * ```typescript\n     * let tabIndex = this.tab.index;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    public get index(): number {\n        if (this._tabBar.tabs) {\n            return this._tabBar.tabs.toArray().indexOf(this);\n        }\n    }\n\n    /**@hidden*/\n    @ViewChild('defaultTabTemplate', { read: TemplateRef, static: true })\n    protected defaultTabTemplate: TemplateRef<any>;\n\n    /**@hidden*/\n    @ContentChild(IgxTabTemplateDirective, { read: IgxTabTemplateDirective, static: true })\n    protected customTabTemplateDir: IgxTabTemplateDirective;\n\n    /**\n     * Returns the `template` for this IgxTabComponent.\n     * ```typescript\n     * let tabItemTemplate = this.tabItem.template;\n     * ```\n     * @memberof IgxTabComponent\n     */\n    public get template(): TemplateRef<any> {\n        if (this.relatedPanel && this.relatedPanel.customTabTemplate) {\n            return this.relatedPanel.customTabTemplate;\n        }\n        if (this.customTabTemplateDir) {\n            return this.customTabTemplateDir.template;\n        }\n        return this.defaultTabTemplate;\n    }\n\n    /**\n     * Returns the `context` object for the template of this `IgxTabComponent`.\n     * ```typescript\n     * let tabItemContext = this.tabItem.context;\n     * ```\n     */\n    public get context(): any {\n        return this.relatedPanel ? this.relatedPanel : this;\n    }\n\n    constructor(private _tabBar: IgxBottomNavComponent, private _element: ElementRef) {\n    }\n\n    /**\n     * Selects the current tab and the associated panel.\n     * ```typescript\n     * this.tab.select();\n     * ```\n     * @memberof IgxTabComponent\n     */\n    public select() {\n        if (this.relatedPanel) {\n            this.relatedPanel.select();\n        } else {\n            this._selected = true;\n            this._tabBar.onTabSelected.emit({ tab: this, panel: null });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('click')\n    public onClick() {\n        this.select();\n    }\n\n    public elementRef(): ElementRef {\n        return this._element;\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],\n    exports: [IgxBottomNavComponent, IgxTabPanelComponent, IgxTabComponent, IgxTabTemplateDirective],\n    imports: [CommonModule, IgxBadgeModule, IgxIconModule]\n})\nexport class IgxBottomNavModule {\n}\n","import { ElementRef, QueryList, EventEmitter } from '@angular/core';\n\n/** @hidden */\nexport abstract class IgxTabsBase {\n    selectedIndicator: ElementRef<any>;\n    tabs: QueryList<IgxTabItemBase>;\n    groups: QueryList<IgxTabsGroupBase>;\n    offset: number;\n    selectedIndex: number;\n    viewPort: ElementRef;\n    contentsContainer: ElementRef;\n    tabsContainer: ElementRef;\n    itemsContainer: ElementRef;\n    headerContainer: ElementRef;\n    onTabItemSelected: EventEmitter<{}>; // TODO: Define event arg interface!\n    hasContentTabs: boolean;\n    scrollElement(element: any, scrollRight: boolean) {}\n}\n\n/** @hidden */\nexport interface IgxTabItemBase {\n    nativeTabItem: ElementRef;\n    select(focusDelay?: number);\n}\n\n/** @hidden */\nexport interface IgxTabsGroupBase {\n    select(focusDelay?: number);\n}\n","import {\n    Directive,\n    HostBinding,\n    TemplateRef\n} from '@angular/core';\nimport { IgxTabsBase } from './tabs.common';\n\nenum ButtonStyle {\n    VISIBLE = 'visible',\n    HIDDEN = 'hidden',\n    NOT_DISPLAYED = 'not_displayed'\n}\n\n@Directive({\n    selector: '[igxRightButtonStyle]'\n})\n\nexport class IgxRightButtonStyleDirective {\n    constructor(public tabs: IgxTabsBase) {\n    }\n\n    @HostBinding('class.igx-tabs__header-button')\n    get visibleCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.VISIBLE) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--hidden')\n    get hiddenCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.HIDDEN) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--none')\n    get notDisplayedCSS(): boolean {\n        return (this.getRightButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;\n    }\n\n    private getRightButtonStyle(): string {\n        const viewPortWidth = this.tabs.viewPort.nativeElement.offsetWidth;\n\n        // We use this hacky way to get the width of the itemsContainer,\n        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.\n        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;\n        let itemsContainerWidth = 0;\n        if (itemsContainerChildrenCount > 1) {\n            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];\n            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;\n        }\n        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;\n        const offset = this.tabs.offset;\n        const total = offset + viewPortWidth;\n\n        // Fix for IE 11, a difference is accumulated from the widths calculations.\n        if (itemsContainerWidth - headerContainerWidth <= 1 && offset === 0) {\n            return ButtonStyle.NOT_DISPLAYED;\n        }\n\n        if (itemsContainerWidth > total) {\n            return ButtonStyle.VISIBLE;\n        } else {\n            return ButtonStyle.HIDDEN;\n        }\n    }\n}\n\n@Directive({\n    selector: '[igxLeftButtonStyle]'\n})\n\nexport class IgxLeftButtonStyleDirective {\n    constructor(public tabs: IgxTabsBase) {\n    }\n\n    @HostBinding('class.igx-tabs__header-button')\n    get visibleCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.VISIBLE) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--hidden')\n    get hiddenCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.HIDDEN) ? true : false;\n    }\n\n    @HostBinding('class.igx-tabs__header-button--none')\n    get notDisplayedCSS(): boolean {\n        return (this.getLeftButtonStyle() === ButtonStyle.NOT_DISPLAYED) ? true : false;\n    }\n\n    private getLeftButtonStyle(): string {\n        // We use this hacky way to get the width of the itemsContainer,\n        // because there is inconsistency in IE we cannot use offsetWidth or scrollOffset.\n        const itemsContainerChildrenCount = this.tabs.itemsContainer.nativeElement.children.length;\n        let itemsContainerWidth = 0;\n        if (itemsContainerChildrenCount > 1) {\n            const lastTab = this.tabs.itemsContainer.nativeElement.children[itemsContainerChildrenCount - 2];\n            itemsContainerWidth = lastTab.offsetLeft + lastTab.offsetWidth;\n        }\n        const headerContainerWidth = this.tabs.headerContainer.nativeElement.offsetWidth;\n        const offset = this.tabs.offset;\n        if (offset === 0) {\n            // Fix for IE 11, a difference is accumulated from the widths calculations.\n            if (itemsContainerWidth - headerContainerWidth <= 1) {\n                return ButtonStyle.NOT_DISPLAYED;\n            }\n            return ButtonStyle.HIDDEN;\n        } else {\n            return ButtonStyle.VISIBLE;\n        }\n    }\n}\n\n@Directive({\n    selector: '[igxTab]'\n})\nexport class IgxTabItemTemplateDirective {\n\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n","import {\n    AfterContentInit,\n    AfterViewChecked,\n    Component,\n    ContentChild,\n    ElementRef,\n    HostBinding,\n    Input,\n    TemplateRef,\n    HostListener\n} from '@angular/core';\n\nimport { IgxTabItemComponent } from './tab-item.component';\nimport { IgxTabItemTemplateDirective } from './tabs.directives';\nimport { IgxTabsBase, IgxTabsGroupBase } from './tabs.common';\n\n@Component({\n    selector: 'igx-tabs-group',\n    templateUrl: 'tabs-group.component.html'\n})\n\nexport class IgxTabsGroupComponent implements IgxTabsGroupBase, AfterContentInit, AfterViewChecked {\n\n    /**\n     * @hidden\n     */\n    private _isSelected = false;\n\n    /**\n    * An @Input property that allows you to enable/disable the `IgxTabGroupComponent`.\n    *```html\n    *<igx-tabs-group label=\"Tab 2  Lorem ipsum dolor sit\" icon=\"home\" [disabled]=\"true\">\n    *```\n    */\n    @Input()\n    public disabled = false;\n\n    /**\n    * An @Input property that sets the value of the `icon`.\n    * The value should be valid icon name from {@link https://material.io/tools/icons/?style=baseline}.\n    *```html\n    *<igx-tabs-group label=\"Tab 1\" icon=\"home\">\n    *```\n    */\n    @Input()\n    public icon: string;\n\n    /**\n    * An @Input property that sets the value of the `label`.\n    *```html\n    *<igx-tabs-group label=\"Tab 1\" icon=\"folder\">\n    *```\n    */\n    @Input()\n    public label: string;\n\n    /**\n     * Sets/gets whether a tab group is selected.\n     * ```typescript\n     * this.tabGroup.isSelected = true;\n     * ```\n     * ```typescript\n     * let isSelected = this.tabGroup.isSelected;\n     * ```\n     * @memberof IgxTabsGroupComponent\n     */\n    public get isSelected(): boolean {\n        return this._isSelected;\n    }\n    public set isSelected(newValue: boolean) {\n        if (this._isSelected !== newValue) {\n            if (newValue) {\n                this.select();\n            } else {\n                this._isSelected = newValue;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @ContentChild(IgxTabItemTemplateDirective, { read: IgxTabItemTemplateDirective, static: true })\n    protected tabTemplate: IgxTabItemTemplateDirective;\n\n    private _tabTemplate: TemplateRef<any>;\n\n    constructor(private _tabs: IgxTabsBase, private _element: ElementRef) {\n    }\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.role')\n    public role = 'tabpanel';\n\n    /**\n     * @hidden\n     */\n    @HostBinding('class.igx-tabs__group')\n    public styleClass = true;\n\n    @HostListener('window:resize', ['$event'])\n    public onResize(event) {\n        if (this.isSelected) {\n            this.transformContentAnimation(0);\n        }\n    }\n\n    /**\n     * An accessor that returns the `IgxTabItemComponent` component.\n     * ```typescript\n     * @ViewChild(\"MyTabsGroup\")\n     * public tab: IgxTabsGroupComponent;\n     * ngAfterViewInIt(){\n     *    let tabComponent = this.tab.relatedTab;\n     * }\n     * ```\n     */\n    get relatedTab(): IgxTabItemComponent {\n        if (this._tabs.tabs) {\n            return this._tabs.tabs.toArray()[this.index] as IgxTabItemComponent;\n        }\n    }\n\n    /**\n     * An accessor that returns the value of the index of the `IgxTabsGroupComponent`.\n     * ```typescript\n     * @ViewChild(\"MyTabsGroup\")\n     * public tab: IgxTabsGroupComponent;\n     * ngAfterViewInIt(){\n     *    let tabIndex = this.tab.index;\n     * }\n     * ```\n     */\n    get index(): number {\n        if (this._tabs.groups) {\n            return this._tabs.groups.toArray().indexOf(this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get customTabTemplate(): TemplateRef<any> {\n        return this._tabTemplate;\n    }\n\n    /**\n     *@hidden\n     */\n    set customTabTemplate(template: TemplateRef<any>) {\n        this._tabTemplate = template;\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterContentInit(): void {\n        if (this.tabTemplate) {\n            this._tabTemplate = this.tabTemplate.template;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewChecked() {\n        this._element.nativeElement.setAttribute('aria-labelledby', `igx-tab-item-${this.index}`);\n        this._element.nativeElement.setAttribute('id', `igx-tabs__group-${this.index}`);\n\n        if (this.isSelected) {\n            const tabItem = this.relatedTab.nativeTabItem.nativeElement;\n            this.transformContentAnimation(0);\n            this.transformIndicatorAnimation(tabItem);\n        }\n    }\n\n    /**\n     * A method that sets the focus on a tab.\n     * @memberof {@link IgxTabsGroupComponent}\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *public tab : IgxTabsGroupComponent;\n     *ngAfterViewInit(){\n     *    this.tab.select();\n     *}\n     *```\n     * @param focusDelay A number representing the expected delay.\n     */\n    public select(focusDelay = 200): void {\n        if (this.disabled || this.isSelected) {\n            return;\n        }\n\n        this._isSelected = true;\n        this.relatedTab.tabindex = 0;\n\n        if (focusDelay !== 0) {\n            setTimeout(() => {\n                this.relatedTab.nativeTabItem.nativeElement.focus();\n            }, focusDelay);\n        }\n        this.handleSelection();\n        this._tabs.onTabItemSelected.emit({ tab: this._tabs.tabs.toArray()[this.index], group: this });\n    }\n\n    private handleSelection(): void {\n        const tabElement = this.relatedTab.nativeTabItem.nativeElement;\n\n        // Scroll to the left\n        if (tabElement.offsetLeft < this._tabs.offset) {\n            this._tabs.scrollElement(tabElement, false);\n        }\n\n        // Scroll to the right\n        const viewPortOffsetWidth = this._tabs.viewPort.nativeElement.offsetWidth;\n        const delta = (tabElement.offsetLeft + tabElement.offsetWidth) - (viewPortOffsetWidth + this._tabs.offset);\n        // Fix for IE 11, a difference is accumulated from the widths calculations\n        if (delta > 1) {\n            this._tabs.scrollElement(tabElement, true);\n        }\n\n        this.transformContentAnimation(0.2);\n        this.transformIndicatorAnimation(tabElement);\n    }\n\n    private transformContentAnimation(duration: number): void {\n        const contentOffset = this._tabs.tabsContainer.nativeElement.offsetWidth * this.index;\n        this._tabs.contentsContainer.nativeElement.style.transitionDuration = `${duration}s`;\n        this._tabs.contentsContainer.nativeElement.style.transform = `translate(${-contentOffset}px)`;\n    }\n\n    private transformIndicatorAnimation(element: HTMLElement): void {\n        this._tabs.selectedIndicator.nativeElement.style.width = `${element.offsetWidth}px`;\n        this._tabs.selectedIndicator.nativeElement.style.transform = `translate(${element.offsetLeft}px)`;\n    }\n}\n","import {\n    Component,\n    ContentChild,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Input,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\n\nimport { IgxTabsGroupComponent } from './tabs-group.component';\nimport { IgxTabItemBase, IgxTabsBase } from './tabs.common';\nimport { IgxTabItemTemplateDirective } from './tabs.directives';\n\n@Component({\n    selector: 'igx-tab-item',\n    templateUrl: 'tab-item.component.html'\n})\n\nexport class IgxTabItemComponent implements IgxTabItemBase {\n\n    /**\n    * Gets the group associated with the tab.\n    * ```html\n    * const relatedGroup = this.tabbar.tabs.toArray()[1].relatedGroup;\n    * ```\n    */\n    @Input()\n    public relatedGroup: IgxTabsGroupComponent;\n\n    /**@hidden*/\n    private _icon: string;\n\n    /**\n    * An @Input property that sets the value of the `icon`.\n    * The value should be valid icon name from {@link https://material.io/tools/icons/?style=baseline}.\n    *```html\n    *<igx-tab-item label=\"Tab 1\" icon=\"home\">\n    *```\n    */\n    @Input()\n    public get icon(): string {\n        return this.relatedGroup ? this.relatedGroup.icon : this._icon;\n    }\n    public set icon(newValue: string) {\n        if (this.relatedGroup) {\n            this.relatedGroup.icon = newValue;\n        }\n        this._icon = newValue;\n    }\n\n    /**@hidden*/\n    private _label: string;\n\n    /**\n    * An @Input property that sets the value of the `label`.\n    *```html\n    *<igx-tabs-item label=\"Tab 2\" icon=\"folder\">\n    *```\n    */\n    @Input()\n    public get label(): string {\n        return this.relatedGroup ? this.relatedGroup.label : this._label;\n    }\n    public set label(newValue: string) {\n        if (this.relatedGroup) {\n            this.relatedGroup.label = newValue;\n        }\n        this._label = newValue;\n    }\n\n    /**@hidden*/\n    @ViewChild('defaultTabTemplate', { read: TemplateRef, static: true })\n    protected defaultTabTemplate: TemplateRef<any>;\n\n    /**@hidden*/\n    @ContentChild(IgxTabItemTemplateDirective, { read: IgxTabItemTemplateDirective, static: true })\n    protected customTabTemplateDir: IgxTabItemTemplateDirective;\n\n    private _nativeTabItem: ElementRef;\n    private _changesCount = 0; // changes and updates accordingly applied to the tab.\n    private _isSelected = false;\n    private _disabled = false;\n\n    constructor(private _tabs: IgxTabsBase, private _element: ElementRef) {\n        this._nativeTabItem = _element;\n    }\n\n    @HostBinding('class.igx-tabs__header-menu-item--selected')\n    public get provideCssClassSelected(): boolean {\n        return this.isSelected;\n    }\n\n    @HostBinding('class.igx-tabs__header-menu-item--disabled')\n    public get provideCssClassDisabled(): boolean {\n        return this.disabled;\n    }\n\n    @HostBinding('class.igx-tabs__header-menu-item')\n    public get provideCssClass(): boolean {\n        return (!this.disabled && !this.isSelected);\n    }\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.role')\n    public role = 'tab';\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.tabindex')\n    public tabindex;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.id')\n    public id = 'igx-tab-item-' + this.index;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-label')\n    public ariaLabel = this.label;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-disabled')\n    public ariaDisabled = this.disabled;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-selected')\n    public ariaSelected = this.isSelected;\n\n    /**\n     * @hidden @internal\n     */\n    @HostBinding('attr.aria-controls')\n    public ariaControls = 'igx-tab-item-group-' + this.index;\n\n    /**\n     * @hidden\n     */\n    @HostListener('click', ['$event'])\n    public onClick(event) {\n        this.select();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('window:resize', ['$event'])\n    public onResize(event) {\n        if (this.isSelected) {\n            this._tabs.selectedIndicator.nativeElement.style.visibility = 'visible';\n            this._tabs.selectedIndicator.nativeElement.style.width = `${this.nativeTabItem.nativeElement.offsetWidth}px`;\n            this._tabs.selectedIndicator.nativeElement.style.transform = `translate(${this.nativeTabItem.nativeElement.offsetLeft}px)`;\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        this.onKeyDown(false);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        this.onKeyDown(true);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.home', ['$event'])\n    public onKeydownHome(event: KeyboardEvent) {\n        event.preventDefault();\n        this.onKeyDown(false, 0);\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.end', ['$event'])\n    public onKeydownEnd(event: KeyboardEvent) {\n        event.preventDefault();\n        this.onKeyDown(false, this._tabs.tabs.toArray().length - 1);\n    }\n\n    /**\n     * @hidden\n     */\n    get changesCount(): number {\n        return this._changesCount;\n    }\n\n    /**\n     * @hidden\n     */\n    get nativeTabItem(): ElementRef {\n        return this._nativeTabItem;\n    }\n\n    /**\n    * \tGets whether the tab is disabled.\n    * ```\n    * const disabledItem = this.myTabComponent.tabs.first.disabled;\n    * ```\n    */\n    @Input()\n    get disabled(): boolean {\n        return this.relatedGroup ? this.relatedGroup.disabled : this._disabled;\n    }\n    set disabled(newValue: boolean) {\n        if (this.relatedGroup) {\n            this.relatedGroup.disabled = newValue;\n        } else {\n            this._disabled = newValue;\n        }\n    }\n\n    /**\n     * Gets whether the tab is selected.\n     * ```typescript\n     * const selectedItem = this.myTabComponent.tabs.first.isSelected;\n     * ```\n     */\n    @Input()\n    get isSelected(): boolean {\n        return this.relatedGroup ? this.relatedGroup.isSelected : this._isSelected;\n    }\n    set isSelected(newValue: boolean) {\n        if (this.relatedGroup) {\n            this.relatedGroup.isSelected = newValue;\n        } else if (this._isSelected !== newValue) {\n            this._isSelected = newValue;\n            if (this._isSelected) {\n                this.select();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    get index(): number {\n        if (this._tabs.tabs) {\n            return this._tabs.tabs.toArray().indexOf(this);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public select(focusDelay = 200): void {\n        if (this.relatedGroup) {\n            this.relatedGroup.select(focusDelay);\n        } else {\n            this._isSelected = true;\n            this._tabs.onTabItemSelected.emit({ tab: this, group: null });\n            this.handleTabSelectionAnimation();\n        }\n    }\n\n    private handleTabSelectionAnimation(): void {\n        const tabElement = this.nativeTabItem.nativeElement;\n\n        // Scroll to the left\n        if (tabElement.offsetLeft < this._tabs.offset) {\n            this._tabs.scrollElement(tabElement, false);\n        }\n\n        // Scroll to the right\n        const viewPortOffsetWidth = this._tabs.viewPort.nativeElement.offsetWidth;\n        const delta = (tabElement.offsetLeft + tabElement.offsetWidth) - (viewPortOffsetWidth + this._tabs.offset);\n        // Fix for IE 11, a difference is accumulated from the widths calculations\n        if (delta > 1) {\n            this._tabs.scrollElement(tabElement, true);\n        }\n\n        this.transformIndicatorAnimation(tabElement);\n    }\n\n    private transformIndicatorAnimation(element: HTMLElement): void {\n        if (this._tabs && this._tabs.selectedIndicator) {\n            this._tabs.selectedIndicator.nativeElement.style.visibility = `visible`;\n            this._tabs.selectedIndicator.nativeElement.style.width = `${element.offsetWidth}px`;\n            this._tabs.selectedIndicator.nativeElement.style.transform = `translate(${element.offsetLeft}px)`;\n        }\n    }\n\n    private onKeyDown(isLeftArrow: boolean, index = null): void {\n        const tabsArray = this._tabs.tabs.toArray();\n        if (index === null) {\n            index = (isLeftArrow)\n                ? (this._tabs.selectedIndex === 0) ? tabsArray.length - 1 : this._tabs.selectedIndex - 1\n                : (this._tabs.selectedIndex === tabsArray.length - 1) ? 0 : this._tabs.selectedIndex + 1;\n        }\n        const tab = tabsArray[index];\n        tab.select(200);\n    }\n\n    /**\n     * @hidden\n     */\n    public get template(): TemplateRef<any> {\n        if (this.relatedGroup && this.relatedGroup.customTabTemplate) {\n            return this.relatedGroup.customTabTemplate;\n        }\n        if (this.customTabTemplateDir) {\n            return this.customTabTemplateDir.template;\n        }\n        return this.defaultTabTemplate;\n    }\n\n    /**\n     * @hidden\n     */\n    public get context(): any {\n        return this.relatedGroup ? this.relatedGroup : this;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport {\n    AfterViewInit,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n    OnDestroy\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { IgxBadgeModule } from '../badge/badge.component';\nimport { IgxRippleModule } from '../directives/ripple/ripple.directive';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxTabItemComponent } from './tab-item.component';\nimport { IgxTabsGroupComponent } from './tabs-group.component';\nimport { IgxLeftButtonStyleDirective, IgxRightButtonStyleDirective, IgxTabItemTemplateDirective } from './tabs.directives';\nimport { IgxTabsBase } from './tabs.common';\n\nexport enum TabsType {\n    FIXED = 'fixed',\n    CONTENTFIT = 'contentfit'\n}\n\n@Component({\n    selector: 'igx-tabs',\n    templateUrl: 'tabs.component.html',\n    providers: [{ provide: IgxTabsBase, useExisting: IgxTabsComponent }]\n})\n\nexport class IgxTabsComponent implements IgxTabsBase, AfterViewInit, OnDestroy {\n\n    /**\n    * Provides an observable collection of all `IgxTabsGroupComponent`s.\n    * ```typescript\n    * const groupItems = this.myTabComponent.groups;\n    * ```\n    */\n    @ContentChildren(forwardRef(() => IgxTabsGroupComponent))\n    public groups: QueryList<IgxTabsGroupComponent>;\n\n    /**\n    * Provides an observable collection of all `IgxTabItemComponent`s defined in the page.\n    * ```typescript\n    * const tabItems = this.myTabComponent.contentTabs;\n    * ```\n    */\n    @ContentChildren(forwardRef(() => IgxTabItemComponent))\n    public contentTabs: QueryList<IgxTabItemComponent>;\n\n    /**\n    * An @Input property that sets the value of the `selectedIndex`.\n    * Default value is 0.\n    * ```html\n    * <igx-tabs selectedIndex=\"1\">\n    * ```\n    */\n    @Input()\n    public get selectedIndex(): number {\n        return this._selectedIndex;\n    }\n\n    public set selectedIndex(index: number) {\n        const newIndex = typeof index !== 'number' ? parseInt(index, 10) : index;\n        if (this._selectedIndex !== newIndex) {\n            this._selectedIndex = newIndex;\n            this.setSelectedGroup();\n        }\n    }\n\n    /**\n     * Defines the tab header sizing mode. You can choose between `contentfit` or `fixed`.\n     * By default the header sizing mode is `contentfit`.\n     * ```html\n     * <igx-tabs tabsType=\"fixed\">\n     *     <igx-tabs-group label=\"HOME\">Home</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     */\n    @Input('tabsType')\n    public tabsType: string | TabsType = 'contentfit';\n\n    /**\n    * @hidden\n    */\n    @Input()\n    public class = '';\n\n    /**\n     * Emitted when a tab item is deselected.\n     * ```html\n     * <igx-tabs (onTabItemDeselected)=\"itemDeselected($event)\">\n     *      <igx-tabs-group label=\"Tab 1\">This is Tab 1 content.</igx-tabs-group>\n     *      <igx-tabs-group label=\"Tab 2\">This is Tab 2 content.</igx-tabs-group>\n     * </igx-tabs>\n     * ```\n     * ```typescript\n     * itemDeselected(e){\n     *      const tabGroup = e.group;\n     *      const tabItem = e.tab;\n     * }\n     * ```\n     */\n    @Output() public onTabItemDeselected = new EventEmitter();\n\n    /**\n    * Emitted when a tab item is selected.\n    * ```html\n    * <igx-tabs (onTabItemSelected)=\"itemSelected($event)\">\n    *      <igx-tabs-group label=\"Tab 1\">This is Tab 1 content.</igx-tabs-group>\n    *      <igx-tabs-group label=\"Tab 2\">This is Tab 2 content.</igx-tabs-group>\n    * </igx-tabs>\n    * ```\n    * ```typescript\n    * itemSelected(e){\n    *      const tabGroup = e.group;\n    *      const tabItem = e.tab;\n    * }\n    * ```\n    */\n    @Output() public onTabItemSelected = new EventEmitter();\n\n    /**\n     * @hidden\n     */\n    @ViewChild('contentsContainer', { static: true })\n    public contentsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('headerContainer', { static: true })\n    public headerContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('itemsContainer', { static: true })\n    public itemsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('selectedIndicator', { static: false })\n    public selectedIndicator: ElementRef;\n\n    /**\n    * @hidden\n    */\n    @ViewChild('tabsContainer', { static: true })\n    public tabsContainer: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('viewPort', { static: true })\n    public viewPort: ElementRef;\n\n    /**\n     * Provides an observable collection of all `IgxTabItemComponent`s.\n     * ```typescript\n     * const tabItems = this.myTabComponent.viewTabs;\n     * ```\n     */\n    @ViewChildren(forwardRef(() => IgxTabItemComponent))\n    public viewTabs: QueryList<IgxTabItemComponent>;\n\n    /**\n     * Provides an observable collection of all `IgxTabItemComponent`s.\n     * First try to get them as content children if not available get them as view children.\n     * ```typescript\n     * const tabItems = this.myTabComponent.tabs;\n     * ```\n     */\n    public get tabs(): QueryList<IgxTabItemComponent> {\n        if (this.hasContentTabs) {\n            return this.contentTabs;\n        }\n        return this.viewTabs;\n    }\n\n    /**\n     *@hidden\n     */\n    public get hasContentTabs(): boolean {\n        return (this.contentTabs && this.contentTabs.length > 0);\n    }\n\n    /**\n     * @hidden\n     */\n    public calculatedWidth: number;\n\n    /**\n     * @hidden\n     */\n    public visibleItemsWidth: number;\n\n    /**\n     * @hidden\n     */\n    public offset = 0;\n\n    private _groupChanges$: Subscription;\n    private _selectedIndex = -1;\n\n    /**\n     * @hidden\n     */\n    @HostBinding('attr.class')\n    public get cssClass() {\n        const defaultStyle = `igx-tabs`;\n        const fixedStyle = `igx-tabs--fixed`;\n        const iconStyle = `igx-tabs--icons`;\n        const iconLabelFoundInGroups = this.groups.find((group) => group.icon != null && group.label != null);\n        const iconLabelFoundInTabs = this.contentTabs.find((tab) => tab.icon != null && tab.label != null);\n        let css;\n        switch (TabsType[this.tabsType.toUpperCase()]) {\n            case TabsType.FIXED: {\n                css = fixedStyle;\n                break;\n            }\n            default: {\n                css = defaultStyle;\n                break;\n            }\n        }\n\n        // Layout fix for items with icons\n        if (iconLabelFoundInGroups !== undefined || iconLabelFoundInTabs !== undefined) {\n            css = `${css} ${iconStyle}`;\n        }\n\n        return `${css} ${this.class}`;\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('onTabItemSelected', ['$event'])\n    public selectedGroupHandler(args) {\n        if (this.hasContentTabs) {\n            const theTabsArray = this.tabs.toArray();\n            if (this.selectedIndex !== -1 && this.selectedIndex !== args.tab.index && theTabsArray[this.selectedIndex] !== undefined) {\n                theTabsArray[this.selectedIndex].isSelected = false;\n                this.onTabItemDeselected.emit({ tab: theTabsArray[this.selectedIndex], groups: null });\n            }\n            this.selectedIndex = args.tab.index;\n        } else {\n            const prevSelectedIndex = this.selectedIndex;\n            if (prevSelectedIndex !== -1 && this.groups && this.groups.toArray()[prevSelectedIndex] !== undefined) {\n                this.onTabItemDeselected.emit(\n                    {\n                        tab: this.groups.toArray()[prevSelectedIndex].relatedTab,\n                        group: this.groups.toArray()[prevSelectedIndex]\n                    });\n            }\n            if (args.group) {\n                this.selectedIndex = args.group.index;\n            }\n            if (this.groups) {\n                this.groups.forEach((p) => {\n                    if (p.index !== this.selectedIndex) {\n                        this.deselectGroup(p);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollLeft(event): void {\n        this.scroll(false);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollRight(event): void {\n        this.scroll(true);\n    }\n\n    /**\n     * @hidden\n     */\n    public scrollElement(element: any, scrollRight: boolean): void {\n        const viewPortWidth = this.viewPort.nativeElement.offsetWidth;\n\n        this.offset = (scrollRight) ? element.offsetWidth + element.offsetLeft - viewPortWidth : element.offsetLeft;\n        this.itemsContainer.nativeElement.style.transform = `translate(${-this.offset}px)`;\n    }\n\n    /**\n     * Gets the selected `IgxTabItemComponent`.\n     * ```\n     * const selectedItem = this.myTabComponent.selectedTabItem;\n     * ```\n     */\n    get selectedTabItem(): IgxTabItemComponent {\n        if (this.tabs && this.selectedIndex !== undefined) {\n            return this.tabs.toArray()[this.selectedIndex];\n        }\n    }\n\n    constructor(private _element: ElementRef) {\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit() {\n        if (this._selectedIndex === -1) {\n            this.tabs.forEach((t) => {\n                if (t.isSelected) {\n                    this._selectedIndex = t.index;\n                }\n            });\n        }\n\n        if (!this.hasContentTabs && (this.selectedIndex < 0 || this.selectedIndex >= this.groups.length)) {\n            this._selectedIndex = 0;\n        }\n\n        requestAnimationFrame(() => {\n            this.setSelectedGroup();\n        });\n\n        this._groupChanges$ = this.groups.changes.subscribe(() => {\n            this.resetSelectionOnCollectionChanged();\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        if (this._groupChanges$) {\n            this._groupChanges$.unsubscribe();\n        }\n    }\n\n    private setSelectedGroup(): void {\n        requestAnimationFrame(() => {\n            if (this.hasContentTabs) {\n                if (this.selectedIndex < 0 || this.selectedIndex >= this.contentTabs.length) {\n                    this.selectedIndicator.nativeElement.style.visibility = 'hidden';\n                } else {\n                    this.selectGroupByIndex(this.selectedIndex);\n                }\n            } else {\n                if (this.selectedIndex < 0 || this.selectedIndex >= this.groups.length) {\n                    this._selectedIndex = 0;\n                }\n                this.selectGroupByIndex(this.selectedIndex);\n            }\n        });\n    }\n\n    private resetSelectionOnCollectionChanged(): void {\n        setTimeout(() => {\n            if (this.groups.toArray()[this.selectedIndex] !== undefined) {\n                // persist the selected index and applied it to the new collection\n                this.selectGroupByIndex(this.selectedIndex);\n            } else {\n                if (this.selectedIndex >= this.groups.length) {\n                    // in case the selected index is no longer valid, select the last group in the new collection\n                    this.selectGroupByIndex(this.groups.length - 1);\n                }\n            }\n        }, 0);\n    }\n\n    private selectGroupByIndex(selectedIndex: number): void {\n        if (this.hasContentTabs) {\n            const aTab = this.tabs.toArray()[selectedIndex];\n            if (aTab) {\n                aTab.select();\n            }\n        } else {\n            const selectableGroups = this.groups.filter((selectableGroup) => !selectableGroup.disabled);\n            const group = selectableGroups[selectedIndex];\n            if (group) {\n                group.select(0);\n            }\n        }\n    }\n\n    private deselectGroup(group: IgxTabsGroupComponent): void {\n        // Cannot deselect the selected tab - this will mean that there will be not selected tab left\n        if (group.disabled || this.selectedTabItem.index === group.index) {\n            return;\n        }\n\n        group.isSelected = false;\n        group.relatedTab.tabindex = -1;\n    }\n\n    private scroll(scrollRight: boolean): void {\n        const tabsArray = this.tabs.toArray();\n        for (const tab of tabsArray) {\n            const element = tab.nativeTabItem.nativeElement;\n            if (scrollRight) {\n                if (element.offsetWidth + element.offsetLeft > this.viewPort.nativeElement.offsetWidth + this.offset) {\n                    this.scrollElement(element, scrollRight);\n                    break;\n                }\n            } else {\n                if (element.offsetWidth + element.offsetLeft >= this.offset) {\n                    this.scrollElement(element, scrollRight);\n                    break;\n                }\n            }\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxTabsComponent,\n        IgxTabsGroupComponent,\n        IgxTabItemComponent,\n        IgxTabItemTemplateDirective,\n        IgxRightButtonStyleDirective,\n        IgxLeftButtonStyleDirective],\n    exports: [IgxTabsComponent,\n        IgxTabsGroupComponent,\n        IgxTabItemComponent,\n        IgxTabItemTemplateDirective,\n        IgxRightButtonStyleDirective,\n        IgxLeftButtonStyleDirective],\n    imports: [CommonModule, IgxBadgeModule, IgxIconModule, IgxRippleModule]\n})\n\nexport class IgxTabsModule {\n}\n","/**\n * This file contains all the directives used by the @link IgxTimePickerComponent.\n * You should generally not use them directly.\n * @preferred\n */\nimport {\n    Directive,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    TemplateRef\n} from '@angular/core';\nimport { IGX_TIME_PICKER_COMPONENT, IgxTimePickerBase } from './time-picker.common';\nimport { InteractionMode } from '../core/enums';\n\n/** @hidden */\n@Directive({\n    selector: '[igxItemList]'\n})\nexport class IgxItemListDirective {\n\n    @Input('igxItemList')\n    public type: string;\n\n    public isActive: boolean;\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private elementRef: ElementRef) { }\n\n    @HostBinding('attr.tabindex')\n    public tabindex = 0;\n\n    @HostBinding('class.igx-time-picker__column')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__hourList')\n    get hourCSS(): boolean {\n        return this.type === 'hourList';\n    }\n\n    @HostBinding('class.igx-time-picker__minuteList')\n    get minuteCSS(): boolean {\n        return this.type === 'minuteList';\n    }\n\n    @HostBinding('class.igx-time-picker__ampmList')\n    get ampmCSS(): boolean {\n        return this.type === 'ampmList';\n    }\n\n    @HostListener('focus')\n    public onFocus() {\n        this.isActive = true;\n    }\n\n    @HostListener('blur')\n    public onBlur() {\n        this.isActive = false;\n    }\n\n    private nextItem(): void {\n        switch (this.type) {\n            case 'hourList': {\n                this.timePicker.nextHour();\n                break;\n            }\n            case 'minuteList': {\n                this.timePicker.nextMinute();\n                break;\n            }\n            case 'ampmList': {\n                this.timePicker.nextAmPm();\n                break;\n            }\n        }\n    }\n\n    private prevItem(): void {\n        switch (this.type) {\n            case 'hourList': {\n                this.timePicker.prevHour();\n                break;\n            }\n            case 'minuteList': {\n                this.timePicker.prevMinute();\n                break;\n            }\n            case 'ampmList': {\n                this.timePicker.prevAmPm();\n                break;\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowdown', ['$event'])\n    public onKeydownArrowDown(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.nextItem();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowup', ['$event'])\n    public onKeydownArrowUp(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.prevItem();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowright', ['$event'])\n    public onKeydownArrowRight(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const listName = (event.target as HTMLElement).className;\n\n        if (listName.indexOf('hourList') !== -1 && this.timePicker.minuteList) {\n            this.timePicker.minuteList.nativeElement.focus();\n        } else if ((listName.indexOf('hourList') !== -1 || listName.indexOf('minuteList') !== -1) && this.timePicker.ampmList) {\n            this.timePicker.ampmList.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.arrowleft', ['$event'])\n    public onKeydownArrowLeft(event: KeyboardEvent) {\n        event.preventDefault();\n\n        const listName = (event.target as HTMLElement).className;\n\n        if (listName.indexOf('ampmList') !== -1 && this.timePicker.minuteList) {\n            this.timePicker.minuteList.nativeElement.focus();\n        } else if ((listName.indexOf('ampmList') !== -1 || listName.indexOf('minuteList') !== -1) && this.timePicker.hourList) {\n            this.timePicker.hourList.nativeElement.focus();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.enter', ['$event'])\n    public onKeydownEnter(event: KeyboardEvent) {\n        event.preventDefault();\n\n        if (this.timePicker.mode === InteractionMode.DropDown) {\n            this.timePicker.close();\n            return;\n        }\n        this.timePicker.okButtonClick();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.escape', ['$event'])\n    public onKeydownEscape(event: KeyboardEvent) {\n        event.preventDefault();\n\n        this.timePicker.cancelButtonClick();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('mouseover')\n    public onHover() {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('wheel', ['$event'])\n    public onScroll(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (event.deltaY > 0) {\n            this.nextItem();\n        } else if (event.deltaY < 0) {\n            this.prevItem();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('panmove', ['$event'])\n    public onPanMove(event) {\n        if (event.deltaY < 0) {\n            this.nextItem();\n        } else if (event.deltaY > 0) {\n            this.prevItem();\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxHourItem]'\n})\nexport class IgxHourItemDirective {\n\n    @Input('igxHourItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedHour;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedHour && this.itemList.isActive;\n    }\n\n    get isSelectedHour(): boolean {\n        return this.timePicker.selectedHour === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollHourIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxMinuteItem]'\n})\nexport class IgxMinuteItemDirective {\n\n    @Input('igxMinuteItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedMinute;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedMinute && this.itemList.isActive;\n    }\n\n    get isSelectedMinute(): boolean {\n        return this.timePicker.selectedMinute === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollMinuteIntoView(item);\n        }\n    }\n}\n\n/**\n * @hidden\n */\n@Directive({\n    selector: '[igxAmPmItem]'\n})\nexport class IgxAmPmItemDirective {\n\n    @Input('igxAmPmItem')\n    public value: string;\n\n    @HostBinding('class.igx-time-picker__item')\n    get defaultCSS(): boolean {\n        return true;\n    }\n\n    @HostBinding('class.igx-time-picker__item--selected')\n    get selectedCSS(): boolean {\n        return this.isSelectedAmPm;\n    }\n\n    @HostBinding('class.igx-time-picker__item--active')\n    get activeCSS(): boolean {\n        return this.isSelectedAmPm && this.itemList.isActive;\n    }\n\n    get isSelectedAmPm(): boolean {\n        return this.timePicker.selectedAmPm === this.value;\n    }\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT)\n    public timePicker: IgxTimePickerBase,\n        private itemList: IgxItemListDirective) { }\n\n    @HostListener('click', ['value'])\n    public onClick(item) {\n        if (item !== '') {\n            this.timePicker.scrollAmPmIntoView(item);\n        }\n    }\n}\n\n/**\n * This directive should be used to mark which ng-template will be used from IgxTimePicker when re-templating its input group.\n */\n@Directive({\n    selector: '[igxTimePickerTemplate]'\n})\nexport class IgxTimePickerTemplateDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n\n/**\n * This directive can be used to add custom action buttons to the dropdownb/dialog.\n */\n@Directive({\n    selector: '[igxTimePickerActions]'\n})\nexport class IgxTimePickerActionsDirective {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { ElementRef } from '@angular/core';\nimport { InteractionMode } from '../core/enums';\n\n/** @hidden */\nexport const IGX_TIME_PICKER_COMPONENT = 'IgxTimePickerComponentToken';\n\n/** @hidden */\nexport interface IgxTimePickerBase {\n    hourList: ElementRef;\n    minuteList: ElementRef;\n    ampmList: ElementRef;\n    selectedHour: string;\n    selectedMinute: string;\n    selectedAmPm: string;\n    format: string;\n    promptChar: string;\n    cleared: boolean;\n    mode: InteractionMode;\n    showHoursList: boolean;\n    showMinutesList: boolean;\n    showAmPmList: boolean;\n    nextHour();\n    prevHour();\n    nextMinute();\n    prevMinute();\n    nextAmPm();\n    prevAmPm();\n    okButtonClick(): boolean;\n    cancelButtonClick(): void;\n    scrollHourIntoView(item: string): void;\n    scrollMinuteIntoView(item: string): void;\n    scrollAmPmIntoView(item: string): void;\n    close(): void;\n    parseMask(preserveAmPm?: boolean): string;\n}\n\n","import { Pipe, PipeTransform, Inject} from '@angular/core';\nimport { IGX_TIME_PICKER_COMPONENT, IgxTimePickerBase } from './time-picker.common';\n\n\n/**\n * Formats `IgxTimePickerComponent` display value according to the `format` property,\n * when the input element loses focus.\n **/\n@Pipe({ name: 'displayFormat'})\nexport class TimeDisplayFormatPipe implements PipeTransform {\n\n     constructor(@Inject(IGX_TIME_PICKER_COMPONENT) private timePicker: IgxTimePickerBase) { }\n\n     transform(value: any): string {\n        let hour, minutes, amPM;\n\n        const maskAmPM = this.timePicker.parseMask();\n        const mask = this.timePicker.parseMask(false);\n        if (!value || value === mask || value === maskAmPM) {\n            return '';\n        }\n\n        const sections = value.split(/[\\s:]+/);\n\n        if (this.timePicker.showHoursList) {\n            hour = sections[0];\n        }\n\n        if (this.timePicker.showMinutesList) {\n            minutes = this.timePicker.showHoursList ? sections[1] : sections[0];\n        }\n\n        if (this.timePicker.showAmPmList) {\n            amPM = sections[sections.length - 1];\n        }\n\n        const format = this.timePicker.format;\n        const prompt = this.timePicker.promptChar;\n        const regExp = new RegExp(this.timePicker.promptChar, 'g');\n\n        if (format.indexOf('hh') !== -1 || format.indexOf('HH') !== -1 && hour.indexOf(prompt) !== -1) {\n           hour = hour === prompt + prompt ? '00' : hour.replace(regExp, '0');\n        }\n\n        if (format.indexOf('mm') !== -1 && minutes.indexOf(prompt) !== -1) {\n           minutes = minutes === prompt + prompt ? '00' : minutes.replace(regExp, '0');\n        }\n\n        if (format.indexOf('hh') === -1 && format.indexOf('HH') === -1 && hour !== undefined) {\n            hour = hour.indexOf(prompt) !== -1 ? hour.replace(regExp, '') : hour;\n            const hourVal = parseInt(hour, 10);\n            hour = !hourVal ? '0' : hourVal < 10 && hourVal !== 0 ? hour.replace('0', '') : hour;\n        }\n\n        if (format.indexOf('mm') === -1 && minutes !== undefined) {\n            minutes = minutes.indexOf(prompt) !== -1 ? minutes.replace(regExp, '') : minutes;\n            const minutesVal = parseInt(minutes, 10);\n            minutes = !minutesVal ? '0' : minutesVal < 10 && minutesVal !== 0 ? minutes.replace('0', '') : minutes;\n        }\n\n        if (format.indexOf('tt') !== -1 && (amPM !== 'AM' || amPM !== 'PM')) {\n           amPM = amPM.indexOf('p') !== -1 || amPM.indexOf('P') !== -1 ? 'PM' : 'AM';\n        }\n\n        let result = amPM ? `${hour}:${minutes} ${amPM}` : `${hour}:${minutes}`;\n\n        if (!hour) {\n            result = result.slice(result.indexOf(':') + 1, result.length);\n        }\n\n        if (!minutes) {\n            result = result.slice(0, result.indexOf(':'));\n            if (amPM) { result = result + ' ' + amPM; }\n        }\n\n        return result;\n    }\n}\n\n/**\n * Formats `IgxTimePickerComponent` display value according to the `format` property,\n * when the input element gets focus.\n **/\n@Pipe({ name: 'inputFormat' })\nexport class TimeInputFormatPipe implements PipeTransform {\n\n    constructor(@Inject(IGX_TIME_PICKER_COMPONENT) private timePicker: IgxTimePickerBase) { }\n\n    transform(value: any): string {\n        const prompt = this.timePicker.promptChar;\n        const regExp = new RegExp(prompt, 'g');\n\n        let mask, hour, minutes, amPM;\n\n        if (this.timePicker.cleared) {\n            this.timePicker.cleared = false;\n            mask = this.timePicker.parseMask(false);\n        } else {\n            mask = this.timePicker.parseMask();\n        }\n\n        if (!value || value === mask) {\n            return mask;\n        }\n\n        const sections = value.split(/[\\s:]+/);\n\n        if (this.timePicker.showHoursList) {\n            hour = sections[0];\n            hour = hour.replace(regExp, '');\n\n            const leadZeroHour = (parseInt(hour, 10) < 10 && !hour.startsWith('0')) || hour === '0';\n            hour = leadZeroHour ? '0' + hour : hour;\n        }\n\n        if (this.timePicker.showMinutesList) {\n            minutes = this.timePicker.showHoursList ? sections[1] : sections[0];\n            minutes = minutes.replace(regExp, '');\n\n            const leadZeroMinutes = (parseInt(minutes, 10) < 10 && !minutes.startsWith('0')) || minutes === '0';\n            minutes = leadZeroMinutes ? '0' + minutes : minutes;\n        }\n\n        if (this.timePicker.showAmPmList) {\n            amPM = sections[sections.length - 1];\n        }\n\n        let result = amPM ? `${hour}:${minutes} ${amPM}` : `${hour}:${minutes}`;\n\n        if (!hour) {\n            result = result.slice(result.indexOf(':') + 1, result.length);\n        }\n\n        if (!minutes) {\n            result = result.slice(0, result.indexOf(':'));\n            if (amPM) { result = result + ' ' + amPM; }\n        }\n\n        return result;\n    }\n}\n","import {\n    CommonModule\n} from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Output,\n    TemplateRef,\n    ViewChild,\n    ContentChild,\n    Injectable,\n    AfterViewInit\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { HAMMER_GESTURE_CONFIG, HammerGestureConfig } from '@angular/platform-browser';\nimport { IgxIconModule } from '../icon/index';\nimport { IgxInputGroupModule, IgxInputGroupComponent } from '../input-group/input-group.component';\nimport { IgxInputDirective } from '../directives/input/input.directive';\nimport {\n    IgxAmPmItemDirective,\n    IgxHourItemDirective,\n    IgxItemListDirective,\n    IgxMinuteItemDirective,\n    IgxTimePickerTemplateDirective,\n    IgxTimePickerActionsDirective\n} from './time-picker.directives';\nimport { Subject, fromEvent, interval, animationFrameScheduler } from 'rxjs';\nimport { EditorProvider } from '../core/edit-provider';\nimport { IgxTimePickerBase, IGX_TIME_PICKER_COMPONENT } from './time-picker.common';\nimport { AbsoluteScrollStrategy } from '../services/overlay/scroll';\nimport { AutoPositionStrategy } from '../services/overlay/position';\nimport { OverlaySettings } from '../services/overlay/utilities';\nimport { takeUntil, throttle } from 'rxjs/operators';\nimport { IgxButtonModule } from '../directives/button/button.directive';\nimport { IgxMaskModule } from '../directives/mask/mask.directive';\nimport { IgxOverlayOutletDirective, IgxToggleModule, IgxToggleDirective } from '../directives/toggle/toggle.directive';\nimport { TimeDisplayFormatPipe, TimeInputFormatPipe } from './time-picker.pipes';\nimport { ITimePickerResourceStrings, TimePickerResourceStringsEN } from '../core/i18n/time-picker-resources';\nimport { CurrentResourceStrings } from '../core/i18n/resources';\nimport { KEYS, CancelableBrowserEventArgs } from '../core/utils';\nimport { InteractionMode } from '../core/enums';\nimport { DeprecateProperty } from '../core/deprecateDecorators';\n\nlet NEXT_ID = 0;\n\nconst HOURS_POS = [0, 1, 2];\nconst MINUTES_POS = [3, 4, 5];\nconst AMPM_POS = [6, 7, 8];\n\nconst ITEMS_COUNT = 7;\n\n@Injectable()\nexport class TimePickerHammerConfig extends HammerGestureConfig {\n    public overrides = {\n        pan: { direction: Hammer.DIRECTION_VERTICAL, threshold: 1 }\n    };\n}\n\nexport interface IgxTimePickerValueChangedEventArgs {\n    oldValue: Date;\n    newValue: Date;\n}\n\nexport interface IgxTimePickerValidationFailedEventArgs {\n    timePicker: IgxTimePickerComponent;\n    currentValue: Date;\n    setThroughUI: boolean;\n}\n\n@Component({\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: IgxTimePickerComponent,\n            multi: true\n        },\n        {\n            provide: HAMMER_GESTURE_CONFIG,\n            useClass: TimePickerHammerConfig\n        },\n        {\n            provide: IGX_TIME_PICKER_COMPONENT,\n            useExisting: IgxTimePickerComponent\n        }\n    ],\n    selector: 'igx-time-picker',\n    templateUrl: 'time-picker.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ]\n})\nexport class IgxTimePickerComponent implements\n    IgxTimePickerBase,\n    ControlValueAccessor,\n    EditorProvider,\n    OnInit,\n    OnDestroy,\n    AfterViewInit {\n\n    /**\n     * An @Input property that sets the value of the `id` attribute.\n     * ```html\n     * <igx-time-picker [id]=\"'igx-time-picker-5'\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-time-picker-${NEXT_ID++}`;\n\n    /**\n     * An accessor that allows you to set a time using the `value` input.\n     * ```html\n     *public date: Date = new Date(Date.now());\n     *  //...\n     *<igx-time-picker [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set value(value: Date) {\n        if (this._isValueValid(value)) {\n            const oldVal = this._value;\n\n            this._value = value;\n            this._onChangeCallback(value);\n\n            const dispVal = this._formatTime(this.value, this.format);\n            if (this.mode === InteractionMode.DropDown && this._displayValue !== dispVal) {\n                this.displayValue = dispVal;\n            }\n\n            const args: IgxTimePickerValueChangedEventArgs = {\n                oldValue: oldVal,\n                newValue: value\n            };\n            this.onValueChanged.emit(args);\n        } else {\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: value,\n                setThroughUI: false\n            };\n            this.onValidationFailed.emit(args);\n        }\n    }\n\n    /**\n     * An accessor that returns the value of `igx-time-picker` component.\n     * ```html\n     *@ViewChild(\"MyPick\")\n     *public pick: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let pickSelect = this.pick.value;\n     * }\n     * ```\n     */\n    get value(): Date {\n        return this._value;\n    }\n\n    /**\n     * An @Input property that allows you to disable the `igx-time-picker` component. By default `disabled` is set to false.\n     * ```html\n     * <igx-time-picker [disabled]=\"'true'\" [vertical]=\"true\" format=\"h:mm tt\" ></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public disabled = false;\n\n    /**\n     * An accessor that sets the resource strings.\n     * By default it uses EN resources.\n    */\n    @Input()\n    set resourceStrings(value: ITimePickerResourceStrings) {\n        this._resourceStrings = Object.assign({}, this._resourceStrings, value);\n    }\n\n    /**\n     * An accessor that returns the resource strings.\n    */\n    get resourceStrings(): ITimePickerResourceStrings {\n        return this._resourceStrings;\n    }\n\n    /**\n     * An @Input property that renders OK button with custom text. By default `okButtonLabel` is set to OK.\n     * ```html\n     * <igx-time-picker okButtonLabel='SET' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set okButtonLabel(value: string) {\n        this._okButtonLabel = value;\n    }\n\n    /**\n     * An accessor that returns the label of ok button.\n    */\n    get okButtonLabel(): string {\n        if (this._okButtonLabel === null) {\n            return this.resourceStrings.igx_time_picker_ok;\n        }\n        return this._okButtonLabel;\n    }\n\n    /**\n     * An @Input property that renders cancel button with custom text.\n     * By default `cancelButtonLabel` is set to Cancel.\n     * ```html\n     * <igx-time-picker cancelButtonLabel='Exit' [value]=\"date\" format=\"h:mm tt\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    set cancelButtonLabel(value: string) {\n        this._cancelButtonLabel = value;\n    }\n\n    /**\n    * An accessor that returns the label of cancel button.\n    */\n    get cancelButtonLabel(): string {\n        if (this._cancelButtonLabel === null) {\n            return this.resourceStrings.igx_time_picker_cancel;\n        }\n        return this._cancelButtonLabel;\n    }\n\n    /**\n     * An @Input property that gets/sets the delta by which hour and minute items would be changed <br>\n     * when the user presses the Up/Down keys.\n     * By default `itemsDelta` is set to `{hours: 1, minutes:1}`\n     * ```html\n     *<igx-time-picker [itemsDelta]=\"{hours:3, minutes:5}\" id=\"time-picker\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public itemsDelta = { hours: 1, minutes: 1 };\n\n    /**\n     * An @Input property that allows you to set the `minValue` to limit the user input.\n     *```html\n     *public min: string = \"09:00\";\n     *  //..\n     *<igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [minValue]=\"min\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public minValue: string;\n\n    /**\n     * An @Input property that allows you to set the `maxValue` to limit the user input.\n     *```html\n     *public max: string = \"18:00\";\n     *  //..\n     *<igx-time-picker format=\"HH:mm\" [vertical]=\"true\" [maxValue]=\"max\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public maxValue: string;\n\n    /**\n     * An @Input property that determines the spin behavior. By default `isSpinLoop` is set to true.\n     *The minutes and hour spinning will wrap around by default.\n     *```html\n     *<igx-time-picker [isSpinLoop]=\"false\" id=\"time-picker\"></igx-time-picker>\n     *```\n     */\n    @Input()\n    public isSpinLoop = true;\n\n    /**\n     * An @Input property that Gets/Sets the orientation of the `igxTimePicker`. By default `vertical` is set to false.\n     * ```html\n     *<igx-time-picker [vertical]=\"true\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    public vertical = false;\n\n    /**\n     * An @Input property that Gets/Sets format of time while `igxTimePicker` does not have focus. <br>\n     * By default `format` is set to hh:mm tt. <br>\n     * List of time-flags: <br>\n     * `h` : hours field in 12-hours format without leading zero <br>\n     * `hh` : hours field in 12-hours format with leading zero <br>\n     * `H` : hours field in 24-hours format without leading zero <br>\n     * `HH` : hours field in 24-hours format with leading zero <br>\n     * `m` : minutes field without leading zero <br>\n     * `mm` : minutes field with leading zero <br>\n     * `tt` : 2 character string which represents AM/PM field <br>\n     * ```html\n     *<igx-time-picker format=\"HH:m\" id=\"time-picker\"></igx-time-picker>\n     * ```\n     */\n    @Input()\n    get format() {\n        return this._format || 'hh:mm tt';\n    }\n\n    set format(formatValue: string) {\n        this._format = formatValue;\n        this.mask = this._format.indexOf('tt') !== -1 ? '00:00 LL' : '00:00';\n\n        if (!this.showHoursList || !this.showMinutesList) {\n            this.mask = this.mask.slice(this.mask.indexOf(':') + 1, this.mask.length);\n        }\n\n        if (this.displayValue) {\n            this.displayValue = this._formatTime(this.value, this._format);\n        }\n    }\n\n    /**\n     * Sets the character used to prompt the user for input.\n     * Default value is \"'-'\".\n     * ```html\n     * <igx-time-picker [promptChar] = \"'_'\">\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public promptChar = '-';\n\n    /**\n     * An @Input property that allows you to switch the interaction mode between\n     * a dialog picker or dropdown with editable masked input.\n     * Deafult is dialog picker.\n     *```html\n     *public mode = InteractionMode.DROPDOWN;\n     *  //..\n     *<igx-time-picker [mode]=\"mode\"></igx-time-picker>\n     *```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public mode = InteractionMode.Dialog;\n\n    /**\n     * Determines the container the popup element should be attached to.\n     *\n     * ```html\n     * <div igxOverlayOutlet #outlet=\"overlay-outlet\"></div>\n     * //..\n     * <igx-time-picker [outlet]=\"outlet\"></igx-time-picker>\n     * //..\n     * ```\n     * Where `outlet` is an instance of `IgxOverlayOutletDirective` or an `ElementRef`.\n     */\n    @Input()\n    public outlet: IgxOverlayOutletDirective | ElementRef;\n\n    /**\n    * An @Input property that allows you to modify overlay positioning, interaction and scroll behavior.\n    * ```typescript\n    * const settings: OverlaySettings = {\n    *      closeOnOutsideClick: true,\n    *      modal: false\n    *  }\n    * ```\n    * ---\n    * ```html\n    * <igx-time-picker [overlaySettings]=\"settings\"></igx-time-picker>\n    * ```\n     * @memberof IgxTimePickerComponent\n     */\n    @Input()\n    public set overlaySettings(value: OverlaySettings) {\n        this._overlaySettings = value;\n    }\n\n    public get overlaySettings(): OverlaySettings {\n        return this._overlaySettings ? this._overlaySettings :\n            (this.mode === InteractionMode.Dialog ? this._dialogOverlaySettings : this._dropDownOverlaySettings);\n    }\n\n    /**\n     * Emitted when selection is made. The event contains the selected value. Returns {`oldValue`: `Date`, `newValue`: `Date`}.\n     *```typescript\n     * @ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onValueChanged(timepicker){\n     *    this.toast.show()\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker (onValueChanged)=\"onValueChanged($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"The value has been changed!\"></igx-toast>\n     *```\n     */\n    @Output()\n    public onValueChanged = new EventEmitter<IgxTimePickerValueChangedEventArgs>();\n\n    /**\n     * Emitted when an invalid value is being set. Returns {`timePicker`: `any`, `currentValue`: `Date`, `setThroughUI`: `boolean`}\n     * ```typescript\n     *public min: string = \"09:00\";\n     *public max: string = \"18:00\";\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onValidationFailed(timepicker){\n     *    this.toast.show();\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onValidationFailed)=\"onValidationFailed($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"Value must be between 09:00 and 18:00!\"></igx-toast>\n     * ```\n     */\n    @Output()\n    public onValidationFailed = new EventEmitter<IgxTimePickerValidationFailedEventArgs>();\n\n    /**\n     * @deprecated Use 'onOpened' instead.\n     * Emitted when a timePicker is being opened.\n     * ```html\n     *@ViewChild(\"toast\")\n     *private toast: IgxToastComponent;\n     *public onOpen(timepicker){\n     *    this.toast.show();\n     *}\n     * //...\n     * ```\n     * ```html\n     *<igx-time-picker [minValue]=\"min\" [maxValue]=\"max\" (onOpen)=\"onOpen($event)\"></igx-time-picker>\n     *<igx-toast #toast message=\"The time picker has been opened!\"></igx-toast>\n     * ```\n     */\n    @DeprecateProperty(`'onOpen' @Output property is deprecated. Use 'onOpened' instead.`)\n    @Output()\n    public get onOpen(): EventEmitter<IgxTimePickerComponent> {\n        return this._onOpen;\n    }\n\n    public set onOpen(val: EventEmitter<IgxTimePickerComponent>) {\n        this._onOpen = val;\n    }\n\n    /**\n     * Emitted when a timePicker is opened.\n     */\n    @Output()\n    public onOpened = new EventEmitter<IgxTimePickerComponent>();\n\n    /**\n     * @deprecated Use 'onClosed' instead.\n     * Emitted when a timePicker is being closed.\n     */\n    @DeprecateProperty(`'onClose' @Output property is deprecated. Use 'onClosed' instead.`)\n    @Output()\n    public get onClose(): EventEmitter<IgxTimePickerComponent> {\n        return this._onClose;\n    }\n\n    public set onClose(val: EventEmitter<IgxTimePickerComponent>) {\n        this._onClose = val;\n    }\n\n    /**\n     * Emitted when a timePicker is closed.\n     */\n    @Output()\n    public onClosed = new EventEmitter<IgxTimePickerComponent>();\n\n    /**\n     * Emitted when a timePicker is being closed.\n     */\n    @Output()\n    public onClosing = new EventEmitter<CancelableBrowserEventArgs>();\n\n    /**\n     * @hidden\n     */\n    @ViewChild('hourList', { static: false })\n    public hourList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('minuteList', { static: false })\n    public minuteList: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('ampmList', { static: false })\n    public ampmList: ElementRef;\n\n    /*\n     * @hidden\n     */\n    @ViewChild('defaultTimePickerTemplate', { read: TemplateRef, static: true })\n    protected defaultTimePickerTemplate: TemplateRef<any>;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTimePickerTemplateDirective, { read: IgxTimePickerTemplateDirective, static: true })\n    protected timePickerTemplateDirective: IgxTimePickerTemplateDirective;\n\n    /**\n     *@hidden\n     */\n    @ContentChild(IgxTimePickerActionsDirective, { read: IgxTimePickerActionsDirective, static: false })\n    public timePickerActionsDirective: IgxTimePickerActionsDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxInputDirective, { read: ElementRef, static: false })\n    private _input: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild(IgxToggleDirective, { static: true })\n    public toggleRef: IgxToggleDirective;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('input', { read: ElementRef, static: false })\n    private input: ElementRef;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('group', { read: IgxInputGroupComponent, static: false })\n    private group: IgxInputGroupComponent;\n\n    /**\n     * @hidden\n     */\n    @ViewChild('dropdownInputTemplate', { read: TemplateRef, static: true })\n    private dropdownInputTemplate: TemplateRef<any>;\n\n    private _overlaySettings: OverlaySettings;\n\n    /**\n     * @hidden\n     */\n    public _hourItems = [];\n    /**\n     * @hidden\n     */\n    public _minuteItems = [];\n    /**\n     * @hidden\n     */\n    public _ampmItems = [];\n\n    /**\n     * @hidden\n    */\n    public cleared = false;\n    /**\n     * @hidden\n    */\n    public isNotEmpty = false;\n    /**\n     * @hidden\n    */\n    public displayFormat = new TimeDisplayFormatPipe(this);\n    /**\n     * @hidden\n    */\n    public inputFormat = new TimeInputFormatPipe(this);\n\n    /**\n     * @hidden\n     */\n    public selectedHour: string;\n    /**\n     * @hidden\n     */\n    public selectedMinute: string;\n    /**\n     * @hidden\n     */\n    public selectedAmPm: string;\n\n    private _value: Date;\n    private _resourceStrings = CurrentResourceStrings.TimePickerResStrings;\n    private _okButtonLabel = null;\n    private _cancelButtonLabel = null;\n    private _format: string;\n    private _mask: string;\n    private _displayValue: string;\n\n    private _isHourListLoop = this.isSpinLoop;\n    private _isMinuteListLoop = this.isSpinLoop;\n\n    private _hourView = [];\n    private _minuteView = [];\n    private _ampmView = [];\n\n    private _dateFromModel: Date;\n    private _destroy$ = new Subject<boolean>();\n    private _dropDownOverlaySettings: OverlaySettings;\n    private _dialogOverlaySettings: OverlaySettings;\n\n    private _prevSelectedHour: string;\n    private _prevSelectedMinute: string;\n    private _prevSelectedAmPm: string;\n\n    private _onOpen = new EventEmitter<IgxTimePickerComponent>();\n    private _onClose = new EventEmitter<IgxTimePickerComponent>();\n\n    private _onTouchedCallback: () => void = () => { };\n    private _onChangeCallback: (_: Date) => void = () => { };\n\n    /**\n     * @hidden\n    */\n    get mask(): string {\n        return this._mask || '00:00 LL';\n    }\n\n    set mask(val: string) {\n        this._mask = val;\n    }\n\n    /**\n     * @hidden\n     */\n    get displayValue(): string {\n        if (this._displayValue === undefined) {\n            return this._formatTime(this.value, this.format);\n        }\n        return this._displayValue;\n    }\n\n    set displayValue(value: string) {\n        this._displayValue = value;\n    }\n\n    /**\n     * Returns the current time formatted as string using the `format` option.\n     * If there is no set time the return is an empty string.\n     *```typescript\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let time = this.picker.displayTime;\n     *}\n     *```\n     */\n    public get displayTime(): string {\n        if (this.value) {\n            return this._formatTime(this.value, this.format);\n        }\n        return '';\n    }\n\n    /**\n     * @hidden\n     */\n    get hourView(): string[] {\n        return this._hourView;\n    }\n\n    /**\n     * @hidden\n     */\n    get minuteView(): string[] {\n        return this._minuteView;\n    }\n\n    /**\n     * @hidden\n     */\n    get ampmView(): string[] {\n        return this._ampmView;\n    }\n\n    /**\n     * @hidden\n     */\n    get showClearButton(): boolean {\n        return (this.displayValue && this.displayValue !== this.parseMask(false)) || this.isNotEmpty;\n    }\n\n    /**\n     * @hidden\n     */\n    get showHoursList(): boolean {\n        return this.format.indexOf('h') !== - 1 || this.format.indexOf('H') !== - 1;\n    }\n\n    /**\n     * @hidden\n     */\n    get showMinutesList(): boolean {\n        return this.format.indexOf('m') !== - 1;\n    }\n\n    /**\n     * @hidden\n     */\n    get showAmPmList(): boolean {\n        return this.format.indexOf('t') !== - 1;\n    }\n\n    /**\n     * @hidden\n     */\n    get validMinuteEntries(): any[] {\n        const minuteEntries = [];\n        for (let i = 0; i < 60; i++) {\n            minuteEntries.push(i);\n        }\n        return minuteEntries;\n    }\n\n    /**\n     * @hidden\n     */\n    get validHourEntries(): any[] {\n        const hourEntries = [];\n        const index = this.format.indexOf('h') !== -1 ? 13 : 24;\n        for (let i = 0; i < index; i++) {\n            hourEntries.push(i);\n        }\n        return hourEntries;\n    }\n\n    /**\n     * Gets the input group template.\n     * ```typescript\n     * let template = this.template();\n     * ```\n     * @memberof IgxTimePickerComponent\n     */\n    get template(): TemplateRef<any> {\n        if (this.timePickerTemplateDirective) {\n            return this.timePickerTemplateDirective.template;\n        }\n        return this.mode === InteractionMode.Dialog ? this.defaultTimePickerTemplate : this.dropdownInputTemplate;\n    }\n\n    /**\n     * Gets the context passed to the input group template.\n     * @memberof IgxTimePickerComponent\n     */\n    get context() {\n        return {\n            value: this.value,\n            displayTime: this.displayTime,\n            displayValue: this.displayValue,\n            openDialog: (target?: HTMLElement) => this.openDialog(target)\n        };\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnInit(): void {\n        this._generateHours();\n        this._generateMinutes();\n        if (this.format.indexOf('tt') !== -1) {\n            this._generateAmPm();\n        }\n\n        this._dropDownOverlaySettings = {\n            modal: false,\n            closeOnOutsideClick: true,\n            scrollStrategy: new AbsoluteScrollStrategy(),\n            positionStrategy: new AutoPositionStrategy()\n        };\n        this._dialogOverlaySettings = {};\n    }\n\n    /**\n     * @hidden\n     */\n    public ngAfterViewInit(): void {\n        if (this.mode === InteractionMode.DropDown && this.input) {\n            fromEvent(this.input.nativeElement, 'keydown').pipe(\n                throttle(() => interval(0, animationFrameScheduler)),\n                takeUntil(this._destroy$)\n            ).subscribe((event: KeyboardEvent) => {\n                if (event.key === KEYS.UP_ARROW || event.key === KEYS.UP_ARROW_IE ||\n                    event.key === KEYS.DOWN_ARROW || event.key === KEYS.DOWN_ARROW_IE) {\n                    this.spinOnEdit(event);\n                }\n            });\n        }\n\n        if (this.toggleRef && this.group) {\n            this.toggleRef.element.style.width = this.group.element.nativeElement.getBoundingClientRect().width + 'px';\n        }\n\n        if (this.toggleRef) {\n            this.toggleRef.onClosed.pipe(takeUntil(this._destroy$)).subscribe(() => {\n\n                if (this._input) {\n                    this._input.nativeElement.focus();\n                }\n\n                if (this.mode === InteractionMode.DropDown) {\n                    this._onDropDownClosed();\n                }\n\n                this.onClosed.emit(this);\n\n                // TODO: remove this line after deprecating 'onClose'\n                this._onClose.emit(this);\n            });\n\n            this.toggleRef.onOpened.pipe(takeUntil(this._destroy$)).subscribe(() => {\n                this.onOpened.emit(this);\n\n                // TODO: remove this line after deprecating 'onOpen'\n                this._onOpen.emit(this);\n            });\n\n            this.toggleRef.onClosing.pipe(takeUntil(this._destroy$)).subscribe((event) => {\n                this.onClosing.emit(event);\n            });\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public ngOnDestroy(): void {\n        this._destroy$.next(true);\n        this._destroy$.complete();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.spacebar', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    public onKeydownSpace(event) {\n        this.openDialog(this.getInputGroupElement());\n        event.preventDefault();\n    }\n\n    /**\n     * @hidden\n     */\n    @HostListener('keydown.Alt.ArrowDown')\n    public onAltArrowDown() {\n        this.openDialog(this.getInputGroupElement());\n    }\n\n    private _scrollItemIntoView(item: string, items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        let itemIntoView;\n        if (items) {\n            const index = (item === 'AM' || item === 'PM') ? items.indexOf(item) : items.indexOf(parseInt(item, 10));\n            let view;\n\n            if (index !== -1) {\n                if (isListLoop) {\n                    if (index > 0) {\n                        selectedItem = this._itemToString(items[index - 1], viewType);\n                        itemIntoView = this._nextItem(items, selectedItem, isListLoop, viewType);\n                    } else {\n                        selectedItem = this._itemToString(items[1], viewType);\n                        itemIntoView = this._prevItem(items, selectedItem, isListLoop, viewType);\n                    }\n                } else {\n                    view = items.slice(index - 3, index + 4);\n                    selectedItem = this._itemToString(items[index], viewType);\n                    itemIntoView = { selectedItem, view };\n                }\n                itemIntoView.view = this._viewToString(itemIntoView.view, viewType);\n            }\n        }\n        return itemIntoView;\n    }\n\n    private _viewToString(view: any, viewType: string): any {\n        for (let i = 0; i < view.length; i++) {\n            if (typeof (view[i]) !== 'string') {\n                view[i] = this._itemToString(view[i], viewType);\n            }\n        }\n        return view;\n    }\n\n    private _itemToString(item: any, viewType: string): string {\n        if (item === null) {\n            item = '';\n        } else if (viewType && typeof (item) !== 'string') {\n            const leadZeroHour = (item < 10 && (this.format.indexOf('hh') !== -1 || this.format.indexOf('HH') !== -1));\n            const leadZeroMinute = (item < 10 && this.format.indexOf('mm') !== -1);\n\n            const leadZero = (viewType === 'hour') ? leadZeroHour : leadZeroMinute;\n            item = (leadZero) ? '0' + item : `${item}`;\n        }\n        return item;\n    }\n\n    private _prevItem(items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));\n        const itemsCount = items.length;\n        let view;\n\n        if (selectedIndex === -1) {\n            view = items.slice(0, 7);\n            selectedItem = items[3];\n        } else if (isListLoop) {\n            if (selectedIndex - 4 < 0) {\n                view = items.slice(itemsCount - (4 - selectedIndex), itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 3));\n            } else if (selectedIndex + 4 > itemsCount) {\n                view = items.slice(selectedIndex - 4, itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 3 - itemsCount));\n            } else {\n                view = items.slice(selectedIndex - 4, selectedIndex + 3);\n            }\n\n            selectedItem = (selectedIndex === 0) ? items[itemsCount - 1] : items[selectedIndex - 1];\n        } else if (selectedIndex > 3) {\n            view = items.slice(selectedIndex - 4, selectedIndex + 3);\n            selectedItem = items[selectedIndex - 1];\n        } else if (selectedIndex === 3) {\n            view = items.slice(0, 7);\n        }\n        view = this._viewToString(view, viewType);\n        selectedItem = this._itemToString(selectedItem, viewType);\n        return {\n            selectedItem,\n            view\n        };\n    }\n\n    private _nextItem(items: any[], selectedItem: string, isListLoop: boolean, viewType: string): any {\n        const selectedIndex = items.indexOf(parseInt(selectedItem, 10));\n        const itemsCount = items.length;\n        let view;\n\n        if (selectedIndex === -1) {\n            view = items.slice(0, 7);\n            selectedItem = items[3];\n        } else if (isListLoop) {\n            if (selectedIndex < 2) {\n                view = items.slice(itemsCount - (2 - selectedIndex), itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 5));\n            } else if (selectedIndex + 4 >= itemsCount) {\n                view = items.slice(selectedIndex - 2, itemsCount);\n                view = view.concat(items.slice(0, selectedIndex + 5 - itemsCount));\n            } else {\n                view = items.slice(selectedIndex - 2, selectedIndex + 5);\n            }\n\n            selectedItem = (selectedIndex === itemsCount - 1) ? items[0] : items[selectedIndex + 1];\n        } else if (selectedIndex + 1 < itemsCount - 3) {\n            view = items.slice(selectedIndex - 2, selectedIndex + 5);\n            selectedItem = items[selectedIndex + 1];\n        } else if (selectedIndex === itemsCount - 4) {\n            view = items.slice(selectedIndex - 3, itemsCount);\n        }\n        view = this._viewToString(view, viewType);\n        selectedItem = this._itemToString(selectedItem, viewType);\n        return {\n            selectedItem,\n            view\n        };\n    }\n\n    private _formatTime(value: Date, format: string): string {\n        if (!value) {\n            return '';\n        } else {\n            let hour = value.getHours();\n            let formattedMinute, formattedHour;\n\n            const minute = value.getMinutes();\n            const amPM = (hour > 11) ? 'PM' : 'AM';\n\n            if (format.indexOf('h') !== -1) {\n                if (hour > 12) {\n                    hour -= 12;\n                    formattedHour = hour < 10 && format.indexOf('hh') !== -1 ? '0' + hour : `${hour}`;\n                } else if (hour === 0) {\n                    formattedHour = '12';\n                } else if (hour < 10 && format.indexOf('hh') !== -1) {\n                    formattedHour = '0' + hour;\n                } else {\n                    formattedHour = `${hour}`;\n                }\n            } else {\n                if (hour < 10 && format.indexOf('HH') !== -1) {\n                    formattedHour = '0' + hour;\n                } else {\n                    formattedHour = `${hour}`;\n                }\n            }\n\n            formattedMinute = minute < 10 && format.indexOf('mm') !== -1 ? '0' + minute : `${minute}`;\n\n            return format.replace('hh', formattedHour).replace('h', formattedHour)\n                .replace('HH', formattedHour).replace('H', formattedHour)\n                .replace('mm', formattedMinute).replace('m', formattedMinute)\n                .replace('tt', amPM);\n        }\n    }\n\n    private _updateHourView(start: any, end: any): void {\n        this._hourView = this._viewToString(this._hourItems.slice(start, end), 'hour');\n    }\n\n    private _updateMinuteView(start: any, end: any): void {\n        this._minuteView = this._viewToString(this._minuteItems.slice(start, end), 'minute');\n    }\n\n    private _updateAmPmView(start: any, end: any): void {\n        this._ampmView = this._ampmItems.slice(start, end);\n    }\n\n    private _addEmptyItems(items: string[]): void {\n        for (let i = 0; i < 3; i++) {\n            items.push(null);\n        }\n    }\n\n    private _generateHours(): void {\n        let hourItemsCount = 24;\n        if (this.format.indexOf('h') !== -1) {\n            hourItemsCount = 13;\n        }\n\n        hourItemsCount /= this.itemsDelta.hours;\n\n        let i = this.format.indexOf('H') !== -1 ? 0 : 1;\n\n        if (hourItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._hourItems);\n            this._isHourListLoop = false;\n        }\n\n        if (hourItemsCount > 1) {\n            for (i; i < hourItemsCount; i++) {\n                this._hourItems.push(i * this.itemsDelta.hours);\n            }\n        } else {\n            this._hourItems.push(0);\n        }\n\n        if (hourItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._hourItems);\n        }\n    }\n\n    private _generateMinutes(): void {\n        const minuteItemsCount = 60 / this.itemsDelta.minutes;\n\n        if (minuteItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._minuteItems);\n            this._isMinuteListLoop = false;\n        }\n\n        for (let i = 0; i < minuteItemsCount; i++) {\n            this._minuteItems.push(i * this.itemsDelta.minutes);\n        }\n\n        if (minuteItemsCount < 7 || !this.isSpinLoop) {\n            this._addEmptyItems(this._minuteItems);\n        }\n    }\n\n    private _generateAmPm(): void {\n\n        this._addEmptyItems(this._ampmItems);\n\n        this._ampmItems.push('AM');\n        this._ampmItems.push('PM');\n\n        this._addEmptyItems(this._ampmItems);\n    }\n\n    private _getSelectedTime(): Date {\n        const date = this.value ? new Date(this.value) : new Date();\n        if (this.selectedHour) {\n            date.setHours(parseInt(this.selectedHour, 10));\n        }\n        if (this.selectedMinute) {\n            date.setMinutes(parseInt(this.selectedMinute, 10));\n        }\n        date.setSeconds(0);\n        if (((this.showHoursList && this.selectedHour !== '12') || (!this.showHoursList && this.selectedHour <= '11')) &&\n                this.selectedAmPm === 'PM') {\n            date.setHours(date.getHours() + 12);\n        }\n        if (!this.showHoursList && this.selectedAmPm === 'AM' && this.selectedHour > '11') {\n            date.setHours(date.getHours() - 12);\n        }\n        if (this.selectedAmPm === 'AM' && this.selectedHour === '12') {\n            date.setHours(0);\n        }\n        return date;\n    }\n\n    private _convertMinMaxValue(value: string): Date {\n        const date = this.value ? new Date(this.value) : this._dateFromModel ? new Date(this._dateFromModel) : new Date();\n        const sections = value.split(/[\\s:]+/);\n        let hour, minutes, amPM;\n\n        date.setSeconds(0);\n\n        if (this.showHoursList) {\n            hour = sections[0];\n            date.setHours(parseInt(hour, 10));\n        }\n\n        if (this.showMinutesList) {\n            minutes = this.showHoursList ? sections[1] : sections[0];\n            date.setMinutes(parseInt(minutes, 10));\n        }\n\n        if (this.showAmPmList) {\n            amPM = sections[sections.length - 1];\n\n            if (((this.showHoursList && date.getHours().toString() !== '12') ||\n                    (!this.showHoursList && date.getHours().toString() <= '11')) && amPM === 'PM') {\n                        date.setHours(date.getHours() + 12);\n            }\n\n            if (!this.showHoursList && amPM === 'AM' && date.getHours().toString() > '11') {\n                date.setHours(date.getHours() - 12);\n            }\n\n            if (this.showHoursList && date.getHours() === 12 && amPM === 'AM') {\n                date.setHours(0);\n            }\n        }\n\n        return date;\n    }\n\n    private _isValueValid(value: Date): boolean {\n        if (this.maxValue && value > this._convertMinMaxValue(this.maxValue)) {\n            return false;\n        } else if (this.minValue && value < this._convertMinMaxValue(this.minValue)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    private _isEntryValid(val: string): boolean {\n        let validH = true;\n        let validM = true;\n\n        const sections = val.split(/[\\s:]+/);\n        const re = new RegExp(this.promptChar, 'g');\n\n        if (this.showHoursList) {\n            validH = this.validHourEntries.indexOf(parseInt(sections[0].replace(re, ''), 10)) !== -1;\n        }\n\n        if (this.showMinutesList) {\n            const minutes = this.showHoursList ? sections[1] : sections[0];\n            validM = this.validMinuteEntries.indexOf(parseInt(minutes.replace(re, ''), 10)) !== -1;\n        }\n\n        return validH && validM;\n    }\n\n    private _getCursorPosition(): number {\n        return this.input.nativeElement.selectionStart;\n    }\n\n    private _setCursorPosition(start: number, end: number = start): void {\n        this.input.nativeElement.setSelectionRange(start, end);\n    }\n\n    private _updateEditableInput(): void {\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this._formatTime(this._getSelectedTime(), this.format);\n        }\n    }\n\n    private _spinHours(currentVal: Date, minVal: Date, maxVal: Date, hDelta: number, sign: number): Date {\n        const oldVal = new Date(currentVal);\n\n        currentVal.setMinutes(sign * hDelta);\n        if (currentVal.getDate() !== oldVal.getDate() && this.isSpinLoop) {\n            currentVal.setDate(oldVal.getDate());\n        }\n\n        let minutes = currentVal.getMinutes();\n        if (currentVal.getTime() > maxVal.getTime()) {\n            if (this.isSpinLoop) {\n                minutes = minutes < minVal.getMinutes() ? 60 + minutes : minutes;\n                minVal.setMinutes(sign * minutes);\n                return minVal;\n            } else {\n                return oldVal;\n            }\n        } else if (currentVal.getTime() < minVal.getTime()) {\n            if (this.isSpinLoop) {\n                minutes = minutes <= maxVal.getMinutes() ? minutes : minutes - 60;\n                maxVal.setMinutes(minutes);\n                return maxVal;\n            } else {\n                return oldVal;\n            }\n        } else {\n            return currentVal;\n        }\n    }\n\n    private _spinMinutes(currentVal: Date, mDelta: number, sign: number) {\n        let minutes = currentVal.getMinutes() + (sign * mDelta);\n\n        if (minutes < 0 || minutes >= 60) {\n            minutes = this.isSpinLoop ? minutes - (sign * 60) : currentVal.getMinutes();\n        }\n\n        currentVal.setMinutes(minutes);\n        return currentVal;\n    }\n\n    private _initializeContainer() {\n        if (this.value) {\n            const formttedTime = this._formatTime(this.value, this.format);\n            const sections = formttedTime.split(/[\\s:]+/);\n\n            if (this.showHoursList) {\n                this.selectedHour = sections[0];\n            }\n\n            if (this.showMinutesList) {\n                this.selectedMinute = this.showHoursList ? sections[1] : sections[0];\n            }\n\n            if (this.showAmPmList && this._ampmItems !== null) {\n                this.selectedAmPm = sections[sections.length - 1];\n            }\n        }\n\n        if (this.selectedHour === undefined) {\n            this.selectedHour = !this.showHoursList && this.value ? this.value.getHours().toString() :\n                this.showHoursList ? `${this._hourItems[3]}` : '0';\n        }\n        if (this.selectedMinute === undefined) {\n            this.selectedMinute = !this.showMinutesList && this.value ? this.value.getMinutes().toString() : '0';\n        }\n        if (this.selectedAmPm === undefined && this._ampmItems !== null) {\n            this.selectedAmPm = this._ampmItems[3];\n        }\n\n        this._prevSelectedHour = this.selectedHour;\n        this._prevSelectedMinute = this.selectedMinute;\n        this._prevSelectedAmPm = this.selectedAmPm;\n\n        this._onTouchedCallback();\n\n        this._updateHourView(0, ITEMS_COUNT);\n        this._updateMinuteView(0, ITEMS_COUNT);\n        this._updateAmPmView(0, ITEMS_COUNT);\n\n        if (this.selectedHour) {\n            this.scrollHourIntoView(this.selectedHour);\n        }\n        if (this.selectedMinute) {\n            this.scrollMinuteIntoView(this.selectedMinute);\n        }\n        if (this.selectedAmPm) {\n            this.scrollAmPmIntoView(this.selectedAmPm);\n        }\n\n        requestAnimationFrame(() => {\n            if (this.hourList) {\n                this.hourList.nativeElement.focus();\n            } else if (this.minuteList) {\n                this.minuteList.nativeElement.focus();\n            }\n        });\n    }\n\n    private _onDropDownClosed(): void {\n        const oldValue = this.value;\n        const newVal = this._convertMinMaxValue(this.displayValue);\n\n        if (this._isValueValid(newVal)) {\n            if (!this.value || oldValue.getTime() !== newVal.getTime()) {\n                this.value = newVal;\n            }\n        } else {\n            this.displayValue = this.inputFormat.transform(this._formatTime(oldValue, this.format));\n\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: newVal,\n                setThroughUI: true\n            };\n            this.onValidationFailed.emit(args);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    getEditElement() {\n        return this._input ? this._input.nativeElement : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public getInputGroupElement() {\n        return this.group ? this.group.element.nativeElement : null;\n    }\n\n    /**\n     * @hidden\n     */\n    public writeValue(value: Date) {\n        // use this flag to make sure that min/maxValue are checked (in _convertMinMaxValue() method)\n        // against the real value when initializing the component and value is bound via ngModel\n        this._dateFromModel = value;\n\n        this.value = value;\n\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this._formatTime(this.value, this.format);\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public registerOnChange(fn: (_: Date) => void) { this._onChangeCallback = fn; }\n\n    /**\n     * @hidden\n     */\n    public registerOnTouched(fn: () => void) { this._onTouchedCallback = fn; }\n\n    /**\n     * opens the dialog.\n     * @param target HTMLElement - the target element to use for positioning the drop down container according to\n     * ```html\n     * <igx-time-picker [value]=\"date\" mode=\"dropdown\" #retemplated>\n     *   <ng-template igxTimePickerTemplate let-openDialog=\"openDialog\"\n     *                let-displayTime=\"displayTime\">\n     *     <igx-input-group>\n     *       <input #dropDownTarget igxInput [value]=\"displayTime\" />\n     *       <igx-suffix (click)=\"openDialog(dropDownTarget)\">\n     *         <igx-icon>alarm</igx-icon>\n     *       </igx-suffix>\n     *     </igx-input-group>\n     *   </ng-template>\n     * </igx-time-picker>\n     * ```\n     */\n    public openDialog(target?: HTMLElement): void {\n        if (!this.toggleRef.collapsed) {\n            return this._onDropDownClosed();\n        }\n        const settings = this.overlaySettings;\n\n        if (target && settings && settings.positionStrategy) {\n            settings.positionStrategy.settings.target = target;\n        }\n        if (this.outlet) {\n            settings.outlet = this.outlet;\n        }\n\n        this.toggleRef.open(settings);\n        this._initializeContainer();\n    }\n\n    /**\n     * Scrolls a hour item into view.\n     * ```typescript\n     *scrhintoView(picker) {\n     *picker.scrollHourIntoView('2');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrhintoView(picker)\"></igx-time-picker>\n     *```\n     *@param item to be scrolled in view.\n     */\n    public scrollHourIntoView(item: string): void {\n        if (this.showHoursList) {\n            const hourIntoView = this._scrollItemIntoView(item, this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n            if (hourIntoView) {\n                this._hourView = hourIntoView.view;\n                this.selectedHour = hourIntoView.selectedItem;\n                this._updateEditableInput();\n            }\n        }\n    }\n\n    /**\n     * Scrolls a minute item into view.\n     * ```typescript\n     *scrMintoView(picker) {\n     *picker.scrollMinuteIntoView('3');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrMintoView(picker)\"></igx-time-picker>\n     *```\n     * @param item to be scrolled in view.\n     */\n    public scrollMinuteIntoView(item: string): void {\n        if (this.showMinutesList) {\n            const minuteIntoView = this._scrollItemIntoView(item, this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n            if (minuteIntoView) {\n                this._minuteView = minuteIntoView.view;\n                this.selectedMinute = minuteIntoView.selectedItem;\n                this._updateEditableInput();\n            }\n        }\n    }\n\n    /**\n     * Scrolls an ampm item into view.\n     * ```typescript\n     *scrAmPmIntoView(picker) {\n     *picker.scrollAmPmIntoView('PM');\n     *}\n     * ```\n     *```html\n     *<igx-time-picker #picker format=\"h:mm tt\" (onOpen)=\"scrAmPmIntoView(picker)\"></igx-time-picker>\n     *```\n     * @param item to be scrolled in view.\n     */\n    public scrollAmPmIntoView(item: string): void {\n        if (this.showAmPmList) {\n            const ampmIntoView = this._scrollItemIntoView(item, this._ampmItems, this.selectedAmPm, false, null);\n            if (ampmIntoView) {\n                this._ampmView = ampmIntoView.view;\n                this.selectedAmPm = ampmIntoView.selectedItem;\n                this._updateEditableInput();\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public nextHour() {\n        const nextHour = this._nextItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        this._hourView = nextHour.view;\n        this.selectedHour = nextHour.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public prevHour() {\n        const prevHour = this._prevItem(this._hourItems, this.selectedHour, this._isHourListLoop, 'hour');\n        this._hourView = prevHour.view;\n        this.selectedHour = prevHour.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public nextMinute() {\n        const nextMinute = this._nextItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        this._minuteView = nextMinute.view;\n        this.selectedMinute = nextMinute.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public prevMinute() {\n        const prevMinute = this._prevItem(this._minuteItems, this.selectedMinute, this._isMinuteListLoop, 'minute');\n        this._minuteView = prevMinute.view;\n        this.selectedMinute = prevMinute.selectedItem;\n\n        this._updateEditableInput();\n    }\n\n    /**\n     * @hidden\n     */\n    public nextAmPm() {\n        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);\n\n        if (selectedIndex + 1 < this._ampmItems.length - 3) {\n            this._updateAmPmView(selectedIndex - 2, selectedIndex + 5);\n            this.selectedAmPm = this._ampmItems[selectedIndex + 1];\n\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public prevAmPm() {\n        const selectedIndex = this._ampmItems.indexOf(this.selectedAmPm);\n\n        if (selectedIndex > 3) {\n            this._updateAmPmView(selectedIndex - 4, selectedIndex + 3);\n            this.selectedAmPm = this._ampmItems[selectedIndex - 1];\n\n            this._updateEditableInput();\n        }\n    }\n\n    /**\n     * If current value is valid selects it, closes the dialog and returns true, otherwise returns false.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [rightButtonLabel]=\"okButtonLabel\" (onRightButtonSelect)=\"okButtonClick()\">\n     * //..\n     * </igx-dialog>\n     * ```\n     */\n    public okButtonClick(): boolean {\n        const time = this._getSelectedTime();\n        if (this._isValueValid(time)) {\n            this.close();\n            this.value = time;\n            return true;\n        } else {\n            const args: IgxTimePickerValidationFailedEventArgs = {\n                timePicker: this,\n                currentValue: time,\n                setThroughUI: true\n            };\n            this.onValidationFailed.emit(args);\n            return false;\n        }\n    }\n\n    /**\n     * Closes the dialog without selecting the current value.\n     * ```html\n     * <igx-dialog class=\"igx-time-picker__dialog-popup\" [leftButtonLabel]=\"cancelButtonLabel\" (onLeftButtonSelect)=\"cancelButtonClick()\">\n     * //...\n     * </igx-dialog>\n     * ```\n     */\n    public cancelButtonClick(): void {\n        if (this.mode === InteractionMode.DropDown) {\n            this.displayValue = this._formatTime(this.value, this.format);\n        }\n\n        this.close();\n\n        this.selectedHour = this._prevSelectedHour;\n        this.selectedMinute = this._prevSelectedMinute;\n        this.selectedAmPm = this._prevSelectedAmPm;\n    }\n\n    /**\n     * Returns an array of the hours currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let hInView = this.picker.hoursInView;\n     *}\n     *```\n     */\n    public hoursInView(): string[] {\n        return this._hourView.filter((hour) => hour !== '');\n    }\n\n    /**\n     * Returns an array of the minutes currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let minInView = this.picker.minutesInView;\n     *}\n     *```\n     */\n    public minutesInView(): string[] {\n        return this._minuteView.filter((minute) => minute !== '');\n    }\n\n    /**\n     * Returns an array of the AM/PM currently in view.\n     *```html\n     *@ViewChild(\"MyChild\")\n     *private picker: IgxTimePickerComponent;\n     *ngAfterViewInit(){\n     *    let ApInView = this.picker.ampmInView;\n     *}\n     *```\n     */\n    public ampmInView(): string[] {\n        return this._ampmView.filter((ampm) => ampm !== '');\n    }\n\n    /**\n     * Closes the dropdown/dialog.\n     * ```html\n     *<igx-time-picker #timePicker></igx-time-picker>\n     * ```\n     * ```typescript\n     * @ViewChild('timePicker', { read: IgxTimePickerComponent }) picker: IgxTimePickerComponent;\n     * picker.close();\n     * ```\n     */\n    public close(): void {\n        this.toggleRef.close();\n    }\n\n    /**\n     * @hidden\n     */\n    public parseMask(preserveAmPm = true): string {\n        const maskWithAmPm = this.mask.replace(new RegExp('0', 'g'), this.promptChar).replace('LL', 'AM');\n        const pureMask = this.mask.replace(new RegExp('0', 'g'), this.promptChar).replace(new RegExp('L', 'g'), this.promptChar);\n\n        return preserveAmPm ? maskWithAmPm : pureMask;\n    }\n\n    /**\n     * @hidden\n     */\n    public clear(): void {\n        if (this.toggleRef.collapsed) {\n            this.cleared = true;\n            this.isNotEmpty = false;\n\n            const oldVal = new Date(this.value);\n\n            this.displayValue = '';\n            this.value.setHours(0, 0);\n\n            if (oldVal.getTime() !== this.value.getTime()) {\n                const args: IgxTimePickerValueChangedEventArgs = {\n                    oldValue: oldVal,\n                    newValue: this.value\n                };\n                this.onValueChanged.emit(args);\n            }\n        } else {\n            this.close();\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onInput(event): void {\n        const val = event.target.value;\n        const oldVal = new Date(this.value);\n\n        this.isNotEmpty = val !== this.parseMask(false);\n\n        // handle cases where all empty positions (promts) are filled and we want to update\n        // timepicker own value property if it is a valid Date\n        if (val.indexOf(this.promptChar) === -1) {\n            if (this._isEntryValid(val)) {\n                const newVal = this._convertMinMaxValue(val);\n                if (oldVal.getTime() !== newVal.getTime()) {\n                    this.value = newVal;\n                }\n            } else {\n                const args: IgxTimePickerValidationFailedEventArgs = {\n                    timePicker: this,\n                    currentValue: val,\n                    setThroughUI: false\n                };\n                this.onValidationFailed.emit(args);\n            }\n            // handle cases where the user deletes the display value (when pressing backspace or delete)\n        } else if (!this.value || !val || val === this.parseMask(false)) {\n            this.isNotEmpty = false;\n\n            this.value.setHours(0, 0);\n            this.displayValue = val;\n\n            if (oldVal.getTime() !== this.value.getTime()) {\n                const args: IgxTimePickerValueChangedEventArgs = {\n                    oldValue: oldVal,\n                    newValue: this.value\n                };\n                this.onValueChanged.emit(args);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public onFocus(event): void {\n        this.isNotEmpty = event.target.value !== this.parseMask(false);\n    }\n\n    /**\n     * @hidden\n     */\n    public onBlur(event): void {\n        const value = event.target.value;\n\n        this.isNotEmpty = value !== '';\n        this.displayValue = value;\n\n        if (value && value !== this.parseMask()) {\n            if (this._isEntryValid(value)) {\n                const newVal = this._convertMinMaxValue(value);\n                if (!this.value || this.value.getTime() !== newVal.getTime()) {\n                    this.value = newVal;\n                }\n            } else {\n                const args: IgxTimePickerValidationFailedEventArgs = {\n                    timePicker: this,\n                    currentValue: value,\n                    setThroughUI: false\n                };\n                this.onValidationFailed.emit(args);\n            }\n        }\n    }\n\n    /**\n     * @hidden\n     */\n    public spinOnEdit(event): void {\n        event.preventDefault();\n\n        let sign: number;\n        let displayVal: string;\n        const currentVal = new Date(this.value);\n        const min = this.minValue ? this._convertMinMaxValue(this.minValue) : this._convertMinMaxValue('00:00');\n        const max = this.maxValue ? this._convertMinMaxValue(this.maxValue) : this._convertMinMaxValue('24:00');\n\n        const cursor = this._getCursorPosition();\n\n        if (event.key) {\n            const key = event.key;\n            sign = key === KEYS.DOWN_ARROW || key === KEYS.DOWN_ARROW_IE ? -1 : 1;\n        }\n\n        if (event.deltaY) {\n            sign = event.deltaY < 0 ? 1 : -1;\n        }\n\n        if (!this.displayValue) {\n            this.value = min;\n            displayVal = this._formatTime(this.value, this.format);\n        } else {\n            const hDelta = this.itemsDelta.hours * 60 + (sign * this.value.getMinutes());\n            const mDelta = this.itemsDelta.minutes;\n\n            if (this.showHoursList && HOURS_POS.indexOf(cursor) !== -1) {\n                this.value = this._spinHours(currentVal, min, max, hDelta, sign);\n            }\n\n            if (this.showMinutesList &&\n                ((this.showHoursList && MINUTES_POS.indexOf(cursor) !== -1) || (!this.showHoursList && HOURS_POS.indexOf(cursor) !== -1))) {\n                    this.value = this._spinMinutes(currentVal, mDelta, sign);\n            }\n\n            if (this.showAmPmList) {\n                if (((!this.showHoursList || !this.showMinutesList) && MINUTES_POS.indexOf(cursor) !== -1) ||\n                    (this.showHoursList && this.showMinutesList &&  AMPM_POS.indexOf(cursor) !== -1)) {\n\n                        const sections = this.displayValue.split(/[\\s:]+/);\n                        sign = sections[sections.length - 1] === 'AM' ? 1 : -1;\n                        currentVal.setHours(currentVal.getHours() + (sign * 12));\n\n                        this.value = currentVal;\n                }\n            }\n\n            displayVal = this._formatTime(this.value, this.format);\n        }\n\n        // minor hack for preventing cursor jumping in IE\n        this._displayValue = this.inputFormat.transform(displayVal);\n        this.input.nativeElement.value = this._displayValue;\n        this._setCursorPosition(cursor);\n\n        requestAnimationFrame(() => {\n            this._setCursorPosition(cursor);\n        });\n    }\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [\n        IgxTimePickerComponent,\n        IgxHourItemDirective,\n        IgxItemListDirective,\n        IgxMinuteItemDirective,\n        IgxAmPmItemDirective,\n        IgxTimePickerTemplateDirective,\n        IgxTimePickerActionsDirective,\n        TimeDisplayFormatPipe,\n        TimeInputFormatPipe\n    ],\n    exports: [\n        IgxTimePickerComponent,\n        IgxTimePickerTemplateDirective,\n        IgxTimePickerActionsDirective,\n        TimeDisplayFormatPipe,\n        TimeInputFormatPipe\n    ],\n    imports: [\n        CommonModule,\n        IgxInputGroupModule,\n        IgxIconModule,\n        IgxButtonModule,\n        IgxMaskModule,\n        IgxToggleModule\n    ],\n    providers: []\n})\nexport class IgxTimePickerModule { }\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport {\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Input,\n    NgModule,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output\n} from '@angular/core';\nimport { IgxNavigationService, IToggleView } from '../core/navigation';\n\nlet NEXT_ID = 0;\n/**\n * **Ignite UI for Angular Toast** -\n * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/toast.html)\n *\n * The Ignite UI Toast provides information and warning messages that are non-interactive and cannot\n * be dismissed by the user. Toasts can be displayed at the bottom, middle, or top of the page.\n *\n * Example:\n * ```html\n * <button (click)=\"toast.show()\">Show notification</button>\n * <igx-toast #toast\n *           message=\"Notification displayed\"\n *           displayTime=\"1000\">\n * </igx-toast>\n * ```\n */\n@Component({\n    animations: [\n        trigger('animate', [\n            state('show', style({\n                opacity: 1\n            })),\n            transition('* => show', animate('.20s ease')),\n            transition('show => *', animate('.40s ease-out'))\n        ])\n    ],\n    selector: 'igx-toast',\n    templateUrl: 'toast.component.html',\n    styles: [`\n        :host {\n            display: block;\n        }\n    `]\n})\nexport class IgxToastComponent implements IToggleView, OnInit, OnDestroy {\n    /**\n     * Returns a list of available CSS classes.\n     * ```typescript\n     * let toastClasses =  this.toast.CSS_CLASSES;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public readonly CSS_CLASSES = {\n        IGX_TOAST_BOTTOM: 'igx-toast--bottom',\n        IGX_TOAST_MIDDLE: 'igx-toast--middle',\n        IGX_TOAST_TOP: 'igx-toast--top'\n    };\n\n    /**\n     * Sets/gets the `id` of the toast.\n     * If not set, the `id` will have value `\"igx-toast-0\"`.\n     * ```html\n     * <igx-toast id = \"my-first-toast\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastId = this.toast.id;\n     * ```\n     */\n    @HostBinding('attr.id')\n    @Input()\n    public id = `igx-toast-${NEXT_ID++}`;\n\n    /**\n     * Emits an event prior the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onShowing) = \"onShowing($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onShowing = new EventEmitter<IgxToastComponent>();\n\n    /**\n     * Emits an event when the toast is shown.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onShown) = \"onShown($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onShown = new EventEmitter<IgxToastComponent>();\n\n    /**\n     * Emits an event prior the toast is hidden.\n     * Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onHiding) = \"onHiding($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onHiding = new EventEmitter<IgxToastComponent>();\n\n    /**\n     *  Emits an event when the toast is hidden.\n     *  Provides reference to the `IgxToastComponent` as event argument.\n     * ```html\n     * <igx-toast (onHidden) = \"onHidden($event)\"></igx-toast>\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Output()\n    public onHidden = new EventEmitter<IgxToastComponent>();\n    /**\n     * Sets/gets the `role` attribute.\n     * If not set, `role` will have value `\"alert\"`.\n     * ```html\n     * <igx-toast [role] = \"'notify'\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastRole = this.toast.role;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public role = 'alert';\n    /**\n     * Sets/gets whether the toast will be hidden after the `displayTime` is over.\n     * Default value is `true`.\n     * ```html\n     * <igx-toast [autoHide] = \"false\"></igx-toast>\n     * ```\n     * ```typescript\n     * let autoHide = this.toast.autoHide;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public autoHide = true;\n\n    /**\n     * Sets/gets the duration of time span(in milliseconds) which the toast will be visible\n     * after it is being shown.\n     * Default value is `4000`.\n     * ```html\n     * <igx-toast [displayTime] = \"2500\"></igx-toast>\n     * ```\n     * ```typescript\n     * let displayTime = this.toast.displayTime;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public displayTime = 4000;\n\n    /**\n     * Enables/Disables the visibility of the toast.\n     * If not set, the `isVisible` attribute will have value `false`.\n     * ```html\n     * <igx-toast [isVisible] = \"true\"></igx-toast>\n     * ```\n     * ```typescript\n     * let isVisible = this.toast.isVisible;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public isVisible = false;\n\n    /**\n     * Sets/gets the message that will be shown by the toast.\n     * ```html\n     * <igx-toast [message] = \"Notification\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastMessage = this.toast.message;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public message: string;\n\n    /**\n     * Sets/gets the position of the toast.\n     * If not set, the `position` attribute will have value `IgxToastPosition.Bottom`.\n     * ```html\n     * <igx-toast [position] = \"top\"></igx-toast>\n     * ```\n     * ```typescript\n     * let toastPosition = this.toast.position;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    @Input()\n    public position: IgxToastPosition = IgxToastPosition.Bottom;\n\n    /**\n     * Gets the nativeElement of the toast.\n     * ```typescript\n     * let nativeElement = this.toast.element;\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public get element() {\n        return this.elementRef.nativeElement;\n    }\n    /**\n     *@hidden\n     */\n    private timeoutId;\n\n    constructor(\n        private elementRef: ElementRef,\n        @Optional() private navService: IgxNavigationService) { }\n\n    /**\n     * Shows the toast.\n     * If `autoHide` is enabled, the toast will hide after `displayTime` is over.\n     * ```typescript\n     * this.toast.show();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public show(): void {\n        clearInterval(this.timeoutId);\n        this.onShowing.emit(this);\n        this.isVisible = true;\n\n        if (this.autoHide) {\n            this.timeoutId = setTimeout(() => {\n                this.hide();\n            }, this.displayTime);\n        }\n\n        this.onShown.emit(this);\n    }\n\n    /**\n     * Hides the toast.\n     * ```typescript\n     * this.toast.hide();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public hide(): void {\n        this.onHiding.emit(this);\n        this.isVisible = false;\n        this.onHidden.emit(this);\n\n        clearInterval(this.timeoutId);\n    }\n\n    /**\n     * Wraps @show() method due @IToggleView interface implementation.\n     * @hidden\n     */\n    public open() {\n        this.show();\n    }\n\n    /**\n     * Wraps @hide() method due @IToggleView interface implementation.\n     * @hidden\n     */\n    public close() {\n        this.hide();\n    }\n\n    /**\n     * Toggles the visible state of the toast.\n     * ```typescript\n     * this.toast.toggle();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public toggle() {\n        this.isVisible ? this.close() : this.open();\n    }\n    /**\n     * Sets/gets the class name of the toast based on the `position` value.\n     * ```typescript\n     * let className =  this.toast.mapPositionToClassName();\n     * ```\n     * @memberof IgxToastComponent\n     */\n    public mapPositionToClassName(): any {\n        if (this.position === IgxToastPosition.Top) {\n            return this.CSS_CLASSES.IGX_TOAST_TOP;\n        }\n\n        if (this.position === IgxToastPosition.Middle) {\n            return this.CSS_CLASSES.IGX_TOAST_MIDDLE;\n        }\n\n        if (this.position === IgxToastPosition.Bottom) {\n            return this.CSS_CLASSES.IGX_TOAST_BOTTOM;\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngOnInit() {\n        if (this.navService && this.id) {\n            this.navService.add(this.id, this);\n        }\n    }\n    /**\n     *@hidden\n     */\n    public ngOnDestroy() {\n        if (this.navService && this.id) {\n            this.navService.remove(this.id);\n        }\n    }\n}\n\n/**\n * Enumeration for toast position\n * Can be:\n * Bottom\n * Middle\n * Top\n */\nexport enum IgxToastPosition {\n    Bottom,\n    Middle,\n    Top\n}\n\n/**\n * @hidden\n */\n@NgModule({\n    declarations: [IgxToastComponent],\n    exports: [IgxToastComponent],\n    imports: [CommonModule]\n})\nexport class IgxToastModule { }\n"]}